
Reflow_Oven_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800b0a8  0800b0a8  0001b0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b774  0800b774  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b774  0800b774  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b774  0800b774  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b774  0800b774  0001b774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b778  0800b778  0001b778  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b77c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001248  200001f0  0800b968  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001438  0800b968  00021438  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001130d  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a21  00000000  00000000  00031522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00033f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00035008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196f4  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115a6  00000000  00000000  0004f6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2d7  00000000  00000000  00060c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  000eff31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bb0  00000000  00000000  000efff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000005c  00000000  00000000  000f5ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b090 	.word	0x0800b090

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800b090 	.word	0x0800b090

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2uiz>:
 8001110:	0042      	lsls	r2, r0, #1
 8001112:	d20e      	bcs.n	8001132 <__aeabi_f2uiz+0x22>
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001118:	d30b      	bcc.n	8001132 <__aeabi_f2uiz+0x22>
 800111a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d409      	bmi.n	8001138 <__aeabi_f2uiz+0x28>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2uiz+0x32>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d102      	bne.n	8001148 <__aeabi_f2uiz+0x38>
 8001142:	f04f 30ff 	mov.w	r0, #4294967295
 8001146:	4770      	bx	lr
 8001148:	f04f 0000 	mov.w	r0, #0
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	460c      	mov	r4, r1
 8001154:	4605      	mov	r5, r0
 8001156:	4621      	mov	r1, r4
 8001158:	4628      	mov	r0, r5
 800115a:	2200      	movs	r2, #0
 800115c:	2300      	movs	r3, #0
 800115e:	f7ff fc2d 	bl	80009bc <__aeabi_dcmplt>
 8001162:	b928      	cbnz	r0, 8001170 <__aeabi_d2lz+0x20>
 8001164:	4628      	mov	r0, r5
 8001166:	4621      	mov	r1, r4
 8001168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800116c:	f000 b80a 	b.w	8001184 <__aeabi_d2ulz>
 8001170:	4628      	mov	r0, r5
 8001172:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001176:	f000 f805 	bl	8001184 <__aeabi_d2ulz>
 800117a:	4240      	negs	r0, r0
 800117c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001180:	bd38      	pop	{r3, r4, r5, pc}
 8001182:	bf00      	nop

08001184 <__aeabi_d2ulz>:
 8001184:	b5d0      	push	{r4, r6, r7, lr}
 8001186:	2200      	movs	r2, #0
 8001188:	4b0b      	ldr	r3, [pc, #44]	; (80011b8 <__aeabi_d2ulz+0x34>)
 800118a:	4606      	mov	r6, r0
 800118c:	460f      	mov	r7, r1
 800118e:	f7ff f9a3 	bl	80004d8 <__aeabi_dmul>
 8001192:	f7ff fc79 	bl	8000a88 <__aeabi_d2uiz>
 8001196:	4604      	mov	r4, r0
 8001198:	f7ff f924 	bl	80003e4 <__aeabi_ui2d>
 800119c:	2200      	movs	r2, #0
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <__aeabi_d2ulz+0x38>)
 80011a0:	f7ff f99a 	bl	80004d8 <__aeabi_dmul>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	f7fe ffdc 	bl	8000168 <__aeabi_dsub>
 80011b0:	f7ff fc6a 	bl	8000a88 <__aeabi_d2uiz>
 80011b4:	4621      	mov	r1, r4
 80011b6:	bdd0      	pop	{r4, r6, r7, pc}
 80011b8:	3df00000 	.word	0x3df00000
 80011bc:	41f00000 	.word	0x41f00000

080011c0 <GetPage>:
#include "string.h"
#include "stdio.h"


static uint32_t GetPage(uint32_t Address)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  for (uint32_t indx=0; indx<128; indx++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	e016      	b.n	80011fc <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011d4:	3301      	adds	r3, #1
 80011d6:	029b      	lsls	r3, r3, #10
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d20b      	bcs.n	80011f6 <GetPage+0x36>
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011e4:	029b      	lsls	r3, r3, #10
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d304      	bcc.n	80011f6 <GetPage+0x36>
	  {
		  return (0x08000000 + 1024*indx);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	e007      	b.n	8001206 <GetPage+0x46>
  for (uint32_t indx=0; indx<128; indx++)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001200:	d9e5      	bls.n	80011ce <GetPage+0xe>
	  }
  }

  return -1;
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001206:	4618      	mov	r0, r3
 8001208:	3714      	adds	r7, #20
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *DATA_32, uint32_t NumberWords)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	; 0x24

	int numberofwords = NumberWords;//(strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	623b      	str	r3, [r7, #32]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8001224:	f002 fcee 	bl	8003c04 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff ffc9 	bl	80011c0 <GetPage>
 800122e:	61f8      	str	r0, [r7, #28]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
	  uint32_t EndPage = GetPage(EndPageAdress);
 800123c:	69b8      	ldr	r0, [r7, #24]
 800123e:	f7ff ffbf 	bl	80011c0 <GetPage>
 8001242:	6178      	str	r0, [r7, #20]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <Flash_Write_Data+0xb4>)
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <Flash_Write_Data+0xb4>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	0a9b      	lsrs	r3, r3, #10
 8001258:	3301      	adds	r3, #1
 800125a:	4a1a      	ldr	r2, [pc, #104]	; (80012c4 <Flash_Write_Data+0xb4>)
 800125c:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800125e:	f107 0310 	add.w	r3, r7, #16
 8001262:	4619      	mov	r1, r3
 8001264:	4817      	ldr	r0, [pc, #92]	; (80012c4 <Flash_Write_Data+0xb4>)
 8001266:	f002 fdbf 	bl	8003de8 <HAL_FLASHEx_Erase>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d01d      	beq.n	80012ac <Flash_Write_Data+0x9c>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8001270:	f002 fcfe 	bl	8003c70 <HAL_FLASH_GetError>
 8001274:	4603      	mov	r3, r0
 8001276:	e020      	b.n	80012ba <Flash_Write_Data+0xaa>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	68ba      	ldr	r2, [r7, #8]
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	68f9      	ldr	r1, [r7, #12]
 800128a:	2002      	movs	r0, #2
 800128c:	f002 fc4a 	bl	8003b24 <HAL_FLASH_Program>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d106      	bne.n	80012a4 <Flash_Write_Data+0x94>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3304      	adds	r3, #4
 800129a:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	3301      	adds	r3, #1
 80012a0:	627b      	str	r3, [r7, #36]	; 0x24
 80012a2:	e003      	b.n	80012ac <Flash_Write_Data+0x9c>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 80012a4:	f002 fce4 	bl	8003c70 <HAL_FLASH_GetError>
 80012a8:	4603      	mov	r3, r0
 80012aa:	e006      	b.n	80012ba <Flash_Write_Data+0xaa>
	   while (sofar<numberofwords)
 80012ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ae:	6a3b      	ldr	r3, [r7, #32]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbe1      	blt.n	8001278 <Flash_Write_Data+0x68>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 80012b4:	f002 fccc 	bl	8003c50 <HAL_FLASH_Lock>

	   return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000020c 	.word	0x2000020c

080012c8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e2:	d103      	bne.n	80012ec <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
			break;
 80012ea:	e006      	b.n	80012fa <Flash_Read_Data+0x32>
		}
		StartPageAddress += 4;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3304      	adds	r3, #4
 80012f0:	607b      	str	r3, [r7, #4]
		DATA_32++;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	3304      	adds	r3, #4
 80012f6:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 80012f8:	e7eb      	b.n	80012d2 <Flash_Read_Data+0xa>
	}
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6839      	ldr	r1, [r7, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fd35 	bl	8000d84 <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
 800131c:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	4619      	mov	r1, r3
 8001328:	4610      	mov	r0, r2
 800132a:	f7ff fd2b 	bl	8000d84 <__aeabi_fmul>
 800132e:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 8001330:	4619      	mov	r1, r3
 8001332:	4620      	mov	r0, r4
 8001334:	f7ff fc1e 	bl	8000b74 <__addsf3>
 8001338:	4603      	mov	r3, r0
 800133a:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	691b      	ldr	r3, [r3, #16]
 8001344:	4619      	mov	r1, r3
 8001346:	4610      	mov	r0, r2
 8001348:	f7ff fd1c 	bl	8000d84 <__aeabi_fmul>
 800134c:	4603      	mov	r3, r0
 800134e:	4619      	mov	r1, r3
 8001350:	4620      	mov	r0, r4
 8001352:	f7ff fc0f 	bl	8000b74 <__addsf3>
 8001356:	4603      	mov	r3, r0
 8001358:	461a      	mov	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 800135e:	4619      	mov	r1, r3
 8001360:	4610      	mov	r0, r2
 8001362:	f7ff fc07 	bl	8000b74 <__addsf3>
 8001366:	4603      	mov	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800137e:	68fb      	ldr	r3, [r7, #12]

  }
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bd90      	pop	{r4, r7, pc}

08001388 <SaveReflowParameters>:
uint8_t TempDrawEnable = 0;
uint32_t TempDrawCounter = 0;



void SaveReflowParameters(){
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x0801FC00, (uint32_t *)&ReflowParameters, 34);
 800138c:	2222      	movs	r2, #34	; 0x22
 800138e:	4903      	ldr	r1, [pc, #12]	; (800139c <SaveReflowParameters+0x14>)
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <SaveReflowParameters+0x18>)
 8001392:	f7ff ff3d 	bl	8001210 <Flash_Write_Data>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200012a8 	.word	0x200012a8
 80013a0:	0801fc00 	.word	0x0801fc00

080013a4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 80013ac:	2205      	movs	r2, #5
 80013ae:	4905      	ldr	r1, [pc, #20]	; (80013c4 <HAL_UART_RxCpltCallback+0x20>)
 80013b0:	4805      	ldr	r0, [pc, #20]	; (80013c8 <HAL_UART_RxCpltCallback+0x24>)
 80013b2:	f005 f845 	bl	8006440 <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_UART_RxCpltCallback+0x28>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000004 	.word	0x20000004
 80013c8:	200002c4 	.word	0x200002c4
 80013cc:	20000220 	.word	0x20000220

080013d0 <NEXTION_SendString>:


void NEXTION_SendString (char *ID, char *string){
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b090      	sub	sp, #64	; 0x40
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 80013da:	f107 0008 	add.w	r0, r7, #8
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	490b      	ldr	r1, [pc, #44]	; (8001410 <NEXTION_SendString+0x40>)
 80013e4:	f006 f942 	bl	800766c <siprintf>
 80013e8:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80013ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	f107 0108 	add.w	r1, r7, #8
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	4807      	ldr	r0, [pc, #28]	; (8001414 <NEXTION_SendString+0x44>)
 80013f8:	f004 ff90 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80013fc:	2364      	movs	r3, #100	; 0x64
 80013fe:	2203      	movs	r2, #3
 8001400:	4905      	ldr	r1, [pc, #20]	; (8001418 <NEXTION_SendString+0x48>)
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <NEXTION_SendString+0x44>)
 8001404:	f004 ff8a 	bl	800631c <HAL_UART_Transmit>

}
 8001408:	bf00      	nop
 800140a:	3740      	adds	r7, #64	; 0x40
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	0800b0a8 	.word	0x0800b0a8
 8001414:	200002c4 	.word	0x200002c4
 8001418:	20000000 	.word	0x20000000

0800141c <NEXTION_SendFloat>:


void NEXTION_SendFloat (char *ID, float32_t number){
 800141c:	b580      	push	{r7, lr}
 800141e:	b092      	sub	sp, #72	; 0x48
 8001420:	af02      	add	r7, sp, #8
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 8001426:	6838      	ldr	r0, [r7, #0]
 8001428:	f7fe fffe 	bl	8000428 <__aeabi_f2d>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	f107 0008 	add.w	r0, r7, #8
 8001434:	e9cd 2300 	strd	r2, r3, [sp]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	490b      	ldr	r1, [pc, #44]	; (8001468 <NEXTION_SendFloat+0x4c>)
 800143c:	f006 f916 	bl	800766c <siprintf>
 8001440:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0108 	add.w	r1, r7, #8
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <NEXTION_SendFloat+0x50>)
 8001450:	f004 ff64 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	2203      	movs	r2, #3
 8001458:	4905      	ldr	r1, [pc, #20]	; (8001470 <NEXTION_SendFloat+0x54>)
 800145a:	4804      	ldr	r0, [pc, #16]	; (800146c <NEXTION_SendFloat+0x50>)
 800145c:	f004 ff5e 	bl	800631c <HAL_UART_Transmit>
}
 8001460:	bf00      	nop
 8001462:	3740      	adds	r7, #64	; 0x40
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	0800b0b4 	.word	0x0800b0b4
 800146c:	200002c4 	.word	0x200002c4
 8001470:	20000000 	.word	0x20000000

08001474 <NEXTION_SendFloat_CurrentTemp>:

void NEXTION_SendFloat_CurrentTemp (char *ID, float32_t number){
 8001474:	b580      	push	{r7, lr}
 8001476:	b092      	sub	sp, #72	; 0x48
 8001478:	af02      	add	r7, sp, #8
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.1f\"", ID, number);
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f7fe ffd2 	bl	8000428 <__aeabi_f2d>
 8001484:	4602      	mov	r2, r0
 8001486:	460b      	mov	r3, r1
 8001488:	f107 0008 	add.w	r0, r7, #8
 800148c:	e9cd 2300 	strd	r2, r3, [sp]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	490b      	ldr	r1, [pc, #44]	; (80014c0 <NEXTION_SendFloat_CurrentTemp+0x4c>)
 8001494:	f006 f8ea 	bl	800766c <siprintf>
 8001498:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149c:	b29a      	uxth	r2, r3
 800149e:	f107 0108 	add.w	r1, r7, #8
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <NEXTION_SendFloat_CurrentTemp+0x50>)
 80014a8:	f004 ff38 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014ac:	2364      	movs	r3, #100	; 0x64
 80014ae:	2203      	movs	r2, #3
 80014b0:	4905      	ldr	r1, [pc, #20]	; (80014c8 <NEXTION_SendFloat_CurrentTemp+0x54>)
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <NEXTION_SendFloat_CurrentTemp+0x50>)
 80014b4:	f004 ff32 	bl	800631c <HAL_UART_Transmit>
}
 80014b8:	bf00      	nop
 80014ba:	3740      	adds	r7, #64	; 0x40
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	0800b0c4 	.word	0x0800b0c4
 80014c4:	200002c4 	.word	0x200002c4
 80014c8:	20000000 	.word	0x20000000

080014cc <NEXTION_SenduInt>:


void NEXTION_SenduInt (char *ID, uint32_t number){
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b090      	sub	sp, #64	; 0x40
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 80014d6:	f107 0008 	add.w	r0, r7, #8
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	490b      	ldr	r1, [pc, #44]	; (800150c <NEXTION_SenduInt+0x40>)
 80014e0:	f006 f8c4 	bl	800766c <siprintf>
 80014e4:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80014e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	f107 0108 	add.w	r1, r7, #8
 80014ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f2:	4807      	ldr	r0, [pc, #28]	; (8001510 <NEXTION_SenduInt+0x44>)
 80014f4:	f004 ff12 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80014f8:	2364      	movs	r3, #100	; 0x64
 80014fa:	2203      	movs	r2, #3
 80014fc:	4905      	ldr	r1, [pc, #20]	; (8001514 <NEXTION_SenduInt+0x48>)
 80014fe:	4804      	ldr	r0, [pc, #16]	; (8001510 <NEXTION_SenduInt+0x44>)
 8001500:	f004 ff0c 	bl	800631c <HAL_UART_Transmit>
}
 8001504:	bf00      	nop
 8001506:	3740      	adds	r7, #64	; 0x40
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	0800b0d4 	.word	0x0800b0d4
 8001510:	200002c4 	.word	0x200002c4
 8001514:	20000000 	.word	0x20000000

08001518 <NEXTION_CMD>:


void NEXTION_CMD (char *string){
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7fe fe15 	bl	8000150 <strlen>
 8001526:	4603      	mov	r3, r0
 8001528:	b29a      	uxth	r2, r3
 800152a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800152e:	6879      	ldr	r1, [r7, #4]
 8001530:	4806      	ldr	r0, [pc, #24]	; (800154c <NEXTION_CMD+0x34>)
 8001532:	f004 fef3 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001536:	2364      	movs	r3, #100	; 0x64
 8001538:	2203      	movs	r2, #3
 800153a:	4905      	ldr	r1, [pc, #20]	; (8001550 <NEXTION_CMD+0x38>)
 800153c:	4803      	ldr	r0, [pc, #12]	; (800154c <NEXTION_CMD+0x34>)
 800153e:	f004 feed 	bl	800631c <HAL_UART_Transmit>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200002c4 	.word	0x200002c4
 8001550:	20000000 	.word	0x20000000

08001554 <NextionDrawDot>:
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}


void NextionDrawDot(uint32_t x, uint32_t y){
 8001554:	b580      	push	{r7, lr}
 8001556:	b090      	sub	sp, #64	; 0x40
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,1311", x, y);	//RGB888: 0.160.255 RGB565:1311
 800155e:	f107 0008 	add.w	r0, r7, #8
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	490b      	ldr	r1, [pc, #44]	; (8001594 <NextionDrawDot+0x40>)
 8001568:	f006 f880 	bl	800766c <siprintf>
 800156c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800156e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001570:	b29a      	uxth	r2, r3
 8001572:	f107 0108 	add.w	r1, r7, #8
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <NextionDrawDot+0x44>)
 800157c:	f004 fece 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001580:	2364      	movs	r3, #100	; 0x64
 8001582:	2203      	movs	r2, #3
 8001584:	4905      	ldr	r1, [pc, #20]	; (800159c <NextionDrawDot+0x48>)
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <NextionDrawDot+0x44>)
 8001588:	f004 fec8 	bl	800631c <HAL_UART_Transmit>
}
 800158c:	bf00      	nop
 800158e:	3740      	adds	r7, #64	; 0x40
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	0800b0fc 	.word	0x0800b0fc
 8001598:	200002c4 	.word	0x200002c4
 800159c:	20000000 	.word	0x20000000

080015a0 <NextionDrawTemp>:


void NextionDrawTemp(uint32_t x, uint32_t y){
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 80015aa:	f107 0008 	add.w	r0, r7, #8
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	490b      	ldr	r1, [pc, #44]	; (80015e0 <NextionDrawTemp+0x40>)
 80015b4:	f006 f85a 	bl	800766c <siprintf>
 80015b8:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80015ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015bc:	b29a      	uxth	r2, r3
 80015be:	f107 0108 	add.w	r1, r7, #8
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	4807      	ldr	r0, [pc, #28]	; (80015e4 <NextionDrawTemp+0x44>)
 80015c8:	f004 fea8 	bl	800631c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80015cc:	2364      	movs	r3, #100	; 0x64
 80015ce:	2203      	movs	r2, #3
 80015d0:	4905      	ldr	r1, [pc, #20]	; (80015e8 <NextionDrawTemp+0x48>)
 80015d2:	4804      	ldr	r0, [pc, #16]	; (80015e4 <NextionDrawTemp+0x44>)
 80015d4:	f004 fea2 	bl	800631c <HAL_UART_Transmit>
}
 80015d8:	bf00      	nop
 80015da:	3740      	adds	r7, #64	; 0x40
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	0800b110 	.word	0x0800b110
 80015e4:	200002c4 	.word	0x200002c4
 80015e8:	20000000 	.word	0x20000000

080015ec <HandleKeyPad>:

float32_t HandleKeyPad() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
 80015f6:	e007      	b.n	8001608 <HandleKeyPad+0x1c>
		input[i] = 0;
 80015f8:	4a29      	ldr	r2, [pc, #164]	; (80016a0 <HandleKeyPad+0xb4>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3301      	adds	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b13      	cmp	r3, #19
 800160c:	ddf4      	ble.n	80015f8 <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 8001612:	4924      	ldr	r1, [pc, #144]	; (80016a4 <HandleKeyPad+0xb8>)
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <HandleKeyPad+0xbc>)
 8001616:	f7ff fedb 	bl	80013d0 <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 800161a:	4b24      	ldr	r3, [pc, #144]	; (80016ac <HandleKeyPad+0xc0>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 8001620:	e027      	b.n	8001672 <HandleKeyPad+0x86>

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 8001622:	2205      	movs	r2, #5
 8001624:	4922      	ldr	r1, [pc, #136]	; (80016b0 <HandleKeyPad+0xc4>)
 8001626:	4823      	ldr	r0, [pc, #140]	; (80016b4 <HandleKeyPad+0xc8>)
 8001628:	f006 f840 	bl	80076ac <strncmp>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HandleKeyPad+0x4a>
				return 9999;
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HandleKeyPad+0xcc>)
 8001634:	e02f      	b.n	8001696 <HandleKeyPad+0xaa>
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 8001636:	2205      	movs	r2, #5
 8001638:	4920      	ldr	r1, [pc, #128]	; (80016bc <HandleKeyPad+0xd0>)
 800163a:	481e      	ldr	r0, [pc, #120]	; (80016b4 <HandleKeyPad+0xc8>)
 800163c:	f006 f836 	bl	80076ac <strncmp>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HandleKeyPad+0x5e>
				return 8888;
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <HandleKeyPad+0xd4>)
 8001648:	e025      	b.n	8001696 <HandleKeyPad+0xaa>

		if (UART_Recieved_Flag == 1) {
 800164a:	4b18      	ldr	r3, [pc, #96]	; (80016ac <HandleKeyPad+0xc0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10e      	bne.n	8001672 <HandleKeyPad+0x86>
			input[index] = UART_Recieved_Data[4];
 8001654:	78fb      	ldrb	r3, [r7, #3]
 8001656:	4a17      	ldr	r2, [pc, #92]	; (80016b4 <HandleKeyPad+0xc8>)
 8001658:	7911      	ldrb	r1, [r2, #4]
 800165a:	4a11      	ldr	r2, [pc, #68]	; (80016a0 <HandleKeyPad+0xb4>)
 800165c:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <HandleKeyPad+0xc0>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
			index++;
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	3301      	adds	r3, #1
 8001668:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 800166a:	490d      	ldr	r1, [pc, #52]	; (80016a0 <HandleKeyPad+0xb4>)
 800166c:	480e      	ldr	r0, [pc, #56]	; (80016a8 <HandleKeyPad+0xbc>)
 800166e:	f7ff feaf 	bl	80013d0 <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 8001672:	2205      	movs	r2, #5
 8001674:	4913      	ldr	r1, [pc, #76]	; (80016c4 <HandleKeyPad+0xd8>)
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <HandleKeyPad+0xc8>)
 8001678:	f006 f818 	bl	80076ac <strncmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1cf      	bne.n	8001622 <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 8001682:	4807      	ldr	r0, [pc, #28]	; (80016a0 <HandleKeyPad+0xb4>)
 8001684:	f005 fb5c 	bl	8006d40 <atof>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fa1a 	bl	8000ac8 <__aeabi_d2f>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	200002ac 	.word	0x200002ac
 80016a4:	0800b124 	.word	0x0800b124
 80016a8:	0800b128 	.word	0x0800b128
 80016ac:	20000220 	.word	0x20000220
 80016b0:	0800b12c 	.word	0x0800b12c
 80016b4:	20000004 	.word	0x20000004
 80016b8:	461c3c00 	.word	0x461c3c00
 80016bc:	0800b134 	.word	0x0800b134
 80016c0:	460ae000 	.word	0x460ae000
 80016c4:	0800b13c 	.word	0x0800b13c

080016c8 <Update_Page_3>:


void Update_Page_3() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 80016ce:	4a20      	ldr	r2, [pc, #128]	; (8001750 <Update_Page_3+0x88>)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016d6:	6018      	str	r0, [r3, #0]
 80016d8:	3304      	adds	r3, #4
 80016da:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	e00b      	b.n	80016fa <Update_Page_3+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80016e2:	1d3a      	adds	r2, r7, #4
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	4413      	add	r3, r2
 80016e8:	7819      	ldrb	r1, [r3, #0]
 80016ea:	4a1a      	ldr	r2, [pc, #104]	; (8001754 <Update_Page_3+0x8c>)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	460a      	mov	r2, r1
 80016f2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3301      	adds	r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	ddf0      	ble.n	80016e2 <Update_Page_3+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <Update_Page_3+0x90>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4619      	mov	r1, r3
 8001706:	4815      	ldr	r0, [pc, #84]	; (800175c <Update_Page_3+0x94>)
 8001708:	f7ff fe88 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <Update_Page_3+0x90>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	4619      	mov	r1, r3
 8001712:	4813      	ldr	r0, [pc, #76]	; (8001760 <Update_Page_3+0x98>)
 8001714:	f7ff feda 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <Update_Page_3+0x90>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4619      	mov	r1, r3
 800171e:	4811      	ldr	r0, [pc, #68]	; (8001764 <Update_Page_3+0x9c>)
 8001720:	f7ff fed4 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <Update_Page_3+0x90>)
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	4619      	mov	r1, r3
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <Update_Page_3+0xa0>)
 800172c:	f7ff fe76 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <Update_Page_3+0x90>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	4619      	mov	r1, r3
 8001736:	480d      	ldr	r0, [pc, #52]	; (800176c <Update_Page_3+0xa4>)
 8001738:	f7ff fec8 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <Update_Page_3+0x90>)
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	4619      	mov	r1, r3
 8001742:	480b      	ldr	r0, [pc, #44]	; (8001770 <Update_Page_3+0xa8>)
 8001744:	f7ff fec2 	bl	80014cc <NEXTION_SenduInt>

}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800b144 	.word	0x0800b144
 8001754:	20000004 	.word	0x20000004
 8001758:	200012a8 	.word	0x200012a8
 800175c:	0800b128 	.word	0x0800b128
 8001760:	0800b0e4 	.word	0x0800b0e4
 8001764:	0800b0e8 	.word	0x0800b0e8
 8001768:	0800b0ec 	.word	0x0800b0ec
 800176c:	0800b0f0 	.word	0x0800b0f0
 8001770:	0800b0f4 	.word	0x0800b0f4

08001774 <Update_Page_0>:


void Update_Page_0() {
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 800177a:	4a44      	ldr	r2, [pc, #272]	; (800188c <Update_Page_0+0x118>)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001782:	6018      	str	r0, [r3, #0]
 8001784:	3304      	adds	r3, #4
 8001786:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++)	{
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
 800178c:	e00b      	b.n	80017a6 <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 800178e:	1d3a      	adds	r2, r7, #4
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	4413      	add	r3, r2
 8001794:	7819      	ldrb	r1, [r3, #0]
 8001796:	4a3e      	ldr	r2, [pc, #248]	; (8001890 <Update_Page_0+0x11c>)
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	460a      	mov	r2, r1
 800179e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++)	{
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	3301      	adds	r3, #1
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	ddf0      	ble.n	800178e <Update_Page_0+0x1a>
	}

	float32_t dx = 0.20833; //275px / 660s / 500 ms
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <Update_Page_0+0x120>)
 80017ae:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.7143; //175px / 245 Grad
 80017b0:	4b39      	ldr	r3, [pc, #228]	; (8001898 <Update_Page_0+0x124>)
 80017b2:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 35;
 80017b4:	2323      	movs	r3, #35	; 0x23
 80017b6:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 240;
 80017b8:	23f0      	movs	r3, #240	; 0xf0
 80017ba:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)	{
 80017bc:	4b37      	ldr	r3, [pc, #220]	; (800189c <Update_Page_0+0x128>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <Update_Page_0+0x56>
			TempDrawEnable = 1;
 80017c4:	4b36      	ldr	r3, [pc, #216]	; (80018a0 <Update_Page_0+0x12c>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	701a      	strb	r2, [r3, #0]

		}

		if(TempDrawEnable == 1){
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <Update_Page_0+0x12c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d12a      	bne.n	8001828 <Update_Page_0+0xb4>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(TempDrawCounter)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <Update_Page_0+0x130>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fa7c 	bl	8000cd4 <__aeabi_ui2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff facf 	bl	8000d84 <__aeabi_fmul>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fc91 	bl	8001110 <__aeabi_f2uiz>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	18d4      	adds	r4, r2, r3
 80017f4:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <Update_Page_0+0x134>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6979      	ldr	r1, [r7, #20]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fac2 	bl	8000d84 <__aeabi_fmul>
 8001800:	4603      	mov	r3, r0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fc84 	bl	8001110 <__aeabi_f2uiz>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1a9b      	subs	r3, r3, r2
 800180e:	4619      	mov	r1, r3
 8001810:	4620      	mov	r0, r4
 8001812:	f7ff fec5 	bl	80015a0 <NextionDrawTemp>

		if(ReflowCurve[TempDrawCounter] == 0 ){
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <Update_Page_0+0x130>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a24      	ldr	r2, [pc, #144]	; (80018ac <Update_Page_0+0x138>)
 800181c:	5cd3      	ldrb	r3, [r2, r3]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <Update_Page_0+0xb4>
			TempDrawEnable = 0;
 8001822:	4b1f      	ldr	r3, [pc, #124]	; (80018a0 <Update_Page_0+0x12c>)
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
		}


		}

	NEXTION_SendFloat_CurrentTemp("t0", temp);
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <Update_Page_0+0x134>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <Update_Page_0+0x13c>)
 8001830:	f7ff fe20 	bl	8001474 <NEXTION_SendFloat_CurrentTemp>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <Update_Page_0+0x140>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	4619      	mov	r1, r3
 800183a:	481f      	ldr	r0, [pc, #124]	; (80018b8 <Update_Page_0+0x144>)
 800183c:	f7ff fdee 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 8001840:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <Update_Page_0+0x140>)
 8001842:	695b      	ldr	r3, [r3, #20]
 8001844:	4619      	mov	r1, r3
 8001846:	481d      	ldr	r0, [pc, #116]	; (80018bc <Update_Page_0+0x148>)
 8001848:	f7ff fe40 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <Update_Page_0+0x140>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4619      	mov	r1, r3
 8001852:	481b      	ldr	r0, [pc, #108]	; (80018c0 <Update_Page_0+0x14c>)
 8001854:	f7ff fe3a 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <Update_Page_0+0x140>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4619      	mov	r1, r3
 800185e:	4819      	ldr	r0, [pc, #100]	; (80018c4 <Update_Page_0+0x150>)
 8001860:	f7ff fddc 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <Update_Page_0+0x140>)
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4619      	mov	r1, r3
 800186a:	4817      	ldr	r0, [pc, #92]	; (80018c8 <Update_Page_0+0x154>)
 800186c:	f7ff fe2e 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <Update_Page_0+0x140>)
 8001872:	69db      	ldr	r3, [r3, #28]
 8001874:	4619      	mov	r1, r3
 8001876:	4815      	ldr	r0, [pc, #84]	; (80018cc <Update_Page_0+0x158>)
 8001878:	f7ff fe28 	bl	80014cc <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 800187c:	4914      	ldr	r1, [pc, #80]	; (80018d0 <Update_Page_0+0x15c>)
 800187e:	4815      	ldr	r0, [pc, #84]	; (80018d4 <Update_Page_0+0x160>)
 8001880:	f7ff fda6 	bl	80013d0 <NEXTION_SendString>

}
 8001884:	bf00      	nop
 8001886:	3724      	adds	r7, #36	; 0x24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	0800b150 	.word	0x0800b150
 8001890:	20000004 	.word	0x20000004
 8001894:	3e555476 	.word	0x3e555476
 8001898:	3f36dc5d 	.word	0x3f36dc5d
 800189c:	2000021c 	.word	0x2000021c
 80018a0:	2000022e 	.word	0x2000022e
 80018a4:	20000230 	.word	0x20000230
 80018a8:	200002c0 	.word	0x200002c0
 80018ac:	20000308 	.word	0x20000308
 80018b0:	0800b128 	.word	0x0800b128
 80018b4:	200012a8 	.word	0x200012a8
 80018b8:	0800b0e4 	.word	0x0800b0e4
 80018bc:	0800b0ec 	.word	0x0800b0ec
 80018c0:	0800b0e8 	.word	0x0800b0e8
 80018c4:	0800b0f0 	.word	0x0800b0f0
 80018c8:	0800b0f8 	.word	0x0800b0f8
 80018cc:	0800b0f4 	.word	0x0800b0f4
 80018d0:	200013dc 	.word	0x200013dc
 80018d4:	0800b14c 	.word	0x0800b14c

080018d8 <Update_Page_2>:


void Update_Page_2() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 80018de:	4a1f      	ldr	r2, [pc, #124]	; (800195c <Update_Page_2+0x84>)
 80018e0:	1d3b      	adds	r3, r7, #4
 80018e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e6:	6018      	str	r0, [r3, #0]
 80018e8:	3304      	adds	r3, #4
 80018ea:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e00b      	b.n	800190a <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80018f2:	1d3a      	adds	r2, r7, #4
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4413      	add	r3, r2
 80018f8:	7819      	ldrb	r1, [r3, #0]
 80018fa:	4a19      	ldr	r2, [pc, #100]	; (8001960 <Update_Page_2+0x88>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	460a      	mov	r2, r1
 8001902:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	3301      	adds	r3, #1
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b04      	cmp	r3, #4
 800190e:	ddf0      	ble.n	80018f2 <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <Update_Page_2+0x8c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	4814      	ldr	r0, [pc, #80]	; (8001968 <Update_Page_2+0x90>)
 8001918:	f7ff fd80 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <Update_Page_2+0x8c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4619      	mov	r1, r3
 8001922:	4812      	ldr	r0, [pc, #72]	; (800196c <Update_Page_2+0x94>)
 8001924:	f7ff fd7a 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 8001928:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <Update_Page_2+0x8c>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4619      	mov	r1, r3
 800192e:	4810      	ldr	r0, [pc, #64]	; (8001970 <Update_Page_2+0x98>)
 8001930:	f7ff fd74 	bl	800141c <NEXTION_SendFloat>
	NEXTION_SendFloat("t3", (float32_t) ReflowParameters.version/100);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <Update_Page_2+0x8c>)
 8001936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff f9ca 	bl	8000cd4 <__aeabi_ui2f>
 8001940:	4603      	mov	r3, r0
 8001942:	490c      	ldr	r1, [pc, #48]	; (8001974 <Update_Page_2+0x9c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fad1 	bl	8000eec <__aeabi_fdiv>
 800194a:	4603      	mov	r3, r0
 800194c:	4619      	mov	r1, r3
 800194e:	480a      	ldr	r0, [pc, #40]	; (8001978 <Update_Page_2+0xa0>)
 8001950:	f7ff fd64 	bl	800141c <NEXTION_SendFloat>
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	0800b158 	.word	0x0800b158
 8001960:	20000004 	.word	0x20000004
 8001964:	200012a8 	.word	0x200012a8
 8001968:	0800b128 	.word	0x0800b128
 800196c:	0800b0e4 	.word	0x0800b0e4
 8001970:	0800b0e8 	.word	0x0800b0e8
 8001974:	42c80000 	.word	0x42c80000
 8001978:	0800b0ec 	.word	0x0800b0ec
 800197c:	00000000 	.word	0x00000000

08001980 <HandleGui>:


void HandleGui(){
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a4      	sub	sp, #144	; 0x90
 8001984:	af00      	add	r7, sp, #0
	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 8001986:	2205      	movs	r2, #5
 8001988:	49bc      	ldr	r1, [pc, #752]	; (8001c7c <HandleGui+0x2fc>)
 800198a:	48bd      	ldr	r0, [pc, #756]	; (8001c80 <HandleGui+0x300>)
 800198c:	f005 fe8e 	bl	80076ac <strncmp>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HandleGui+0x1a>
			Update_Page_0();
 8001996:	f7ff feed 	bl	8001774 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 800199a:	2205      	movs	r2, #5
 800199c:	49b9      	ldr	r1, [pc, #740]	; (8001c84 <HandleGui+0x304>)
 800199e:	48b8      	ldr	r0, [pc, #736]	; (8001c80 <HandleGui+0x300>)
 80019a0:	f005 fe84 	bl	80076ac <strncmp>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d101      	bne.n	80019ae <HandleGui+0x2e>
			Update_Page_3();
 80019aa:	f7ff fe8d 	bl	80016c8 <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 80019ae:	2205      	movs	r2, #5
 80019b0:	49b5      	ldr	r1, [pc, #724]	; (8001c88 <HandleGui+0x308>)
 80019b2:	48b3      	ldr	r0, [pc, #716]	; (8001c80 <HandleGui+0x300>)
 80019b4:	f005 fe7a 	bl	80076ac <strncmp>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d103      	bne.n	80019c6 <HandleGui+0x46>
			startReflow();
 80019be:	f001 f887 	bl	8002ad0 <startReflow>
			Update_Page_0();
 80019c2:	f7ff fed7 	bl	8001774 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 80019c6:	2205      	movs	r2, #5
 80019c8:	49b0      	ldr	r1, [pc, #704]	; (8001c8c <HandleGui+0x30c>)
 80019ca:	48ad      	ldr	r0, [pc, #692]	; (8001c80 <HandleGui+0x300>)
 80019cc:	f005 fe6e 	bl	80076ac <strncmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HandleGui+0x6c>
			stopReflow();
 80019d6:	f001 f893 	bl	8002b00 <stopReflow>
			  // buzzer beeps at the FINISHED cycle until STOP button pressed
			  if (BuzzerEnable == 1)	{
 80019da:	4bad      	ldr	r3, [pc, #692]	; (8001c90 <HandleGui+0x310>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d102      	bne.n	80019e8 <HandleGui+0x68>
				  BuzzerEnable = 0;
 80019e2:	4bab      	ldr	r3, [pc, #684]	; (8001c90 <HandleGui+0x310>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
			  }
			Update_Page_0();
 80019e8:	f7ff fec4 	bl	8001774 <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 80019ec:	2205      	movs	r2, #5
 80019ee:	49a5      	ldr	r1, [pc, #660]	; (8001c84 <HandleGui+0x304>)
 80019f0:	48a3      	ldr	r0, [pc, #652]	; (8001c80 <HandleGui+0x300>)
 80019f2:	f005 fe5b 	bl	80076ac <strncmp>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HandleGui+0x80>
			Update_Page_3();
 80019fc:	f7ff fe64 	bl	80016c8 <Update_Page_3>
			}

	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 8001a00:	2205      	movs	r2, #5
 8001a02:	49a4      	ldr	r1, [pc, #656]	; (8001c94 <HandleGui+0x314>)
 8001a04:	489e      	ldr	r0, [pc, #632]	; (8001c80 <HandleGui+0x300>)
 8001a06:	f005 fe51 	bl	80076ac <strncmp>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d101      	bne.n	8001a14 <HandleGui+0x94>
		Update_Page_2();
 8001a10:	f7ff ff62 	bl	80018d8 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 8001a14:	2205      	movs	r2, #5
 8001a16:	49a0      	ldr	r1, [pc, #640]	; (8001c98 <HandleGui+0x318>)
 8001a18:	4899      	ldr	r0, [pc, #612]	; (8001c80 <HandleGui+0x300>)
 8001a1a:	f005 fe47 	bl	80076ac <strncmp>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d152      	bne.n	8001aca <HandleGui+0x14a>
			  float32_t Output =0;
 8001a24:	f04f 0300 	mov.w	r3, #0
 8001a28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 8001a2c:	f7ff fdde 	bl	80015ec <HandleKeyPad>
 8001a30:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001a34:	e024      	b.n	8001a80 <HandleGui+0x100>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001a36:	4a99      	ldr	r2, [pc, #612]	; (8001c9c <HandleGui+0x31c>)
 8001a38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a40:	6018      	str	r0, [r3, #0]
 8001a42:	3304      	adds	r3, #4
 8001a44:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a4c:	e010      	b.n	8001a70 <HandleGui+0xf0>
						UART_Recieved_Data[i]=defaultUart[i];
 8001a4e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001a52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a56:	4413      	add	r3, r2
 8001a58:	7819      	ldrb	r1, [r3, #0]
 8001a5a:	4a89      	ldr	r2, [pc, #548]	; (8001c80 <HandleGui+0x300>)
 8001a5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a60:	4413      	add	r3, r2
 8001a62:	460a      	mov	r2, r1
 8001a64:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001a66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a70:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a74:	2b04      	cmp	r3, #4
 8001a76:	ddea      	ble.n	8001a4e <HandleGui+0xce>
					}
				  Output = HandleKeyPad();
 8001a78:	f7ff fdb8 	bl	80015ec <HandleKeyPad>
 8001a7c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001a80:	4987      	ldr	r1, [pc, #540]	; (8001ca0 <HandleGui+0x320>)
 8001a82:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a86:	f7ff fb11 	bl	80010ac <__aeabi_fcmpeq>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1d2      	bne.n	8001a36 <HandleGui+0xb6>
			  }
			  if(Output == 8888){
 8001a90:	4984      	ldr	r1, [pc, #528]	; (8001ca4 <HandleGui+0x324>)
 8001a92:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001a96:	f7ff fb09 	bl	80010ac <__aeabi_fcmpeq>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HandleGui+0x128>
				 Output = ReflowParameters.KP;
 8001aa0:	4b81      	ldr	r3, [pc, #516]	; (8001ca8 <HandleGui+0x328>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }

	    ReflowParameters.KP = Output;
 8001aa8:	4a7f      	ldr	r2, [pc, #508]	; (8001ca8 <HandleGui+0x328>)
 8001aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aae:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 8001ab0:	4b7d      	ldr	r3, [pc, #500]	; (8001ca8 <HandleGui+0x328>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a7d      	ldr	r2, [pc, #500]	; (8001cac <HandleGui+0x32c>)
 8001ab6:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8001ab8:	2101      	movs	r1, #1
 8001aba:	487c      	ldr	r0, [pc, #496]	; (8001cac <HandleGui+0x32c>)
 8001abc:	f005 f918 	bl	8006cf0 <arm_pid_init_f32>
		Update_Page_2();
 8001ac0:	f7ff ff0a 	bl	80018d8 <Update_Page_2>
		NEXTION_CMD("page 2");
 8001ac4:	487a      	ldr	r0, [pc, #488]	; (8001cb0 <HandleGui+0x330>)
 8001ac6:	f7ff fd27 	bl	8001518 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 8001aca:	2205      	movs	r2, #5
 8001acc:	4979      	ldr	r1, [pc, #484]	; (8001cb4 <HandleGui+0x334>)
 8001ace:	486c      	ldr	r0, [pc, #432]	; (8001c80 <HandleGui+0x300>)
 8001ad0:	f005 fdec 	bl	80076ac <strncmp>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d152      	bne.n	8001b80 <HandleGui+0x200>
			  float32_t Output =0;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 8001ae2:	f7ff fd83 	bl	80015ec <HandleKeyPad>
 8001ae6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001aea:	e024      	b.n	8001b36 <HandleGui+0x1b6>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001aec:	4a6b      	ldr	r2, [pc, #428]	; (8001c9c <HandleGui+0x31c>)
 8001aee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001af2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001af6:	6018      	str	r0, [r3, #0]
 8001af8:	3304      	adds	r3, #4
 8001afa:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b02:	e010      	b.n	8001b26 <HandleGui+0x1a6>
						UART_Recieved_Data[i]=defaultUart[i];
 8001b04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b0c:	4413      	add	r3, r2
 8001b0e:	7819      	ldrb	r1, [r3, #0]
 8001b10:	4a5b      	ldr	r2, [pc, #364]	; (8001c80 <HandleGui+0x300>)
 8001b12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b16:	4413      	add	r3, r2
 8001b18:	460a      	mov	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b20:	3301      	adds	r3, #1
 8001b22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	ddea      	ble.n	8001b04 <HandleGui+0x184>
					}
				  Output = HandleKeyPad();
 8001b2e:	f7ff fd5d 	bl	80015ec <HandleKeyPad>
 8001b32:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 8001b36:	495a      	ldr	r1, [pc, #360]	; (8001ca0 <HandleGui+0x320>)
 8001b38:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b3c:	f7ff fab6 	bl	80010ac <__aeabi_fcmpeq>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1d2      	bne.n	8001aec <HandleGui+0x16c>
			  }
			  if(Output == 8888){
 8001b46:	4957      	ldr	r1, [pc, #348]	; (8001ca4 <HandleGui+0x324>)
 8001b48:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b4c:	f7ff faae 	bl	80010ac <__aeabi_fcmpeq>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HandleGui+0x1de>
				 Output = ReflowParameters.Ki;
 8001b56:	4b54      	ldr	r3, [pc, #336]	; (8001ca8 <HandleGui+0x328>)
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 8001b5e:	4a52      	ldr	r2, [pc, #328]	; (8001ca8 <HandleGui+0x328>)
 8001b60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b64:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8001b66:	4b50      	ldr	r3, [pc, #320]	; (8001ca8 <HandleGui+0x328>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4a50      	ldr	r2, [pc, #320]	; (8001cac <HandleGui+0x32c>)
 8001b6c:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8001b6e:	2101      	movs	r1, #1
 8001b70:	484e      	ldr	r0, [pc, #312]	; (8001cac <HandleGui+0x32c>)
 8001b72:	f005 f8bd 	bl	8006cf0 <arm_pid_init_f32>
			Update_Page_2();
 8001b76:	f7ff feaf 	bl	80018d8 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001b7a:	484d      	ldr	r0, [pc, #308]	; (8001cb0 <HandleGui+0x330>)
 8001b7c:	f7ff fccc 	bl	8001518 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8001b80:	2205      	movs	r2, #5
 8001b82:	494d      	ldr	r1, [pc, #308]	; (8001cb8 <HandleGui+0x338>)
 8001b84:	483e      	ldr	r0, [pc, #248]	; (8001c80 <HandleGui+0x300>)
 8001b86:	f005 fd91 	bl	80076ac <strncmp>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d145      	bne.n	8001c1c <HandleGui+0x29c>
			  float32_t Output =0;
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8001b96:	f7ff fd29 	bl	80015ec <HandleKeyPad>
 8001b9a:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001b9c:	e01d      	b.n	8001bda <HandleGui+0x25a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001b9e:	4a3f      	ldr	r2, [pc, #252]	; (8001c9c <HandleGui+0x31c>)
 8001ba0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba8:	6018      	str	r0, [r3, #0]
 8001baa:	3304      	adds	r3, #4
 8001bac:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001bae:	2300      	movs	r3, #0
 8001bb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bb2:	e00c      	b.n	8001bce <HandleGui+0x24e>
						UART_Recieved_Data[i]=defaultUart[i];
 8001bb4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bba:	4413      	add	r3, r2
 8001bbc:	7819      	ldrb	r1, [r3, #0]
 8001bbe:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <HandleGui+0x300>)
 8001bc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bc2:	4413      	add	r3, r2
 8001bc4:	460a      	mov	r2, r1
 8001bc6:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001bc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bca:	3301      	adds	r3, #1
 8001bcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8001bce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	ddef      	ble.n	8001bb4 <HandleGui+0x234>
					}
				  Output = HandleKeyPad();
 8001bd4:	f7ff fd0a 	bl	80015ec <HandleKeyPad>
 8001bd8:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001bda:	4931      	ldr	r1, [pc, #196]	; (8001ca0 <HandleGui+0x320>)
 8001bdc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001bde:	f7ff fa65 	bl	80010ac <__aeabi_fcmpeq>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d1da      	bne.n	8001b9e <HandleGui+0x21e>
			  }
			  if(Output == 8888){
 8001be8:	492e      	ldr	r1, [pc, #184]	; (8001ca4 <HandleGui+0x324>)
 8001bea:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001bec:	f7ff fa5e 	bl	80010ac <__aeabi_fcmpeq>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HandleGui+0x27c>
				 Output = ReflowParameters.KD;
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <HandleGui+0x328>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <HandleGui+0x328>)
 8001bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c00:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HandleGui+0x328>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	4a29      	ldr	r2, [pc, #164]	; (8001cac <HandleGui+0x32c>)
 8001c08:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	4827      	ldr	r0, [pc, #156]	; (8001cac <HandleGui+0x32c>)
 8001c0e:	f005 f86f 	bl	8006cf0 <arm_pid_init_f32>
			Update_Page_2();
 8001c12:	f7ff fe61 	bl	80018d8 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001c16:	4826      	ldr	r0, [pc, #152]	; (8001cb0 <HandleGui+0x330>)
 8001c18:	f7ff fc7e 	bl	8001518 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8001c1c:	2205      	movs	r2, #5
 8001c1e:	4927      	ldr	r1, [pc, #156]	; (8001cbc <HandleGui+0x33c>)
 8001c20:	4817      	ldr	r0, [pc, #92]	; (8001c80 <HandleGui+0x300>)
 8001c22:	f005 fd43 	bl	80076ac <strncmp>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d103      	bne.n	8001c34 <HandleGui+0x2b4>
			Update_Page_3();
 8001c2c:	f7ff fd4c 	bl	80016c8 <Update_Page_3>
			SaveReflowParameters();
 8001c30:	f7ff fbaa 	bl	8001388 <SaveReflowParameters>
		}


	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8001c34:	2205      	movs	r2, #5
 8001c36:	4922      	ldr	r1, [pc, #136]	; (8001cc0 <HandleGui+0x340>)
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <HandleGui+0x300>)
 8001c3a:	f005 fd37 	bl	80076ac <strncmp>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HandleGui+0x2c8>
		Update_Page_3();
 8001c44:	f7ff fd40 	bl	80016c8 <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8001c48:	2205      	movs	r2, #5
 8001c4a:	491e      	ldr	r1, [pc, #120]	; (8001cc4 <HandleGui+0x344>)
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <HandleGui+0x300>)
 8001c4e:	f005 fd2d 	bl	80076ac <strncmp>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d17d      	bne.n	8001d54 <HandleGui+0x3d4>
			  float32_t Output =0;
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8001c5e:	f7ff fcc5 	bl	80015ec <HandleKeyPad>
 8001c62:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001c64:	e043      	b.n	8001cee <HandleGui+0x36e>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001c66:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HandleGui+0x31c>)
 8001c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c70:	6018      	str	r0, [r3, #0]
 8001c72:	3304      	adds	r3, #4
 8001c74:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001c76:	2300      	movs	r3, #0
 8001c78:	673b      	str	r3, [r7, #112]	; 0x70
 8001c7a:	e032      	b.n	8001ce2 <HandleGui+0x362>
 8001c7c:	0800b160 	.word	0x0800b160
 8001c80:	20000004 	.word	0x20000004
 8001c84:	0800b168 	.word	0x0800b168
 8001c88:	0800b170 	.word	0x0800b170
 8001c8c:	0800b178 	.word	0x0800b178
 8001c90:	2000021d 	.word	0x2000021d
 8001c94:	0800b180 	.word	0x0800b180
 8001c98:	0800b188 	.word	0x0800b188
 8001c9c:	0800b248 	.word	0x0800b248
 8001ca0:	461c3c00 	.word	0x461c3c00
 8001ca4:	460ae000 	.word	0x460ae000
 8001ca8:	200012a8 	.word	0x200012a8
 8001cac:	20000288 	.word	0x20000288
 8001cb0:	0800b190 	.word	0x0800b190
 8001cb4:	0800b198 	.word	0x0800b198
 8001cb8:	0800b1a0 	.word	0x0800b1a0
 8001cbc:	0800b1a8 	.word	0x0800b1a8
 8001cc0:	0800b1b0 	.word	0x0800b1b0
 8001cc4:	0800b1b8 	.word	0x0800b1b8
						UART_Recieved_Data[i]=defaultUart[i];
 8001cc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	4413      	add	r3, r2
 8001cd0:	7819      	ldrb	r1, [r3, #0]
 8001cd2:	4a8d      	ldr	r2, [pc, #564]	; (8001f08 <HandleGui+0x588>)
 8001cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cd6:	4413      	add	r3, r2
 8001cd8:	460a      	mov	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001cdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cde:	3301      	adds	r3, #1
 8001ce0:	673b      	str	r3, [r7, #112]	; 0x70
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	ddef      	ble.n	8001cc8 <HandleGui+0x348>
					}
				  Output = HandleKeyPad();
 8001ce8:	f7ff fc80 	bl	80015ec <HandleKeyPad>
 8001cec:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001cee:	4987      	ldr	r1, [pc, #540]	; (8001f0c <HandleGui+0x58c>)
 8001cf0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001cf2:	f7ff f9db 	bl	80010ac <__aeabi_fcmpeq>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1b4      	bne.n	8001c66 <HandleGui+0x2e6>
			  }
			  if(Output == 8888){
 8001cfc:	4984      	ldr	r1, [pc, #528]	; (8001f10 <HandleGui+0x590>)
 8001cfe:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d00:	f7ff f9d4 	bl	80010ac <__aeabi_fcmpeq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <HandleGui+0x390>
				 Output = ReflowParameters.firstHeatUpRate;
 8001d0a:	4b82      	ldr	r3, [pc, #520]	; (8001f14 <HandleGui+0x594>)
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if (Output < 0.2)
 8001d10:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d12:	f7fe fb89 	bl	8000428 <__aeabi_f2d>
 8001d16:	a37a      	add	r3, pc, #488	; (adr r3, 8001f00 <HandleGui+0x580>)
 8001d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d1c:	f7fe fe4e 	bl	80009bc <__aeabi_dcmplt>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HandleGui+0x3aa>
				  Output = 0.2;
 8001d26:	4b7c      	ldr	r3, [pc, #496]	; (8001f18 <HandleGui+0x598>)
 8001d28:	677b      	str	r3, [r7, #116]	; 0x74
			  if (Output > 1.5)
 8001d2a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001d2e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001d30:	f7ff f9e4 	bl	80010fc <__aeabi_fcmpgt>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HandleGui+0x3c0>
				  Output = 1.5;
 8001d3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001d3e:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8001d40:	4a74      	ldr	r2, [pc, #464]	; (8001f14 <HandleGui+0x594>)
 8001d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d44:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8001d46:	f7ff fcbf 	bl	80016c8 <Update_Page_3>
		NEXTION_CMD("page 3");
 8001d4a:	4874      	ldr	r0, [pc, #464]	; (8001f1c <HandleGui+0x59c>)
 8001d4c:	f7ff fbe4 	bl	8001518 <NEXTION_CMD>
		calculateReflowCurve();
 8001d50:	f000 fd16 	bl	8002780 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8001d54:	2205      	movs	r2, #5
 8001d56:	4972      	ldr	r1, [pc, #456]	; (8001f20 <HandleGui+0x5a0>)
 8001d58:	486b      	ldr	r0, [pc, #428]	; (8001f08 <HandleGui+0x588>)
 8001d5a:	f005 fca7 	bl	80076ac <strncmp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d14f      	bne.n	8001e04 <HandleGui+0x484>
			  float32_t Output =0;
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8001d6a:	f7ff fc3f 	bl	80015ec <HandleKeyPad>
 8001d6e:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001d70:	e01d      	b.n	8001dae <HandleGui+0x42e>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001d72:	4a6c      	ldr	r2, [pc, #432]	; (8001f24 <HandleGui+0x5a4>)
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d7c:	6018      	str	r0, [r3, #0]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001d82:	2300      	movs	r3, #0
 8001d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d86:	e00c      	b.n	8001da2 <HandleGui+0x422>
						UART_Recieved_Data[i]=defaultUart[i];
 8001d88:	f107 0220 	add.w	r2, r7, #32
 8001d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d8e:	4413      	add	r3, r2
 8001d90:	7819      	ldrb	r1, [r3, #0]
 8001d92:	4a5d      	ldr	r2, [pc, #372]	; (8001f08 <HandleGui+0x588>)
 8001d94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d96:	4413      	add	r3, r2
 8001d98:	460a      	mov	r2, r1
 8001d9a:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001d9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d9e:	3301      	adds	r3, #1
 8001da0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001da2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	ddef      	ble.n	8001d88 <HandleGui+0x408>
					}
				  Output = HandleKeyPad();
 8001da8:	f7ff fc20 	bl	80015ec <HandleKeyPad>
 8001dac:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001dae:	4957      	ldr	r1, [pc, #348]	; (8001f0c <HandleGui+0x58c>)
 8001db0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001db2:	f7ff f97b 	bl	80010ac <__aeabi_fcmpeq>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1da      	bne.n	8001d72 <HandleGui+0x3f2>
			  }
			  if(Output == 8888){
 8001dbc:	4954      	ldr	r1, [pc, #336]	; (8001f10 <HandleGui+0x590>)
 8001dbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001dc0:	f7ff f974 	bl	80010ac <__aeabi_fcmpeq>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HandleGui+0x458>
				 Output = ReflowParameters.SoakTime;
 8001dca:	4b52      	ldr	r3, [pc, #328]	; (8001f14 <HandleGui+0x594>)
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe ff80 	bl	8000cd4 <__aeabi_ui2f>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
			  }

			  if (Output > 300)
 8001dd8:	4953      	ldr	r1, [pc, #332]	; (8001f28 <HandleGui+0x5a8>)
 8001dda:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ddc:	f7ff f98e 	bl	80010fc <__aeabi_fcmpgt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HandleGui+0x46a>
				  Output = 300;
 8001de6:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HandleGui+0x5a8>)
 8001de8:	66fb      	str	r3, [r7, #108]	; 0x6c

			ReflowParameters.SoakTime = Output;
 8001dea:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001dec:	f7ff f990 	bl	8001110 <__aeabi_f2uiz>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <HandleGui+0x594>)
 8001df4:	6153      	str	r3, [r2, #20]
			Update_Page_3();
 8001df6:	f7ff fc67 	bl	80016c8 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001dfa:	4848      	ldr	r0, [pc, #288]	; (8001f1c <HandleGui+0x59c>)
 8001dfc:	f7ff fb8c 	bl	8001518 <NEXTION_CMD>
			calculateReflowCurve();
 8001e00:	f000 fcbe 	bl	8002780 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8001e04:	2205      	movs	r2, #5
 8001e06:	4949      	ldr	r1, [pc, #292]	; (8001f2c <HandleGui+0x5ac>)
 8001e08:	483f      	ldr	r0, [pc, #252]	; (8001f08 <HandleGui+0x588>)
 8001e0a:	f005 fc4f 	bl	80076ac <strncmp>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d158      	bne.n	8001ec6 <HandleGui+0x546>
			  float32_t Output =0;
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8001e1a:	f7ff fbe7 	bl	80015ec <HandleKeyPad>
 8001e1e:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e20:	e01d      	b.n	8001e5e <HandleGui+0x4de>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001e22:	4a40      	ldr	r2, [pc, #256]	; (8001f24 <HandleGui+0x5a4>)
 8001e24:	f107 0318 	add.w	r3, r7, #24
 8001e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e2c:	6018      	str	r0, [r3, #0]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001e32:	2300      	movs	r3, #0
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
 8001e36:	e00c      	b.n	8001e52 <HandleGui+0x4d2>
						UART_Recieved_Data[i]=defaultUart[i];
 8001e38:	f107 0218 	add.w	r2, r7, #24
 8001e3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e3e:	4413      	add	r3, r2
 8001e40:	7819      	ldrb	r1, [r3, #0]
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <HandleGui+0x588>)
 8001e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e46:	4413      	add	r3, r2
 8001e48:	460a      	mov	r2, r1
 8001e4a:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001e4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e4e:	3301      	adds	r3, #1
 8001e50:	663b      	str	r3, [r7, #96]	; 0x60
 8001e52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	ddef      	ble.n	8001e38 <HandleGui+0x4b8>
					}
				  Output = HandleKeyPad();
 8001e58:	f7ff fbc8 	bl	80015ec <HandleKeyPad>
 8001e5c:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001e5e:	492b      	ldr	r1, [pc, #172]	; (8001f0c <HandleGui+0x58c>)
 8001e60:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001e62:	f7ff f923 	bl	80010ac <__aeabi_fcmpeq>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1da      	bne.n	8001e22 <HandleGui+0x4a2>
			  }
			  if(Output == 8888){
 8001e6c:	4928      	ldr	r1, [pc, #160]	; (8001f10 <HandleGui+0x590>)
 8001e6e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001e70:	f7ff f91c 	bl	80010ac <__aeabi_fcmpeq>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HandleGui+0x508>
				 Output = ReflowParameters.SoakTempeture;
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HandleGui+0x594>)
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7fe ff28 	bl	8000cd4 <__aeabi_ui2f>
 8001e84:	4603      	mov	r3, r0
 8001e86:	667b      	str	r3, [r7, #100]	; 0x64
			  }

			  if (Output < 30)
 8001e88:	4929      	ldr	r1, [pc, #164]	; (8001f30 <HandleGui+0x5b0>)
 8001e8a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001e8c:	f7ff f918 	bl	80010c0 <__aeabi_fcmplt>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <HandleGui+0x51a>
				  Output = 30;
 8001e96:	4b26      	ldr	r3, [pc, #152]	; (8001f30 <HandleGui+0x5b0>)
 8001e98:	667b      	str	r3, [r7, #100]	; 0x64
			  if (Output > 240)
 8001e9a:	4926      	ldr	r1, [pc, #152]	; (8001f34 <HandleGui+0x5b4>)
 8001e9c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001e9e:	f7ff f92d 	bl	80010fc <__aeabi_fcmpgt>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HandleGui+0x52c>
				  Output = 240;
 8001ea8:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HandleGui+0x5b4>)
 8001eaa:	667b      	str	r3, [r7, #100]	; 0x64

			ReflowParameters.SoakTempeture = Output;
 8001eac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001eae:	f7ff f92f 	bl	8001110 <__aeabi_f2uiz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <HandleGui+0x594>)
 8001eb6:	6113      	str	r3, [r2, #16]
			Update_Page_3();
 8001eb8:	f7ff fc06 	bl	80016c8 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001ebc:	4817      	ldr	r0, [pc, #92]	; (8001f1c <HandleGui+0x59c>)
 8001ebe:	f7ff fb2b 	bl	8001518 <NEXTION_CMD>
			calculateReflowCurve();
 8001ec2:	f000 fc5d 	bl	8002780 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8001ec6:	2205      	movs	r2, #5
 8001ec8:	491b      	ldr	r1, [pc, #108]	; (8001f38 <HandleGui+0x5b8>)
 8001eca:	480f      	ldr	r0, [pc, #60]	; (8001f08 <HandleGui+0x588>)
 8001ecc:	f005 fbee 	bl	80076ac <strncmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d178      	bne.n	8001fc8 <HandleGui+0x648>
			  float32_t Output =0;
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8001edc:	f7ff fb86 	bl	80015ec <HandleKeyPad>
 8001ee0:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001ee2:	e03e      	b.n	8001f62 <HandleGui+0x5e2>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001ee4:	4a0f      	ldr	r2, [pc, #60]	; (8001f24 <HandleGui+0x5a4>)
 8001ee6:	f107 0310 	add.w	r3, r7, #16
 8001eea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eee:	6018      	str	r0, [r3, #0]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ef8:	e02d      	b.n	8001f56 <HandleGui+0x5d6>
 8001efa:	bf00      	nop
 8001efc:	f3af 8000 	nop.w
 8001f00:	9999999a 	.word	0x9999999a
 8001f04:	3fc99999 	.word	0x3fc99999
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	461c3c00 	.word	0x461c3c00
 8001f10:	460ae000 	.word	0x460ae000
 8001f14:	200012a8 	.word	0x200012a8
 8001f18:	3e4ccccd 	.word	0x3e4ccccd
 8001f1c:	0800b1c0 	.word	0x0800b1c0
 8001f20:	0800b1c8 	.word	0x0800b1c8
 8001f24:	0800b248 	.word	0x0800b248
 8001f28:	43960000 	.word	0x43960000
 8001f2c:	0800b1d0 	.word	0x0800b1d0
 8001f30:	41f00000 	.word	0x41f00000
 8001f34:	43700000 	.word	0x43700000
 8001f38:	0800b1d8 	.word	0x0800b1d8
						UART_Recieved_Data[i]=defaultUart[i];
 8001f3c:	f107 0210 	add.w	r2, r7, #16
 8001f40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f42:	4413      	add	r3, r2
 8001f44:	7819      	ldrb	r1, [r3, #0]
 8001f46:	4a5c      	ldr	r2, [pc, #368]	; (80020b8 <HandleGui+0x738>)
 8001f48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001f50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f52:	3301      	adds	r3, #1
 8001f54:	65bb      	str	r3, [r7, #88]	; 0x58
 8001f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	ddef      	ble.n	8001f3c <HandleGui+0x5bc>
					}
				  Output = HandleKeyPad();
 8001f5c:	f7ff fb46 	bl	80015ec <HandleKeyPad>
 8001f60:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001f62:	4956      	ldr	r1, [pc, #344]	; (80020bc <HandleGui+0x73c>)
 8001f64:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f66:	f7ff f8a1 	bl	80010ac <__aeabi_fcmpeq>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1b9      	bne.n	8001ee4 <HandleGui+0x564>
			  }
			  if(Output == 8888){
 8001f70:	4953      	ldr	r1, [pc, #332]	; (80020c0 <HandleGui+0x740>)
 8001f72:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f74:	f7ff f89a 	bl	80010ac <__aeabi_fcmpeq>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HandleGui+0x604>
				 Output = ReflowParameters.secondHeatUpRate;
 8001f7e:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <HandleGui+0x744>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if (Output < 0.2)
 8001f84:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001f86:	f7fe fa4f 	bl	8000428 <__aeabi_f2d>
 8001f8a:	a349      	add	r3, pc, #292	; (adr r3, 80020b0 <HandleGui+0x730>)
 8001f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f90:	f7fe fd14 	bl	80009bc <__aeabi_dcmplt>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HandleGui+0x61e>
				  Output = 0.2;
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	; (80020c8 <HandleGui+0x748>)
 8001f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if (Output > 1.5)
 8001f9e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001fa2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001fa4:	f7ff f8aa 	bl	80010fc <__aeabi_fcmpgt>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HandleGui+0x634>
				  Output = 1.5;
 8001fae:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001fb2:	65fb      	str	r3, [r7, #92]	; 0x5c

			ReflowParameters.secondHeatUpRate = Output;
 8001fb4:	4a43      	ldr	r2, [pc, #268]	; (80020c4 <HandleGui+0x744>)
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb8:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8001fba:	f7ff fb85 	bl	80016c8 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001fbe:	4843      	ldr	r0, [pc, #268]	; (80020cc <HandleGui+0x74c>)
 8001fc0:	f7ff faaa 	bl	8001518 <NEXTION_CMD>
			calculateReflowCurve();
 8001fc4:	f000 fbdc 	bl	8002780 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8001fc8:	2205      	movs	r2, #5
 8001fca:	4941      	ldr	r1, [pc, #260]	; (80020d0 <HandleGui+0x750>)
 8001fcc:	483a      	ldr	r0, [pc, #232]	; (80020b8 <HandleGui+0x738>)
 8001fce:	f005 fb6d 	bl	80076ac <strncmp>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d14f      	bne.n	8002078 <HandleGui+0x6f8>
			  float32_t Output =0;
 8001fd8:	f04f 0300 	mov.w	r3, #0
 8001fdc:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8001fde:	f7ff fb05 	bl	80015ec <HandleKeyPad>
 8001fe2:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001fe4:	e01d      	b.n	8002022 <HandleGui+0x6a2>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001fe6:	4a3b      	ldr	r2, [pc, #236]	; (80020d4 <HandleGui+0x754>)
 8001fe8:	f107 0308 	add.w	r3, r7, #8
 8001fec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ff0:	6018      	str	r0, [r3, #0]
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8001ffa:	e00c      	b.n	8002016 <HandleGui+0x696>
						UART_Recieved_Data[i]=defaultUart[i];
 8001ffc:	f107 0208 	add.w	r2, r7, #8
 8002000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002002:	4413      	add	r3, r2
 8002004:	7819      	ldrb	r1, [r3, #0]
 8002006:	4a2c      	ldr	r2, [pc, #176]	; (80020b8 <HandleGui+0x738>)
 8002008:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200a:	4413      	add	r3, r2
 800200c:	460a      	mov	r2, r1
 800200e:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8002010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002012:	3301      	adds	r3, #1
 8002014:	653b      	str	r3, [r7, #80]	; 0x50
 8002016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002018:	2b04      	cmp	r3, #4
 800201a:	ddef      	ble.n	8001ffc <HandleGui+0x67c>
					}
				  Output = HandleKeyPad();
 800201c:	f7ff fae6 	bl	80015ec <HandleKeyPad>
 8002020:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8002022:	4926      	ldr	r1, [pc, #152]	; (80020bc <HandleGui+0x73c>)
 8002024:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002026:	f7ff f841 	bl	80010ac <__aeabi_fcmpeq>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1da      	bne.n	8001fe6 <HandleGui+0x666>
			  }
			  if(Output == 8888){
 8002030:	4923      	ldr	r1, [pc, #140]	; (80020c0 <HandleGui+0x740>)
 8002032:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002034:	f7ff f83a 	bl	80010ac <__aeabi_fcmpeq>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HandleGui+0x6cc>
				 Output = ReflowParameters.ReflowTime;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <HandleGui+0x744>)
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fe46 	bl	8000cd4 <__aeabi_ui2f>
 8002048:	4603      	mov	r3, r0
 800204a:	657b      	str	r3, [r7, #84]	; 0x54
			  }

			  if (Output > 300)
 800204c:	4922      	ldr	r1, [pc, #136]	; (80020d8 <HandleGui+0x758>)
 800204e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002050:	f7ff f854 	bl	80010fc <__aeabi_fcmpgt>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HandleGui+0x6de>
				  Output = 300;
 800205a:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <HandleGui+0x758>)
 800205c:	657b      	str	r3, [r7, #84]	; 0x54

			ReflowParameters.ReflowTime = Output;
 800205e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002060:	f7ff f856 	bl	8001110 <__aeabi_f2uiz>
 8002064:	4603      	mov	r3, r0
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HandleGui+0x744>)
 8002068:	6213      	str	r3, [r2, #32]
			Update_Page_3();
 800206a:	f7ff fb2d 	bl	80016c8 <Update_Page_3>
			NEXTION_CMD("page 3");
 800206e:	4817      	ldr	r0, [pc, #92]	; (80020cc <HandleGui+0x74c>)
 8002070:	f7ff fa52 	bl	8001518 <NEXTION_CMD>
			calculateReflowCurve();
 8002074:	f000 fb84 	bl	8002780 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 8002078:	2205      	movs	r2, #5
 800207a:	4918      	ldr	r1, [pc, #96]	; (80020dc <HandleGui+0x75c>)
 800207c:	480e      	ldr	r0, [pc, #56]	; (80020b8 <HandleGui+0x738>)
 800207e:	f005 fb15 	bl	80076ac <strncmp>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d171      	bne.n	800216c <HandleGui+0x7ec>
			  float32_t Output =0;
 8002088:	f04f 0300 	mov.w	r3, #0
 800208c:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 800208e:	f7ff faad 	bl	80015ec <HandleKeyPad>
 8002092:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8002094:	e036      	b.n	8002104 <HandleGui+0x784>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HandleGui+0x754>)
 8002098:	463b      	mov	r3, r7
 800209a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800209e:	6018      	str	r0, [r3, #0]
 80020a0:	3304      	adds	r3, #4
 80020a2:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 80020a4:	2300      	movs	r3, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020a8:	e026      	b.n	80020f8 <HandleGui+0x778>
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	9999999a 	.word	0x9999999a
 80020b4:	3fc99999 	.word	0x3fc99999
 80020b8:	20000004 	.word	0x20000004
 80020bc:	461c3c00 	.word	0x461c3c00
 80020c0:	460ae000 	.word	0x460ae000
 80020c4:	200012a8 	.word	0x200012a8
 80020c8:	3e4ccccd 	.word	0x3e4ccccd
 80020cc:	0800b1c0 	.word	0x0800b1c0
 80020d0:	0800b1e0 	.word	0x0800b1e0
 80020d4:	0800b248 	.word	0x0800b248
 80020d8:	43960000 	.word	0x43960000
 80020dc:	0800b1e8 	.word	0x0800b1e8
						UART_Recieved_Data[i]=defaultUart[i];
 80020e0:	463a      	mov	r2, r7
 80020e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020e4:	4413      	add	r3, r2
 80020e6:	7819      	ldrb	r1, [r3, #0]
 80020e8:	4a99      	ldr	r2, [pc, #612]	; (8002350 <HandleGui+0x9d0>)
 80020ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020ec:	4413      	add	r3, r2
 80020ee:	460a      	mov	r2, r1
 80020f0:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80020f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020f4:	3301      	adds	r3, #1
 80020f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80020f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	ddf0      	ble.n	80020e0 <HandleGui+0x760>
					}
				  Output = HandleKeyPad();
 80020fe:	f7ff fa75 	bl	80015ec <HandleKeyPad>
 8002102:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8002104:	4993      	ldr	r1, [pc, #588]	; (8002354 <HandleGui+0x9d4>)
 8002106:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002108:	f7fe ffd0 	bl	80010ac <__aeabi_fcmpeq>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1c1      	bne.n	8002096 <HandleGui+0x716>
			  }
			  if(Output == 8888){
 8002112:	4991      	ldr	r1, [pc, #580]	; (8002358 <HandleGui+0x9d8>)
 8002114:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002116:	f7fe ffc9 	bl	80010ac <__aeabi_fcmpeq>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d006      	beq.n	800212e <HandleGui+0x7ae>
				 Output = ReflowParameters.ReflowTempeture;
 8002120:	4b8e      	ldr	r3, [pc, #568]	; (800235c <HandleGui+0x9dc>)
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe fdd5 	bl	8000cd4 <__aeabi_ui2f>
 800212a:	4603      	mov	r3, r0
 800212c:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  if (Output < 30)
 800212e:	498c      	ldr	r1, [pc, #560]	; (8002360 <HandleGui+0x9e0>)
 8002130:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002132:	f7fe ffc5 	bl	80010c0 <__aeabi_fcmplt>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HandleGui+0x7c0>
				  Output = 30;
 800213c:	4b88      	ldr	r3, [pc, #544]	; (8002360 <HandleGui+0x9e0>)
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
			  if (Output > 240)
 8002140:	4988      	ldr	r1, [pc, #544]	; (8002364 <HandleGui+0x9e4>)
 8002142:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002144:	f7fe ffda 	bl	80010fc <__aeabi_fcmpgt>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <HandleGui+0x7d2>
				  Output = 240;
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HandleGui+0x9e4>)
 8002150:	64fb      	str	r3, [r7, #76]	; 0x4c
			ReflowParameters.ReflowTempeture = Output;
 8002152:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002154:	f7fe ffdc 	bl	8001110 <__aeabi_f2uiz>
 8002158:	4603      	mov	r3, r0
 800215a:	4a80      	ldr	r2, [pc, #512]	; (800235c <HandleGui+0x9dc>)
 800215c:	61d3      	str	r3, [r2, #28]
			Update_Page_3();
 800215e:	f7ff fab3 	bl	80016c8 <Update_Page_3>
			NEXTION_CMD("page 3");
 8002162:	4881      	ldr	r0, [pc, #516]	; (8002368 <HandleGui+0x9e8>)
 8002164:	f7ff f9d8 	bl	8001518 <NEXTION_CMD>
			calculateReflowCurve();
 8002168:	f000 fb0a 	bl	8002780 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 800216c:	2205      	movs	r2, #5
 800216e:	497f      	ldr	r1, [pc, #508]	; (800236c <HandleGui+0x9ec>)
 8002170:	4877      	ldr	r0, [pc, #476]	; (8002350 <HandleGui+0x9d0>)
 8002172:	f005 fa9b 	bl	80076ac <strncmp>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HandleGui+0x800>
			Update_Page_2();
 800217c:	f7ff fbac 	bl	80018d8 <Update_Page_2>
		}


		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 8002180:	2205      	movs	r2, #5
 8002182:	497b      	ldr	r1, [pc, #492]	; (8002370 <HandleGui+0x9f0>)
 8002184:	4872      	ldr	r0, [pc, #456]	; (8002350 <HandleGui+0x9d0>)
 8002186:	f005 fa91 	bl	80076ac <strncmp>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d105      	bne.n	800219c <HandleGui+0x81c>
			Update_Page_0();
 8002190:	f7ff faf0 	bl	8001774 <Update_Page_0>
			Draw_Reflow_Curve();
 8002194:	f000 fc46 	bl	8002a24 <Draw_Reflow_Curve>
			SaveReflowParameters();
 8002198:	f7ff f8f6 	bl	8001388 <SaveReflowParameters>

		}


		  	// Save current parameters to Lead 138C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs0", 5) == 0){
 800219c:	2205      	movs	r2, #5
 800219e:	4975      	ldr	r1, [pc, #468]	; (8002374 <HandleGui+0x9f4>)
 80021a0:	486b      	ldr	r0, [pc, #428]	; (8002350 <HandleGui+0x9d0>)
 80021a2:	f005 fa83 	bl	80076ac <strncmp>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d11e      	bne.n	80021ea <HandleGui+0x86a>

			  ReflowParameters.firstHeatUpRate0 = ReflowParameters.firstHeatUpRate;
 80021ac:	4b6b      	ldr	r3, [pc, #428]	; (800235c <HandleGui+0x9dc>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a6a      	ldr	r2, [pc, #424]	; (800235c <HandleGui+0x9dc>)
 80021b2:	6253      	str	r3, [r2, #36]	; 0x24
			  ReflowParameters.SoakTime0 = ReflowParameters.SoakTime;
 80021b4:	4b69      	ldr	r3, [pc, #420]	; (800235c <HandleGui+0x9dc>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	4a68      	ldr	r2, [pc, #416]	; (800235c <HandleGui+0x9dc>)
 80021ba:	62d3      	str	r3, [r2, #44]	; 0x2c
			  ReflowParameters.SoakTempeture0 = ReflowParameters.SoakTempeture;
 80021bc:	4b67      	ldr	r3, [pc, #412]	; (800235c <HandleGui+0x9dc>)
 80021be:	691b      	ldr	r3, [r3, #16]
 80021c0:	4a66      	ldr	r2, [pc, #408]	; (800235c <HandleGui+0x9dc>)
 80021c2:	6293      	str	r3, [r2, #40]	; 0x28
			  ReflowParameters.secondHeatUpRate0 = ReflowParameters.secondHeatUpRate;
 80021c4:	4b65      	ldr	r3, [pc, #404]	; (800235c <HandleGui+0x9dc>)
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	4a64      	ldr	r2, [pc, #400]	; (800235c <HandleGui+0x9dc>)
 80021ca:	6313      	str	r3, [r2, #48]	; 0x30
			  ReflowParameters.ReflowTime0 = ReflowParameters.ReflowTime;
 80021cc:	4b63      	ldr	r3, [pc, #396]	; (800235c <HandleGui+0x9dc>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a62      	ldr	r2, [pc, #392]	; (800235c <HandleGui+0x9dc>)
 80021d2:	6393      	str	r3, [r2, #56]	; 0x38
			  ReflowParameters.ReflowTempeture0 = ReflowParameters.ReflowTempeture;
 80021d4:	4b61      	ldr	r3, [pc, #388]	; (800235c <HandleGui+0x9dc>)
 80021d6:	69db      	ldr	r3, [r3, #28]
 80021d8:	4a60      	ldr	r2, [pc, #384]	; (800235c <HandleGui+0x9dc>)
 80021da:	6353      	str	r3, [r2, #52]	; 0x34
			  Update_Page_3();
 80021dc:	f7ff fa74 	bl	80016c8 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 80021e0:	4861      	ldr	r0, [pc, #388]	; (8002368 <HandleGui+0x9e8>)
 80021e2:	f7ff f999 	bl	8001518 <NEXTION_CMD>
			  calculateReflowCurve();
 80021e6:	f000 facb 	bl	8002780 <calculateReflowCurve>

		  }

			 // Load Lead 138C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b08", 5) == 0){
 80021ea:	2205      	movs	r2, #5
 80021ec:	4962      	ldr	r1, [pc, #392]	; (8002378 <HandleGui+0x9f8>)
 80021ee:	4858      	ldr	r0, [pc, #352]	; (8002350 <HandleGui+0x9d0>)
 80021f0:	f005 fa5c 	bl	80076ac <strncmp>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d11b      	bne.n	8002232 <HandleGui+0x8b2>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate0;
 80021fa:	4b58      	ldr	r3, [pc, #352]	; (800235c <HandleGui+0x9dc>)
 80021fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fe:	4a57      	ldr	r2, [pc, #348]	; (800235c <HandleGui+0x9dc>)
 8002200:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime0;
 8002202:	4b56      	ldr	r3, [pc, #344]	; (800235c <HandleGui+0x9dc>)
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	4a55      	ldr	r2, [pc, #340]	; (800235c <HandleGui+0x9dc>)
 8002208:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture0;
 800220a:	4b54      	ldr	r3, [pc, #336]	; (800235c <HandleGui+0x9dc>)
 800220c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220e:	4a53      	ldr	r2, [pc, #332]	; (800235c <HandleGui+0x9dc>)
 8002210:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate0;
 8002212:	4b52      	ldr	r3, [pc, #328]	; (800235c <HandleGui+0x9dc>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a51      	ldr	r2, [pc, #324]	; (800235c <HandleGui+0x9dc>)
 8002218:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime0;
 800221a:	4b50      	ldr	r3, [pc, #320]	; (800235c <HandleGui+0x9dc>)
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	4a4f      	ldr	r2, [pc, #316]	; (800235c <HandleGui+0x9dc>)
 8002220:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture0;
 8002222:	4b4e      	ldr	r3, [pc, #312]	; (800235c <HandleGui+0x9dc>)
 8002224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HandleGui+0x9dc>)
 8002228:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 800222a:	f7ff fa4d 	bl	80016c8 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 800222e:	f000 faa7 	bl	8002780 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 148C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs1", 5) == 0){
 8002232:	2205      	movs	r2, #5
 8002234:	4951      	ldr	r1, [pc, #324]	; (800237c <HandleGui+0x9fc>)
 8002236:	4846      	ldr	r0, [pc, #280]	; (8002350 <HandleGui+0x9d0>)
 8002238:	f005 fa38 	bl	80076ac <strncmp>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d11e      	bne.n	8002280 <HandleGui+0x900>
			  ReflowParameters.firstHeatUpRate1 = ReflowParameters.firstHeatUpRate;
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HandleGui+0x9dc>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a45      	ldr	r2, [pc, #276]	; (800235c <HandleGui+0x9dc>)
 8002248:	63d3      	str	r3, [r2, #60]	; 0x3c
			  ReflowParameters.SoakTime1 = ReflowParameters.SoakTime;
 800224a:	4b44      	ldr	r3, [pc, #272]	; (800235c <HandleGui+0x9dc>)
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	4a43      	ldr	r2, [pc, #268]	; (800235c <HandleGui+0x9dc>)
 8002250:	6453      	str	r3, [r2, #68]	; 0x44
			  ReflowParameters.SoakTempeture1 = ReflowParameters.SoakTempeture;
 8002252:	4b42      	ldr	r3, [pc, #264]	; (800235c <HandleGui+0x9dc>)
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	4a41      	ldr	r2, [pc, #260]	; (800235c <HandleGui+0x9dc>)
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
			  ReflowParameters.secondHeatUpRate1 = ReflowParameters.secondHeatUpRate;
 800225a:	4b40      	ldr	r3, [pc, #256]	; (800235c <HandleGui+0x9dc>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	4a3f      	ldr	r2, [pc, #252]	; (800235c <HandleGui+0x9dc>)
 8002260:	6493      	str	r3, [r2, #72]	; 0x48
			  ReflowParameters.ReflowTime1 = ReflowParameters.ReflowTime;
 8002262:	4b3e      	ldr	r3, [pc, #248]	; (800235c <HandleGui+0x9dc>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	4a3d      	ldr	r2, [pc, #244]	; (800235c <HandleGui+0x9dc>)
 8002268:	6513      	str	r3, [r2, #80]	; 0x50
			  ReflowParameters.ReflowTempeture1 = ReflowParameters.ReflowTempeture;
 800226a:	4b3c      	ldr	r3, [pc, #240]	; (800235c <HandleGui+0x9dc>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a3b      	ldr	r2, [pc, #236]	; (800235c <HandleGui+0x9dc>)
 8002270:	64d3      	str	r3, [r2, #76]	; 0x4c
			  Update_Page_3();
 8002272:	f7ff fa29 	bl	80016c8 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 8002276:	483c      	ldr	r0, [pc, #240]	; (8002368 <HandleGui+0x9e8>)
 8002278:	f7ff f94e 	bl	8001518 <NEXTION_CMD>
			  calculateReflowCurve();
 800227c:	f000 fa80 	bl	8002780 <calculateReflowCurve>
		  }

			 // Load Lead 148C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b09", 5) == 0){
 8002280:	2205      	movs	r2, #5
 8002282:	493f      	ldr	r1, [pc, #252]	; (8002380 <HandleGui+0xa00>)
 8002284:	4832      	ldr	r0, [pc, #200]	; (8002350 <HandleGui+0x9d0>)
 8002286:	f005 fa11 	bl	80076ac <strncmp>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d11b      	bne.n	80022c8 <HandleGui+0x948>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate1;
 8002290:	4b32      	ldr	r3, [pc, #200]	; (800235c <HandleGui+0x9dc>)
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	4a31      	ldr	r2, [pc, #196]	; (800235c <HandleGui+0x9dc>)
 8002296:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime1;
 8002298:	4b30      	ldr	r3, [pc, #192]	; (800235c <HandleGui+0x9dc>)
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	4a2f      	ldr	r2, [pc, #188]	; (800235c <HandleGui+0x9dc>)
 800229e:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture1;
 80022a0:	4b2e      	ldr	r3, [pc, #184]	; (800235c <HandleGui+0x9dc>)
 80022a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a4:	4a2d      	ldr	r2, [pc, #180]	; (800235c <HandleGui+0x9dc>)
 80022a6:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate1;
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <HandleGui+0x9dc>)
 80022aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022ac:	4a2b      	ldr	r2, [pc, #172]	; (800235c <HandleGui+0x9dc>)
 80022ae:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime1;
 80022b0:	4b2a      	ldr	r3, [pc, #168]	; (800235c <HandleGui+0x9dc>)
 80022b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022b4:	4a29      	ldr	r2, [pc, #164]	; (800235c <HandleGui+0x9dc>)
 80022b6:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture1;
 80022b8:	4b28      	ldr	r3, [pc, #160]	; (800235c <HandleGui+0x9dc>)
 80022ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022bc:	4a27      	ldr	r2, [pc, #156]	; (800235c <HandleGui+0x9dc>)
 80022be:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 80022c0:	f7ff fa02 	bl	80016c8 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 80022c4:	f000 fa5c 	bl	8002780 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 183C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs2", 5) == 0){
 80022c8:	2205      	movs	r2, #5
 80022ca:	492e      	ldr	r1, [pc, #184]	; (8002384 <HandleGui+0xa04>)
 80022cc:	4820      	ldr	r0, [pc, #128]	; (8002350 <HandleGui+0x9d0>)
 80022ce:	f005 f9ed 	bl	80076ac <strncmp>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11e      	bne.n	8002316 <HandleGui+0x996>
			  ReflowParameters.firstHeatUpRate2 = ReflowParameters.firstHeatUpRate;
 80022d8:	4b20      	ldr	r3, [pc, #128]	; (800235c <HandleGui+0x9dc>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a1f      	ldr	r2, [pc, #124]	; (800235c <HandleGui+0x9dc>)
 80022de:	6553      	str	r3, [r2, #84]	; 0x54
			  ReflowParameters.SoakTime2 = ReflowParameters.SoakTime;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <HandleGui+0x9dc>)
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HandleGui+0x9dc>)
 80022e6:	65d3      	str	r3, [r2, #92]	; 0x5c
			  ReflowParameters.SoakTempeture2 = ReflowParameters.SoakTempeture;
 80022e8:	4b1c      	ldr	r3, [pc, #112]	; (800235c <HandleGui+0x9dc>)
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	4a1b      	ldr	r2, [pc, #108]	; (800235c <HandleGui+0x9dc>)
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
			  ReflowParameters.secondHeatUpRate2 = ReflowParameters.secondHeatUpRate;
 80022f0:	4b1a      	ldr	r3, [pc, #104]	; (800235c <HandleGui+0x9dc>)
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HandleGui+0x9dc>)
 80022f6:	6613      	str	r3, [r2, #96]	; 0x60
			  ReflowParameters.ReflowTime2 = ReflowParameters.ReflowTime;
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <HandleGui+0x9dc>)
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4a17      	ldr	r2, [pc, #92]	; (800235c <HandleGui+0x9dc>)
 80022fe:	6693      	str	r3, [r2, #104]	; 0x68
			  ReflowParameters.ReflowTempeture2 = ReflowParameters.ReflowTempeture;
 8002300:	4b16      	ldr	r3, [pc, #88]	; (800235c <HandleGui+0x9dc>)
 8002302:	69db      	ldr	r3, [r3, #28]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <HandleGui+0x9dc>)
 8002306:	6653      	str	r3, [r2, #100]	; 0x64
			  Update_Page_3();
 8002308:	f7ff f9de 	bl	80016c8 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 800230c:	4816      	ldr	r0, [pc, #88]	; (8002368 <HandleGui+0x9e8>)
 800230e:	f7ff f903 	bl	8001518 <NEXTION_CMD>
			  calculateReflowCurve();
 8002312:	f000 fa35 	bl	8002780 <calculateReflowCurve>
		  }

			 // Load Lead 183C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b10", 5) == 0){
 8002316:	2205      	movs	r2, #5
 8002318:	491b      	ldr	r1, [pc, #108]	; (8002388 <HandleGui+0xa08>)
 800231a:	480d      	ldr	r0, [pc, #52]	; (8002350 <HandleGui+0x9d0>)
 800231c:	f005 f9c6 	bl	80076ac <strncmp>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d13a      	bne.n	800239c <HandleGui+0xa1c>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate2;
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <HandleGui+0x9dc>)
 8002328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800232a:	4a0c      	ldr	r2, [pc, #48]	; (800235c <HandleGui+0x9dc>)
 800232c:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime2;
 800232e:	4b0b      	ldr	r3, [pc, #44]	; (800235c <HandleGui+0x9dc>)
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HandleGui+0x9dc>)
 8002334:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture2;
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HandleGui+0x9dc>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HandleGui+0x9dc>)
 800233c:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate2;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HandleGui+0x9dc>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	4a06      	ldr	r2, [pc, #24]	; (800235c <HandleGui+0x9dc>)
 8002344:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime2;
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <HandleGui+0x9dc>)
 8002348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <HandleGui+0x9dc>)
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	e01d      	b.n	800238c <HandleGui+0xa0c>
 8002350:	20000004 	.word	0x20000004
 8002354:	461c3c00 	.word	0x461c3c00
 8002358:	460ae000 	.word	0x460ae000
 800235c:	200012a8 	.word	0x200012a8
 8002360:	41f00000 	.word	0x41f00000
 8002364:	43700000 	.word	0x43700000
 8002368:	0800b1c0 	.word	0x0800b1c0
 800236c:	0800b1f0 	.word	0x0800b1f0
 8002370:	0800b1f8 	.word	0x0800b1f8
 8002374:	0800b200 	.word	0x0800b200
 8002378:	0800b208 	.word	0x0800b208
 800237c:	0800b210 	.word	0x0800b210
 8002380:	0800b218 	.word	0x0800b218
 8002384:	0800b220 	.word	0x0800b220
 8002388:	0800b228 	.word	0x0800b228
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture2;
 800238c:	4b64      	ldr	r3, [pc, #400]	; (8002520 <HandleGui+0xba0>)
 800238e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002390:	4a63      	ldr	r2, [pc, #396]	; (8002520 <HandleGui+0xba0>)
 8002392:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 8002394:	f7ff f998 	bl	80016c8 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 8002398:	f000 f9f2 	bl	8002780 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 217C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs3", 5) == 0){
 800239c:	2205      	movs	r2, #5
 800239e:	4961      	ldr	r1, [pc, #388]	; (8002524 <HandleGui+0xba4>)
 80023a0:	4861      	ldr	r0, [pc, #388]	; (8002528 <HandleGui+0xba8>)
 80023a2:	f005 f983 	bl	80076ac <strncmp>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d11f      	bne.n	80023ec <HandleGui+0xa6c>
			  ReflowParameters.firstHeatUpRate3 = ReflowParameters.firstHeatUpRate;
 80023ac:	4b5c      	ldr	r3, [pc, #368]	; (8002520 <HandleGui+0xba0>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	4a5b      	ldr	r2, [pc, #364]	; (8002520 <HandleGui+0xba0>)
 80023b2:	66d3      	str	r3, [r2, #108]	; 0x6c
			  ReflowParameters.SoakTime3 = ReflowParameters.SoakTime;
 80023b4:	4b5a      	ldr	r3, [pc, #360]	; (8002520 <HandleGui+0xba0>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	4a59      	ldr	r2, [pc, #356]	; (8002520 <HandleGui+0xba0>)
 80023ba:	6753      	str	r3, [r2, #116]	; 0x74
			  ReflowParameters.SoakTempeture3 = ReflowParameters.SoakTempeture;
 80023bc:	4b58      	ldr	r3, [pc, #352]	; (8002520 <HandleGui+0xba0>)
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	4a57      	ldr	r2, [pc, #348]	; (8002520 <HandleGui+0xba0>)
 80023c2:	6713      	str	r3, [r2, #112]	; 0x70
			  ReflowParameters.secondHeatUpRate3 = ReflowParameters.secondHeatUpRate;
 80023c4:	4b56      	ldr	r3, [pc, #344]	; (8002520 <HandleGui+0xba0>)
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	4a55      	ldr	r2, [pc, #340]	; (8002520 <HandleGui+0xba0>)
 80023ca:	6793      	str	r3, [r2, #120]	; 0x78
			  ReflowParameters.ReflowTime3 = ReflowParameters.ReflowTime;
 80023cc:	4b54      	ldr	r3, [pc, #336]	; (8002520 <HandleGui+0xba0>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	4a53      	ldr	r2, [pc, #332]	; (8002520 <HandleGui+0xba0>)
 80023d2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			  ReflowParameters.ReflowTempeture3 = ReflowParameters.ReflowTempeture;
 80023d6:	4b52      	ldr	r3, [pc, #328]	; (8002520 <HandleGui+0xba0>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4a51      	ldr	r2, [pc, #324]	; (8002520 <HandleGui+0xba0>)
 80023dc:	67d3      	str	r3, [r2, #124]	; 0x7c
			  Update_Page_3();
 80023de:	f7ff f973 	bl	80016c8 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 80023e2:	4852      	ldr	r0, [pc, #328]	; (800252c <HandleGui+0xbac>)
 80023e4:	f7ff f898 	bl	8001518 <NEXTION_CMD>
			  calculateReflowCurve();
 80023e8:	f000 f9ca 	bl	8002780 <calculateReflowCurve>
		  }

		  	// Load Lead 217C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b11", 5) == 0){
 80023ec:	2205      	movs	r2, #5
 80023ee:	4950      	ldr	r1, [pc, #320]	; (8002530 <HandleGui+0xbb0>)
 80023f0:	484d      	ldr	r0, [pc, #308]	; (8002528 <HandleGui+0xba8>)
 80023f2:	f005 f95b 	bl	80076ac <strncmp>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d11c      	bne.n	8002436 <HandleGui+0xab6>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate3;
 80023fc:	4b48      	ldr	r3, [pc, #288]	; (8002520 <HandleGui+0xba0>)
 80023fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002400:	4a47      	ldr	r2, [pc, #284]	; (8002520 <HandleGui+0xba0>)
 8002402:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime3;
 8002404:	4b46      	ldr	r3, [pc, #280]	; (8002520 <HandleGui+0xba0>)
 8002406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002408:	4a45      	ldr	r2, [pc, #276]	; (8002520 <HandleGui+0xba0>)
 800240a:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture3;
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HandleGui+0xba0>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002410:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HandleGui+0xba0>)
 8002412:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate3;
 8002414:	4b42      	ldr	r3, [pc, #264]	; (8002520 <HandleGui+0xba0>)
 8002416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002418:	4a41      	ldr	r2, [pc, #260]	; (8002520 <HandleGui+0xba0>)
 800241a:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime3;
 800241c:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HandleGui+0xba0>)
 800241e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002422:	4a3f      	ldr	r2, [pc, #252]	; (8002520 <HandleGui+0xba0>)
 8002424:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture3;
 8002426:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <HandleGui+0xba0>)
 8002428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800242a:	4a3d      	ldr	r2, [pc, #244]	; (8002520 <HandleGui+0xba0>)
 800242c:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 800242e:	f7ff f94b 	bl	80016c8 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 8002432:	f000 f9a5 	bl	8002780 <calculateReflowCurve>
		  }

		  // restore factory default profiles	(not all tested)
		  if(strncmp((char *)UART_Recieved_Data, "p3br7", 5) == 0){
 8002436:	2205      	movs	r2, #5
 8002438:	493e      	ldr	r1, [pc, #248]	; (8002534 <HandleGui+0xbb4>)
 800243a:	483b      	ldr	r0, [pc, #236]	; (8002528 <HandleGui+0xba8>)
 800243c:	f005 f936 	bl	80076ac <strncmp>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d168      	bne.n	8002518 <HandleGui+0xb98>

			  	// Lead 217C https://www.chipquik.com/datasheets/TS391SNL50.pdf
				ReflowParameters.firstHeatUpRate3 = 0.75;
 8002446:	4b36      	ldr	r3, [pc, #216]	; (8002520 <HandleGui+0xba0>)
 8002448:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800244c:	66da      	str	r2, [r3, #108]	; 0x6c
				ReflowParameters.SoakTime3 = 100;
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <HandleGui+0xba0>)
 8002450:	2264      	movs	r2, #100	; 0x64
 8002452:	675a      	str	r2, [r3, #116]	; 0x74
				ReflowParameters.SoakTempeture3 = 175;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HandleGui+0xba0>)
 8002456:	22af      	movs	r2, #175	; 0xaf
 8002458:	671a      	str	r2, [r3, #112]	; 0x70
				ReflowParameters.secondHeatUpRate3 = 1;
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <HandleGui+0xba0>)
 800245c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002460:	679a      	str	r2, [r3, #120]	; 0x78
				ReflowParameters.ReflowTime3 = 90;
 8002462:	4b2f      	ldr	r3, [pc, #188]	; (8002520 <HandleGui+0xba0>)
 8002464:	225a      	movs	r2, #90	; 0x5a
 8002466:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ReflowParameters.ReflowTempeture3 = 240;
 800246a:	4b2d      	ldr	r3, [pc, #180]	; (8002520 <HandleGui+0xba0>)
 800246c:	22f0      	movs	r2, #240	; 0xf0
 800246e:	67da      	str	r2, [r3, #124]	; 0x7c
				// Lead 183C https://www.chipquik.com/datasheets/TS391AX50.pdf
				ReflowParameters.firstHeatUpRate2 = 0.75;
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <HandleGui+0xba0>)
 8002472:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002476:	655a      	str	r2, [r3, #84]	; 0x54
				ReflowParameters.SoakTime2 = 100;
 8002478:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HandleGui+0xba0>)
 800247a:	2264      	movs	r2, #100	; 0x64
 800247c:	65da      	str	r2, [r3, #92]	; 0x5c
				ReflowParameters.SoakTempeture2 = 150;
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HandleGui+0xba0>)
 8002480:	2296      	movs	r2, #150	; 0x96
 8002482:	659a      	str	r2, [r3, #88]	; 0x58
				ReflowParameters.secondHeatUpRate2 = 1;
 8002484:	4b26      	ldr	r3, [pc, #152]	; (8002520 <HandleGui+0xba0>)
 8002486:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800248a:	661a      	str	r2, [r3, #96]	; 0x60
				ReflowParameters.ReflowTime2 = 100;
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HandleGui+0xba0>)
 800248e:	2264      	movs	r2, #100	; 0x64
 8002490:	669a      	str	r2, [r3, #104]	; 0x68
				ReflowParameters.ReflowTempeture2 = 230;
 8002492:	4b23      	ldr	r3, [pc, #140]	; (8002520 <HandleGui+0xba0>)
 8002494:	22e6      	movs	r2, #230	; 0xe6
 8002496:	665a      	str	r2, [r3, #100]	; 0x64
				// Lead 148C
				ReflowParameters.firstHeatUpRate1 = 0.75;
 8002498:	4b21      	ldr	r3, [pc, #132]	; (8002520 <HandleGui+0xba0>)
 800249a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800249e:	63da      	str	r2, [r3, #60]	; 0x3c
				ReflowParameters.SoakTime1 = 100;
 80024a0:	4b1f      	ldr	r3, [pc, #124]	; (8002520 <HandleGui+0xba0>)
 80024a2:	2264      	movs	r2, #100	; 0x64
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
				ReflowParameters.SoakTempeture1 = 140;
 80024a6:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HandleGui+0xba0>)
 80024a8:	228c      	movs	r2, #140	; 0x8c
 80024aa:	641a      	str	r2, [r3, #64]	; 0x40
				ReflowParameters.secondHeatUpRate1 = 1;
 80024ac:	4b1c      	ldr	r3, [pc, #112]	; (8002520 <HandleGui+0xba0>)
 80024ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024b2:	649a      	str	r2, [r3, #72]	; 0x48
				ReflowParameters.ReflowTime1 = 100;
 80024b4:	4b1a      	ldr	r3, [pc, #104]	; (8002520 <HandleGui+0xba0>)
 80024b6:	2264      	movs	r2, #100	; 0x64
 80024b8:	651a      	str	r2, [r3, #80]	; 0x50
				ReflowParameters.ReflowTempeture1 = 175;
 80024ba:	4b19      	ldr	r3, [pc, #100]	; (8002520 <HandleGui+0xba0>)
 80024bc:	22af      	movs	r2, #175	; 0xaf
 80024be:	64da      	str	r2, [r3, #76]	; 0x4c
				// Lead 138C http://www.chipquik.com/datasheets/TS391LT50.pdf
				ReflowParameters.firstHeatUpRate0 = 0.75;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HandleGui+0xba0>)
 80024c2:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80024c6:	625a      	str	r2, [r3, #36]	; 0x24
				ReflowParameters.SoakTime0 = 100;
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <HandleGui+0xba0>)
 80024ca:	2264      	movs	r2, #100	; 0x64
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
				ReflowParameters.SoakTempeture0 = 130;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <HandleGui+0xba0>)
 80024d0:	2282      	movs	r2, #130	; 0x82
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
				ReflowParameters.secondHeatUpRate0 = 1;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <HandleGui+0xba0>)
 80024d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024da:	631a      	str	r2, [r3, #48]	; 0x30
				ReflowParameters.ReflowTime0 = 100;
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <HandleGui+0xba0>)
 80024de:	2264      	movs	r2, #100	; 0x64
 80024e0:	639a      	str	r2, [r3, #56]	; 0x38
				ReflowParameters.ReflowTempeture0 = 165;
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HandleGui+0xba0>)
 80024e4:	22a5      	movs	r2, #165	; 0xa5
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34
				// Lead default (138C)
				ReflowParameters.firstHeatUpRate = 0.75;
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HandleGui+0xba0>)
 80024ea:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80024ee:	60da      	str	r2, [r3, #12]
				ReflowParameters.SoakTime = 100;
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HandleGui+0xba0>)
 80024f2:	2264      	movs	r2, #100	; 0x64
 80024f4:	615a      	str	r2, [r3, #20]
				ReflowParameters.SoakTempeture = 130;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <HandleGui+0xba0>)
 80024f8:	2282      	movs	r2, #130	; 0x82
 80024fa:	611a      	str	r2, [r3, #16]
				ReflowParameters.secondHeatUpRate = 1;
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HandleGui+0xba0>)
 80024fe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002502:	619a      	str	r2, [r3, #24]
				ReflowParameters.ReflowTime = 100;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HandleGui+0xba0>)
 8002506:	2264      	movs	r2, #100	; 0x64
 8002508:	621a      	str	r2, [r3, #32]
				ReflowParameters.ReflowTempeture = 165;
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HandleGui+0xba0>)
 800250c:	22a5      	movs	r2, #165	; 0xa5
 800250e:	61da      	str	r2, [r3, #28]

				calculateReflowCurve();
 8002510:	f000 f936 	bl	8002780 <calculateReflowCurve>
				Update_Page_0();
 8002514:	f7ff f92e 	bl	8001774 <Update_Page_0>
		  }

}
 8002518:	bf00      	nop
 800251a:	3790      	adds	r7, #144	; 0x90
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200012a8 	.word	0x200012a8
 8002524:	0800b230 	.word	0x0800b230
 8002528:	20000004 	.word	0x20000004
 800252c:	0800b1c0 	.word	0x0800b1c0
 8002530:	0800b238 	.word	0x0800b238
 8002534:	0800b240 	.word	0x0800b240

08002538 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]

	TempDrawCounter++;
 8002540:	4b77      	ldr	r3, [pc, #476]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	4a76      	ldr	r2, [pc, #472]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002548:	6013      	str	r3, [r2, #0]

	if (htim == &htim4) {
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a75      	ldr	r2, [pc, #468]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800254e:	4293      	cmp	r3, r2
 8002550:	f040 80db 	bne.w	800270a <HAL_TIM_PeriodElapsedCallback+0x1d2>
		//Thermocouple alle 500ms auslesen:
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 8002554:	2200      	movs	r2, #0
 8002556:	2110      	movs	r1, #16
 8002558:	4873      	ldr	r0, [pc, #460]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800255a:	f001 fe88 	bl	800426e <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, data, 2, 100);
 800255e:	2364      	movs	r3, #100	; 0x64
 8002560:	2202      	movs	r2, #2
 8002562:	4972      	ldr	r1, [pc, #456]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002564:	4872      	ldr	r0, [pc, #456]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002566:	f002 fb39 	bl	8004bdc <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800256a:	2201      	movs	r2, #1
 800256c:	2110      	movs	r1, #16
 800256e:	486e      	ldr	r0, [pc, #440]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002570:	f001 fe7d 	bl	800426e <HAL_GPIO_WritePin>

		temp = ((((uint16_t) data[1] << 8) | data[0]) >> 3) * 0.249;
 8002574:	4b6d      	ldr	r3, [pc, #436]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	4a6c      	ldr	r2, [pc, #432]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	10db      	asrs	r3, r3, #3
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ff3e 	bl	8000404 <__aeabi_i2d>
 8002588:	a363      	add	r3, pc, #396	; (adr r3, 8002718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fd ffa3 	bl	80004d8 <__aeabi_dmul>
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	f7fe fa95 	bl	8000ac8 <__aeabi_d2f>
 800259e:	4603      	mov	r3, r0
 80025a0:	4a64      	ldr	r2, [pc, #400]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025a2:	6013      	str	r3, [r2, #0]
		// basic filter to reduce random and noisy temperature readings
		if ((fabs(temp - lastTemp) > 25) && (HAL_GetTick() > 3000))	{
 80025a4:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a63      	ldr	r2, [pc, #396]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	4611      	mov	r1, r2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fade 	bl	8000b70 <__aeabi_fsub>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025ba:	4960      	ldr	r1, [pc, #384]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fd9d 	bl	80010fc <__aeabi_fcmpgt>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <HAL_TIM_PeriodElapsedCallback+0xa8>
 80025c8:	f001 f8c0 	bl	800374c <HAL_GetTick>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d904      	bls.n	80025e0 <HAL_TIM_PeriodElapsedCallback+0xa8>
			temp = lastTemp;
 80025d6:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e003      	b.n	80025e8 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else {
			lastTemp=temp;
 80025e0:	4b54      	ldr	r3, [pc, #336]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80025e6:	6013      	str	r3, [r2, #0]
		}

		//Reflow Prozess Einleiten:
		if (ReflowEnable == 1) {
 80025e8:	4b55      	ldr	r3, [pc, #340]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	f040 8085 	bne.w	80026fc <HAL_TIM_PeriodElapsedCallback+0x1c4>
			//NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));

			if(ReflowIndex == PhaseIndex[0])
 80025f2:	4b54      	ldr	r3, [pc, #336]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80025f4:	881a      	ldrh	r2, [r3, #0]
 80025f6:	4b54      	ldr	r3, [pc, #336]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d103      	bne.n	8002606 <HAL_TIM_PeriodElapsedCallback+0xce>
				sprintf(ConsoleMSG,"PREHEAT");
 80025fe:	4953      	ldr	r1, [pc, #332]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002600:	4853      	ldr	r0, [pc, #332]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002602:	f005 f833 	bl	800766c <siprintf>
			if(ReflowIndex == PhaseIndex[1])
 8002606:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002608:	885a      	ldrh	r2, [r3, #2]
 800260a:	4b4f      	ldr	r3, [pc, #316]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d103      	bne.n	800261a <HAL_TIM_PeriodElapsedCallback+0xe2>
				sprintf(ConsoleMSG,"SOAK");
 8002612:	4950      	ldr	r1, [pc, #320]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002614:	484e      	ldr	r0, [pc, #312]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002616:	f005 f829 	bl	800766c <siprintf>
			if(ReflowIndex == PhaseIndex[2])
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800261c:	889a      	ldrh	r2, [r3, #4]
 800261e:	4b4a      	ldr	r3, [pc, #296]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d103      	bne.n	800262e <HAL_TIM_PeriodElapsedCallback+0xf6>
				sprintf(ConsoleMSG,"HEAT UP");
 8002626:	494c      	ldr	r1, [pc, #304]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002628:	4849      	ldr	r0, [pc, #292]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800262a:	f005 f81f 	bl	800766c <siprintf>
			if(ReflowIndex == PhaseIndex[3])
 800262e:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002630:	88da      	ldrh	r2, [r3, #6]
 8002632:	4b45      	ldr	r3, [pc, #276]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d103      	bne.n	8002642 <HAL_TIM_PeriodElapsedCallback+0x10a>
				sprintf(ConsoleMSG,"REFLOW");
 800263a:	4948      	ldr	r1, [pc, #288]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x224>)
 800263c:	4844      	ldr	r0, [pc, #272]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800263e:	f005 f815 	bl	800766c <siprintf>

			//Regelabweichung
			float pid_error =  ReflowCurve[ReflowIndex] - temp;
 8002642:	4b41      	ldr	r3, [pc, #260]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002644:	881b      	ldrh	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	4618      	mov	r0, r3
 800264e:	f7fe fb45 	bl	8000cdc <__aeabi_i2f>
 8002652:	4602      	mov	r2, r0
 8002654:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f7fe fa88 	bl	8000b70 <__aeabi_fsub>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
			//Stellgroesse
			duty =  arm_pid_f32(&PID, pid_error);
 8002664:	68f9      	ldr	r1, [r7, #12]
 8002666:	483f      	ldr	r0, [pc, #252]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002668:	f7fe fe4c 	bl	8001304 <arm_pid_f32>
 800266c:	4603      	mov	r3, r0
 800266e:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002670:	6013      	str	r3, [r2, #0]

			//Stellgrößenbegrenzung und Anti-Wind-UP (update 27.03.2021)
			if (duty > 1000) {
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	493d      	ldr	r1, [pc, #244]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002678:	4618      	mov	r0, r3
 800267a:	f7fe fd3f 	bl	80010fc <__aeabi_fcmpgt>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d007      	beq.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x15c>
				duty = 1000;
 8002684:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002686:	4a39      	ldr	r2, [pc, #228]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002688:	601a      	str	r2, [r3, #0]
				PID.Ki = 0;
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	61da      	str	r2, [r3, #28]
 8002692:	e012      	b.n	80026ba <HAL_TIM_PeriodElapsedCallback+0x182>
			} else if (duty < 0) {
 8002694:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fd0f 	bl	80010c0 <__aeabi_fcmplt>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d004      	beq.n	80026b2 <HAL_TIM_PeriodElapsedCallback+0x17a>
				duty = 0;
 80026a8:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	e003      	b.n	80026ba <HAL_TIM_PeriodElapsedCallback+0x182>
			}
			else{
				PID.Ki = ReflowParameters.Ki;
 80026b2:	4b2f      	ldr	r3, [pc, #188]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	4a2b      	ldr	r2, [pc, #172]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80026b8:	61d3      	str	r3, [r2, #28]
			}

			//Dutycycle Anpassen
			htim1.Instance->CCR1 = (uint16_t)duty;
 80026ba:	4b2b      	ldr	r3, [pc, #172]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7fe fd26 	bl	8001110 <__aeabi_f2uiz>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	635a      	str	r2, [r3, #52]	; 0x34

			ReflowIndex++;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026d8:	801a      	strh	r2, [r3, #0]
			//Abbruchbedingung
			if (ReflowIndex == PhaseIndex[4]) {
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80026dc:	891a      	ldrh	r2, [r3, #8]
 80026de:	4b1a      	ldr	r3, [pc, #104]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d111      	bne.n	800270a <HAL_TIM_PeriodElapsedCallback+0x1d2>
				sprintf(ConsoleMSG,"FINISHED, OPEN DOOR");
 80026e6:	4924      	ldr	r1, [pc, #144]	; (8002778 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80026e8:	4819      	ldr	r0, [pc, #100]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80026ea:	f004 ffbf 	bl	800766c <siprintf>
					BuzzerEnable = 1;
 80026ee:	4b23      	ldr	r3, [pc, #140]	; (800277c <HAL_TIM_PeriodElapsedCallback+0x244>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
					ReflowEnable = 0;
 80026f4:	4b12      	ldr	r3, [pc, #72]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
		}

	}

}
 80026fa:	e006      	b.n	800270a <HAL_TIM_PeriodElapsedCallback+0x1d2>
			ReflowIndex = 0;
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80026fe:	2200      	movs	r2, #0
 8002700:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
 8002702:	4b1c      	ldr	r3, [pc, #112]	; (8002774 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2200      	movs	r2, #0
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	f3af 8000 	nop.w
 8002718:	645a1cac 	.word	0x645a1cac
 800271c:	3fcfdf3b 	.word	0x3fcfdf3b
 8002720:	20000230 	.word	0x20000230
 8002724:	20000240 	.word	0x20000240
 8002728:	40010800 	.word	0x40010800
 800272c:	20001334 	.word	0x20001334
 8002730:	20001380 	.word	0x20001380
 8002734:	200002c0 	.word	0x200002c0
 8002738:	20001330 	.word	0x20001330
 800273c:	41c80000 	.word	0x41c80000
 8002740:	2000021c 	.word	0x2000021c
 8002744:	20000224 	.word	0x20000224
 8002748:	2000021e 	.word	0x2000021e
 800274c:	0800b250 	.word	0x0800b250
 8002750:	200013dc 	.word	0x200013dc
 8002754:	0800b258 	.word	0x0800b258
 8002758:	0800b260 	.word	0x0800b260
 800275c:	0800b268 	.word	0x0800b268
 8002760:	20000308 	.word	0x20000308
 8002764:	20000288 	.word	0x20000288
 8002768:	200013f8 	.word	0x200013f8
 800276c:	447a0000 	.word	0x447a0000
 8002770:	200012a8 	.word	0x200012a8
 8002774:	20001338 	.word	0x20001338
 8002778:	0800b270 	.word	0x0800b270
 800277c:	2000021d 	.word	0x2000021d

08002780 <calculateReflowCurve>:


void calculateReflowCurve(){
 8002780:	b5b0      	push	{r4, r5, r7, lr}
 8002782:	b088      	sub	sp, #32
 8002784:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e007      	b.n	800279c <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 800278c:	4aa0      	ldr	r2, [pc, #640]	; (8002a10 <calculateReflowCurve+0x290>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	4413      	add	r3, r2
 8002792:	2200      	movs	r2, #0
 8002794:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3301      	adds	r3, #1
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80027a2:	dbf3      	blt.n	800278c <calculateReflowCurve+0xc>
	}

	int index = 0;
 80027a4:	2300      	movs	r3, #0
 80027a6:	61bb      	str	r3, [r7, #24]
	float timestep = 0.5;
 80027a8:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80027ac:	617b      	str	r3, [r7, #20]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80027ae:	e01f      	b.n	80027f0 <calculateReflowCurve+0x70>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 80027b0:	4b98      	ldr	r3, [pc, #608]	; (8002a14 <calculateReflowCurve+0x294>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	6979      	ldr	r1, [r7, #20]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fae4 	bl	8000d84 <__aeabi_fmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	4996      	ldr	r1, [pc, #600]	; (8002a18 <calculateReflowCurve+0x298>)
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe f9d7 	bl	8000b74 <__addsf3>
 80027c6:	4603      	mov	r3, r0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fca1 	bl	8001110 <__aeabi_f2uiz>
 80027ce:	4603      	mov	r3, r0
 80027d0:	b2d9      	uxtb	r1, r3
 80027d2:	4a8f      	ldr	r2, [pc, #572]	; (8002a10 <calculateReflowCurve+0x290>)
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	4413      	add	r3, r2
 80027d8:	460a      	mov	r2, r1
 80027da:	701a      	strb	r2, [r3, #0]
	index++;
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	3301      	adds	r3, #1
 80027e0:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80027e2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80027e6:	6978      	ldr	r0, [r7, #20]
 80027e8:	f7fe f9c4 	bl	8000b74 <__addsf3>
 80027ec:	4603      	mov	r3, r0
 80027ee:	617b      	str	r3, [r7, #20]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 80027f0:	4b88      	ldr	r3, [pc, #544]	; (8002a14 <calculateReflowCurve+0x294>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	6979      	ldr	r1, [r7, #20]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fac4 	bl	8000d84 <__aeabi_fmul>
 80027fc:	4603      	mov	r3, r0
 80027fe:	4986      	ldr	r1, [pc, #536]	; (8002a18 <calculateReflowCurve+0x298>)
 8002800:	4618      	mov	r0, r3
 8002802:	f7fe f9b7 	bl	8000b74 <__addsf3>
 8002806:	4603      	mov	r3, r0
 8002808:	461c      	mov	r4, r3
 800280a:	4b82      	ldr	r3, [pc, #520]	; (8002a14 <calculateReflowCurve+0x294>)
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fa60 	bl	8000cd4 <__aeabi_ui2f>
 8002814:	4603      	mov	r3, r0
 8002816:	4619      	mov	r1, r3
 8002818:	4620      	mov	r0, r4
 800281a:	f7fe fc5b 	bl	80010d4 <__aeabi_fcmple>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1c5      	bne.n	80027b0 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	b29a      	uxth	r2, r3
 8002828:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <calculateReflowCurve+0x29c>)
 800282a:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 800282c:	4b79      	ldr	r3, [pc, #484]	; (8002a14 <calculateReflowCurve+0x294>)
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<Soakduration;i++){
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	e00a      	b.n	8002850 <calculateReflowCurve+0xd0>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 800283a:	4b76      	ldr	r3, [pc, #472]	; (8002a14 <calculateReflowCurve+0x294>)
 800283c:	6919      	ldr	r1, [r3, #16]
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4413      	add	r3, r2
 8002844:	b2c9      	uxtb	r1, r1
 8002846:	4a72      	ldr	r2, [pc, #456]	; (8002a10 <calculateReflowCurve+0x290>)
 8002848:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	3301      	adds	r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	429a      	cmp	r2, r3
 8002856:	dbf0      	blt.n	800283a <calculateReflowCurve+0xba>
	}

	//Second Heat Up:
	index = index + Soakduration;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4413      	add	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
	PhaseIndex[2]=index;
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	b29a      	uxth	r2, r3
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <calculateReflowCurve+0x29c>)
 8002866:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8002868:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800286c:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 800286e:	e02e      	b.n	80028ce <calculateReflowCurve+0x14e>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 8002870:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <calculateReflowCurve+0x294>)
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe fa2d 	bl	8000cd4 <__aeabi_ui2f>
 800287a:	4604      	mov	r4, r0
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7fe fc47 	bl	8001110 <__aeabi_f2uiz>
 8002882:	4603      	mov	r3, r0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	4618      	mov	r0, r3
 8002888:	f7fe fa28 	bl	8000cdc <__aeabi_i2f>
 800288c:	4602      	mov	r2, r0
 800288e:	4b61      	ldr	r3, [pc, #388]	; (8002a14 <calculateReflowCurve+0x294>)
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f7fe fa75 	bl	8000d84 <__aeabi_fmul>
 800289a:	4603      	mov	r3, r0
 800289c:	4619      	mov	r1, r3
 800289e:	4620      	mov	r0, r4
 80028a0:	f7fe f968 	bl	8000b74 <__addsf3>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fc32 	bl	8001110 <__aeabi_f2uiz>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b2d9      	uxtb	r1, r3
 80028b0:	4a57      	ldr	r2, [pc, #348]	; (8002a10 <calculateReflowCurve+0x290>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4413      	add	r3, r2
 80028b6:	460a      	mov	r2, r1
 80028b8:	701a      	strb	r2, [r3, #0]
	index++;
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	3301      	adds	r3, #1
 80028be:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80028c0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7fe f955 	bl	8000b74 <__addsf3>
 80028ca:	4603      	mov	r3, r0
 80028cc:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 80028ce:	4b51      	ldr	r3, [pc, #324]	; (8002a14 <calculateReflowCurve+0x294>)
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7fe f9fe 	bl	8000cd4 <__aeabi_ui2f>
 80028d8:	4604      	mov	r4, r0
 80028da:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <calculateReflowCurve+0x294>)
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fa4f 	bl	8000d84 <__aeabi_fmul>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4619      	mov	r1, r3
 80028ea:	4620      	mov	r0, r4
 80028ec:	f7fe f942 	bl	8000b74 <__addsf3>
 80028f0:	4603      	mov	r3, r0
 80028f2:	461c      	mov	r4, r3
 80028f4:	4b47      	ldr	r3, [pc, #284]	; (8002a14 <calculateReflowCurve+0x294>)
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f9eb 	bl	8000cd4 <__aeabi_ui2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	4619      	mov	r1, r3
 8002902:	4620      	mov	r0, r4
 8002904:	f7fe fbe6 	bl	80010d4 <__aeabi_fcmple>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1b0      	bne.n	8002870 <calculateReflowCurve+0xf0>
	}
	PhaseIndex[3]=index;
 800290e:	69bb      	ldr	r3, [r7, #24]
 8002910:	b29a      	uxth	r2, r3
 8002912:	4b42      	ldr	r3, [pc, #264]	; (8002a1c <calculateReflowCurve+0x29c>)
 8002914:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 8002916:	4b3f      	ldr	r3, [pc, #252]	; (8002a14 <calculateReflowCurve+0x294>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	607b      	str	r3, [r7, #4]

	for(int i=0;i<Reflowduration;i++){
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e00a      	b.n	800293a <calculateReflowCurve+0x1ba>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 8002924:	4b3b      	ldr	r3, [pc, #236]	; (8002a14 <calculateReflowCurve+0x294>)
 8002926:	69d9      	ldr	r1, [r3, #28]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4413      	add	r3, r2
 800292e:	b2c9      	uxtb	r1, r1
 8002930:	4a37      	ldr	r2, [pc, #220]	; (8002a10 <calculateReflowCurve+0x290>)
 8002932:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	3301      	adds	r3, #1
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	429a      	cmp	r2, r3
 8002940:	dbf0      	blt.n	8002924 <calculateReflowCurve+0x1a4>
	}

	index = index + Reflowduration;
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	4413      	add	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
	ReflowCurve[index]=0;
 800294a:	4a31      	ldr	r2, [pc, #196]	; (8002a10 <calculateReflowCurve+0x290>)
 800294c:	69bb      	ldr	r3, [r7, #24]
 800294e:	4413      	add	r3, r2
 8002950:	2200      	movs	r2, #0
 8002952:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <calculateReflowCurve+0x29c>)
 800295a:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 800295c:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002960:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002962:	e02b      	b.n	80029bc <calculateReflowCurve+0x23c>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <calculateReflowCurve+0x294>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4618      	mov	r0, r3
 800296a:	f7fd fd3b 	bl	80003e4 <__aeabi_ui2d>
 800296e:	4604      	mov	r4, r0
 8002970:	460d      	mov	r5, r1
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7fd fd58 	bl	8000428 <__aeabi_f2d>
 8002978:	a323      	add	r3, pc, #140	; (adr r3, 8002a08 <calculateReflowCurve+0x288>)
 800297a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297e:	f7fd fdab 	bl	80004d8 <__aeabi_dmul>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	f7fd fbed 	bl	8000168 <__aeabi_dsub>
 800298e:	4602      	mov	r2, r0
 8002990:	460b      	mov	r3, r1
 8002992:	4610      	mov	r0, r2
 8002994:	4619      	mov	r1, r3
 8002996:	f7fe f877 	bl	8000a88 <__aeabi_d2uiz>
 800299a:	4603      	mov	r3, r0
 800299c:	b2d9      	uxtb	r1, r3
 800299e:	4a1c      	ldr	r2, [pc, #112]	; (8002a10 <calculateReflowCurve+0x290>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	4413      	add	r3, r2
 80029a4:	460a      	mov	r2, r1
 80029a6:	701a      	strb	r2, [r3, #0]
	index++;
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	3301      	adds	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 80029ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029b2:	6978      	ldr	r0, [r7, #20]
 80029b4:	f7fe f8de 	bl	8000b74 <__addsf3>
 80029b8:	4603      	mov	r3, r0
 80029ba:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 80029bc:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <calculateReflowCurve+0x294>)
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7fd fd0f 	bl	80003e4 <__aeabi_ui2d>
 80029c6:	4604      	mov	r4, r0
 80029c8:	460d      	mov	r5, r1
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7fd fd2c 	bl	8000428 <__aeabi_f2d>
 80029d0:	a30d      	add	r3, pc, #52	; (adr r3, 8002a08 <calculateReflowCurve+0x288>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fd7f 	bl	80004d8 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f7fd fbc1 	bl	8000168 <__aeabi_dsub>
 80029e6:	4602      	mov	r2, r0
 80029e8:	460b      	mov	r3, r1
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	4b0b      	ldr	r3, [pc, #44]	; (8002a20 <calculateReflowCurve+0x2a0>)
 80029f4:	f7fd fff6 	bl	80009e4 <__aeabi_dcmpge>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1b2      	bne.n	8002964 <calculateReflowCurve+0x1e4>

	}
}
 80029fe:	bf00      	nop
 8002a00:	bf00      	nop
 8002a02:	3720      	adds	r7, #32
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bdb0      	pop	{r4, r5, r7, pc}
 8002a08:	cccccccd 	.word	0xcccccccd
 8002a0c:	3ffccccc 	.word	0x3ffccccc
 8002a10:	20000308 	.word	0x20000308
 8002a14:	200012a8 	.word	0x200012a8
 8002a18:	41c00000 	.word	0x41c00000
 8002a1c:	20000224 	.word	0x20000224
 8002a20:	40380000 	.word	0x40380000

08002a24 <Draw_Reflow_Curve>:


void Draw_Reflow_Curve()	{
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
	float32_t dx = 0.20833; //275px / 660s / 500 ms
 8002a2a:	4b24      	ldr	r3, [pc, #144]	; (8002abc <Draw_Reflow_Curve+0x98>)
 8002a2c:	613b      	str	r3, [r7, #16]
	float32_t dy = 0.7143; //175px / 245 Grad
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <Draw_Reflow_Curve+0x9c>)
 8002a30:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 35;
 8002a32:	2323      	movs	r3, #35	; 0x23
 8002a34:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 240;
 8002a36:	23f0      	movs	r3, #240	; 0xf0
 8002a38:	607b      	str	r3, [r7, #4]
	uint32_t index = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]

	while(ReflowCurve[index] != 0){
 8002a3e:	e030      	b.n	8002aa2 <Draw_Reflow_Curve+0x7e>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 8002a40:	6978      	ldr	r0, [r7, #20]
 8002a42:	f7fe f947 	bl	8000cd4 <__aeabi_ui2f>
 8002a46:	4603      	mov	r3, r0
 8002a48:	6939      	ldr	r1, [r7, #16]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe f99a 	bl	8000d84 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fb5c 	bl	8001110 <__aeabi_f2uiz>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	18d4      	adds	r4, r2, r3
 8002a5e:	4a19      	ldr	r2, [pc, #100]	; (8002ac4 <Draw_Reflow_Curve+0xa0>)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	4413      	add	r3, r2
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7fe f934 	bl	8000cd4 <__aeabi_ui2f>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fe f987 	bl	8000d84 <__aeabi_fmul>
 8002a76:	4603      	mov	r3, r0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fe fb49 	bl	8001110 <__aeabi_f2uiz>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7fe fd64 	bl	8001554 <NextionDrawDot>
		index= index + 4;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 8002a92:	2205      	movs	r2, #5
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <Draw_Reflow_Curve+0xa4>)
 8002a96:	480d      	ldr	r0, [pc, #52]	; (8002acc <Draw_Reflow_Curve+0xa8>)
 8002a98:	f004 fe08 	bl	80076ac <strncmp>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <Draw_Reflow_Curve+0x8c>
	while(ReflowCurve[index] != 0){
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <Draw_Reflow_Curve+0xa0>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1c8      	bne.n	8002a40 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 8002aae:	e000      	b.n	8002ab2 <Draw_Reflow_Curve+0x8e>
			break;
 8002ab0:	bf00      	nop
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd90      	pop	{r4, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	3e555476 	.word	0x3e555476
 8002ac0:	3f36dc5d 	.word	0x3f36dc5d
 8002ac4:	20000308 	.word	0x20000308
 8002ac8:	0800b168 	.word	0x0800b168
 8002acc:	20000004 	.word	0x20000004

08002ad0 <startReflow>:


void startReflow()	{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	ReflowEnable = 1;
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <startReflow+0x24>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
	NEXTION_CMD("page 0");
 8002ada:	4807      	ldr	r0, [pc, #28]	; (8002af8 <startReflow+0x28>)
 8002adc:	f7fe fd1c 	bl	8001518 <NEXTION_CMD>
	Draw_Reflow_Curve();
 8002ae0:	f7ff ffa0 	bl	8002a24 <Draw_Reflow_Curve>
	TempDrawCounter = 0;
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <startReflow+0x2c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	601a      	str	r2, [r3, #0]
	Update_Page_0();
 8002aea:	f7fe fe43 	bl	8001774 <Update_Page_0>
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000021c 	.word	0x2000021c
 8002af8:	0800b284 	.word	0x0800b284
 8002afc:	20000230 	.word	0x20000230

08002b00 <stopReflow>:


void stopReflow()	{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

	if ( ReflowEnable == 1 )	{
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <stopReflow+0x28>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10b      	bne.n	8002b24 <stopReflow+0x24>
		ReflowEnable = 0;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <stopReflow+0x28>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	701a      	strb	r2, [r3, #0]
		TempDrawEnable = 0;
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <stopReflow+0x2c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
		sprintf(ConsoleMSG,"STOPPED");
 8002b18:	4905      	ldr	r1, [pc, #20]	; (8002b30 <stopReflow+0x30>)
 8002b1a:	4806      	ldr	r0, [pc, #24]	; (8002b34 <stopReflow+0x34>)
 8002b1c:	f004 fda6 	bl	800766c <siprintf>
		Update_Page_0();
 8002b20:	f7fe fe28 	bl	8001774 <Update_Page_0>
	}
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	2000021c 	.word	0x2000021c
 8002b2c:	2000022e 	.word	0x2000022e
 8002b30:	0800b28c 	.word	0x0800b28c
 8002b34:	200013dc 	.word	0x200013dc

08002b38 <beepBeep>:


void beepBeep()	{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0

	  if (BuzzerEnable == 1)	{
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <beepBeep+0xb0>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d14f      	bne.n	8002be4 <beepBeep+0xac>

		  if (HAL_GPIO_ReadPin(BUZZER_GPIO_Port, BUZZER_Pin) && ((HAL_GetTick() - TimerBUZZER) > 100))	{
 8002b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b48:	4828      	ldr	r0, [pc, #160]	; (8002bec <beepBeep+0xb4>)
 8002b4a:	f001 fb79 	bl	8004240 <HAL_GPIO_ReadPin>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d013      	beq.n	8002b7c <beepBeep+0x44>
 8002b54:	f000 fdfa 	bl	800374c <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b25      	ldr	r3, [pc, #148]	; (8002bf0 <beepBeep+0xb8>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	2b64      	cmp	r3, #100	; 0x64
 8002b62:	d90b      	bls.n	8002b7c <beepBeep+0x44>
			  TimerBUZZER = HAL_GetTick();
 8002b64:	f000 fdf2 	bl	800374c <HAL_GetTick>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <beepBeep+0xb8>)
 8002b6c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b74:	481d      	ldr	r0, [pc, #116]	; (8002bec <beepBeep+0xb4>)
 8002b76:	f001 fb7a 	bl	800426e <HAL_GPIO_WritePin>
 8002b7a:	e033      	b.n	8002be4 <beepBeep+0xac>
		  	}

		  else if (!(HAL_GPIO_ReadPin(BUZZER_GPIO_Port, BUZZER_Pin)) && ((HAL_GetTick() - TimerBUZZER) > 100) && (beep<2))	{
 8002b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b80:	481a      	ldr	r0, [pc, #104]	; (8002bec <beepBeep+0xb4>)
 8002b82:	f001 fb5d 	bl	8004240 <HAL_GPIO_ReadPin>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d11d      	bne.n	8002bc8 <beepBeep+0x90>
 8002b8c:	f000 fdde 	bl	800374c <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <beepBeep+0xb8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b64      	cmp	r3, #100	; 0x64
 8002b9a:	d915      	bls.n	8002bc8 <beepBeep+0x90>
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <beepBeep+0xbc>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d811      	bhi.n	8002bc8 <beepBeep+0x90>
			  TimerBUZZER = HAL_GetTick();
 8002ba4:	f000 fdd2 	bl	800374c <HAL_GetTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <beepBeep+0xb8>)
 8002bac:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <beepBeep+0xb4>)
 8002bb6:	f001 fb5a 	bl	800426e <HAL_GPIO_WritePin>
			  beep++;
 8002bba:	4b0e      	ldr	r3, [pc, #56]	; (8002bf4 <beepBeep+0xbc>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	b2da      	uxtb	r2, r3
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <beepBeep+0xbc>)
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e00d      	b.n	8002be4 <beepBeep+0xac>
		  	}
		  else	{
			  if ((HAL_GetTick() - TimerBUZZER) > 3000)	{
 8002bc8:	f000 fdc0 	bl	800374c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <beepBeep+0xb8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d903      	bls.n	8002be4 <beepBeep+0xac>
			 		beep=0;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <beepBeep+0xbc>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
			 	}
		  }
	  }

}
 8002be2:	e7ff      	b.n	8002be4 <beepBeep+0xac>
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	2000021d 	.word	0x2000021d
 8002bec:	40010800 	.word	0x40010800
 8002bf0:	200013d8 	.word	0x200013d8
 8002bf4:	200013f5 	.word	0x200013f5

08002bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Flash_Read_Data(0x0801FC00, (uint32_t *)&ReflowParameters);
 8002bfc:	4975      	ldr	r1, [pc, #468]	; (8002dd4 <main+0x1dc>)
 8002bfe:	4876      	ldr	r0, [pc, #472]	; (8002dd8 <main+0x1e0>)
 8002c00:	f7fe fb62 	bl	80012c8 <Flash_Read_Data>

	if (!(ReflowParameters.version == config_version))	{
 8002c04:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <main+0x1dc>)
 8002c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0a:	2b82      	cmp	r3, #130	; 0x82
 8002c0c:	d073      	beq.n	8002cf6 <main+0xfe>
		ReflowParameters.firstHeatUpRate3 = 0.75;
 8002c0e:	4b71      	ldr	r3, [pc, #452]	; (8002dd4 <main+0x1dc>)
 8002c10:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002c14:	66da      	str	r2, [r3, #108]	; 0x6c
		ReflowParameters.SoakTime3 = 100;
 8002c16:	4b6f      	ldr	r3, [pc, #444]	; (8002dd4 <main+0x1dc>)
 8002c18:	2264      	movs	r2, #100	; 0x64
 8002c1a:	675a      	str	r2, [r3, #116]	; 0x74
		ReflowParameters.SoakTempeture3 = 175;
 8002c1c:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <main+0x1dc>)
 8002c1e:	22af      	movs	r2, #175	; 0xaf
 8002c20:	671a      	str	r2, [r3, #112]	; 0x70
		ReflowParameters.secondHeatUpRate3 = 1;
 8002c22:	4b6c      	ldr	r3, [pc, #432]	; (8002dd4 <main+0x1dc>)
 8002c24:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c28:	679a      	str	r2, [r3, #120]	; 0x78
		ReflowParameters.ReflowTime3 = 90;
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <main+0x1dc>)
 8002c2c:	225a      	movs	r2, #90	; 0x5a
 8002c2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		ReflowParameters.ReflowTempeture3 = 240;
 8002c32:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <main+0x1dc>)
 8002c34:	22f0      	movs	r2, #240	; 0xf0
 8002c36:	67da      	str	r2, [r3, #124]	; 0x7c
		// Lead 183C https://www.chipquik.com/datasheets/TS391AX50.pdf
		ReflowParameters.firstHeatUpRate2 = 0.75;
 8002c38:	4b66      	ldr	r3, [pc, #408]	; (8002dd4 <main+0x1dc>)
 8002c3a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002c3e:	655a      	str	r2, [r3, #84]	; 0x54
		ReflowParameters.SoakTime2 = 100;
 8002c40:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <main+0x1dc>)
 8002c42:	2264      	movs	r2, #100	; 0x64
 8002c44:	65da      	str	r2, [r3, #92]	; 0x5c
		ReflowParameters.SoakTempeture2 = 150;
 8002c46:	4b63      	ldr	r3, [pc, #396]	; (8002dd4 <main+0x1dc>)
 8002c48:	2296      	movs	r2, #150	; 0x96
 8002c4a:	659a      	str	r2, [r3, #88]	; 0x58
		ReflowParameters.secondHeatUpRate2 = 1;
 8002c4c:	4b61      	ldr	r3, [pc, #388]	; (8002dd4 <main+0x1dc>)
 8002c4e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c52:	661a      	str	r2, [r3, #96]	; 0x60
		ReflowParameters.ReflowTime2 = 100;
 8002c54:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <main+0x1dc>)
 8002c56:	2264      	movs	r2, #100	; 0x64
 8002c58:	669a      	str	r2, [r3, #104]	; 0x68
		ReflowParameters.ReflowTempeture2 = 230;
 8002c5a:	4b5e      	ldr	r3, [pc, #376]	; (8002dd4 <main+0x1dc>)
 8002c5c:	22e6      	movs	r2, #230	; 0xe6
 8002c5e:	665a      	str	r2, [r3, #100]	; 0x64
		// Lead 148C
		ReflowParameters.firstHeatUpRate1 = 0.75;
 8002c60:	4b5c      	ldr	r3, [pc, #368]	; (8002dd4 <main+0x1dc>)
 8002c62:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002c66:	63da      	str	r2, [r3, #60]	; 0x3c
		ReflowParameters.SoakTime1 = 100;
 8002c68:	4b5a      	ldr	r3, [pc, #360]	; (8002dd4 <main+0x1dc>)
 8002c6a:	2264      	movs	r2, #100	; 0x64
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44
		ReflowParameters.SoakTempeture1 = 140;
 8002c6e:	4b59      	ldr	r3, [pc, #356]	; (8002dd4 <main+0x1dc>)
 8002c70:	228c      	movs	r2, #140	; 0x8c
 8002c72:	641a      	str	r2, [r3, #64]	; 0x40
		ReflowParameters.secondHeatUpRate1 = 1;
 8002c74:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <main+0x1dc>)
 8002c76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002c7a:	649a      	str	r2, [r3, #72]	; 0x48
		ReflowParameters.ReflowTime1 = 100;
 8002c7c:	4b55      	ldr	r3, [pc, #340]	; (8002dd4 <main+0x1dc>)
 8002c7e:	2264      	movs	r2, #100	; 0x64
 8002c80:	651a      	str	r2, [r3, #80]	; 0x50
		ReflowParameters.ReflowTempeture1 = 175;
 8002c82:	4b54      	ldr	r3, [pc, #336]	; (8002dd4 <main+0x1dc>)
 8002c84:	22af      	movs	r2, #175	; 0xaf
 8002c86:	64da      	str	r2, [r3, #76]	; 0x4c
		// Lead 138C http://www.chipquik.com/datasheets/TS391LT50.pdf
		ReflowParameters.firstHeatUpRate0 = 0.75;
 8002c88:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <main+0x1dc>)
 8002c8a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24
		ReflowParameters.SoakTime0 = 100;
 8002c90:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <main+0x1dc>)
 8002c92:	2264      	movs	r2, #100	; 0x64
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
		ReflowParameters.SoakTempeture0 = 130;
 8002c96:	4b4f      	ldr	r3, [pc, #316]	; (8002dd4 <main+0x1dc>)
 8002c98:	2282      	movs	r2, #130	; 0x82
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
		ReflowParameters.secondHeatUpRate0 = 1;
 8002c9c:	4b4d      	ldr	r3, [pc, #308]	; (8002dd4 <main+0x1dc>)
 8002c9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002ca2:	631a      	str	r2, [r3, #48]	; 0x30
		ReflowParameters.ReflowTime0 = 100;
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <main+0x1dc>)
 8002ca6:	2264      	movs	r2, #100	; 0x64
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
		ReflowParameters.ReflowTempeture0 = 165;
 8002caa:	4b4a      	ldr	r3, [pc, #296]	; (8002dd4 <main+0x1dc>)
 8002cac:	22a5      	movs	r2, #165	; 0xa5
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34
		// Lead default (138C)
		ReflowParameters.firstHeatUpRate = 0.75;
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <main+0x1dc>)
 8002cb2:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002cb6:	60da      	str	r2, [r3, #12]
		ReflowParameters.SoakTime = 100;
 8002cb8:	4b46      	ldr	r3, [pc, #280]	; (8002dd4 <main+0x1dc>)
 8002cba:	2264      	movs	r2, #100	; 0x64
 8002cbc:	615a      	str	r2, [r3, #20]
		ReflowParameters.SoakTempeture = 130;
 8002cbe:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <main+0x1dc>)
 8002cc0:	2282      	movs	r2, #130	; 0x82
 8002cc2:	611a      	str	r2, [r3, #16]
		ReflowParameters.secondHeatUpRate = 1;
 8002cc4:	4b43      	ldr	r3, [pc, #268]	; (8002dd4 <main+0x1dc>)
 8002cc6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002cca:	619a      	str	r2, [r3, #24]
		ReflowParameters.ReflowTime = 100;
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <main+0x1dc>)
 8002cce:	2264      	movs	r2, #100	; 0x64
 8002cd0:	621a      	str	r2, [r3, #32]
		ReflowParameters.ReflowTempeture = 165;
 8002cd2:	4b40      	ldr	r3, [pc, #256]	; (8002dd4 <main+0x1dc>)
 8002cd4:	22a5      	movs	r2, #165	; 0xa5
 8002cd6:	61da      	str	r2, [r3, #28]

		ReflowParameters.KP = 85;
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <main+0x1dc>)
 8002cda:	4a40      	ldr	r2, [pc, #256]	; (8002ddc <main+0x1e4>)
 8002cdc:	601a      	str	r2, [r3, #0]
		ReflowParameters.Ki = 0.05;
 8002cde:	4b3d      	ldr	r3, [pc, #244]	; (8002dd4 <main+0x1dc>)
 8002ce0:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <main+0x1e8>)
 8002ce2:	605a      	str	r2, [r3, #4]
		ReflowParameters.KD = 130;
 8002ce4:	4b3b      	ldr	r3, [pc, #236]	; (8002dd4 <main+0x1dc>)
 8002ce6:	4a3f      	ldr	r2, [pc, #252]	; (8002de4 <main+0x1ec>)
 8002ce8:	609a      	str	r2, [r3, #8]

		ReflowParameters.version = config_version;
 8002cea:	4b3a      	ldr	r3, [pc, #232]	; (8002dd4 <main+0x1dc>)
 8002cec:	2282      	movs	r2, #130	; 0x82
 8002cee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		SaveReflowParameters();
 8002cf2:	f7fe fb49 	bl	8001388 <SaveReflowParameters>
	}

	calculateReflowCurve();
 8002cf6:	f7ff fd43 	bl	8002780 <calculateReflowCurve>

	PID.Kp = ReflowParameters.KP;
 8002cfa:	4b36      	ldr	r3, [pc, #216]	; (8002dd4 <main+0x1dc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a3a      	ldr	r2, [pc, #232]	; (8002de8 <main+0x1f0>)
 8002d00:	6193      	str	r3, [r2, #24]
	PID.Ki = ReflowParameters.Ki;
 8002d02:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <main+0x1dc>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4a38      	ldr	r2, [pc, #224]	; (8002de8 <main+0x1f0>)
 8002d08:	61d3      	str	r3, [r2, #28]
	PID.Kd = ReflowParameters.KD;
 8002d0a:	4b32      	ldr	r3, [pc, #200]	; (8002dd4 <main+0x1dc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4a36      	ldr	r2, [pc, #216]	; (8002de8 <main+0x1f0>)
 8002d10:	6213      	str	r3, [r2, #32]

	arm_pid_init_f32(&PID, 1);
 8002d12:	2101      	movs	r1, #1
 8002d14:	4834      	ldr	r0, [pc, #208]	; (8002de8 <main+0x1f0>)
 8002d16:	f003 ffeb 	bl	8006cf0 <arm_pid_init_f32>
	beep=0;
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <main+0x1f4>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d20:	f000 fcbc 	bl	800369c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d24:	f000 f87c 	bl	8002e20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d28:	f000 f9f4 	bl	8003114 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002d2c:	f000 f8be 	bl	8002eac <MX_SPI1_Init>
  MX_TIM4_Init();
 8002d30:	f000 f978 	bl	8003024 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002d34:	f000 f8f2 	bl	8002f1c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002d38:	f000 f9c2 	bl	80030c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerBUZZER = HAL_GetTick();
 8002d3c:	f000 fd06 	bl	800374c <HAL_GetTick>
 8002d40:	4603      	mov	r3, r0
 8002d42:	4a2b      	ldr	r2, [pc, #172]	; (8002df0 <main+0x1f8>)
 8002d44:	6013      	str	r3, [r2, #0]
  TimerGui = HAL_GetTick();
 8002d46:	f000 fd01 	bl	800374c <HAL_GetTick>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <main+0x1fc>)
 8002d4e:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8002d50:	4829      	ldr	r0, [pc, #164]	; (8002df8 <main+0x200>)
 8002d52:	f002 fb3f 	bl	80053d4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002d56:	2100      	movs	r1, #0
 8002d58:	4828      	ldr	r0, [pc, #160]	; (8002dfc <main+0x204>)
 8002d5a:	f002 fbdd 	bl	8005518 <HAL_TIM_PWM_Start>

  htim1.Instance->CCR1 = 10;
 8002d5e:	4b27      	ldr	r3, [pc, #156]	; (8002dfc <main+0x204>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	220a      	movs	r2, #10
 8002d64:	635a      	str	r2, [r3, #52]	; 0x34

  //startReflow();
  HAL_Delay(2000);
 8002d66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002d6a:	f000 fcf9 	bl	8003760 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002d6e:	2205      	movs	r2, #5
 8002d70:	4923      	ldr	r1, [pc, #140]	; (8002e00 <main+0x208>)
 8002d72:	4824      	ldr	r0, [pc, #144]	; (8002e04 <main+0x20c>)
 8002d74:	f003 fb64 	bl	8006440 <HAL_UART_Receive_IT>
  sprintf(ConsoleMSG,"IDLE");
 8002d78:	4923      	ldr	r1, [pc, #140]	; (8002e08 <main+0x210>)
 8002d7a:	4824      	ldr	r0, [pc, #144]	; (8002e0c <main+0x214>)
 8002d7c:	f004 fc76 	bl	800766c <siprintf>
  Update_Page_0();
 8002d80:	f7fe fcf8 	bl	8001774 <Update_Page_0>
  Draw_Reflow_Curve();
 8002d84:	f7ff fe4e 	bl	8002a24 <Draw_Reflow_Curve>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002d88:	2205      	movs	r2, #5
 8002d8a:	491d      	ldr	r1, [pc, #116]	; (8002e00 <main+0x208>)
 8002d8c:	481d      	ldr	r0, [pc, #116]	; (8002e04 <main+0x20c>)
 8002d8e:	f003 fb57 	bl	8006440 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GetTick() - TimerGui > 505)	{
 8002d92:	f000 fcdb 	bl	800374c <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <main+0x1fc>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8002da2:	d306      	bcc.n	8002db2 <main+0x1ba>
		  TimerGui = HAL_GetTick();
 8002da4:	f000 fcd2 	bl	800374c <HAL_GetTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <main+0x1fc>)
 8002dac:	6013      	str	r3, [r2, #0]
		  HandleGui();
 8002dae:	f7fe fde7 	bl	8001980 <HandleGui>
	  	}
		if ((ReflowEnable == 1) && (ReflowIndex == PhaseIndex[4])) {
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <main+0x218>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d108      	bne.n	8002dcc <main+0x1d4>
 8002dba:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <main+0x21c>)
 8002dbc:	891a      	ldrh	r2, [r3, #8]
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <main+0x220>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d102      	bne.n	8002dcc <main+0x1d4>
			BuzzerEnable = 1;
 8002dc6:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <main+0x224>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
		}

	  beepBeep();
 8002dcc:	f7ff feb4 	bl	8002b38 <beepBeep>
	  if (HAL_GetTick() - TimerGui > 505)	{
 8002dd0:	e7df      	b.n	8002d92 <main+0x19a>
 8002dd2:	bf00      	nop
 8002dd4:	200012a8 	.word	0x200012a8
 8002dd8:	0801fc00 	.word	0x0801fc00
 8002ddc:	42aa0000 	.word	0x42aa0000
 8002de0:	3d4ccccd 	.word	0x3d4ccccd
 8002de4:	43020000 	.word	0x43020000
 8002de8:	20000288 	.word	0x20000288
 8002dec:	200013f5 	.word	0x200013f5
 8002df0:	200013d8 	.word	0x200013d8
 8002df4:	200013fc 	.word	0x200013fc
 8002df8:	20000240 	.word	0x20000240
 8002dfc:	20001338 	.word	0x20001338
 8002e00:	20000004 	.word	0x20000004
 8002e04:	200002c4 	.word	0x200002c4
 8002e08:	0800b294 	.word	0x0800b294
 8002e0c:	200013dc 	.word	0x200013dc
 8002e10:	2000021c 	.word	0x2000021c
 8002e14:	20000224 	.word	0x20000224
 8002e18:	2000021e 	.word	0x2000021e
 8002e1c:	2000021d 	.word	0x2000021d

08002e20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b090      	sub	sp, #64	; 0x40
 8002e24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e26:	f107 0318 	add.w	r3, r7, #24
 8002e2a:	2228      	movs	r2, #40	; 0x28
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 ffb4 	bl	8006d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e34:	1d3b      	adds	r3, r7, #4
 8002e36:	2200      	movs	r2, #0
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	605a      	str	r2, [r3, #4]
 8002e3c:	609a      	str	r2, [r3, #8]
 8002e3e:	60da      	str	r2, [r3, #12]
 8002e40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e42:	2301      	movs	r3, #1
 8002e44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e50:	2301      	movs	r3, #1
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e54:	2302      	movs	r3, #2
 8002e56:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002e5e:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e64:	f107 0318 	add.w	r3, r7, #24
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fa19 	bl	80042a0 <HAL_RCC_OscConfig>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002e74:	f000 f99c 	bl	80031b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e78:	230f      	movs	r3, #15
 8002e7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e8e:	1d3b      	adds	r3, r7, #4
 8002e90:	2102      	movs	r1, #2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f001 fc84 	bl	80047a0 <HAL_RCC_ClockConfig>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002e9e:	f000 f987 	bl	80031b0 <Error_Handler>
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	3740      	adds	r7, #64	; 0x40
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002eb2:	4a19      	ldr	r2, [pc, #100]	; (8002f18 <MX_SPI1_Init+0x6c>)
 8002eb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002eb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ebc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ec8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ecc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ee4:	2238      	movs	r2, #56	; 0x38
 8002ee6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002efc:	220a      	movs	r2, #10
 8002efe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f00:	4804      	ldr	r0, [pc, #16]	; (8002f14 <MX_SPI1_Init+0x68>)
 8002f02:	f001 fde7 	bl	8004ad4 <HAL_SPI_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002f0c:	f000 f950 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	20001380 	.word	0x20001380
 8002f18:	40013000 	.word	0x40013000

08002f1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b092      	sub	sp, #72	; 0x48
 8002f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
 8002f2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f30:	2200      	movs	r2, #0
 8002f32:	601a      	str	r2, [r3, #0]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	60da      	str	r2, [r3, #12]
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	615a      	str	r2, [r3, #20]
 8002f3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f40:	1d3b      	adds	r3, r7, #4
 8002f42:	2220      	movs	r2, #32
 8002f44:	2100      	movs	r1, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	f003 ff28 	bl	8006d9c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f4c:	4b33      	ldr	r3, [pc, #204]	; (800301c <MX_TIM1_Init+0x100>)
 8002f4e:	4a34      	ldr	r2, [pc, #208]	; (8003020 <MX_TIM1_Init+0x104>)
 8002f50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8002f52:	4b32      	ldr	r3, [pc, #200]	; (800301c <MX_TIM1_Init+0x100>)
 8002f54:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002f58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f5a:	4b30      	ldr	r3, [pc, #192]	; (800301c <MX_TIM1_Init+0x100>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002f60:	4b2e      	ldr	r3, [pc, #184]	; (800301c <MX_TIM1_Init+0x100>)
 8002f62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <MX_TIM1_Init+0x100>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f6e:	4b2b      	ldr	r3, [pc, #172]	; (800301c <MX_TIM1_Init+0x100>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <MX_TIM1_Init+0x100>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f7a:	4828      	ldr	r0, [pc, #160]	; (800301c <MX_TIM1_Init+0x100>)
 8002f7c:	f002 fa7c 	bl	8005478 <HAL_TIM_PWM_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002f86:	f000 f913 	bl	80031b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f96:	4619      	mov	r1, r3
 8002f98:	4820      	ldr	r0, [pc, #128]	; (800301c <MX_TIM1_Init+0x100>)
 8002f9a:	f003 f8b1 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002fa4:	f000 f904 	bl	80031b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002fa8:	2370      	movs	r3, #112	; 0x70
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc8:	2200      	movs	r2, #0
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4813      	ldr	r0, [pc, #76]	; (800301c <MX_TIM1_Init+0x100>)
 8002fce:	f002 fc4d 	bl	800586c <HAL_TIM_PWM_ConfigChannel>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002fd8:	f000 f8ea 	bl	80031b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ff0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ffa:	1d3b      	adds	r3, r7, #4
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4807      	ldr	r0, [pc, #28]	; (800301c <MX_TIM1_Init+0x100>)
 8003000:	f003 f8dc 	bl	80061bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 800300a:	f000 f8d1 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800300e:	4803      	ldr	r0, [pc, #12]	; (800301c <MX_TIM1_Init+0x100>)
 8003010:	f000 f994 	bl	800333c <HAL_TIM_MspPostInit>

}
 8003014:	bf00      	nop
 8003016:	3748      	adds	r7, #72	; 0x48
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20001338 	.word	0x20001338
 8003020:	40012c00 	.word	0x40012c00

08003024 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800302a:	f107 0308 	add.w	r3, r7, #8
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	605a      	str	r2, [r3, #4]
 8003034:	609a      	str	r2, [r3, #8]
 8003036:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003038:	463b      	mov	r3, r7
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <MX_TIM4_Init+0x98>)
 8003044:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000;
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003048:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 800304c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003050:	2200      	movs	r2, #0
 8003052:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003056:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800305a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305c:	4b16      	ldr	r3, [pc, #88]	; (80030b8 <MX_TIM4_Init+0x94>)
 800305e:	2200      	movs	r2, #0
 8003060:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003062:	4b15      	ldr	r3, [pc, #84]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003068:	4813      	ldr	r0, [pc, #76]	; (80030b8 <MX_TIM4_Init+0x94>)
 800306a:	f002 f963 	bl	8005334 <HAL_TIM_Base_Init>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003074:	f000 f89c 	bl	80031b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800307c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800307e:	f107 0308 	add.w	r3, r7, #8
 8003082:	4619      	mov	r1, r3
 8003084:	480c      	ldr	r0, [pc, #48]	; (80030b8 <MX_TIM4_Init+0x94>)
 8003086:	f002 fcaf 	bl	80059e8 <HAL_TIM_ConfigClockSource>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003090:	f000 f88e 	bl	80031b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800309c:	463b      	mov	r3, r7
 800309e:	4619      	mov	r1, r3
 80030a0:	4805      	ldr	r0, [pc, #20]	; (80030b8 <MX_TIM4_Init+0x94>)
 80030a2:	f003 f82d 	bl	8006100 <HAL_TIMEx_MasterConfigSynchronization>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80030ac:	f000 f880 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030b0:	bf00      	nop
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000240 	.word	0x20000240
 80030bc:	40000800 	.word	0x40000800

080030c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030c6:	4a12      	ldr	r2, [pc, #72]	; (8003110 <MX_USART1_UART_Init+0x50>)
 80030c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030cc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80030d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030d2:	4b0e      	ldr	r3, [pc, #56]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80030de:	4b0b      	ldr	r3, [pc, #44]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80030e4:	4b09      	ldr	r3, [pc, #36]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030e6:	220c      	movs	r2, #12
 80030e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030ea:	4b08      	ldr	r3, [pc, #32]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80030f0:	4b06      	ldr	r3, [pc, #24]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80030f6:	4805      	ldr	r0, [pc, #20]	; (800310c <MX_USART1_UART_Init+0x4c>)
 80030f8:	f003 f8c3 	bl	8006282 <HAL_UART_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003102:	f000 f855 	bl	80031b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	200002c4 	.word	0x200002c4
 8003110:	40013800 	.word	0x40013800

08003114 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311a:	f107 0308 	add.w	r3, r7, #8
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003128:	4b1f      	ldr	r3, [pc, #124]	; (80031a8 <MX_GPIO_Init+0x94>)
 800312a:	699b      	ldr	r3, [r3, #24]
 800312c:	4a1e      	ldr	r2, [pc, #120]	; (80031a8 <MX_GPIO_Init+0x94>)
 800312e:	f043 0320 	orr.w	r3, r3, #32
 8003132:	6193      	str	r3, [r2, #24]
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <MX_GPIO_Init+0x94>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	607b      	str	r3, [r7, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <MX_GPIO_Init+0x94>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <MX_GPIO_Init+0x94>)
 8003146:	f043 0304 	orr.w	r3, r3, #4
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b16      	ldr	r3, [pc, #88]	; (80031a8 <MX_GPIO_Init+0x94>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8003158:	2200      	movs	r2, #0
 800315a:	f248 0110 	movw	r1, #32784	; 0x8010
 800315e:	4813      	ldr	r0, [pc, #76]	; (80031ac <MX_GPIO_Init+0x98>)
 8003160:	f001 f885 	bl	800426e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8003164:	2310      	movs	r3, #16
 8003166:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003168:	2301      	movs	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003170:	2302      	movs	r3, #2
 8003172:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8003174:	f107 0308 	add.w	r3, r7, #8
 8003178:	4619      	mov	r1, r3
 800317a:	480c      	ldr	r0, [pc, #48]	; (80031ac <MX_GPIO_Init+0x98>)
 800317c:	f000 fedc 	bl	8003f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8003180:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003184:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003186:	2301      	movs	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800318a:	2302      	movs	r3, #2
 800318c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	2302      	movs	r3, #2
 8003190:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	4619      	mov	r1, r3
 8003198:	4804      	ldr	r0, [pc, #16]	; (80031ac <MX_GPIO_Init+0x98>)
 800319a:	f000 fecd 	bl	8003f38 <HAL_GPIO_Init>

}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40010800 	.word	0x40010800

080031b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031b4:	b672      	cpsid	i
}
 80031b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031b8:	e7fe      	b.n	80031b8 <Error_Handler+0x8>
	...

080031bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80031c2:	4b15      	ldr	r3, [pc, #84]	; (8003218 <HAL_MspInit+0x5c>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	4a14      	ldr	r2, [pc, #80]	; (8003218 <HAL_MspInit+0x5c>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	6193      	str	r3, [r2, #24]
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_MspInit+0x5c>)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031da:	4b0f      	ldr	r3, [pc, #60]	; (8003218 <HAL_MspInit+0x5c>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	4a0e      	ldr	r2, [pc, #56]	; (8003218 <HAL_MspInit+0x5c>)
 80031e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031e4:	61d3      	str	r3, [r2, #28]
 80031e6:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <HAL_MspInit+0x5c>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_MspInit+0x60>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	4a04      	ldr	r2, [pc, #16]	; (800321c <HAL_MspInit+0x60>)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800320e:	bf00      	nop
 8003210:	3714      	adds	r7, #20
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40021000 	.word	0x40021000
 800321c:	40010000 	.word	0x40010000

08003220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0310 	add.w	r3, r7, #16
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1b      	ldr	r2, [pc, #108]	; (80032a8 <HAL_SPI_MspInit+0x88>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d12f      	bne.n	80032a0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_SPI_MspInit+0x8c>)
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_SPI_MspInit+0x8c>)
 8003246:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800324a:	6193      	str	r3, [r2, #24]
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_SPI_MspInit+0x8c>)
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_SPI_MspInit+0x8c>)
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	4a13      	ldr	r2, [pc, #76]	; (80032ac <HAL_SPI_MspInit+0x8c>)
 800325e:	f043 0304 	orr.w	r3, r3, #4
 8003262:	6193      	str	r3, [r2, #24]
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_SPI_MspInit+0x8c>)
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003270:	2320      	movs	r3, #32
 8003272:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003274:	2302      	movs	r3, #2
 8003276:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003278:	2303      	movs	r3, #3
 800327a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800327c:	f107 0310 	add.w	r3, r7, #16
 8003280:	4619      	mov	r1, r3
 8003282:	480b      	ldr	r0, [pc, #44]	; (80032b0 <HAL_SPI_MspInit+0x90>)
 8003284:	f000 fe58 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003288:	2340      	movs	r3, #64	; 0x40
 800328a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003294:	f107 0310 	add.w	r3, r7, #16
 8003298:	4619      	mov	r1, r3
 800329a:	4805      	ldr	r0, [pc, #20]	; (80032b0 <HAL_SPI_MspInit+0x90>)
 800329c:	f000 fe4c 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032a0:	bf00      	nop
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40013000 	.word	0x40013000
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40010800 	.word	0x40010800

080032b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a09      	ldr	r2, [pc, #36]	; (80032e8 <HAL_TIM_PWM_MspInit+0x34>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d10b      	bne.n	80032de <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_TIM_PWM_MspInit+0x38>)
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	4a08      	ldr	r2, [pc, #32]	; (80032ec <HAL_TIM_PWM_MspInit+0x38>)
 80032cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d0:	6193      	str	r3, [r2, #24]
 80032d2:	4b06      	ldr	r3, [pc, #24]	; (80032ec <HAL_TIM_PWM_MspInit+0x38>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bc80      	pop	{r7}
 80032e6:	4770      	bx	lr
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_TIM_Base_MspInit+0x44>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d113      	bne.n	800332a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_TIM_Base_MspInit+0x48>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4a0c      	ldr	r2, [pc, #48]	; (8003338 <HAL_TIM_Base_MspInit+0x48>)
 8003308:	f043 0304 	orr.w	r3, r3, #4
 800330c:	61d3      	str	r3, [r2, #28]
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_TIM_Base_MspInit+0x48>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800331a:	2200      	movs	r2, #0
 800331c:	2101      	movs	r1, #1
 800331e:	201e      	movs	r0, #30
 8003320:	f000 fb19 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003324:	201e      	movs	r0, #30
 8003326:	f000 fb32 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40000800 	.word	0x40000800
 8003338:	40021000 	.word	0x40021000

0800333c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003344:	f107 0310 	add.w	r3, r7, #16
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a10      	ldr	r2, [pc, #64]	; (8003398 <HAL_TIM_MspPostInit+0x5c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d118      	bne.n	800338e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335c:	4b0f      	ldr	r3, [pc, #60]	; (800339c <HAL_TIM_MspPostInit+0x60>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	4a0e      	ldr	r2, [pc, #56]	; (800339c <HAL_TIM_MspPostInit+0x60>)
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	6193      	str	r3, [r2, #24]
 8003368:	4b0c      	ldr	r3, [pc, #48]	; (800339c <HAL_TIM_MspPostInit+0x60>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003378:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337a:	2302      	movs	r3, #2
 800337c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337e:	2302      	movs	r3, #2
 8003380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f107 0310 	add.w	r3, r7, #16
 8003386:	4619      	mov	r1, r3
 8003388:	4805      	ldr	r0, [pc, #20]	; (80033a0 <HAL_TIM_MspPostInit+0x64>)
 800338a:	f000 fdd5 	bl	8003f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800338e:	bf00      	nop
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40012c00 	.word	0x40012c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40010800 	.word	0x40010800

080033a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0310 	add.w	r3, r7, #16
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a20      	ldr	r2, [pc, #128]	; (8003440 <HAL_UART_MspInit+0x9c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d139      	bne.n	8003438 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c4:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <HAL_UART_MspInit+0xa0>)
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	4a1e      	ldr	r2, [pc, #120]	; (8003444 <HAL_UART_MspInit+0xa0>)
 80033ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ce:	6193      	str	r3, [r2, #24]
 80033d0:	4b1c      	ldr	r3, [pc, #112]	; (8003444 <HAL_UART_MspInit+0xa0>)
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d8:	60fb      	str	r3, [r7, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033dc:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_UART_MspInit+0xa0>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_UART_MspInit+0xa0>)
 80033e2:	f043 0304 	orr.w	r3, r3, #4
 80033e6:	6193      	str	r3, [r2, #24]
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_UART_MspInit+0xa0>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 0304 	and.w	r3, r3, #4
 80033f0:	60bb      	str	r3, [r7, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fe:	2303      	movs	r3, #3
 8003400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f107 0310 	add.w	r3, r7, #16
 8003406:	4619      	mov	r1, r3
 8003408:	480f      	ldr	r0, [pc, #60]	; (8003448 <HAL_UART_MspInit+0xa4>)
 800340a:	f000 fd95 	bl	8003f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800340e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003414:	2300      	movs	r3, #0
 8003416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341c:	f107 0310 	add.w	r3, r7, #16
 8003420:	4619      	mov	r1, r3
 8003422:	4809      	ldr	r0, [pc, #36]	; (8003448 <HAL_UART_MspInit+0xa4>)
 8003424:	f000 fd88 	bl	8003f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003428:	2200      	movs	r2, #0
 800342a:	2100      	movs	r1, #0
 800342c:	2025      	movs	r0, #37	; 0x25
 800342e:	f000 fa92 	bl	8003956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003432:	2025      	movs	r0, #37	; 0x25
 8003434:	f000 faab 	bl	800398e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003438:	bf00      	nop
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40013800 	.word	0x40013800
 8003444:	40021000 	.word	0x40021000
 8003448:	40010800 	.word	0x40010800

0800344c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <NMI_Handler+0x4>

08003452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003456:	e7fe      	b.n	8003456 <HardFault_Handler+0x4>

08003458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800345c:	e7fe      	b.n	800345c <MemManage_Handler+0x4>

0800345e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003462:	e7fe      	b.n	8003462 <BusFault_Handler+0x4>

08003464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003468:	e7fe      	b.n	8003468 <UsageFault_Handler+0x4>

0800346a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003476:	b480      	push	{r7}
 8003478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003486:	bf00      	nop
 8003488:	46bd      	mov	sp, r7
 800348a:	bc80      	pop	{r7}
 800348c:	4770      	bx	lr

0800348e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003492:	f000 f949 	bl	8003728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <TIM4_IRQHandler+0x10>)
 80034a2:	f002 f8db 	bl	800565c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000240 	.word	0x20000240

080034b0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80034b4:	4802      	ldr	r0, [pc, #8]	; (80034c0 <USART1_IRQHandler+0x10>)
 80034b6:	f002 fff3 	bl	80064a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200002c4 	.word	0x200002c4

080034c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
	return 1;
 80034c8:	2301      	movs	r3, #1
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <_kill>:

int _kill(int pid, int sig)
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b082      	sub	sp, #8
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034dc:	f003 fc34 	bl	8006d48 <__errno>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2216      	movs	r2, #22
 80034e4:	601a      	str	r2, [r3, #0]
	return -1;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <_exit>:

void _exit (int status)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034fa:	f04f 31ff 	mov.w	r1, #4294967295
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ffe7 	bl	80034d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003504:	e7fe      	b.n	8003504 <_exit+0x12>

08003506 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003512:	2300      	movs	r3, #0
 8003514:	617b      	str	r3, [r7, #20]
 8003516:	e00a      	b.n	800352e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003518:	f3af 8000 	nop.w
 800351c:	4601      	mov	r1, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	60ba      	str	r2, [r7, #8]
 8003524:	b2ca      	uxtb	r2, r1
 8003526:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3301      	adds	r3, #1
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	dbf0      	blt.n	8003518 <_read+0x12>
	}

return len;
 8003536:	687b      	ldr	r3, [r7, #4]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e009      	b.n	8003566 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	60ba      	str	r2, [r7, #8]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3301      	adds	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	429a      	cmp	r2, r3
 800356c:	dbf1      	blt.n	8003552 <_write+0x12>
	}
	return len;
 800356e:	687b      	ldr	r3, [r7, #4]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <_close>:

int _close(int file)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	return -1;
 8003580:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800359e:	605a      	str	r2, [r3, #4]
	return 0;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <_isatty>:

int _isatty(int file)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
	return 1;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	return 0;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035e0:	4a14      	ldr	r2, [pc, #80]	; (8003634 <_sbrk+0x5c>)
 80035e2:	4b15      	ldr	r3, [pc, #84]	; (8003638 <_sbrk+0x60>)
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ec:	4b13      	ldr	r3, [pc, #76]	; (800363c <_sbrk+0x64>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d102      	bne.n	80035fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <_sbrk+0x64>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	; (8003640 <_sbrk+0x68>)
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035fa:	4b10      	ldr	r3, [pc, #64]	; (800363c <_sbrk+0x64>)
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4413      	add	r3, r2
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	429a      	cmp	r2, r3
 8003606:	d207      	bcs.n	8003618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003608:	f003 fb9e 	bl	8006d48 <__errno>
 800360c:	4603      	mov	r3, r0
 800360e:	220c      	movs	r2, #12
 8003610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003612:	f04f 33ff 	mov.w	r3, #4294967295
 8003616:	e009      	b.n	800362c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003618:	4b08      	ldr	r3, [pc, #32]	; (800363c <_sbrk+0x64>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800361e:	4b07      	ldr	r3, [pc, #28]	; (800363c <_sbrk+0x64>)
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	4a05      	ldr	r2, [pc, #20]	; (800363c <_sbrk+0x64>)
 8003628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800362a:	68fb      	ldr	r3, [r7, #12]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20005000 	.word	0x20005000
 8003638:	00000400 	.word	0x00000400
 800363c:	20000234 	.word	0x20000234
 8003640:	20001438 	.word	0x20001438

08003644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003650:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003652:	e003      	b.n	800365c <LoopCopyDataInit>

08003654 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003654:	4b0b      	ldr	r3, [pc, #44]	; (8003684 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003656:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003658:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800365a:	3104      	adds	r1, #4

0800365c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800365c:	480a      	ldr	r0, [pc, #40]	; (8003688 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800365e:	4b0b      	ldr	r3, [pc, #44]	; (800368c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003660:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003662:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003664:	d3f6      	bcc.n	8003654 <CopyDataInit>
  ldr r2, =_sbss
 8003666:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003668:	e002      	b.n	8003670 <LoopFillZerobss>

0800366a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800366c:	f842 3b04 	str.w	r3, [r2], #4

08003670 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003672:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003674:	d3f9      	bcc.n	800366a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003676:	f7ff ffe5 	bl	8003644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800367a:	f003 fb6b 	bl	8006d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800367e:	f7ff fabb 	bl	8002bf8 <main>
  bx lr
 8003682:	4770      	bx	lr
  ldr r3, =_sidata
 8003684:	0800b77c 	.word	0x0800b77c
  ldr r0, =_sdata
 8003688:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800368c:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8003690:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8003694:	20001438 	.word	0x20001438

08003698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003698:	e7fe      	b.n	8003698 <ADC1_2_IRQHandler>
	...

0800369c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <HAL_Init+0x28>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a07      	ldr	r2, [pc, #28]	; (80036c4 <HAL_Init+0x28>)
 80036a6:	f043 0310 	orr.w	r3, r3, #16
 80036aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ac:	2003      	movs	r0, #3
 80036ae:	f000 f947 	bl	8003940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036b2:	2000      	movs	r0, #0
 80036b4:	f000 f808 	bl	80036c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036b8:	f7ff fd80 	bl	80031bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40022000 	.word	0x40022000

080036c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036d0:	4b12      	ldr	r3, [pc, #72]	; (800371c <HAL_InitTick+0x54>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_InitTick+0x58>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036de:	fbb3 f3f1 	udiv	r3, r3, r1
 80036e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f95f 	bl	80039aa <HAL_SYSTICK_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00e      	b.n	8003714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d80a      	bhi.n	8003712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036fc:	2200      	movs	r2, #0
 80036fe:	6879      	ldr	r1, [r7, #4]
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	f000 f927 	bl	8003956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003708:	4a06      	ldr	r2, [pc, #24]	; (8003724 <HAL_InitTick+0x5c>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e000      	b.n	8003714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
}
 8003714:	4618      	mov	r0, r3
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	2000000c 	.word	0x2000000c
 8003720:	20000014 	.word	0x20000014
 8003724:	20000010 	.word	0x20000010

08003728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_IncTick+0x1c>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	461a      	mov	r2, r3
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_IncTick+0x20>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4413      	add	r3, r2
 8003738:	4a03      	ldr	r2, [pc, #12]	; (8003748 <HAL_IncTick+0x20>)
 800373a:	6013      	str	r3, [r2, #0]
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	20000014 	.word	0x20000014
 8003748:	20001400 	.word	0x20001400

0800374c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return uwTick;
 8003750:	4b02      	ldr	r3, [pc, #8]	; (800375c <HAL_GetTick+0x10>)
 8003752:	681b      	ldr	r3, [r3, #0]
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	20001400 	.word	0x20001400

08003760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003768:	f7ff fff0 	bl	800374c <HAL_GetTick>
 800376c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d005      	beq.n	8003786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <HAL_Delay+0x44>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003786:	bf00      	nop
 8003788:	f7ff ffe0 	bl	800374c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	429a      	cmp	r2, r3
 8003796:	d8f7      	bhi.n	8003788 <HAL_Delay+0x28>
  {
  }
}
 8003798:	bf00      	nop
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000014 	.word	0x20000014

080037a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037b8:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037c4:	4013      	ands	r3, r2
 80037c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037da:	4a04      	ldr	r2, [pc, #16]	; (80037ec <__NVIC_SetPriorityGrouping+0x44>)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	60d3      	str	r3, [r2, #12]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000ed00 	.word	0xe000ed00

080037f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037f4:	4b04      	ldr	r3, [pc, #16]	; (8003808 <__NVIC_GetPriorityGrouping+0x18>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0a1b      	lsrs	r3, r3, #8
 80037fa:	f003 0307 	and.w	r3, r3, #7
}
 80037fe:	4618      	mov	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	bc80      	pop	{r7}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	4603      	mov	r3, r0
 8003814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	2b00      	cmp	r3, #0
 800381c:	db0b      	blt.n	8003836 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4906      	ldr	r1, [pc, #24]	; (8003840 <__NVIC_EnableIRQ+0x34>)
 8003826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	2001      	movs	r0, #1
 800382e:	fa00 f202 	lsl.w	r2, r0, r2
 8003832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	e000e100 	.word	0xe000e100

08003844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003854:	2b00      	cmp	r3, #0
 8003856:	db0a      	blt.n	800386e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	b2da      	uxtb	r2, r3
 800385c:	490c      	ldr	r1, [pc, #48]	; (8003890 <__NVIC_SetPriority+0x4c>)
 800385e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003862:	0112      	lsls	r2, r2, #4
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	440b      	add	r3, r1
 8003868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800386c:	e00a      	b.n	8003884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4908      	ldr	r1, [pc, #32]	; (8003894 <__NVIC_SetPriority+0x50>)
 8003874:	79fb      	ldrb	r3, [r7, #7]
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	3b04      	subs	r3, #4
 800387c:	0112      	lsls	r2, r2, #4
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	440b      	add	r3, r1
 8003882:	761a      	strb	r2, [r3, #24]
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bc80      	pop	{r7}
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f1c3 0307 	rsb	r3, r3, #7
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf28      	it	cs
 80038b6:	2304      	movcs	r3, #4
 80038b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3304      	adds	r3, #4
 80038be:	2b06      	cmp	r3, #6
 80038c0:	d902      	bls.n	80038c8 <NVIC_EncodePriority+0x30>
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3b03      	subs	r3, #3
 80038c6:	e000      	b.n	80038ca <NVIC_EncodePriority+0x32>
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038cc:	f04f 32ff 	mov.w	r2, #4294967295
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	401a      	ands	r2, r3
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038e0:	f04f 31ff 	mov.w	r1, #4294967295
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ea:	43d9      	mvns	r1, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f0:	4313      	orrs	r3, r2
         );
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3724      	adds	r7, #36	; 0x24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800390c:	d301      	bcc.n	8003912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800390e:	2301      	movs	r3, #1
 8003910:	e00f      	b.n	8003932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <SysTick_Config+0x40>)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3b01      	subs	r3, #1
 8003918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800391a:	210f      	movs	r1, #15
 800391c:	f04f 30ff 	mov.w	r0, #4294967295
 8003920:	f7ff ff90 	bl	8003844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003924:	4b05      	ldr	r3, [pc, #20]	; (800393c <SysTick_Config+0x40>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800392a:	4b04      	ldr	r3, [pc, #16]	; (800393c <SysTick_Config+0x40>)
 800392c:	2207      	movs	r2, #7
 800392e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	e000e010 	.word	0xe000e010

08003940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff2d 	bl	80037a8 <__NVIC_SetPriorityGrouping>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003956:	b580      	push	{r7, lr}
 8003958:	b086      	sub	sp, #24
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003968:	f7ff ff42 	bl	80037f0 <__NVIC_GetPriorityGrouping>
 800396c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	6978      	ldr	r0, [r7, #20]
 8003974:	f7ff ff90 	bl	8003898 <NVIC_EncodePriority>
 8003978:	4602      	mov	r2, r0
 800397a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff ff5f 	bl	8003844 <__NVIC_SetPriority>
}
 8003986:	bf00      	nop
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b082      	sub	sp, #8
 8003992:	af00      	add	r7, sp, #0
 8003994:	4603      	mov	r3, r0
 8003996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff ff35 	bl	800380c <__NVIC_EnableIRQ>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7ff ffa2 	bl	80038fc <SysTick_Config>
 80039b8:	4603      	mov	r3, r0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d008      	beq.n	80039ea <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2204      	movs	r2, #4
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e020      	b.n	8003a2c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 020e 	bic.w	r2, r2, #14
 80039f8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0201 	bic.w	r2, r2, #1
 8003a08:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2101      	movs	r1, #1
 8003a14:	fa01 f202 	lsl.w	r2, r1, r2
 8003a18:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
	...

08003a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d005      	beq.n	8003a5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e051      	b.n	8003afe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 020e 	bic.w	r2, r2, #14
 8003a68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <HAL_DMA_Abort_IT+0xd0>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d029      	beq.n	8003ad8 <HAL_DMA_Abort_IT+0xa0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a20      	ldr	r2, [pc, #128]	; (8003b0c <HAL_DMA_Abort_IT+0xd4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d022      	beq.n	8003ad4 <HAL_DMA_Abort_IT+0x9c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a1f      	ldr	r2, [pc, #124]	; (8003b10 <HAL_DMA_Abort_IT+0xd8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d01a      	beq.n	8003ace <HAL_DMA_Abort_IT+0x96>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1d      	ldr	r2, [pc, #116]	; (8003b14 <HAL_DMA_Abort_IT+0xdc>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d012      	beq.n	8003ac8 <HAL_DMA_Abort_IT+0x90>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <HAL_DMA_Abort_IT+0xe0>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_DMA_Abort_IT+0x8a>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a1a      	ldr	r2, [pc, #104]	; (8003b1c <HAL_DMA_Abort_IT+0xe4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d102      	bne.n	8003abc <HAL_DMA_Abort_IT+0x84>
 8003ab6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003aba:	e00e      	b.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac0:	e00b      	b.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac6:	e008      	b.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003acc:	e005      	b.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad2:	e002      	b.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	e000      	b.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	4a11      	ldr	r2, [pc, #68]	; (8003b20 <HAL_DMA_Abort_IT+0xe8>)
 8003adc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	4798      	blx	r3
    } 
  }
  return status;
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40020008 	.word	0x40020008
 8003b0c:	4002001c 	.word	0x4002001c
 8003b10:	40020030 	.word	0x40020030
 8003b14:	40020044 	.word	0x40020044
 8003b18:	40020058 	.word	0x40020058
 8003b1c:	4002006c 	.word	0x4002006c
 8003b20:	40020000 	.word	0x40020000

08003b24 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003b36:	2300      	movs	r3, #0
 8003b38:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b3e:	4b2f      	ldr	r3, [pc, #188]	; (8003bfc <HAL_FLASH_Program+0xd8>)
 8003b40:	7e1b      	ldrb	r3, [r3, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_FLASH_Program+0x26>
 8003b46:	2302      	movs	r3, #2
 8003b48:	e054      	b.n	8003bf4 <HAL_FLASH_Program+0xd0>
 8003b4a:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <HAL_FLASH_Program+0xd8>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003b50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b54:	f000 f8b2 	bl	8003cbc <FLASH_WaitForLastOperation>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d144      	bne.n	8003bec <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d102      	bne.n	8003b6e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	757b      	strb	r3, [r7, #21]
 8003b6c:	e007      	b.n	8003b7e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d102      	bne.n	8003b7a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003b74:	2302      	movs	r3, #2
 8003b76:	757b      	strb	r3, [r7, #21]
 8003b78:	e001      	b.n	8003b7e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003b7a:	2304      	movs	r3, #4
 8003b7c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	75bb      	strb	r3, [r7, #22]
 8003b82:	e02d      	b.n	8003be0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003b84:	7dbb      	ldrb	r3, [r7, #22]
 8003b86:	005a      	lsls	r2, r3, #1
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	eb02 0c03 	add.w	ip, r2, r3
 8003b8e:	7dbb      	ldrb	r3, [r7, #22]
 8003b90:	0119      	lsls	r1, r3, #4
 8003b92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003b96:	f1c1 0620 	rsb	r6, r1, #32
 8003b9a:	f1a1 0020 	sub.w	r0, r1, #32
 8003b9e:	fa22 f401 	lsr.w	r4, r2, r1
 8003ba2:	fa03 f606 	lsl.w	r6, r3, r6
 8003ba6:	4334      	orrs	r4, r6
 8003ba8:	fa23 f000 	lsr.w	r0, r3, r0
 8003bac:	4304      	orrs	r4, r0
 8003bae:	fa23 f501 	lsr.w	r5, r3, r1
 8003bb2:	b2a3      	uxth	r3, r4
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4660      	mov	r0, ip
 8003bb8:	f000 f864 	bl	8003c84 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003bbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bc0:	f000 f87c 	bl	8003cbc <FLASH_WaitForLastOperation>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003bc8:	4b0d      	ldr	r3, [pc, #52]	; (8003c00 <HAL_FLASH_Program+0xdc>)
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <HAL_FLASH_Program+0xdc>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003bda:	7dbb      	ldrb	r3, [r7, #22]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	75bb      	strb	r3, [r7, #22]
 8003be0:	7dba      	ldrb	r2, [r7, #22]
 8003be2:	7d7b      	ldrb	r3, [r7, #21]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3cd      	bcc.n	8003b84 <HAL_FLASH_Program+0x60>
 8003be8:	e000      	b.n	8003bec <HAL_FLASH_Program+0xc8>
      {
        break;
 8003bea:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <HAL_FLASH_Program+0xd8>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	761a      	strb	r2, [r3, #24]

  return status;
 8003bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfc:	20001408 	.word	0x20001408
 8003c00:	40022000 	.word	0x40022000

08003c04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	; (8003c44 <HAL_FLASH_Unlock+0x40>)
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_FLASH_Unlock+0x40>)
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <HAL_FLASH_Unlock+0x44>)
 8003c1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003c20:	4b08      	ldr	r3, [pc, #32]	; (8003c44 <HAL_FLASH_Unlock+0x40>)
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <HAL_FLASH_Unlock+0x48>)
 8003c24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003c26:	4b07      	ldr	r3, [pc, #28]	; (8003c44 <HAL_FLASH_Unlock+0x40>)
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003c36:	79fb      	ldrb	r3, [r7, #7]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	370c      	adds	r7, #12
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40022000 	.word	0x40022000
 8003c48:	45670123 	.word	0x45670123
 8003c4c:	cdef89ab 	.word	0xcdef89ab

08003c50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003c54:	4b05      	ldr	r3, [pc, #20]	; (8003c6c <HAL_FLASH_Lock+0x1c>)
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	4a04      	ldr	r2, [pc, #16]	; (8003c6c <HAL_FLASH_Lock+0x1c>)
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40022000 	.word	0x40022000

08003c70 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003c74:	4b02      	ldr	r3, [pc, #8]	; (8003c80 <HAL_FLASH_GetError+0x10>)
 8003c76:	69db      	ldr	r3, [r3, #28]
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bc80      	pop	{r7}
 8003c7e:	4770      	bx	lr
 8003c80:	20001408 	.word	0x20001408

08003c84 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <FLASH_Program_HalfWord+0x30>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <FLASH_Program_HalfWord+0x34>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <FLASH_Program_HalfWord+0x34>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	801a      	strh	r2, [r3, #0]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	20001408 	.word	0x20001408
 8003cb8:	40022000 	.word	0x40022000

08003cbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003cc4:	f7ff fd42 	bl	800374c <HAL_GetTick>
 8003cc8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cca:	e010      	b.n	8003cee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d00c      	beq.n	8003cee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d007      	beq.n	8003cea <FLASH_WaitForLastOperation+0x2e>
 8003cda:	f7ff fd37 	bl	800374c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d201      	bcs.n	8003cee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e025      	b.n	8003d3a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003cee:	4b15      	ldr	r3, [pc, #84]	; (8003d44 <FLASH_WaitForLastOperation+0x88>)
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e8      	bne.n	8003ccc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <FLASH_WaitForLastOperation+0x88>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <FLASH_WaitForLastOperation+0x88>)
 8003d08:	2220      	movs	r2, #32
 8003d0a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d0c:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <FLASH_WaitForLastOperation+0x88>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <FLASH_WaitForLastOperation+0x88>)
 8003d1a:	69db      	ldr	r3, [r3, #28]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d24:	4b07      	ldr	r3, [pc, #28]	; (8003d44 <FLASH_WaitForLastOperation+0x88>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003d30:	f000 f80a 	bl	8003d48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40022000 	.word	0x40022000

08003d48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003d52:	4b23      	ldr	r3, [pc, #140]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f003 0310 	and.w	r3, r3, #16
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <FLASH_SetErrorCode+0x9c>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f043 0302 	orr.w	r3, r3, #2
 8003d66:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <FLASH_SetErrorCode+0x9c>)
 8003d68:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f043 0310 	orr.w	r3, r3, #16
 8003d70:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003d72:	4b1b      	ldr	r3, [pc, #108]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d009      	beq.n	8003d92 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <FLASH_SetErrorCode+0x9c>)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <FLASH_SetErrorCode+0x9c>)
 8003d88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003d94:	69db      	ldr	r3, [r3, #28]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003d9e:	4b11      	ldr	r3, [pc, #68]	; (8003de4 <FLASH_SetErrorCode+0x9c>)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	4a0f      	ldr	r2, [pc, #60]	; (8003de4 <FLASH_SetErrorCode+0x9c>)
 8003da8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003daa:	4b0d      	ldr	r3, [pc, #52]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	4a0c      	ldr	r2, [pc, #48]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f240 1201 	movw	r2, #257	; 0x101
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d106      	bne.n	8003dce <FLASH_SetErrorCode+0x86>
 8003dc0:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003dc6:	f023 0301 	bic.w	r3, r3, #1
 8003dca:	61d3      	str	r3, [r2, #28]
}  
 8003dcc:	e002      	b.n	8003dd4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003dce:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <FLASH_SetErrorCode+0x98>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60d3      	str	r3, [r2, #12]
}  
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40022000 	.word	0x40022000
 8003de4:	20001408 	.word	0x20001408

08003de8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003dfa:	4b2f      	ldr	r3, [pc, #188]	; (8003eb8 <HAL_FLASHEx_Erase+0xd0>)
 8003dfc:	7e1b      	ldrb	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_FLASHEx_Erase+0x1e>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e053      	b.n	8003eae <HAL_FLASHEx_Erase+0xc6>
 8003e06:	4b2c      	ldr	r3, [pc, #176]	; (8003eb8 <HAL_FLASHEx_Erase+0xd0>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d116      	bne.n	8003e42 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e18:	f7ff ff50 	bl	8003cbc <FLASH_WaitForLastOperation>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d141      	bne.n	8003ea6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003e22:	2001      	movs	r0, #1
 8003e24:	f000 f84c 	bl	8003ec0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e2c:	f7ff ff46 	bl	8003cbc <FLASH_WaitForLastOperation>
 8003e30:	4603      	mov	r3, r0
 8003e32:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003e34:	4b21      	ldr	r3, [pc, #132]	; (8003ebc <HAL_FLASHEx_Erase+0xd4>)
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	4a20      	ldr	r2, [pc, #128]	; (8003ebc <HAL_FLASHEx_Erase+0xd4>)
 8003e3a:	f023 0304 	bic.w	r3, r3, #4
 8003e3e:	6113      	str	r3, [r2, #16]
 8003e40:	e031      	b.n	8003ea6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003e42:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e46:	f7ff ff39 	bl	8003cbc <FLASH_WaitForLastOperation>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d12a      	bne.n	8003ea6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	f04f 32ff 	mov.w	r2, #4294967295
 8003e56:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	e019      	b.n	8003e94 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	f000 f849 	bl	8003ef8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003e66:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003e6a:	f7ff ff27 	bl	8003cbc <FLASH_WaitForLastOperation>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003e72:	4b12      	ldr	r3, [pc, #72]	; (8003ebc <HAL_FLASHEx_Erase+0xd4>)
 8003e74:	691b      	ldr	r3, [r3, #16]
 8003e76:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <HAL_FLASHEx_Erase+0xd4>)
 8003e78:	f023 0302 	bic.w	r3, r3, #2
 8003e7c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	601a      	str	r2, [r3, #0]
            break;
 8003e8a:	e00c      	b.n	8003ea6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e92:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	029a      	lsls	r2, r3, #10
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d3dc      	bcc.n	8003e60 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_FLASHEx_Erase+0xd0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	761a      	strb	r2, [r3, #24]

  return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20001408 	.word	0x20001408
 8003ebc:	40022000 	.word	0x40022000

08003ec0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ec8:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <FLASH_MassErase+0x30>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003ece:	4b09      	ldr	r3, [pc, #36]	; (8003ef4 <FLASH_MassErase+0x34>)
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	4a08      	ldr	r2, [pc, #32]	; (8003ef4 <FLASH_MassErase+0x34>)
 8003ed4:	f043 0304 	orr.w	r3, r3, #4
 8003ed8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <FLASH_MassErase+0x34>)
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	4a05      	ldr	r2, [pc, #20]	; (8003ef4 <FLASH_MassErase+0x34>)
 8003ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr
 8003ef0:	20001408 	.word	0x20001408
 8003ef4:	40022000 	.word	0x40022000

08003ef8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <FLASH_PageErase+0x38>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <FLASH_PageErase+0x3c>)
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	4a0a      	ldr	r2, [pc, #40]	; (8003f34 <FLASH_PageErase+0x3c>)
 8003f0c:	f043 0302 	orr.w	r3, r3, #2
 8003f10:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003f12:	4a08      	ldr	r2, [pc, #32]	; (8003f34 <FLASH_PageErase+0x3c>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003f18:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <FLASH_PageErase+0x3c>)
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <FLASH_PageErase+0x3c>)
 8003f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f22:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	20001408 	.word	0x20001408
 8003f34:	40022000 	.word	0x40022000

08003f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b08b      	sub	sp, #44	; 0x2c
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f42:	2300      	movs	r3, #0
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f4a:	e169      	b.n	8004220 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	69fa      	ldr	r2, [r7, #28]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f040 8158 	bne.w	800421a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4a9a      	ldr	r2, [pc, #616]	; (80041d8 <HAL_GPIO_Init+0x2a0>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d05e      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f74:	4a98      	ldr	r2, [pc, #608]	; (80041d8 <HAL_GPIO_Init+0x2a0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d875      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f7a:	4a98      	ldr	r2, [pc, #608]	; (80041dc <HAL_GPIO_Init+0x2a4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d058      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f80:	4a96      	ldr	r2, [pc, #600]	; (80041dc <HAL_GPIO_Init+0x2a4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d86f      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f86:	4a96      	ldr	r2, [pc, #600]	; (80041e0 <HAL_GPIO_Init+0x2a8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d052      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f8c:	4a94      	ldr	r2, [pc, #592]	; (80041e0 <HAL_GPIO_Init+0x2a8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d869      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f92:	4a94      	ldr	r2, [pc, #592]	; (80041e4 <HAL_GPIO_Init+0x2ac>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d04c      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003f98:	4a92      	ldr	r2, [pc, #584]	; (80041e4 <HAL_GPIO_Init+0x2ac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d863      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003f9e:	4a92      	ldr	r2, [pc, #584]	; (80041e8 <HAL_GPIO_Init+0x2b0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d046      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
 8003fa4:	4a90      	ldr	r2, [pc, #576]	; (80041e8 <HAL_GPIO_Init+0x2b0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d85d      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003faa:	2b12      	cmp	r3, #18
 8003fac:	d82a      	bhi.n	8004004 <HAL_GPIO_Init+0xcc>
 8003fae:	2b12      	cmp	r3, #18
 8003fb0:	d859      	bhi.n	8004066 <HAL_GPIO_Init+0x12e>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <HAL_GPIO_Init+0x80>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08004033 	.word	0x08004033
 8003fbc:	0800400d 	.word	0x0800400d
 8003fc0:	0800401f 	.word	0x0800401f
 8003fc4:	08004061 	.word	0x08004061
 8003fc8:	08004067 	.word	0x08004067
 8003fcc:	08004067 	.word	0x08004067
 8003fd0:	08004067 	.word	0x08004067
 8003fd4:	08004067 	.word	0x08004067
 8003fd8:	08004067 	.word	0x08004067
 8003fdc:	08004067 	.word	0x08004067
 8003fe0:	08004067 	.word	0x08004067
 8003fe4:	08004067 	.word	0x08004067
 8003fe8:	08004067 	.word	0x08004067
 8003fec:	08004067 	.word	0x08004067
 8003ff0:	08004067 	.word	0x08004067
 8003ff4:	08004067 	.word	0x08004067
 8003ff8:	08004067 	.word	0x08004067
 8003ffc:	08004015 	.word	0x08004015
 8004000:	08004029 	.word	0x08004029
 8004004:	4a79      	ldr	r2, [pc, #484]	; (80041ec <HAL_GPIO_Init+0x2b4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800400a:	e02c      	b.n	8004066 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	623b      	str	r3, [r7, #32]
          break;
 8004012:	e029      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	3304      	adds	r3, #4
 800401a:	623b      	str	r3, [r7, #32]
          break;
 800401c:	e024      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	3308      	adds	r3, #8
 8004024:	623b      	str	r3, [r7, #32]
          break;
 8004026:	e01f      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	330c      	adds	r3, #12
 800402e:	623b      	str	r3, [r7, #32]
          break;
 8004030:	e01a      	b.n	8004068 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800403a:	2304      	movs	r3, #4
 800403c:	623b      	str	r3, [r7, #32]
          break;
 800403e:	e013      	b.n	8004068 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004048:	2308      	movs	r3, #8
 800404a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	69fa      	ldr	r2, [r7, #28]
 8004050:	611a      	str	r2, [r3, #16]
          break;
 8004052:	e009      	b.n	8004068 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004054:	2308      	movs	r3, #8
 8004056:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	615a      	str	r2, [r3, #20]
          break;
 800405e:	e003      	b.n	8004068 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004060:	2300      	movs	r3, #0
 8004062:	623b      	str	r3, [r7, #32]
          break;
 8004064:	e000      	b.n	8004068 <HAL_GPIO_Init+0x130>
          break;
 8004066:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	2bff      	cmp	r3, #255	; 0xff
 800406c:	d801      	bhi.n	8004072 <HAL_GPIO_Init+0x13a>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	e001      	b.n	8004076 <HAL_GPIO_Init+0x13e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3304      	adds	r3, #4
 8004076:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2bff      	cmp	r3, #255	; 0xff
 800407c:	d802      	bhi.n	8004084 <HAL_GPIO_Init+0x14c>
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	e002      	b.n	800408a <HAL_GPIO_Init+0x152>
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	3b08      	subs	r3, #8
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	210f      	movs	r1, #15
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	43db      	mvns	r3, r3
 800409a:	401a      	ands	r2, r3
 800409c:	6a39      	ldr	r1, [r7, #32]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	431a      	orrs	r2, r3
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 80b1 	beq.w	800421a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80040b8:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	4a4c      	ldr	r2, [pc, #304]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040be:	f043 0301 	orr.w	r3, r3, #1
 80040c2:	6193      	str	r3, [r2, #24]
 80040c4:	4b4a      	ldr	r3, [pc, #296]	; (80041f0 <HAL_GPIO_Init+0x2b8>)
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	60bb      	str	r3, [r7, #8]
 80040ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80040d0:	4a48      	ldr	r2, [pc, #288]	; (80041f4 <HAL_GPIO_Init+0x2bc>)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	089b      	lsrs	r3, r3, #2
 80040d6:	3302      	adds	r3, #2
 80040d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	220f      	movs	r2, #15
 80040e8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ec:	43db      	mvns	r3, r3
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4013      	ands	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a40      	ldr	r2, [pc, #256]	; (80041f8 <HAL_GPIO_Init+0x2c0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d013      	beq.n	8004124 <HAL_GPIO_Init+0x1ec>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3f      	ldr	r2, [pc, #252]	; (80041fc <HAL_GPIO_Init+0x2c4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d00d      	beq.n	8004120 <HAL_GPIO_Init+0x1e8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a3e      	ldr	r2, [pc, #248]	; (8004200 <HAL_GPIO_Init+0x2c8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d007      	beq.n	800411c <HAL_GPIO_Init+0x1e4>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a3d      	ldr	r2, [pc, #244]	; (8004204 <HAL_GPIO_Init+0x2cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d101      	bne.n	8004118 <HAL_GPIO_Init+0x1e0>
 8004114:	2303      	movs	r3, #3
 8004116:	e006      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004118:	2304      	movs	r3, #4
 800411a:	e004      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 800411c:	2302      	movs	r3, #2
 800411e:	e002      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <HAL_GPIO_Init+0x1ee>
 8004124:	2300      	movs	r3, #0
 8004126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004128:	f002 0203 	and.w	r2, r2, #3
 800412c:	0092      	lsls	r2, r2, #2
 800412e:	4093      	lsls	r3, r2
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004136:	492f      	ldr	r1, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x2bc>)
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	089b      	lsrs	r3, r3, #2
 800413c:	3302      	adds	r3, #2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d006      	beq.n	800415e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004150:	4b2d      	ldr	r3, [pc, #180]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	492c      	ldr	r1, [pc, #176]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	600b      	str	r3, [r1, #0]
 800415c:	e006      	b.n	800416c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800415e:	4b2a      	ldr	r3, [pc, #168]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	43db      	mvns	r3, r3
 8004166:	4928      	ldr	r1, [pc, #160]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004168:	4013      	ands	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004178:	4b23      	ldr	r3, [pc, #140]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	4922      	ldr	r1, [pc, #136]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	e006      	b.n	8004194 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	43db      	mvns	r3, r3
 800418e:	491e      	ldr	r1, [pc, #120]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 8004190:	4013      	ands	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d006      	beq.n	80041ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80041a0:	4b19      	ldr	r3, [pc, #100]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4918      	ldr	r1, [pc, #96]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	608b      	str	r3, [r1, #8]
 80041ac:	e006      	b.n	80041bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	43db      	mvns	r3, r3
 80041b6:	4914      	ldr	r1, [pc, #80]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d021      	beq.n	800420c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	490e      	ldr	r1, [pc, #56]	; (8004208 <HAL_GPIO_Init+0x2d0>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	60cb      	str	r3, [r1, #12]
 80041d4:	e021      	b.n	800421a <HAL_GPIO_Init+0x2e2>
 80041d6:	bf00      	nop
 80041d8:	10320000 	.word	0x10320000
 80041dc:	10310000 	.word	0x10310000
 80041e0:	10220000 	.word	0x10220000
 80041e4:	10210000 	.word	0x10210000
 80041e8:	10120000 	.word	0x10120000
 80041ec:	10110000 	.word	0x10110000
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40010000 	.word	0x40010000
 80041f8:	40010800 	.word	0x40010800
 80041fc:	40010c00 	.word	0x40010c00
 8004200:	40011000 	.word	0x40011000
 8004204:	40011400 	.word	0x40011400
 8004208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_GPIO_Init+0x304>)
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	43db      	mvns	r3, r3
 8004214:	4909      	ldr	r1, [pc, #36]	; (800423c <HAL_GPIO_Init+0x304>)
 8004216:	4013      	ands	r3, r2
 8004218:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	3301      	adds	r3, #1
 800421e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f ae8e 	bne.w	8003f4c <HAL_GPIO_Init+0x14>
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	372c      	adds	r7, #44	; 0x2c
 8004236:	46bd      	mov	sp, r7
 8004238:	bc80      	pop	{r7}
 800423a:	4770      	bx	lr
 800423c:	40010400 	.word	0x40010400

08004240 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	887b      	ldrh	r3, [r7, #2]
 8004252:	4013      	ands	r3, r2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004258:	2301      	movs	r3, #1
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e001      	b.n	8004262 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
 8004276:	460b      	mov	r3, r1
 8004278:	807b      	strh	r3, [r7, #2]
 800427a:	4613      	mov	r3, r2
 800427c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800427e:	787b      	ldrb	r3, [r7, #1]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004284:	887a      	ldrh	r2, [r7, #2]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800428a:	e003      	b.n	8004294 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800428c:	887b      	ldrh	r3, [r7, #2]
 800428e:	041a      	lsls	r2, r3, #16
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	611a      	str	r2, [r3, #16]
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr
	...

080042a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b086      	sub	sp, #24
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e26c      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f000 8087 	beq.w	80043ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042c0:	4b92      	ldr	r3, [pc, #584]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f003 030c 	and.w	r3, r3, #12
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d00c      	beq.n	80042e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042cc:	4b8f      	ldr	r3, [pc, #572]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d112      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
 80042d8:	4b8c      	ldr	r3, [pc, #560]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e4:	d10b      	bne.n	80042fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042e6:	4b89      	ldr	r3, [pc, #548]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06c      	beq.n	80043cc <HAL_RCC_OscConfig+0x12c>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d168      	bne.n	80043cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e246      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004306:	d106      	bne.n	8004316 <HAL_RCC_OscConfig+0x76>
 8004308:	4b80      	ldr	r3, [pc, #512]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a7f      	ldr	r2, [pc, #508]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e02e      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10c      	bne.n	8004338 <HAL_RCC_OscConfig+0x98>
 800431e:	4b7b      	ldr	r3, [pc, #492]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a7a      	ldr	r2, [pc, #488]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	4b78      	ldr	r3, [pc, #480]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a77      	ldr	r2, [pc, #476]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004334:	6013      	str	r3, [r2, #0]
 8004336:	e01d      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004340:	d10c      	bne.n	800435c <HAL_RCC_OscConfig+0xbc>
 8004342:	4b72      	ldr	r3, [pc, #456]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a71      	ldr	r2, [pc, #452]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	4b6f      	ldr	r3, [pc, #444]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a6e      	ldr	r2, [pc, #440]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	e00b      	b.n	8004374 <HAL_RCC_OscConfig+0xd4>
 800435c:	4b6b      	ldr	r3, [pc, #428]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a6a      	ldr	r2, [pc, #424]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	4b68      	ldr	r3, [pc, #416]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a67      	ldr	r2, [pc, #412]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 800436e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d013      	beq.n	80043a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800437c:	f7ff f9e6 	bl	800374c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7ff f9e2 	bl	800374c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	; 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e1fa      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b5d      	ldr	r3, [pc, #372]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0xe4>
 80043a2:	e014      	b.n	80043ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7ff f9d2 	bl	800374c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7ff f9ce 	bl	800374c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	; 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e1e6      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043be:	4b53      	ldr	r3, [pc, #332]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x10c>
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d063      	beq.n	80044a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043da:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043e6:	4b49      	ldr	r3, [pc, #292]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11c      	bne.n	800442c <HAL_RCC_OscConfig+0x18c>
 80043f2:	4b46      	ldr	r3, [pc, #280]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d116      	bne.n	800442c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043fe:	4b43      	ldr	r3, [pc, #268]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d005      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e1ba      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b3d      	ldr	r3, [pc, #244]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4939      	ldr	r1, [pc, #228]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800442a:	e03a      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d020      	beq.n	8004476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004434:	4b36      	ldr	r3, [pc, #216]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004436:	2201      	movs	r2, #1
 8004438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800443a:	f7ff f987 	bl	800374c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004442:	f7ff f983 	bl	800374c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e19b      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004454:	4b2d      	ldr	r3, [pc, #180]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d0f0      	beq.n	8004442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	00db      	lsls	r3, r3, #3
 800446e:	4927      	ldr	r1, [pc, #156]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004470:	4313      	orrs	r3, r2
 8004472:	600b      	str	r3, [r1, #0]
 8004474:	e015      	b.n	80044a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_RCC_OscConfig+0x270>)
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800447c:	f7ff f966 	bl	800374c <HAL_GetTick>
 8004480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004484:	f7ff f962 	bl	800374c <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b02      	cmp	r3, #2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e17a      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004496:	4b1d      	ldr	r3, [pc, #116]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1f0      	bne.n	8004484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d03a      	beq.n	8004524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d019      	beq.n	80044ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80044b8:	2201      	movs	r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044bc:	f7ff f946 	bl	800374c <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c4:	f7ff f942 	bl	800374c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e15a      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <HAL_RCC_OscConfig+0x26c>)
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044e2:	2001      	movs	r0, #1
 80044e4:	f000 fad8 	bl	8004a98 <RCC_Delay>
 80044e8:	e01c      	b.n	8004524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ea:	4b0a      	ldr	r3, [pc, #40]	; (8004514 <HAL_RCC_OscConfig+0x274>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044f0:	f7ff f92c 	bl	800374c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044f6:	e00f      	b.n	8004518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f8:	f7ff f928 	bl	800374c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d908      	bls.n	8004518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e140      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
 800450a:	bf00      	nop
 800450c:	40021000 	.word	0x40021000
 8004510:	42420000 	.word	0x42420000
 8004514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004518:	4b9e      	ldr	r3, [pc, #632]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e9      	bne.n	80044f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80a6 	beq.w	800467e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004532:	2300      	movs	r3, #0
 8004534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004536:	4b97      	ldr	r3, [pc, #604]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10d      	bne.n	800455e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004542:	4b94      	ldr	r3, [pc, #592]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	4a93      	ldr	r2, [pc, #588]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800454c:	61d3      	str	r3, [r2, #28]
 800454e:	4b91      	ldr	r3, [pc, #580]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004556:	60bb      	str	r3, [r7, #8]
 8004558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800455a:	2301      	movs	r3, #1
 800455c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455e:	4b8e      	ldr	r3, [pc, #568]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d118      	bne.n	800459c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800456a:	4b8b      	ldr	r3, [pc, #556]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a8a      	ldr	r2, [pc, #552]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004576:	f7ff f8e9 	bl	800374c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800457e:	f7ff f8e5 	bl	800374c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b64      	cmp	r3, #100	; 0x64
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0fd      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004590:	4b81      	ldr	r3, [pc, #516]	; (8004798 <HAL_RCC_OscConfig+0x4f8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d106      	bne.n	80045b2 <HAL_RCC_OscConfig+0x312>
 80045a4:	4b7b      	ldr	r3, [pc, #492]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a7a      	ldr	r2, [pc, #488]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045aa:	f043 0301 	orr.w	r3, r3, #1
 80045ae:	6213      	str	r3, [r2, #32]
 80045b0:	e02d      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCC_OscConfig+0x334>
 80045ba:	4b76      	ldr	r3, [pc, #472]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	4a75      	ldr	r2, [pc, #468]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	6213      	str	r3, [r2, #32]
 80045c6:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	4a72      	ldr	r2, [pc, #456]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	6213      	str	r3, [r2, #32]
 80045d2:	e01c      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d10c      	bne.n	80045f6 <HAL_RCC_OscConfig+0x356>
 80045dc:	4b6d      	ldr	r3, [pc, #436]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	4a6c      	ldr	r2, [pc, #432]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045e2:	f043 0304 	orr.w	r3, r3, #4
 80045e6:	6213      	str	r3, [r2, #32]
 80045e8:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4a69      	ldr	r2, [pc, #420]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045ee:	f043 0301 	orr.w	r3, r3, #1
 80045f2:	6213      	str	r3, [r2, #32]
 80045f4:	e00b      	b.n	800460e <HAL_RCC_OscConfig+0x36e>
 80045f6:	4b67      	ldr	r3, [pc, #412]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	4a66      	ldr	r2, [pc, #408]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	6213      	str	r3, [r2, #32]
 8004602:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	4a63      	ldr	r2, [pc, #396]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004608:	f023 0304 	bic.w	r3, r3, #4
 800460c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d015      	beq.n	8004642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004616:	f7ff f899 	bl	800374c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461c:	e00a      	b.n	8004634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461e:	f7ff f895 	bl	800374c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	4293      	cmp	r3, r2
 800462e:	d901      	bls.n	8004634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e0ab      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004634:	4b57      	ldr	r3, [pc, #348]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ee      	beq.n	800461e <HAL_RCC_OscConfig+0x37e>
 8004640:	e014      	b.n	800466c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004642:	f7ff f883 	bl	800374c <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004648:	e00a      	b.n	8004660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7ff f87f 	bl	800374c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	f241 3288 	movw	r2, #5000	; 0x1388
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e095      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004660:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1ee      	bne.n	800464a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800466c:	7dfb      	ldrb	r3, [r7, #23]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004672:	4b48      	ldr	r3, [pc, #288]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	4a47      	ldr	r2, [pc, #284]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800467c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 8081 	beq.w	800478a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b08      	cmp	r3, #8
 8004692:	d061      	beq.n	8004758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	69db      	ldr	r3, [r3, #28]
 8004698:	2b02      	cmp	r3, #2
 800469a:	d146      	bne.n	800472a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b3f      	ldr	r3, [pc, #252]	; (800479c <HAL_RCC_OscConfig+0x4fc>)
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a2:	f7ff f853 	bl	800374c <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046aa:	f7ff f84f 	bl	800374c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e067      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1f0      	bne.n	80046aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d0:	d108      	bne.n	80046e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046d2:	4b30      	ldr	r3, [pc, #192]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	492d      	ldr	r1, [pc, #180]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e4:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a19      	ldr	r1, [r3, #32]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	430b      	orrs	r3, r1
 80046f6:	4927      	ldr	r1, [pc, #156]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x4fc>)
 80046fe:	2201      	movs	r2, #1
 8004700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004702:	f7ff f823 	bl	800374c <HAL_GetTick>
 8004706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7ff f81f 	bl	800374c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e037      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800471c:	4b1d      	ldr	r3, [pc, #116]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x46a>
 8004728:	e02f      	b.n	800478a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800472a:	4b1c      	ldr	r3, [pc, #112]	; (800479c <HAL_RCC_OscConfig+0x4fc>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004730:	f7ff f80c 	bl	800374c <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004738:	f7ff f808 	bl	800374c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e020      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800474a:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1f0      	bne.n	8004738 <HAL_RCC_OscConfig+0x498>
 8004756:	e018      	b.n	800478a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	69db      	ldr	r3, [r3, #28]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e013      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004764:	4b0b      	ldr	r3, [pc, #44]	; (8004794 <HAL_RCC_OscConfig+0x4f4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	429a      	cmp	r2, r3
 8004776:	d106      	bne.n	8004786 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004782:	429a      	cmp	r2, r3
 8004784:	d001      	beq.n	800478a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e000      	b.n	800478c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
 800479c:	42420060 	.word	0x42420060

080047a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0d0      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047b4:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	683a      	ldr	r2, [r7, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d910      	bls.n	80047e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c2:	4b67      	ldr	r3, [pc, #412]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f023 0207 	bic.w	r2, r3, #7
 80047ca:	4965      	ldr	r1, [pc, #404]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d2:	4b63      	ldr	r3, [pc, #396]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d001      	beq.n	80047e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0b8      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0302 	and.w	r3, r3, #2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d020      	beq.n	8004832 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047fc:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a58      	ldr	r2, [pc, #352]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004806:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004814:	4b53      	ldr	r3, [pc, #332]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a52      	ldr	r2, [pc, #328]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800481a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800481e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b50      	ldr	r3, [pc, #320]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	494d      	ldr	r1, [pc, #308]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	4313      	orrs	r3, r2
 8004830:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d040      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004846:	4b47      	ldr	r3, [pc, #284]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d115      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e07f      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800485e:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d109      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e073      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e06b      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800487e:	4b39      	ldr	r3, [pc, #228]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f023 0203 	bic.w	r2, r3, #3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	4936      	ldr	r1, [pc, #216]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004890:	f7fe ff5c 	bl	800374c <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	e00a      	b.n	80048ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004898:	f7fe ff58 	bl	800374c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e053      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	4b2d      	ldr	r3, [pc, #180]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 020c 	and.w	r2, r3, #12
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	429a      	cmp	r2, r3
 80048be:	d1eb      	bne.n	8004898 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048c0:	4b27      	ldr	r3, [pc, #156]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d210      	bcs.n	80048f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048ce:	4b24      	ldr	r3, [pc, #144]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f023 0207 	bic.w	r2, r3, #7
 80048d6:	4922      	ldr	r1, [pc, #136]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	4313      	orrs	r3, r2
 80048dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b20      	ldr	r3, [pc, #128]	; (8004960 <HAL_RCC_ClockConfig+0x1c0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0307 	and.w	r3, r3, #7
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e032      	b.n	8004956 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	4916      	ldr	r1, [pc, #88]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d009      	beq.n	800492e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800491a:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	490e      	ldr	r1, [pc, #56]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800492e:	f000 f821 	bl	8004974 <HAL_RCC_GetSysClockFreq>
 8004932:	4602      	mov	r2, r0
 8004934:	4b0b      	ldr	r3, [pc, #44]	; (8004964 <HAL_RCC_ClockConfig+0x1c4>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 030f 	and.w	r3, r3, #15
 800493e:	490a      	ldr	r1, [pc, #40]	; (8004968 <HAL_RCC_ClockConfig+0x1c8>)
 8004940:	5ccb      	ldrb	r3, [r1, r3]
 8004942:	fa22 f303 	lsr.w	r3, r2, r3
 8004946:	4a09      	ldr	r2, [pc, #36]	; (800496c <HAL_RCC_ClockConfig+0x1cc>)
 8004948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800494a:	4b09      	ldr	r3, [pc, #36]	; (8004970 <HAL_RCC_ClockConfig+0x1d0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f7fe feba 	bl	80036c8 <HAL_InitTick>

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3710      	adds	r7, #16
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40022000 	.word	0x40022000
 8004964:	40021000 	.word	0x40021000
 8004968:	0800b2ac 	.word	0x0800b2ac
 800496c:	2000000c 	.word	0x2000000c
 8004970:	20000010 	.word	0x20000010

08004974 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004974:	b490      	push	{r4, r7}
 8004976:	b08a      	sub	sp, #40	; 0x28
 8004978:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800497a:	4b2a      	ldr	r3, [pc, #168]	; (8004a24 <HAL_RCC_GetSysClockFreq+0xb0>)
 800497c:	1d3c      	adds	r4, r7, #4
 800497e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004980:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004984:	f240 2301 	movw	r3, #513	; 0x201
 8004988:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	2300      	movs	r3, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	2300      	movs	r3, #0
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	f003 030c 	and.w	r3, r3, #12
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d002      	beq.n	80049b4 <HAL_RCC_GetSysClockFreq+0x40>
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d003      	beq.n	80049ba <HAL_RCC_GetSysClockFreq+0x46>
 80049b2:	e02d      	b.n	8004a10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049b4:	4b1d      	ldr	r3, [pc, #116]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049b6:	623b      	str	r3, [r7, #32]
      break;
 80049b8:	e02d      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	0c9b      	lsrs	r3, r3, #18
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049c6:	4413      	add	r3, r2
 80049c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d013      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049d8:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	0c5b      	lsrs	r3, r3, #17
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80049e6:	4413      	add	r3, r2
 80049e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f2:	fb02 f203 	mul.w	r2, r2, r3
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	e004      	b.n	8004a0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4a0b      	ldr	r2, [pc, #44]	; (8004a30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	623b      	str	r3, [r7, #32]
      break;
 8004a0e:	e002      	b.n	8004a16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a10:	4b06      	ldr	r3, [pc, #24]	; (8004a2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a12:	623b      	str	r3, [r7, #32]
      break;
 8004a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a16:	6a3b      	ldr	r3, [r7, #32]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3728      	adds	r7, #40	; 0x28
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc90      	pop	{r4, r7}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	0800b29c 	.word	0x0800b29c
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	007a1200 	.word	0x007a1200
 8004a30:	003d0900 	.word	0x003d0900

08004a34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a38:	4b02      	ldr	r3, [pc, #8]	; (8004a44 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bc80      	pop	{r7}
 8004a42:	4770      	bx	lr
 8004a44:	2000000c 	.word	0x2000000c

08004a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a4c:	f7ff fff2 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a50:	4602      	mov	r2, r0
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	0a1b      	lsrs	r3, r3, #8
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	4903      	ldr	r1, [pc, #12]	; (8004a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a5e:	5ccb      	ldrb	r3, [r1, r3]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	0800b2bc 	.word	0x0800b2bc

08004a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a74:	f7ff ffde 	bl	8004a34 <HAL_RCC_GetHCLKFreq>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	0adb      	lsrs	r3, r3, #11
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	4903      	ldr	r1, [pc, #12]	; (8004a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a86:	5ccb      	ldrb	r3, [r1, r3]
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	0800b2bc 	.word	0x0800b2bc

08004a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004aa0:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <RCC_Delay+0x34>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <RCC_Delay+0x38>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	0a5b      	lsrs	r3, r3, #9
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	fb02 f303 	mul.w	r3, r2, r3
 8004ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ab4:	bf00      	nop
  }
  while (Delay --);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1e5a      	subs	r2, r3, #1
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1f9      	bne.n	8004ab4 <RCC_Delay+0x1c>
}
 8004ac0:	bf00      	nop
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr
 8004acc:	2000000c 	.word	0x2000000c
 8004ad0:	10624dd3 	.word	0x10624dd3

08004ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e076      	b.n	8004bd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d108      	bne.n	8004b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af6:	d009      	beq.n	8004b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	61da      	str	r2, [r3, #28]
 8004afe:	e005      	b.n	8004b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fe fb7a 	bl	8003220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b54:	431a      	orrs	r2, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	431a      	orrs	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	ea42 0103 	orr.w	r1, r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	0c1a      	lsrs	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f002 0204 	and.w	r2, r2, #4
 8004bb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69da      	ldr	r2, [r3, #28]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf8:	d112      	bne.n	8004c20 <HAL_SPI_Receive+0x44>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10e      	bne.n	8004c20 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2204      	movs	r2, #4
 8004c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c0a:	88fa      	ldrh	r2, [r7, #6]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	4613      	mov	r3, r2
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	68b9      	ldr	r1, [r7, #8]
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 f8f1 	bl	8004dfe <HAL_SPI_TransmitReceive>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	e0ea      	b.n	8004df6 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_SPI_Receive+0x52>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e0e3      	b.n	8004df6 <HAL_SPI_Receive+0x21a>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c36:	f7fe fd89 	bl	800374c <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d002      	beq.n	8004c4e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
 8004c4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c4c:	e0ca      	b.n	8004de4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_Receive+0x7e>
 8004c54:	88fb      	ldrh	r3, [r7, #6]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d102      	bne.n	8004c60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c5e:	e0c1      	b.n	8004de4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2204      	movs	r2, #4
 8004c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	88fa      	ldrh	r2, [r7, #6]
 8004c78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	88fa      	ldrh	r2, [r7, #6]
 8004c7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ca6:	d10f      	bne.n	8004cc8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cc6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd2:	2b40      	cmp	r3, #64	; 0x40
 8004cd4:	d007      	beq.n	8004ce6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d162      	bne.n	8004db4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004cee:	e02e      	b.n	8004d4e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d115      	bne.n	8004d2a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f103 020c 	add.w	r2, r3, #12
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	7812      	ldrb	r2, [r2, #0]
 8004d0c:	b2d2      	uxtb	r2, r2
 8004d0e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d28:	e011      	b.n	8004d4e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d2a:	f7fe fd0f 	bl	800374c <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d803      	bhi.n	8004d42 <HAL_SPI_Receive+0x166>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d102      	bne.n	8004d48 <HAL_SPI_Receive+0x16c>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d102      	bne.n	8004d4e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d4c:	e04a      	b.n	8004de4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1cb      	bne.n	8004cf0 <HAL_SPI_Receive+0x114>
 8004d58:	e031      	b.n	8004dbe <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f003 0301 	and.w	r3, r3, #1
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d113      	bne.n	8004d90 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68da      	ldr	r2, [r3, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	b292      	uxth	r2, r2
 8004d74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	1c9a      	adds	r2, r3, #2
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	3b01      	subs	r3, #1
 8004d88:	b29a      	uxth	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d8e:	e011      	b.n	8004db4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d90:	f7fe fcdc 	bl	800374c <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d803      	bhi.n	8004da8 <HAL_SPI_Receive+0x1cc>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da6:	d102      	bne.n	8004dae <HAL_SPI_Receive+0x1d2>
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d102      	bne.n	8004db4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004db2:	e017      	b.n	8004de4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1cd      	bne.n	8004d5a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f000 fa46 	bl	8005254 <SPI_EndRxTransaction>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	75fb      	strb	r3, [r7, #23]
 8004de0:	e000      	b.n	8004de4 <HAL_SPI_Receive+0x208>
  }

error :
 8004de2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b08c      	sub	sp, #48	; 0x30
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d101      	bne.n	8004e24 <HAL_SPI_TransmitReceive+0x26>
 8004e20:	2302      	movs	r3, #2
 8004e22:	e18a      	b.n	800513a <HAL_SPI_TransmitReceive+0x33c>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e2c:	f7fe fc8e 	bl	800374c <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e42:	887b      	ldrh	r3, [r7, #2]
 8004e44:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d00f      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x70>
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e54:	d107      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <HAL_SPI_TransmitReceive+0x68>
 8004e5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d003      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
 8004e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e6c:	e15b      	b.n	8005126 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x82>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x82>
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d103      	bne.n	8004e88 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e86:	e14e      	b.n	8005126 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d003      	beq.n	8004e9c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2205      	movs	r2, #5
 8004e98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	887a      	ldrh	r2, [r7, #2]
 8004eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	887a      	ldrh	r2, [r7, #2]
 8004eb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	887a      	ldrh	r2, [r7, #2]
 8004ebe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	887a      	ldrh	r2, [r7, #2]
 8004ec4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d007      	beq.n	8004ef0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004eee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d178      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_SPI_TransmitReceive+0x10a>
 8004f02:	8b7b      	ldrh	r3, [r7, #26]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d166      	bne.n	8004fd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0c:	881a      	ldrh	r2, [r3, #0]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	1c9a      	adds	r2, r3, #2
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f2c:	e053      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d11b      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x176>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x176>
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d113      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	881a      	ldrh	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	1c9a      	adds	r2, r3, #2
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d119      	bne.n	8004fb6 <HAL_SPI_TransmitReceive+0x1b8>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d014      	beq.n	8004fb6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f96:	b292      	uxth	r2, r2
 8004f98:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9e:	1c9a      	adds	r2, r3, #2
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	3b01      	subs	r3, #1
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fb6:	f7fe fbc9 	bl	800374c <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d807      	bhi.n	8004fd6 <HAL_SPI_TransmitReceive+0x1d8>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fcc:	d003      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fd4:	e0a7      	b.n	8005126 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1a6      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x130>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1a1      	bne.n	8004f2e <HAL_SPI_TransmitReceive+0x130>
 8004fea:	e07c      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d002      	beq.n	8004ffa <HAL_SPI_TransmitReceive+0x1fc>
 8004ff4:	8b7b      	ldrh	r3, [r7, #26]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d16b      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	330c      	adds	r3, #12
 8005004:	7812      	ldrb	r2, [r2, #0]
 8005006:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005020:	e057      	b.n	80050d2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	2b02      	cmp	r3, #2
 800502e:	d11c      	bne.n	800506a <HAL_SPI_TransmitReceive+0x26c>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d017      	beq.n	800506a <HAL_SPI_TransmitReceive+0x26c>
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d114      	bne.n	800506a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	330c      	adds	r3, #12
 800504a:	7812      	ldrb	r2, [r2, #0]
 800504c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	1c5a      	adds	r2, r3, #1
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d119      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x2ae>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d014      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050a8:	2301      	movs	r3, #1
 80050aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050ac:	f7fe fb4e 	bl	800374c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d803      	bhi.n	80050c4 <HAL_SPI_TransmitReceive+0x2c6>
 80050bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c2:	d102      	bne.n	80050ca <HAL_SPI_TransmitReceive+0x2cc>
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d103      	bne.n	80050d2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050d0:	e029      	b.n	8005126 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1a2      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x224>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d19d      	bne.n	8005022 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f000 f904 	bl	80052f8 <SPI_EndRxTxTransaction>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2220      	movs	r2, #32
 8005100:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005102:	e010      	b.n	8005126 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10b      	bne.n	8005124 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	617b      	str	r3, [r7, #20]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	e000      	b.n	8005126 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005124:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800513a:	4618      	mov	r0, r3
 800513c:	3730      	adds	r7, #48	; 0x30
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005154:	f7fe fafa 	bl	800374c <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	683a      	ldr	r2, [r7, #0]
 8005160:	4413      	add	r3, r2
 8005162:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005164:	f7fe faf2 	bl	800374c <HAL_GetTick>
 8005168:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800516a:	4b39      	ldr	r3, [pc, #228]	; (8005250 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	015b      	lsls	r3, r3, #5
 8005170:	0d1b      	lsrs	r3, r3, #20
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800517a:	e054      	b.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005182:	d050      	beq.n	8005226 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005184:	f7fe fae2 	bl	800374c <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	69fa      	ldr	r2, [r7, #28]
 8005190:	429a      	cmp	r2, r3
 8005192:	d902      	bls.n	800519a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d13d      	bne.n	8005216 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b2:	d111      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051bc:	d004      	beq.n	80051c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051c6:	d107      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051e0:	d10f      	bne.n	8005202 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005200:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e017      	b.n	8005246 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	3b01      	subs	r3, #1
 8005224:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	429a      	cmp	r2, r3
 8005242:	d19b      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3720      	adds	r7, #32
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	2000000c 	.word	0x2000000c

08005254 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af02      	add	r7, sp, #8
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005268:	d111      	bne.n	800528e <SPI_EndRxTransaction+0x3a>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005272:	d004      	beq.n	800527e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527c:	d107      	bne.n	800528e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005296:	d117      	bne.n	80052c8 <SPI_EndRxTransaction+0x74>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a0:	d112      	bne.n	80052c8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68bb      	ldr	r3, [r7, #8]
 80052a8:	2200      	movs	r2, #0
 80052aa:	2101      	movs	r1, #1
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ff49 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052bc:	f043 0220 	orr.w	r2, r3, #32
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e013      	b.n	80052f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	2200      	movs	r2, #0
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f7ff ff36 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d007      	beq.n	80052ee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e000      	b.n	80052f0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80052ee:	2300      	movs	r3, #0
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2200      	movs	r2, #0
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff ff18 	bl	8005144 <SPI_WaitFlagStateUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d007      	beq.n	800532a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531e:	f043 0220 	orr.w	r2, r3, #32
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e000      	b.n	800532c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e041      	b.n	80053ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7fd ffc8 	bl	80032f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f000 fc20 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3708      	adds	r7, #8
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d001      	beq.n	80053ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e8:	2301      	movs	r3, #1
 80053ea:	e03a      	b.n	8005462 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0201 	orr.w	r2, r2, #1
 8005402:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a18      	ldr	r2, [pc, #96]	; (800546c <HAL_TIM_Base_Start_IT+0x98>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00e      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x58>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005416:	d009      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x58>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <HAL_TIM_Base_Start_IT+0x9c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d004      	beq.n	800542c <HAL_TIM_Base_Start_IT+0x58>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a13      	ldr	r2, [pc, #76]	; (8005474 <HAL_TIM_Base_Start_IT+0xa0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d111      	bne.n	8005450 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2b06      	cmp	r3, #6
 800543c:	d010      	beq.n	8005460 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	e007      	b.n	8005460 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	40012c00 	.word	0x40012c00
 8005470:	40000400 	.word	0x40000400
 8005474:	40000800 	.word	0x40000800

08005478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e041      	b.n	800550e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fd ff08 	bl	80032b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2202      	movs	r2, #2
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	f000 fb7e 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3708      	adds	r7, #8
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b084      	sub	sp, #16
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d109      	bne.n	800553c <HAL_TIM_PWM_Start+0x24>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b01      	cmp	r3, #1
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e022      	b.n	8005582 <HAL_TIM_PWM_Start+0x6a>
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b04      	cmp	r3, #4
 8005540:	d109      	bne.n	8005556 <HAL_TIM_PWM_Start+0x3e>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	bf14      	ite	ne
 800554e:	2301      	movne	r3, #1
 8005550:	2300      	moveq	r3, #0
 8005552:	b2db      	uxtb	r3, r3
 8005554:	e015      	b.n	8005582 <HAL_TIM_PWM_Start+0x6a>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d109      	bne.n	8005570 <HAL_TIM_PWM_Start+0x58>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e008      	b.n	8005582 <HAL_TIM_PWM_Start+0x6a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e05e      	b.n	8005648 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d104      	bne.n	800559a <HAL_TIM_PWM_Start+0x82>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005598:	e013      	b.n	80055c2 <HAL_TIM_PWM_Start+0xaa>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b04      	cmp	r3, #4
 800559e:	d104      	bne.n	80055aa <HAL_TIM_PWM_Start+0x92>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2202      	movs	r2, #2
 80055a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a8:	e00b      	b.n	80055c2 <HAL_TIM_PWM_Start+0xaa>
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0xa2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055b8:	e003      	b.n	80055c2 <HAL_TIM_PWM_Start+0xaa>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2201      	movs	r2, #1
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fd74 	bl	80060b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1e      	ldr	r2, [pc, #120]	; (8005650 <HAL_TIM_PWM_Start+0x138>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d107      	bne.n	80055ea <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_TIM_PWM_Start+0x138>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_TIM_PWM_Start+0xfa>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fc:	d009      	beq.n	8005612 <HAL_TIM_PWM_Start+0xfa>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a14      	ldr	r2, [pc, #80]	; (8005654 <HAL_TIM_PWM_Start+0x13c>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIM_PWM_Start+0xfa>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a12      	ldr	r2, [pc, #72]	; (8005658 <HAL_TIM_PWM_Start+0x140>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b06      	cmp	r3, #6
 8005622:	d010      	beq.n	8005646 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005634:	e007      	b.n	8005646 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	40012c00 	.word	0x40012c00
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800

0800565c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b02      	cmp	r3, #2
 8005670:	d122      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68db      	ldr	r3, [r3, #12]
 8005678:	f003 0302 	and.w	r3, r3, #2
 800567c:	2b02      	cmp	r3, #2
 800567e:	d11b      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f06f 0202 	mvn.w	r2, #2
 8005688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 fa6f 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80056a4:	e005      	b.n	80056b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fa62 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fa71 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d122      	bne.n	800570c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b04      	cmp	r3, #4
 80056d2:	d11b      	bne.n	800570c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0204 	mvn.w	r2, #4
 80056dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d003      	beq.n	80056fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 fa45 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80056f8:	e005      	b.n	8005706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 fa38 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fa47 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b08      	cmp	r3, #8
 8005718:	d122      	bne.n	8005760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f003 0308 	and.w	r3, r3, #8
 8005724:	2b08      	cmp	r3, #8
 8005726:	d11b      	bne.n	8005760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0208 	mvn.w	r2, #8
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2204      	movs	r2, #4
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f003 0303 	and.w	r3, r3, #3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa1b 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 fa0e 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 fa1d 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b10      	cmp	r3, #16
 800576c:	d122      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f003 0310 	and.w	r3, r3, #16
 8005778:	2b10      	cmp	r3, #16
 800577a:	d11b      	bne.n	80057b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f06f 0210 	mvn.w	r2, #16
 8005784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2208      	movs	r2, #8
 800578a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9f1 	bl	8005b82 <HAL_TIM_IC_CaptureCallback>
 80057a0:	e005      	b.n	80057ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9e4 	bl	8005b70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f9f3 	bl	8005b94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d10e      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d107      	bne.n	80057e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0201 	mvn.w	r2, #1
 80057d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f7fc feac 	bl	8002538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ea:	2b80      	cmp	r3, #128	; 0x80
 80057ec:	d10e      	bne.n	800580c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f8:	2b80      	cmp	r3, #128	; 0x80
 80057fa:	d107      	bne.n	800580c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f000 fd32 	bl	8006270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005816:	2b40      	cmp	r3, #64	; 0x40
 8005818:	d10e      	bne.n	8005838 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d107      	bne.n	8005838 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f9b7 	bl	8005ba6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b20      	cmp	r3, #32
 8005844:	d10e      	bne.n	8005864 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0320 	and.w	r3, r3, #32
 8005850:	2b20      	cmp	r3, #32
 8005852:	d107      	bne.n	8005864 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0220 	mvn.w	r2, #32
 800585c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fcfd 	bl	800625e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005882:	2302      	movs	r3, #2
 8005884:	e0ac      	b.n	80059e0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b0c      	cmp	r3, #12
 8005892:	f200 809f 	bhi.w	80059d4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058d1 	.word	0x080058d1
 80058a0:	080059d5 	.word	0x080059d5
 80058a4:	080059d5 	.word	0x080059d5
 80058a8:	080059d5 	.word	0x080059d5
 80058ac:	08005911 	.word	0x08005911
 80058b0:	080059d5 	.word	0x080059d5
 80058b4:	080059d5 	.word	0x080059d5
 80058b8:	080059d5 	.word	0x080059d5
 80058bc:	08005953 	.word	0x08005953
 80058c0:	080059d5 	.word	0x080059d5
 80058c4:	080059d5 	.word	0x080059d5
 80058c8:	080059d5 	.word	0x080059d5
 80058cc:	08005993 	.word	0x08005993
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 f9d0 	bl	8005c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0208 	orr.w	r2, r2, #8
 80058ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	699a      	ldr	r2, [r3, #24]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6999      	ldr	r1, [r3, #24]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	619a      	str	r2, [r3, #24]
      break;
 800590e:	e062      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fa16 	bl	8005d48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800592a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	6999      	ldr	r1, [r3, #24]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	021a      	lsls	r2, r3, #8
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	619a      	str	r2, [r3, #24]
      break;
 8005950:	e041      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	4618      	mov	r0, r3
 800595a:	f000 fa5f 	bl	8005e1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f042 0208 	orr.w	r2, r2, #8
 800596c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69da      	ldr	r2, [r3, #28]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0204 	bic.w	r2, r2, #4
 800597c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69d9      	ldr	r1, [r3, #28]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	430a      	orrs	r2, r1
 800598e:	61da      	str	r2, [r3, #28]
      break;
 8005990:	e021      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	4618      	mov	r0, r3
 800599a:	f000 faa9 	bl	8005ef0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69d9      	ldr	r1, [r3, #28]
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	021a      	lsls	r2, r3, #8
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	61da      	str	r2, [r3, #28]
      break;
 80059d2:	e000      	b.n	80059d6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80059d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIM_ConfigClockSource+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e0b3      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x180>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a1e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a26:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a38:	d03e      	beq.n	8005ab8 <HAL_TIM_ConfigClockSource+0xd0>
 8005a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3e:	f200 8087 	bhi.w	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a46:	f000 8085 	beq.w	8005b54 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	d87f      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a50:	2b70      	cmp	r3, #112	; 0x70
 8005a52:	d01a      	beq.n	8005a8a <HAL_TIM_ConfigClockSource+0xa2>
 8005a54:	2b70      	cmp	r3, #112	; 0x70
 8005a56:	d87b      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a58:	2b60      	cmp	r3, #96	; 0x60
 8005a5a:	d050      	beq.n	8005afe <HAL_TIM_ConfigClockSource+0x116>
 8005a5c:	2b60      	cmp	r3, #96	; 0x60
 8005a5e:	d877      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a60:	2b50      	cmp	r3, #80	; 0x50
 8005a62:	d03c      	beq.n	8005ade <HAL_TIM_ConfigClockSource+0xf6>
 8005a64:	2b50      	cmp	r3, #80	; 0x50
 8005a66:	d873      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a68:	2b40      	cmp	r3, #64	; 0x40
 8005a6a:	d058      	beq.n	8005b1e <HAL_TIM_ConfigClockSource+0x136>
 8005a6c:	2b40      	cmp	r3, #64	; 0x40
 8005a6e:	d86f      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a70:	2b30      	cmp	r3, #48	; 0x30
 8005a72:	d064      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x156>
 8005a74:	2b30      	cmp	r3, #48	; 0x30
 8005a76:	d86b      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	d060      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x156>
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d867      	bhi.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d05c      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x156>
 8005a84:	2b10      	cmp	r3, #16
 8005a86:	d05a      	beq.n	8005b3e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005a88:	e062      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	6899      	ldr	r1, [r3, #8]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f000 faee 	bl	800607a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	609a      	str	r2, [r3, #8]
      break;
 8005ab6:	e04e      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	6899      	ldr	r1, [r3, #8]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	f000 fad7 	bl	800607a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ada:	609a      	str	r2, [r3, #8]
      break;
 8005adc:	e03b      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	6859      	ldr	r1, [r3, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f000 fa4e 	bl	8005f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2150      	movs	r1, #80	; 0x50
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 faa5 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005afc:	e02b      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f000 fa6c 	bl	8005fe8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2160      	movs	r1, #96	; 0x60
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 fa95 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005b1c:	e01b      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6818      	ldr	r0, [r3, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	6859      	ldr	r1, [r3, #4]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	f000 fa2e 	bl	8005f8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	2140      	movs	r1, #64	; 0x40
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 fa85 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005b3c:	e00b      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4619      	mov	r1, r3
 8005b48:	4610      	mov	r0, r2
 8005b4a:	f000 fa7c 	bl	8006046 <TIM_ITRx_SetConfig>
        break;
 8005b4e:	e002      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b50:	bf00      	nop
 8005b52:	e000      	b.n	8005b56 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005b54:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b66:	2300      	movs	r3, #0
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc80      	pop	{r7}
 8005b80:	4770      	bx	lr

08005b82 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bc80      	pop	{r7}
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bc80      	pop	{r7}
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr

08005bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <TIM_Base_SetConfig+0xb8>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d00b      	beq.n	8005be8 <TIM_Base_SetConfig+0x30>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d007      	beq.n	8005be8 <TIM_Base_SetConfig+0x30>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <TIM_Base_SetConfig+0xbc>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d003      	beq.n	8005be8 <TIM_Base_SetConfig+0x30>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <TIM_Base_SetConfig+0xc0>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d108      	bne.n	8005bfa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a1c      	ldr	r2, [pc, #112]	; (8005c70 <TIM_Base_SetConfig+0xb8>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d00b      	beq.n	8005c1a <TIM_Base_SetConfig+0x62>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d007      	beq.n	8005c1a <TIM_Base_SetConfig+0x62>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a19      	ldr	r2, [pc, #100]	; (8005c74 <TIM_Base_SetConfig+0xbc>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d003      	beq.n	8005c1a <TIM_Base_SetConfig+0x62>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <TIM_Base_SetConfig+0xc0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d108      	bne.n	8005c2c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689a      	ldr	r2, [r3, #8]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a07      	ldr	r2, [pc, #28]	; (8005c70 <TIM_Base_SetConfig+0xb8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d103      	bne.n	8005c60 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	691a      	ldr	r2, [r3, #16]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	615a      	str	r2, [r3, #20]
}
 8005c66:	bf00      	nop
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bc80      	pop	{r7}
 8005c6e:	4770      	bx	lr
 8005c70:	40012c00 	.word	0x40012c00
 8005c74:	40000400 	.word	0x40000400
 8005c78:	40000800 	.word	0x40000800

08005c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a1b      	ldr	r3, [r3, #32]
 8005c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 0303 	bic.w	r3, r3, #3
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	f023 0302 	bic.w	r3, r3, #2
 8005cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	; (8005d44 <TIM_OC1_SetConfig+0xc8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d10c      	bne.n	8005cf2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0308 	bic.w	r3, r3, #8
 8005cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f023 0304 	bic.w	r3, r3, #4
 8005cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a13      	ldr	r2, [pc, #76]	; (8005d44 <TIM_OC1_SetConfig+0xc8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d111      	bne.n	8005d1e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	621a      	str	r2, [r3, #32]
}
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bc80      	pop	{r7}
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40012c00 	.word	0x40012c00

08005d48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b087      	sub	sp, #28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a1b      	ldr	r3, [r3, #32]
 8005d56:	f023 0210 	bic.w	r2, r3, #16
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6a1b      	ldr	r3, [r3, #32]
 8005d62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	699b      	ldr	r3, [r3, #24]
 8005d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f023 0320 	bic.w	r3, r3, #32
 8005d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	011b      	lsls	r3, r3, #4
 8005d9a:	697a      	ldr	r2, [r7, #20]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <TIM_OC2_SetConfig+0xd0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d10d      	bne.n	8005dc4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	011b      	lsls	r3, r3, #4
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <TIM_OC2_SetConfig+0xd0>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d113      	bne.n	8005df4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	621a      	str	r2, [r3, #32]
}
 8005e0e:	bf00      	nop
 8005e10:	371c      	adds	r7, #28
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr
 8005e18:	40012c00 	.word	0x40012c00

08005e1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b087      	sub	sp, #28
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 0303 	bic.w	r3, r3, #3
 8005e52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a1d      	ldr	r2, [pc, #116]	; (8005eec <TIM_OC3_SetConfig+0xd0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d10d      	bne.n	8005e96 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a14      	ldr	r2, [pc, #80]	; (8005eec <TIM_OC3_SetConfig+0xd0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d113      	bne.n	8005ec6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	011b      	lsls	r3, r3, #4
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc80      	pop	{r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	40012c00 	.word	0x40012c00

08005ef0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a1b      	ldr	r3, [r3, #32]
 8005efe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	021b      	lsls	r3, r3, #8
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	031b      	lsls	r3, r3, #12
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a0f      	ldr	r2, [pc, #60]	; (8005f88 <TIM_OC4_SetConfig+0x98>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d109      	bne.n	8005f64 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	695b      	ldr	r3, [r3, #20]
 8005f5c:	019b      	lsls	r3, r3, #6
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bc80      	pop	{r7}
 8005f86:	4770      	bx	lr
 8005f88:	40012c00 	.word	0x40012c00

08005f8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	60f8      	str	r0, [r7, #12]
 8005f94:	60b9      	str	r1, [r7, #8]
 8005f96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	011b      	lsls	r3, r3, #4
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 030a 	bic.w	r3, r3, #10
 8005fc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	693a      	ldr	r2, [r7, #16]
 8005fd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	621a      	str	r2, [r3, #32]
}
 8005fde:	bf00      	nop
 8005fe0:	371c      	adds	r7, #28
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bc80      	pop	{r7}
 8005fe6:	4770      	bx	lr

08005fe8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f023 0210 	bic.w	r2, r3, #16
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006012:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	031b      	lsls	r3, r3, #12
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006024:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	621a      	str	r2, [r3, #32]
}
 800603c:	bf00      	nop
 800603e:	371c      	adds	r7, #28
 8006040:	46bd      	mov	sp, r7
 8006042:	bc80      	pop	{r7}
 8006044:	4770      	bx	lr

08006046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	f043 0307 	orr.w	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	bc80      	pop	{r7}
 8006078:	4770      	bx	lr

0800607a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800607a:	b480      	push	{r7}
 800607c:	b087      	sub	sp, #28
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006094:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	021a      	lsls	r2, r3, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	431a      	orrs	r2, r3
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	697a      	ldr	r2, [r7, #20]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	609a      	str	r2, [r3, #8]
}
 80060ae:	bf00      	nop
 80060b0:	371c      	adds	r7, #28
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bc80      	pop	{r7}
 80060b6:	4770      	bx	lr

080060b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2201      	movs	r2, #1
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	43db      	mvns	r3, r3
 80060da:	401a      	ands	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a1a      	ldr	r2, [r3, #32]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bc80      	pop	{r7}
 80060fe:	4770      	bx	lr

08006100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006110:	2b01      	cmp	r3, #1
 8006112:	d101      	bne.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006114:	2302      	movs	r3, #2
 8006116:	e046      	b.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2202      	movs	r2, #2
 8006124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a16      	ldr	r2, [pc, #88]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006164:	d009      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a12      	ldr	r2, [pc, #72]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a10      	ldr	r2, [pc, #64]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10c      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4313      	orrs	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bc80      	pop	{r7}
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40000400 	.word	0x40000400
 80061b8:	40000800 	.word	0x40000800

080061bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061c6:	2300      	movs	r3, #0
 80061c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e03d      	b.n	8006254 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4313      	orrs	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	4313      	orrs	r3, r2
 8006208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	691b      	ldr	r3, [r3, #16]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	69db      	ldr	r3, [r3, #28]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	bc80      	pop	{r7}
 800625c:	4770      	bx	lr

0800625e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800625e:	b480      	push	{r7}
 8006260:	b083      	sub	sp, #12
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006266:	bf00      	nop
 8006268:	370c      	adds	r7, #12
 800626a:	46bd      	mov	sp, r7
 800626c:	bc80      	pop	{r7}
 800626e:	4770      	bx	lr

08006270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e03f      	b.n	8006314 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fd f87b 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2224      	movs	r2, #36	; 0x24
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fc84 	bl	8006bd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	691a      	ldr	r2, [r3, #16]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b08a      	sub	sp, #40	; 0x28
 8006320:	af02      	add	r7, sp, #8
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800632c:	2300      	movs	r3, #0
 800632e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b20      	cmp	r3, #32
 800633a:	d17c      	bne.n	8006436 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Transmit+0x2c>
 8006342:	88fb      	ldrh	r3, [r7, #6]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e075      	b.n	8006438 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006352:	2b01      	cmp	r3, #1
 8006354:	d101      	bne.n	800635a <HAL_UART_Transmit+0x3e>
 8006356:	2302      	movs	r3, #2
 8006358:	e06e      	b.n	8006438 <HAL_UART_Transmit+0x11c>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2201      	movs	r2, #1
 800635e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2221      	movs	r2, #33	; 0x21
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006370:	f7fd f9ec 	bl	800374c <HAL_GetTick>
 8006374:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	88fa      	ldrh	r2, [r7, #6]
 8006380:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638a:	d108      	bne.n	800639e <HAL_UART_Transmit+0x82>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d104      	bne.n	800639e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006394:	2300      	movs	r3, #0
 8006396:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	e003      	b.n	80063a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063a2:	2300      	movs	r3, #0
 80063a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80063ae:	e02a      	b.n	8006406 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	9300      	str	r3, [sp, #0]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	2180      	movs	r1, #128	; 0x80
 80063ba:	68f8      	ldr	r0, [r7, #12]
 80063bc:	f000 fa37 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e036      	b.n	8006438 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10b      	bne.n	80063e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	881b      	ldrh	r3, [r3, #0]
 80063d4:	461a      	mov	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	3302      	adds	r3, #2
 80063e4:	61bb      	str	r3, [r7, #24]
 80063e6:	e007      	b.n	80063f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	781a      	ldrb	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1cf      	bne.n	80063b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	2200      	movs	r2, #0
 8006418:	2140      	movs	r1, #64	; 0x40
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fa07 	bl	800682e <UART_WaitOnFlagUntilTimeout>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006426:	2303      	movs	r3, #3
 8006428:	e006      	b.n	8006438 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2220      	movs	r2, #32
 800642e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	e000      	b.n	8006438 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006436:	2302      	movs	r3, #2
  }
}
 8006438:	4618      	mov	r0, r3
 800643a:	3720      	adds	r7, #32
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b20      	cmp	r3, #32
 8006458:	d11d      	bne.n	8006496 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <HAL_UART_Receive_IT+0x26>
 8006460:	88fb      	ldrh	r3, [r7, #6]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e016      	b.n	8006498 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006470:	2b01      	cmp	r3, #1
 8006472:	d101      	bne.n	8006478 <HAL_UART_Receive_IT+0x38>
 8006474:	2302      	movs	r3, #2
 8006476:	e00f      	b.n	8006498 <HAL_UART_Receive_IT+0x58>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	461a      	mov	r2, r3
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fa18 	bl	80068c2 <UART_Start_Receive_IT>
 8006492:	4603      	mov	r3, r0
 8006494:	e000      	b.n	8006498 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006496:	2302      	movs	r3, #2
  }
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	; 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ca:	f003 030f 	and.w	r3, r3, #15
 80064ce:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10d      	bne.n	80064f2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_UART_IRQHandler+0x52>
 80064e0:	6a3b      	ldr	r3, [r7, #32]
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fac9 	bl	8006a82 <UART_Receive_IT>
      return;
 80064f0:	e17b      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 80b1 	beq.w	800665c <HAL_UART_IRQHandler+0x1bc>
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d105      	bne.n	8006510 <HAL_UART_IRQHandler+0x70>
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800650a:	2b00      	cmp	r3, #0
 800650c:	f000 80a6 	beq.w	800665c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <HAL_UART_IRQHandler+0x90>
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006520:	2b00      	cmp	r3, #0
 8006522:	d005      	beq.n	8006530 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	f043 0201 	orr.w	r2, r3, #1
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <HAL_UART_IRQHandler+0xb0>
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f003 0301 	and.w	r3, r3, #1
 8006540:	2b00      	cmp	r3, #0
 8006542:	d005      	beq.n	8006550 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	f043 0202 	orr.w	r2, r3, #2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <HAL_UART_IRQHandler+0xd0>
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d005      	beq.n	8006570 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006568:	f043 0204 	orr.w	r2, r3, #4
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	f003 0308 	and.w	r3, r3, #8
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00f      	beq.n	800659a <HAL_UART_IRQHandler+0xfa>
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f003 0320 	and.w	r3, r3, #32
 8006580:	2b00      	cmp	r3, #0
 8006582:	d104      	bne.n	800658e <HAL_UART_IRQHandler+0xee>
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d005      	beq.n	800659a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006592:	f043 0208 	orr.w	r2, r3, #8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 811e 	beq.w	80067e0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a6:	f003 0320 	and.w	r3, r3, #32
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d007      	beq.n	80065be <HAL_UART_IRQHandler+0x11e>
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 fa62 	bl	8006a82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	bf14      	ite	ne
 80065cc:	2301      	movne	r3, #1
 80065ce:	2300      	moveq	r3, #0
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d102      	bne.n	80065e6 <HAL_UART_IRQHandler+0x146>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d031      	beq.n	800664a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f9a4 	bl	8006934 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d023      	beq.n	8006642 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	695a      	ldr	r2, [r3, #20]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006608:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	2b00      	cmp	r3, #0
 8006610:	d013      	beq.n	800663a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	4a76      	ldr	r2, [pc, #472]	; (80067f0 <HAL_UART_IRQHandler+0x350>)
 8006618:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fa0a 	bl	8003a38 <HAL_DMA_Abort_IT>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d016      	beq.n	8006658 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006634:	4610      	mov	r0, r2
 8006636:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006638:	e00e      	b.n	8006658 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f8e3 	bl	8006806 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006640:	e00a      	b.n	8006658 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f8df 	bl	8006806 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006648:	e006      	b.n	8006658 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f8db 	bl	8006806 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006656:	e0c3      	b.n	80067e0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006658:	bf00      	nop
    return;
 800665a:	e0c1      	b.n	80067e0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	2b01      	cmp	r3, #1
 8006662:	f040 80a1 	bne.w	80067a8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006668:	f003 0310 	and.w	r3, r3, #16
 800666c:	2b00      	cmp	r3, #0
 800666e:	f000 809b 	beq.w	80067a8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	f003 0310 	and.w	r3, r3, #16
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 8095 	beq.w	80067a8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	60fb      	str	r3, [r7, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d04e      	beq.n	8006740 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80066ac:	8a3b      	ldrh	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8098 	beq.w	80067e4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066b8:	8a3a      	ldrh	r2, [r7, #16]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f080 8092 	bcs.w	80067e4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8a3a      	ldrh	r2, [r7, #16]
 80066c4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d02b      	beq.n	8006728 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066de:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695a      	ldr	r2, [r3, #20]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0201 	bic.w	r2, r2, #1
 80066ee:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	695a      	ldr	r2, [r3, #20]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066fe:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2220      	movs	r2, #32
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0210 	bic.w	r2, r2, #16
 800671c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	4618      	mov	r0, r3
 8006724:	f7fd f94d 	bl	80039c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006730:	b29b      	uxth	r3, r3
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	b29b      	uxth	r3, r3
 8006736:	4619      	mov	r1, r3
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f86d 	bl	8006818 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800673e:	e051      	b.n	80067e4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006748:	b29b      	uxth	r3, r3
 800674a:	1ad3      	subs	r3, r2, r3
 800674c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006752:	b29b      	uxth	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d047      	beq.n	80067e8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8006758:	8a7b      	ldrh	r3, [r7, #18]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d044      	beq.n	80067e8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800676c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695a      	ldr	r2, [r3, #20]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0201 	bic.w	r2, r2, #1
 800677c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 0210 	bic.w	r2, r2, #16
 800679a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800679c:	8a7b      	ldrh	r3, [r7, #18]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f839 	bl	8006818 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80067a6:	e01f      	b.n	80067e8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d008      	beq.n	80067c4 <HAL_UART_IRQHandler+0x324>
 80067b2:	6a3b      	ldr	r3, [r7, #32]
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8f9 	bl	80069b4 <UART_Transmit_IT>
    return;
 80067c2:	e012      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00d      	beq.n	80067ea <HAL_UART_IRQHandler+0x34a>
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 f93a 	bl	8006a52 <UART_EndTransmit_IT>
    return;
 80067de:	e004      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
    return;
 80067e0:	bf00      	nop
 80067e2:	e002      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
      return;
 80067e4:	bf00      	nop
 80067e6:	e000      	b.n	80067ea <HAL_UART_IRQHandler+0x34a>
      return;
 80067e8:	bf00      	nop
  }
}
 80067ea:	3728      	adds	r7, #40	; 0x28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}
 80067f0:	0800698d 	.word	0x0800698d

080067f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr

08006806 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006806:	b480      	push	{r7}
 8006808:	b083      	sub	sp, #12
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800680e:	bf00      	nop
 8006810:	370c      	adds	r7, #12
 8006812:	46bd      	mov	sp, r7
 8006814:	bc80      	pop	{r7}
 8006816:	4770      	bx	lr

08006818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	460b      	mov	r3, r1
 8006822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr

0800682e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800682e:	b580      	push	{r7, lr}
 8006830:	b084      	sub	sp, #16
 8006832:	af00      	add	r7, sp, #0
 8006834:	60f8      	str	r0, [r7, #12]
 8006836:	60b9      	str	r1, [r7, #8]
 8006838:	603b      	str	r3, [r7, #0]
 800683a:	4613      	mov	r3, r2
 800683c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800683e:	e02c      	b.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d028      	beq.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d007      	beq.n	800685e <UART_WaitOnFlagUntilTimeout+0x30>
 800684e:	f7fc ff7d 	bl	800374c <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	69ba      	ldr	r2, [r7, #24]
 800685a:	429a      	cmp	r2, r3
 800685c:	d21d      	bcs.n	800689a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800686c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	695a      	ldr	r2, [r3, #20]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2220      	movs	r2, #32
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e00f      	b.n	80068ba <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	4013      	ands	r3, r2
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	bf0c      	ite	eq
 80068aa:	2301      	moveq	r3, #1
 80068ac:	2300      	movne	r3, #0
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d0c3      	beq.n	8006840 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	4613      	mov	r3, r2
 80068ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	88fa      	ldrh	r2, [r7, #6]
 80068e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2222      	movs	r2, #34	; 0x22
 80068ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68da      	ldr	r2, [r3, #12]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006906:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695a      	ldr	r2, [r3, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0220 	orr.w	r2, r2, #32
 8006926:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	bc80      	pop	{r7}
 8006932:	4770      	bx	lr

08006934 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b083      	sub	sp, #12
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68da      	ldr	r2, [r3, #12]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800694a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f022 0201 	bic.w	r2, r2, #1
 800695a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006960:	2b01      	cmp	r3, #1
 8006962:	d107      	bne.n	8006974 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68da      	ldr	r2, [r3, #12]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0210 	bic.w	r2, r2, #16
 8006972:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	bc80      	pop	{r7}
 800698a:	4770      	bx	lr

0800698c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006998:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff ff2d 	bl	8006806 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	2b21      	cmp	r3, #33	; 0x21
 80069c6:	d13e      	bne.n	8006a46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d0:	d114      	bne.n	80069fc <UART_Transmit_IT+0x48>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d110      	bne.n	80069fc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6a1b      	ldr	r3, [r3, #32]
 80069f4:	1c9a      	adds	r2, r3, #2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	621a      	str	r2, [r3, #32]
 80069fa:	e008      	b.n	8006a0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	1c59      	adds	r1, r3, #1
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6211      	str	r1, [r2, #32]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	3b01      	subs	r3, #1
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10f      	bne.n	8006a42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68da      	ldr	r2, [r3, #12]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a42:	2300      	movs	r3, #0
 8006a44:	e000      	b.n	8006a48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a46:	2302      	movs	r3, #2
  }
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3714      	adds	r7, #20
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr

08006a52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b082      	sub	sp, #8
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68da      	ldr	r2, [r3, #12]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff febe 	bl	80067f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b086      	sub	sp, #24
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b22      	cmp	r3, #34	; 0x22
 8006a94:	f040 8099 	bne.w	8006bca <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d117      	bne.n	8006ad2 <UART_Receive_IT+0x50>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d113      	bne.n	8006ad2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab2:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	1c9a      	adds	r2, r3, #2
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	629a      	str	r2, [r3, #40]	; 0x28
 8006ad0:	e026      	b.n	8006b20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d007      	beq.n	8006af6 <UART_Receive_IT+0x74>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d10a      	bne.n	8006b04 <UART_Receive_IT+0x82>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d106      	bne.n	8006b04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e008      	b.n	8006b16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d148      	bne.n	8006bc6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0220 	bic.w	r2, r2, #32
 8006b42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	695a      	ldr	r2, [r3, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 0201 	bic.w	r2, r2, #1
 8006b62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d123      	bne.n	8006bbc <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0210 	bic.w	r2, r2, #16
 8006b88:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0310 	and.w	r3, r3, #16
 8006b94:	2b10      	cmp	r3, #16
 8006b96:	d10a      	bne.n	8006bae <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	60fb      	str	r3, [r7, #12]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fe2f 	bl	8006818 <HAL_UARTEx_RxEventCallback>
 8006bba:	e002      	b.n	8006bc2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f7fa fbf1 	bl	80013a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e002      	b.n	8006bcc <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e000      	b.n	8006bcc <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006bca:	2302      	movs	r3, #2
  }
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	430a      	orrs	r2, r1
 8006bf0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689a      	ldr	r2, [r3, #8]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	691b      	ldr	r3, [r3, #16]
 8006bfa:	431a      	orrs	r2, r3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c0e:	f023 030c 	bic.w	r3, r3, #12
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	6812      	ldr	r2, [r2, #0]
 8006c16:	68b9      	ldr	r1, [r7, #8]
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <UART_SetConfig+0x114>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d103      	bne.n	8006c44 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c3c:	f7fd ff18 	bl	8004a70 <HAL_RCC_GetPCLK2Freq>
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	e002      	b.n	8006c4a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c44:	f7fd ff00 	bl	8004a48 <HAL_RCC_GetPCLK1Freq>
 8006c48:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c4a:	68fa      	ldr	r2, [r7, #12]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009a      	lsls	r2, r3, #2
 8006c54:	441a      	add	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c60:	4a22      	ldr	r2, [pc, #136]	; (8006cec <UART_SetConfig+0x118>)
 8006c62:	fba2 2303 	umull	r2, r3, r2, r3
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	0119      	lsls	r1, r3, #4
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	4413      	add	r3, r2
 8006c72:	009a      	lsls	r2, r3, #2
 8006c74:	441a      	add	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c80:	4b1a      	ldr	r3, [pc, #104]	; (8006cec <UART_SetConfig+0x118>)
 8006c82:	fba3 0302 	umull	r0, r3, r3, r2
 8006c86:	095b      	lsrs	r3, r3, #5
 8006c88:	2064      	movs	r0, #100	; 0x64
 8006c8a:	fb00 f303 	mul.w	r3, r0, r3
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	3332      	adds	r3, #50	; 0x32
 8006c94:	4a15      	ldr	r2, [pc, #84]	; (8006cec <UART_SetConfig+0x118>)
 8006c96:	fba2 2303 	umull	r2, r3, r2, r3
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ca0:	4419      	add	r1, r3
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4413      	add	r3, r2
 8006caa:	009a      	lsls	r2, r3, #2
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	; (8006cec <UART_SetConfig+0x118>)
 8006cba:	fba3 0302 	umull	r0, r3, r3, r2
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	2064      	movs	r0, #100	; 0x64
 8006cc2:	fb00 f303 	mul.w	r3, r0, r3
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	3332      	adds	r3, #50	; 0x32
 8006ccc:	4a07      	ldr	r2, [pc, #28]	; (8006cec <UART_SetConfig+0x118>)
 8006cce:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	f003 020f 	and.w	r2, r3, #15
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	440a      	add	r2, r1
 8006cde:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006ce0:	bf00      	nop
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	40013800 	.word	0x40013800
 8006cec:	51eb851f 	.word	0x51eb851f

08006cf0 <arm_pid_init_f32>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	6986      	ldr	r6, [r0, #24]
 8006cf6:	6a25      	ldr	r5, [r4, #32]
 8006cf8:	4630      	mov	r0, r6
 8006cfa:	460f      	mov	r7, r1
 8006cfc:	69e1      	ldr	r1, [r4, #28]
 8006cfe:	f7f9 ff39 	bl	8000b74 <__addsf3>
 8006d02:	4629      	mov	r1, r5
 8006d04:	f7f9 ff36 	bl	8000b74 <__addsf3>
 8006d08:	4629      	mov	r1, r5
 8006d0a:	6020      	str	r0, [r4, #0]
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	f7f9 ff31 	bl	8000b74 <__addsf3>
 8006d12:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006d16:	4601      	mov	r1, r0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7f9 ff29 	bl	8000b70 <__aeabi_fsub>
 8006d1e:	60a5      	str	r5, [r4, #8]
 8006d20:	6060      	str	r0, [r4, #4]
 8006d22:	b167      	cbz	r7, 8006d3e <arm_pid_init_f32+0x4e>
 8006d24:	2300      	movs	r3, #0
 8006d26:	7323      	strb	r3, [r4, #12]
 8006d28:	7363      	strb	r3, [r4, #13]
 8006d2a:	73a3      	strb	r3, [r4, #14]
 8006d2c:	73e3      	strb	r3, [r4, #15]
 8006d2e:	7423      	strb	r3, [r4, #16]
 8006d30:	7463      	strb	r3, [r4, #17]
 8006d32:	74a3      	strb	r3, [r4, #18]
 8006d34:	74e3      	strb	r3, [r4, #19]
 8006d36:	7523      	strb	r3, [r4, #20]
 8006d38:	7563      	strb	r3, [r4, #21]
 8006d3a:	75a3      	strb	r3, [r4, #22]
 8006d3c:	75e3      	strb	r3, [r4, #23]
 8006d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d40 <atof>:
 8006d40:	2100      	movs	r1, #0
 8006d42:	f001 badd 	b.w	8008300 <strtod>
	...

08006d48 <__errno>:
 8006d48:	4b01      	ldr	r3, [pc, #4]	; (8006d50 <__errno+0x8>)
 8006d4a:	6818      	ldr	r0, [r3, #0]
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	20000018 	.word	0x20000018

08006d54 <__libc_init_array>:
 8006d54:	b570      	push	{r4, r5, r6, lr}
 8006d56:	2600      	movs	r6, #0
 8006d58:	4d0c      	ldr	r5, [pc, #48]	; (8006d8c <__libc_init_array+0x38>)
 8006d5a:	4c0d      	ldr	r4, [pc, #52]	; (8006d90 <__libc_init_array+0x3c>)
 8006d5c:	1b64      	subs	r4, r4, r5
 8006d5e:	10a4      	asrs	r4, r4, #2
 8006d60:	42a6      	cmp	r6, r4
 8006d62:	d109      	bne.n	8006d78 <__libc_init_array+0x24>
 8006d64:	f004 f994 	bl	800b090 <_init>
 8006d68:	2600      	movs	r6, #0
 8006d6a:	4d0a      	ldr	r5, [pc, #40]	; (8006d94 <__libc_init_array+0x40>)
 8006d6c:	4c0a      	ldr	r4, [pc, #40]	; (8006d98 <__libc_init_array+0x44>)
 8006d6e:	1b64      	subs	r4, r4, r5
 8006d70:	10a4      	asrs	r4, r4, #2
 8006d72:	42a6      	cmp	r6, r4
 8006d74:	d105      	bne.n	8006d82 <__libc_init_array+0x2e>
 8006d76:	bd70      	pop	{r4, r5, r6, pc}
 8006d78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d7c:	4798      	blx	r3
 8006d7e:	3601      	adds	r6, #1
 8006d80:	e7ee      	b.n	8006d60 <__libc_init_array+0xc>
 8006d82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d86:	4798      	blx	r3
 8006d88:	3601      	adds	r6, #1
 8006d8a:	e7f2      	b.n	8006d72 <__libc_init_array+0x1e>
 8006d8c:	0800b774 	.word	0x0800b774
 8006d90:	0800b774 	.word	0x0800b774
 8006d94:	0800b774 	.word	0x0800b774
 8006d98:	0800b778 	.word	0x0800b778

08006d9c <memset>:
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	4402      	add	r2, r0
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d100      	bne.n	8006da6 <memset+0xa>
 8006da4:	4770      	bx	lr
 8006da6:	f803 1b01 	strb.w	r1, [r3], #1
 8006daa:	e7f9      	b.n	8006da0 <memset+0x4>

08006dac <__cvt>:
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db2:	461f      	mov	r7, r3
 8006db4:	bfbb      	ittet	lt
 8006db6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006dba:	461f      	movlt	r7, r3
 8006dbc:	2300      	movge	r3, #0
 8006dbe:	232d      	movlt	r3, #45	; 0x2d
 8006dc0:	b088      	sub	sp, #32
 8006dc2:	4614      	mov	r4, r2
 8006dc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006dc6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006dc8:	7013      	strb	r3, [r2, #0]
 8006dca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006dcc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006dd0:	f023 0820 	bic.w	r8, r3, #32
 8006dd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006dd8:	d005      	beq.n	8006de6 <__cvt+0x3a>
 8006dda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006dde:	d100      	bne.n	8006de2 <__cvt+0x36>
 8006de0:	3501      	adds	r5, #1
 8006de2:	2302      	movs	r3, #2
 8006de4:	e000      	b.n	8006de8 <__cvt+0x3c>
 8006de6:	2303      	movs	r3, #3
 8006de8:	aa07      	add	r2, sp, #28
 8006dea:	9204      	str	r2, [sp, #16]
 8006dec:	aa06      	add	r2, sp, #24
 8006dee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006df2:	e9cd 3500 	strd	r3, r5, [sp]
 8006df6:	4622      	mov	r2, r4
 8006df8:	463b      	mov	r3, r7
 8006dfa:	f001 fb1d 	bl	8008438 <_dtoa_r>
 8006dfe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e02:	4606      	mov	r6, r0
 8006e04:	d102      	bne.n	8006e0c <__cvt+0x60>
 8006e06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e08:	07db      	lsls	r3, r3, #31
 8006e0a:	d522      	bpl.n	8006e52 <__cvt+0xa6>
 8006e0c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e10:	eb06 0905 	add.w	r9, r6, r5
 8006e14:	d110      	bne.n	8006e38 <__cvt+0x8c>
 8006e16:	7833      	ldrb	r3, [r6, #0]
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	d10a      	bne.n	8006e32 <__cvt+0x86>
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2300      	movs	r3, #0
 8006e20:	4620      	mov	r0, r4
 8006e22:	4639      	mov	r1, r7
 8006e24:	f7f9 fdc0 	bl	80009a8 <__aeabi_dcmpeq>
 8006e28:	b918      	cbnz	r0, 8006e32 <__cvt+0x86>
 8006e2a:	f1c5 0501 	rsb	r5, r5, #1
 8006e2e:	f8ca 5000 	str.w	r5, [sl]
 8006e32:	f8da 3000 	ldr.w	r3, [sl]
 8006e36:	4499      	add	r9, r3
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	4639      	mov	r1, r7
 8006e40:	f7f9 fdb2 	bl	80009a8 <__aeabi_dcmpeq>
 8006e44:	b108      	cbz	r0, 8006e4a <__cvt+0x9e>
 8006e46:	f8cd 901c 	str.w	r9, [sp, #28]
 8006e4a:	2230      	movs	r2, #48	; 0x30
 8006e4c:	9b07      	ldr	r3, [sp, #28]
 8006e4e:	454b      	cmp	r3, r9
 8006e50:	d307      	bcc.n	8006e62 <__cvt+0xb6>
 8006e52:	4630      	mov	r0, r6
 8006e54:	9b07      	ldr	r3, [sp, #28]
 8006e56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006e58:	1b9b      	subs	r3, r3, r6
 8006e5a:	6013      	str	r3, [r2, #0]
 8006e5c:	b008      	add	sp, #32
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	1c59      	adds	r1, r3, #1
 8006e64:	9107      	str	r1, [sp, #28]
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e7f0      	b.n	8006e4c <__cvt+0xa0>

08006e6a <__exponent>:
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e6e:	2900      	cmp	r1, #0
 8006e70:	f803 2b02 	strb.w	r2, [r3], #2
 8006e74:	bfb6      	itet	lt
 8006e76:	222d      	movlt	r2, #45	; 0x2d
 8006e78:	222b      	movge	r2, #43	; 0x2b
 8006e7a:	4249      	neglt	r1, r1
 8006e7c:	2909      	cmp	r1, #9
 8006e7e:	7042      	strb	r2, [r0, #1]
 8006e80:	dd2b      	ble.n	8006eda <__exponent+0x70>
 8006e82:	f10d 0407 	add.w	r4, sp, #7
 8006e86:	46a4      	mov	ip, r4
 8006e88:	270a      	movs	r7, #10
 8006e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006e8e:	460a      	mov	r2, r1
 8006e90:	46a6      	mov	lr, r4
 8006e92:	fb07 1516 	mls	r5, r7, r6, r1
 8006e96:	2a63      	cmp	r2, #99	; 0x63
 8006e98:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006ea2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006ea6:	dcf0      	bgt.n	8006e8a <__exponent+0x20>
 8006ea8:	3130      	adds	r1, #48	; 0x30
 8006eaa:	f1ae 0502 	sub.w	r5, lr, #2
 8006eae:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006eb2:	4629      	mov	r1, r5
 8006eb4:	1c44      	adds	r4, r0, #1
 8006eb6:	4561      	cmp	r1, ip
 8006eb8:	d30a      	bcc.n	8006ed0 <__exponent+0x66>
 8006eba:	f10d 0209 	add.w	r2, sp, #9
 8006ebe:	eba2 020e 	sub.w	r2, r2, lr
 8006ec2:	4565      	cmp	r5, ip
 8006ec4:	bf88      	it	hi
 8006ec6:	2200      	movhi	r2, #0
 8006ec8:	4413      	add	r3, r2
 8006eca:	1a18      	subs	r0, r3, r0
 8006ecc:	b003      	add	sp, #12
 8006ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ed0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ed4:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006ed8:	e7ed      	b.n	8006eb6 <__exponent+0x4c>
 8006eda:	2330      	movs	r3, #48	; 0x30
 8006edc:	3130      	adds	r1, #48	; 0x30
 8006ede:	7083      	strb	r3, [r0, #2]
 8006ee0:	70c1      	strb	r1, [r0, #3]
 8006ee2:	1d03      	adds	r3, r0, #4
 8006ee4:	e7f1      	b.n	8006eca <__exponent+0x60>
	...

08006ee8 <_printf_float>:
 8006ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eec:	b091      	sub	sp, #68	; 0x44
 8006eee:	460c      	mov	r4, r1
 8006ef0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006ef4:	4616      	mov	r6, r2
 8006ef6:	461f      	mov	r7, r3
 8006ef8:	4605      	mov	r5, r0
 8006efa:	f002 fbf1 	bl	80096e0 <_localeconv_r>
 8006efe:	6803      	ldr	r3, [r0, #0]
 8006f00:	4618      	mov	r0, r3
 8006f02:	9309      	str	r3, [sp, #36]	; 0x24
 8006f04:	f7f9 f924 	bl	8000150 <strlen>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	930e      	str	r3, [sp, #56]	; 0x38
 8006f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006f10:	900a      	str	r0, [sp, #40]	; 0x28
 8006f12:	3307      	adds	r3, #7
 8006f14:	f023 0307 	bic.w	r3, r3, #7
 8006f18:	f103 0208 	add.w	r2, r3, #8
 8006f1c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006f20:	f8d4 b000 	ldr.w	fp, [r4]
 8006f24:	f8c8 2000 	str.w	r2, [r8]
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006f30:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006f34:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006f38:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3e:	4640      	mov	r0, r8
 8006f40:	4b9c      	ldr	r3, [pc, #624]	; (80071b4 <_printf_float+0x2cc>)
 8006f42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f44:	f7f9 fd62 	bl	8000a0c <__aeabi_dcmpun>
 8006f48:	bb70      	cbnz	r0, 8006fa8 <_printf_float+0xc0>
 8006f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f4e:	4640      	mov	r0, r8
 8006f50:	4b98      	ldr	r3, [pc, #608]	; (80071b4 <_printf_float+0x2cc>)
 8006f52:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006f54:	f7f9 fd3c 	bl	80009d0 <__aeabi_dcmple>
 8006f58:	bb30      	cbnz	r0, 8006fa8 <_printf_float+0xc0>
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4651      	mov	r1, sl
 8006f62:	f7f9 fd2b 	bl	80009bc <__aeabi_dcmplt>
 8006f66:	b110      	cbz	r0, 8006f6e <_printf_float+0x86>
 8006f68:	232d      	movs	r3, #45	; 0x2d
 8006f6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f6e:	4b92      	ldr	r3, [pc, #584]	; (80071b8 <_printf_float+0x2d0>)
 8006f70:	4892      	ldr	r0, [pc, #584]	; (80071bc <_printf_float+0x2d4>)
 8006f72:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006f76:	bf94      	ite	ls
 8006f78:	4698      	movls	r8, r3
 8006f7a:	4680      	movhi	r8, r0
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	f04f 0a00 	mov.w	sl, #0
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	f02b 0304 	bic.w	r3, fp, #4
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	4633      	mov	r3, r6
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4628      	mov	r0, r5
 8006f90:	9700      	str	r7, [sp, #0]
 8006f92:	aa0f      	add	r2, sp, #60	; 0x3c
 8006f94:	f000 f9d4 	bl	8007340 <_printf_common>
 8006f98:	3001      	adds	r0, #1
 8006f9a:	f040 8090 	bne.w	80070be <_printf_float+0x1d6>
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	b011      	add	sp, #68	; 0x44
 8006fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa8:	4642      	mov	r2, r8
 8006faa:	4653      	mov	r3, sl
 8006fac:	4640      	mov	r0, r8
 8006fae:	4651      	mov	r1, sl
 8006fb0:	f7f9 fd2c 	bl	8000a0c <__aeabi_dcmpun>
 8006fb4:	b148      	cbz	r0, 8006fca <_printf_float+0xe2>
 8006fb6:	f1ba 0f00 	cmp.w	sl, #0
 8006fba:	bfb8      	it	lt
 8006fbc:	232d      	movlt	r3, #45	; 0x2d
 8006fbe:	4880      	ldr	r0, [pc, #512]	; (80071c0 <_printf_float+0x2d8>)
 8006fc0:	bfb8      	it	lt
 8006fc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006fc6:	4b7f      	ldr	r3, [pc, #508]	; (80071c4 <_printf_float+0x2dc>)
 8006fc8:	e7d3      	b.n	8006f72 <_printf_float+0x8a>
 8006fca:	6863      	ldr	r3, [r4, #4]
 8006fcc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	d142      	bne.n	800705a <_printf_float+0x172>
 8006fd4:	2306      	movs	r3, #6
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	9206      	str	r2, [sp, #24]
 8006fdc:	aa0e      	add	r2, sp, #56	; 0x38
 8006fde:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006fe2:	aa0d      	add	r2, sp, #52	; 0x34
 8006fe4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006fe8:	9203      	str	r2, [sp, #12]
 8006fea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006fee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ff2:	6023      	str	r3, [r4, #0]
 8006ff4:	6863      	ldr	r3, [r4, #4]
 8006ff6:	4642      	mov	r2, r8
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	4653      	mov	r3, sl
 8006ffe:	910b      	str	r1, [sp, #44]	; 0x2c
 8007000:	f7ff fed4 	bl	8006dac <__cvt>
 8007004:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007006:	4680      	mov	r8, r0
 8007008:	2947      	cmp	r1, #71	; 0x47
 800700a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800700c:	d108      	bne.n	8007020 <_printf_float+0x138>
 800700e:	1cc8      	adds	r0, r1, #3
 8007010:	db02      	blt.n	8007018 <_printf_float+0x130>
 8007012:	6863      	ldr	r3, [r4, #4]
 8007014:	4299      	cmp	r1, r3
 8007016:	dd40      	ble.n	800709a <_printf_float+0x1b2>
 8007018:	f1a9 0902 	sub.w	r9, r9, #2
 800701c:	fa5f f989 	uxtb.w	r9, r9
 8007020:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007024:	d81f      	bhi.n	8007066 <_printf_float+0x17e>
 8007026:	464a      	mov	r2, r9
 8007028:	3901      	subs	r1, #1
 800702a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800702e:	910d      	str	r1, [sp, #52]	; 0x34
 8007030:	f7ff ff1b 	bl	8006e6a <__exponent>
 8007034:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007036:	4682      	mov	sl, r0
 8007038:	1813      	adds	r3, r2, r0
 800703a:	2a01      	cmp	r2, #1
 800703c:	6123      	str	r3, [r4, #16]
 800703e:	dc02      	bgt.n	8007046 <_printf_float+0x15e>
 8007040:	6822      	ldr	r2, [r4, #0]
 8007042:	07d2      	lsls	r2, r2, #31
 8007044:	d501      	bpl.n	800704a <_printf_float+0x162>
 8007046:	3301      	adds	r3, #1
 8007048:	6123      	str	r3, [r4, #16]
 800704a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800704e:	2b00      	cmp	r3, #0
 8007050:	d09b      	beq.n	8006f8a <_printf_float+0xa2>
 8007052:	232d      	movs	r3, #45	; 0x2d
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007058:	e797      	b.n	8006f8a <_printf_float+0xa2>
 800705a:	2947      	cmp	r1, #71	; 0x47
 800705c:	d1bc      	bne.n	8006fd8 <_printf_float+0xf0>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1ba      	bne.n	8006fd8 <_printf_float+0xf0>
 8007062:	2301      	movs	r3, #1
 8007064:	e7b7      	b.n	8006fd6 <_printf_float+0xee>
 8007066:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800706a:	d118      	bne.n	800709e <_printf_float+0x1b6>
 800706c:	2900      	cmp	r1, #0
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	dd0b      	ble.n	800708a <_printf_float+0x1a2>
 8007072:	6121      	str	r1, [r4, #16]
 8007074:	b913      	cbnz	r3, 800707c <_printf_float+0x194>
 8007076:	6822      	ldr	r2, [r4, #0]
 8007078:	07d0      	lsls	r0, r2, #31
 800707a:	d502      	bpl.n	8007082 <_printf_float+0x19a>
 800707c:	3301      	adds	r3, #1
 800707e:	440b      	add	r3, r1
 8007080:	6123      	str	r3, [r4, #16]
 8007082:	f04f 0a00 	mov.w	sl, #0
 8007086:	65a1      	str	r1, [r4, #88]	; 0x58
 8007088:	e7df      	b.n	800704a <_printf_float+0x162>
 800708a:	b913      	cbnz	r3, 8007092 <_printf_float+0x1aa>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	07d2      	lsls	r2, r2, #31
 8007090:	d501      	bpl.n	8007096 <_printf_float+0x1ae>
 8007092:	3302      	adds	r3, #2
 8007094:	e7f4      	b.n	8007080 <_printf_float+0x198>
 8007096:	2301      	movs	r3, #1
 8007098:	e7f2      	b.n	8007080 <_printf_float+0x198>
 800709a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800709e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070a0:	4299      	cmp	r1, r3
 80070a2:	db05      	blt.n	80070b0 <_printf_float+0x1c8>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	6121      	str	r1, [r4, #16]
 80070a8:	07d8      	lsls	r0, r3, #31
 80070aa:	d5ea      	bpl.n	8007082 <_printf_float+0x19a>
 80070ac:	1c4b      	adds	r3, r1, #1
 80070ae:	e7e7      	b.n	8007080 <_printf_float+0x198>
 80070b0:	2900      	cmp	r1, #0
 80070b2:	bfcc      	ite	gt
 80070b4:	2201      	movgt	r2, #1
 80070b6:	f1c1 0202 	rsble	r2, r1, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	e7e0      	b.n	8007080 <_printf_float+0x198>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	055a      	lsls	r2, r3, #21
 80070c2:	d407      	bmi.n	80070d4 <_printf_float+0x1ec>
 80070c4:	6923      	ldr	r3, [r4, #16]
 80070c6:	4642      	mov	r2, r8
 80070c8:	4631      	mov	r1, r6
 80070ca:	4628      	mov	r0, r5
 80070cc:	47b8      	blx	r7
 80070ce:	3001      	adds	r0, #1
 80070d0:	d12b      	bne.n	800712a <_printf_float+0x242>
 80070d2:	e764      	b.n	8006f9e <_printf_float+0xb6>
 80070d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80070d8:	f240 80dd 	bls.w	8007296 <_printf_float+0x3ae>
 80070dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070e0:	2200      	movs	r2, #0
 80070e2:	2300      	movs	r3, #0
 80070e4:	f7f9 fc60 	bl	80009a8 <__aeabi_dcmpeq>
 80070e8:	2800      	cmp	r0, #0
 80070ea:	d033      	beq.n	8007154 <_printf_float+0x26c>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	4a35      	ldr	r2, [pc, #212]	; (80071c8 <_printf_float+0x2e0>)
 80070f4:	47b8      	blx	r7
 80070f6:	3001      	adds	r0, #1
 80070f8:	f43f af51 	beq.w	8006f9e <_printf_float+0xb6>
 80070fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007100:	429a      	cmp	r2, r3
 8007102:	db02      	blt.n	800710a <_printf_float+0x222>
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	07d8      	lsls	r0, r3, #31
 8007108:	d50f      	bpl.n	800712a <_printf_float+0x242>
 800710a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800710e:	4631      	mov	r1, r6
 8007110:	4628      	mov	r0, r5
 8007112:	47b8      	blx	r7
 8007114:	3001      	adds	r0, #1
 8007116:	f43f af42 	beq.w	8006f9e <_printf_float+0xb6>
 800711a:	f04f 0800 	mov.w	r8, #0
 800711e:	f104 091a 	add.w	r9, r4, #26
 8007122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007124:	3b01      	subs	r3, #1
 8007126:	4543      	cmp	r3, r8
 8007128:	dc09      	bgt.n	800713e <_printf_float+0x256>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	079b      	lsls	r3, r3, #30
 800712e:	f100 8102 	bmi.w	8007336 <_printf_float+0x44e>
 8007132:	68e0      	ldr	r0, [r4, #12]
 8007134:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007136:	4298      	cmp	r0, r3
 8007138:	bfb8      	it	lt
 800713a:	4618      	movlt	r0, r3
 800713c:	e731      	b.n	8006fa2 <_printf_float+0xba>
 800713e:	2301      	movs	r3, #1
 8007140:	464a      	mov	r2, r9
 8007142:	4631      	mov	r1, r6
 8007144:	4628      	mov	r0, r5
 8007146:	47b8      	blx	r7
 8007148:	3001      	adds	r0, #1
 800714a:	f43f af28 	beq.w	8006f9e <_printf_float+0xb6>
 800714e:	f108 0801 	add.w	r8, r8, #1
 8007152:	e7e6      	b.n	8007122 <_printf_float+0x23a>
 8007154:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007156:	2b00      	cmp	r3, #0
 8007158:	dc38      	bgt.n	80071cc <_printf_float+0x2e4>
 800715a:	2301      	movs	r3, #1
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <_printf_float+0x2e0>)
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f af1a 	beq.w	8006f9e <_printf_float+0xb6>
 800716a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800716e:	4313      	orrs	r3, r2
 8007170:	d102      	bne.n	8007178 <_printf_float+0x290>
 8007172:	6823      	ldr	r3, [r4, #0]
 8007174:	07d9      	lsls	r1, r3, #31
 8007176:	d5d8      	bpl.n	800712a <_printf_float+0x242>
 8007178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f af0b 	beq.w	8006f9e <_printf_float+0xb6>
 8007188:	f04f 0900 	mov.w	r9, #0
 800718c:	f104 0a1a 	add.w	sl, r4, #26
 8007190:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007192:	425b      	negs	r3, r3
 8007194:	454b      	cmp	r3, r9
 8007196:	dc01      	bgt.n	800719c <_printf_float+0x2b4>
 8007198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800719a:	e794      	b.n	80070c6 <_printf_float+0x1de>
 800719c:	2301      	movs	r3, #1
 800719e:	4652      	mov	r2, sl
 80071a0:	4631      	mov	r1, r6
 80071a2:	4628      	mov	r0, r5
 80071a4:	47b8      	blx	r7
 80071a6:	3001      	adds	r0, #1
 80071a8:	f43f aef9 	beq.w	8006f9e <_printf_float+0xb6>
 80071ac:	f109 0901 	add.w	r9, r9, #1
 80071b0:	e7ee      	b.n	8007190 <_printf_float+0x2a8>
 80071b2:	bf00      	nop
 80071b4:	7fefffff 	.word	0x7fefffff
 80071b8:	0800b2c8 	.word	0x0800b2c8
 80071bc:	0800b2cc 	.word	0x0800b2cc
 80071c0:	0800b2d4 	.word	0x0800b2d4
 80071c4:	0800b2d0 	.word	0x0800b2d0
 80071c8:	0800b2d8 	.word	0x0800b2d8
 80071cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80071d0:	429a      	cmp	r2, r3
 80071d2:	bfa8      	it	ge
 80071d4:	461a      	movge	r2, r3
 80071d6:	2a00      	cmp	r2, #0
 80071d8:	4691      	mov	r9, r2
 80071da:	dc37      	bgt.n	800724c <_printf_float+0x364>
 80071dc:	f04f 0b00 	mov.w	fp, #0
 80071e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80071e4:	f104 021a 	add.w	r2, r4, #26
 80071e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80071ec:	ebaa 0309 	sub.w	r3, sl, r9
 80071f0:	455b      	cmp	r3, fp
 80071f2:	dc33      	bgt.n	800725c <_printf_float+0x374>
 80071f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80071f8:	429a      	cmp	r2, r3
 80071fa:	db3b      	blt.n	8007274 <_printf_float+0x38c>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	07da      	lsls	r2, r3, #31
 8007200:	d438      	bmi.n	8007274 <_printf_float+0x38c>
 8007202:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007204:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007206:	eba2 030a 	sub.w	r3, r2, sl
 800720a:	eba2 0901 	sub.w	r9, r2, r1
 800720e:	4599      	cmp	r9, r3
 8007210:	bfa8      	it	ge
 8007212:	4699      	movge	r9, r3
 8007214:	f1b9 0f00 	cmp.w	r9, #0
 8007218:	dc34      	bgt.n	8007284 <_printf_float+0x39c>
 800721a:	f04f 0800 	mov.w	r8, #0
 800721e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007222:	f104 0a1a 	add.w	sl, r4, #26
 8007226:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	eba3 0309 	sub.w	r3, r3, r9
 8007230:	4543      	cmp	r3, r8
 8007232:	f77f af7a 	ble.w	800712a <_printf_float+0x242>
 8007236:	2301      	movs	r3, #1
 8007238:	4652      	mov	r2, sl
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f aeac 	beq.w	8006f9e <_printf_float+0xb6>
 8007246:	f108 0801 	add.w	r8, r8, #1
 800724a:	e7ec      	b.n	8007226 <_printf_float+0x33e>
 800724c:	4613      	mov	r3, r2
 800724e:	4631      	mov	r1, r6
 8007250:	4642      	mov	r2, r8
 8007252:	4628      	mov	r0, r5
 8007254:	47b8      	blx	r7
 8007256:	3001      	adds	r0, #1
 8007258:	d1c0      	bne.n	80071dc <_printf_float+0x2f4>
 800725a:	e6a0      	b.n	8006f9e <_printf_float+0xb6>
 800725c:	2301      	movs	r3, #1
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	920b      	str	r2, [sp, #44]	; 0x2c
 8007264:	47b8      	blx	r7
 8007266:	3001      	adds	r0, #1
 8007268:	f43f ae99 	beq.w	8006f9e <_printf_float+0xb6>
 800726c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800726e:	f10b 0b01 	add.w	fp, fp, #1
 8007272:	e7b9      	b.n	80071e8 <_printf_float+0x300>
 8007274:	4631      	mov	r1, r6
 8007276:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	d1bf      	bne.n	8007202 <_printf_float+0x31a>
 8007282:	e68c      	b.n	8006f9e <_printf_float+0xb6>
 8007284:	464b      	mov	r3, r9
 8007286:	4631      	mov	r1, r6
 8007288:	4628      	mov	r0, r5
 800728a:	eb08 020a 	add.w	r2, r8, sl
 800728e:	47b8      	blx	r7
 8007290:	3001      	adds	r0, #1
 8007292:	d1c2      	bne.n	800721a <_printf_float+0x332>
 8007294:	e683      	b.n	8006f9e <_printf_float+0xb6>
 8007296:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007298:	2a01      	cmp	r2, #1
 800729a:	dc01      	bgt.n	80072a0 <_printf_float+0x3b8>
 800729c:	07db      	lsls	r3, r3, #31
 800729e:	d537      	bpl.n	8007310 <_printf_float+0x428>
 80072a0:	2301      	movs	r3, #1
 80072a2:	4642      	mov	r2, r8
 80072a4:	4631      	mov	r1, r6
 80072a6:	4628      	mov	r0, r5
 80072a8:	47b8      	blx	r7
 80072aa:	3001      	adds	r0, #1
 80072ac:	f43f ae77 	beq.w	8006f9e <_printf_float+0xb6>
 80072b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b4:	4631      	mov	r1, r6
 80072b6:	4628      	mov	r0, r5
 80072b8:	47b8      	blx	r7
 80072ba:	3001      	adds	r0, #1
 80072bc:	f43f ae6f 	beq.w	8006f9e <_printf_float+0xb6>
 80072c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80072c4:	2200      	movs	r2, #0
 80072c6:	2300      	movs	r3, #0
 80072c8:	f7f9 fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80072cc:	b9d8      	cbnz	r0, 8007306 <_printf_float+0x41e>
 80072ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072d0:	f108 0201 	add.w	r2, r8, #1
 80072d4:	3b01      	subs	r3, #1
 80072d6:	4631      	mov	r1, r6
 80072d8:	4628      	mov	r0, r5
 80072da:	47b8      	blx	r7
 80072dc:	3001      	adds	r0, #1
 80072de:	d10e      	bne.n	80072fe <_printf_float+0x416>
 80072e0:	e65d      	b.n	8006f9e <_printf_float+0xb6>
 80072e2:	2301      	movs	r3, #1
 80072e4:	464a      	mov	r2, r9
 80072e6:	4631      	mov	r1, r6
 80072e8:	4628      	mov	r0, r5
 80072ea:	47b8      	blx	r7
 80072ec:	3001      	adds	r0, #1
 80072ee:	f43f ae56 	beq.w	8006f9e <_printf_float+0xb6>
 80072f2:	f108 0801 	add.w	r8, r8, #1
 80072f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072f8:	3b01      	subs	r3, #1
 80072fa:	4543      	cmp	r3, r8
 80072fc:	dcf1      	bgt.n	80072e2 <_printf_float+0x3fa>
 80072fe:	4653      	mov	r3, sl
 8007300:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007304:	e6e0      	b.n	80070c8 <_printf_float+0x1e0>
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	f104 091a 	add.w	r9, r4, #26
 800730e:	e7f2      	b.n	80072f6 <_printf_float+0x40e>
 8007310:	2301      	movs	r3, #1
 8007312:	4642      	mov	r2, r8
 8007314:	e7df      	b.n	80072d6 <_printf_float+0x3ee>
 8007316:	2301      	movs	r3, #1
 8007318:	464a      	mov	r2, r9
 800731a:	4631      	mov	r1, r6
 800731c:	4628      	mov	r0, r5
 800731e:	47b8      	blx	r7
 8007320:	3001      	adds	r0, #1
 8007322:	f43f ae3c 	beq.w	8006f9e <_printf_float+0xb6>
 8007326:	f108 0801 	add.w	r8, r8, #1
 800732a:	68e3      	ldr	r3, [r4, #12]
 800732c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800732e:	1a5b      	subs	r3, r3, r1
 8007330:	4543      	cmp	r3, r8
 8007332:	dcf0      	bgt.n	8007316 <_printf_float+0x42e>
 8007334:	e6fd      	b.n	8007132 <_printf_float+0x24a>
 8007336:	f04f 0800 	mov.w	r8, #0
 800733a:	f104 0919 	add.w	r9, r4, #25
 800733e:	e7f4      	b.n	800732a <_printf_float+0x442>

08007340 <_printf_common>:
 8007340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007344:	4616      	mov	r6, r2
 8007346:	4699      	mov	r9, r3
 8007348:	688a      	ldr	r2, [r1, #8]
 800734a:	690b      	ldr	r3, [r1, #16]
 800734c:	4607      	mov	r7, r0
 800734e:	4293      	cmp	r3, r2
 8007350:	bfb8      	it	lt
 8007352:	4613      	movlt	r3, r2
 8007354:	6033      	str	r3, [r6, #0]
 8007356:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800735a:	460c      	mov	r4, r1
 800735c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007360:	b10a      	cbz	r2, 8007366 <_printf_common+0x26>
 8007362:	3301      	adds	r3, #1
 8007364:	6033      	str	r3, [r6, #0]
 8007366:	6823      	ldr	r3, [r4, #0]
 8007368:	0699      	lsls	r1, r3, #26
 800736a:	bf42      	ittt	mi
 800736c:	6833      	ldrmi	r3, [r6, #0]
 800736e:	3302      	addmi	r3, #2
 8007370:	6033      	strmi	r3, [r6, #0]
 8007372:	6825      	ldr	r5, [r4, #0]
 8007374:	f015 0506 	ands.w	r5, r5, #6
 8007378:	d106      	bne.n	8007388 <_printf_common+0x48>
 800737a:	f104 0a19 	add.w	sl, r4, #25
 800737e:	68e3      	ldr	r3, [r4, #12]
 8007380:	6832      	ldr	r2, [r6, #0]
 8007382:	1a9b      	subs	r3, r3, r2
 8007384:	42ab      	cmp	r3, r5
 8007386:	dc28      	bgt.n	80073da <_printf_common+0x9a>
 8007388:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800738c:	1e13      	subs	r3, r2, #0
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	bf18      	it	ne
 8007392:	2301      	movne	r3, #1
 8007394:	0692      	lsls	r2, r2, #26
 8007396:	d42d      	bmi.n	80073f4 <_printf_common+0xb4>
 8007398:	4649      	mov	r1, r9
 800739a:	4638      	mov	r0, r7
 800739c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073a0:	47c0      	blx	r8
 80073a2:	3001      	adds	r0, #1
 80073a4:	d020      	beq.n	80073e8 <_printf_common+0xa8>
 80073a6:	6823      	ldr	r3, [r4, #0]
 80073a8:	68e5      	ldr	r5, [r4, #12]
 80073aa:	f003 0306 	and.w	r3, r3, #6
 80073ae:	2b04      	cmp	r3, #4
 80073b0:	bf18      	it	ne
 80073b2:	2500      	movne	r5, #0
 80073b4:	6832      	ldr	r2, [r6, #0]
 80073b6:	f04f 0600 	mov.w	r6, #0
 80073ba:	68a3      	ldr	r3, [r4, #8]
 80073bc:	bf08      	it	eq
 80073be:	1aad      	subeq	r5, r5, r2
 80073c0:	6922      	ldr	r2, [r4, #16]
 80073c2:	bf08      	it	eq
 80073c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c8:	4293      	cmp	r3, r2
 80073ca:	bfc4      	itt	gt
 80073cc:	1a9b      	subgt	r3, r3, r2
 80073ce:	18ed      	addgt	r5, r5, r3
 80073d0:	341a      	adds	r4, #26
 80073d2:	42b5      	cmp	r5, r6
 80073d4:	d11a      	bne.n	800740c <_printf_common+0xcc>
 80073d6:	2000      	movs	r0, #0
 80073d8:	e008      	b.n	80073ec <_printf_common+0xac>
 80073da:	2301      	movs	r3, #1
 80073dc:	4652      	mov	r2, sl
 80073de:	4649      	mov	r1, r9
 80073e0:	4638      	mov	r0, r7
 80073e2:	47c0      	blx	r8
 80073e4:	3001      	adds	r0, #1
 80073e6:	d103      	bne.n	80073f0 <_printf_common+0xb0>
 80073e8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073f0:	3501      	adds	r5, #1
 80073f2:	e7c4      	b.n	800737e <_printf_common+0x3e>
 80073f4:	2030      	movs	r0, #48	; 0x30
 80073f6:	18e1      	adds	r1, r4, r3
 80073f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073fc:	1c5a      	adds	r2, r3, #1
 80073fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007402:	4422      	add	r2, r4
 8007404:	3302      	adds	r3, #2
 8007406:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800740a:	e7c5      	b.n	8007398 <_printf_common+0x58>
 800740c:	2301      	movs	r3, #1
 800740e:	4622      	mov	r2, r4
 8007410:	4649      	mov	r1, r9
 8007412:	4638      	mov	r0, r7
 8007414:	47c0      	blx	r8
 8007416:	3001      	adds	r0, #1
 8007418:	d0e6      	beq.n	80073e8 <_printf_common+0xa8>
 800741a:	3601      	adds	r6, #1
 800741c:	e7d9      	b.n	80073d2 <_printf_common+0x92>
	...

08007420 <_printf_i>:
 8007420:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	7e27      	ldrb	r7, [r4, #24]
 8007428:	4691      	mov	r9, r2
 800742a:	2f78      	cmp	r7, #120	; 0x78
 800742c:	4680      	mov	r8, r0
 800742e:	469a      	mov	sl, r3
 8007430:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007432:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007436:	d807      	bhi.n	8007448 <_printf_i+0x28>
 8007438:	2f62      	cmp	r7, #98	; 0x62
 800743a:	d80a      	bhi.n	8007452 <_printf_i+0x32>
 800743c:	2f00      	cmp	r7, #0
 800743e:	f000 80d9 	beq.w	80075f4 <_printf_i+0x1d4>
 8007442:	2f58      	cmp	r7, #88	; 0x58
 8007444:	f000 80a4 	beq.w	8007590 <_printf_i+0x170>
 8007448:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800744c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007450:	e03a      	b.n	80074c8 <_printf_i+0xa8>
 8007452:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007456:	2b15      	cmp	r3, #21
 8007458:	d8f6      	bhi.n	8007448 <_printf_i+0x28>
 800745a:	a001      	add	r0, pc, #4	; (adr r0, 8007460 <_printf_i+0x40>)
 800745c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007460:	080074b9 	.word	0x080074b9
 8007464:	080074cd 	.word	0x080074cd
 8007468:	08007449 	.word	0x08007449
 800746c:	08007449 	.word	0x08007449
 8007470:	08007449 	.word	0x08007449
 8007474:	08007449 	.word	0x08007449
 8007478:	080074cd 	.word	0x080074cd
 800747c:	08007449 	.word	0x08007449
 8007480:	08007449 	.word	0x08007449
 8007484:	08007449 	.word	0x08007449
 8007488:	08007449 	.word	0x08007449
 800748c:	080075db 	.word	0x080075db
 8007490:	080074fd 	.word	0x080074fd
 8007494:	080075bd 	.word	0x080075bd
 8007498:	08007449 	.word	0x08007449
 800749c:	08007449 	.word	0x08007449
 80074a0:	080075fd 	.word	0x080075fd
 80074a4:	08007449 	.word	0x08007449
 80074a8:	080074fd 	.word	0x080074fd
 80074ac:	08007449 	.word	0x08007449
 80074b0:	08007449 	.word	0x08007449
 80074b4:	080075c5 	.word	0x080075c5
 80074b8:	680b      	ldr	r3, [r1, #0]
 80074ba:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	600a      	str	r2, [r1, #0]
 80074c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c8:	2301      	movs	r3, #1
 80074ca:	e0a4      	b.n	8007616 <_printf_i+0x1f6>
 80074cc:	6825      	ldr	r5, [r4, #0]
 80074ce:	6808      	ldr	r0, [r1, #0]
 80074d0:	062e      	lsls	r6, r5, #24
 80074d2:	f100 0304 	add.w	r3, r0, #4
 80074d6:	d50a      	bpl.n	80074ee <_printf_i+0xce>
 80074d8:	6805      	ldr	r5, [r0, #0]
 80074da:	600b      	str	r3, [r1, #0]
 80074dc:	2d00      	cmp	r5, #0
 80074de:	da03      	bge.n	80074e8 <_printf_i+0xc8>
 80074e0:	232d      	movs	r3, #45	; 0x2d
 80074e2:	426d      	negs	r5, r5
 80074e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e8:	230a      	movs	r3, #10
 80074ea:	485e      	ldr	r0, [pc, #376]	; (8007664 <_printf_i+0x244>)
 80074ec:	e019      	b.n	8007522 <_printf_i+0x102>
 80074ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80074f2:	6805      	ldr	r5, [r0, #0]
 80074f4:	600b      	str	r3, [r1, #0]
 80074f6:	bf18      	it	ne
 80074f8:	b22d      	sxthne	r5, r5
 80074fa:	e7ef      	b.n	80074dc <_printf_i+0xbc>
 80074fc:	680b      	ldr	r3, [r1, #0]
 80074fe:	6825      	ldr	r5, [r4, #0]
 8007500:	1d18      	adds	r0, r3, #4
 8007502:	6008      	str	r0, [r1, #0]
 8007504:	0628      	lsls	r0, r5, #24
 8007506:	d501      	bpl.n	800750c <_printf_i+0xec>
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	e002      	b.n	8007512 <_printf_i+0xf2>
 800750c:	0669      	lsls	r1, r5, #25
 800750e:	d5fb      	bpl.n	8007508 <_printf_i+0xe8>
 8007510:	881d      	ldrh	r5, [r3, #0]
 8007512:	2f6f      	cmp	r7, #111	; 0x6f
 8007514:	bf0c      	ite	eq
 8007516:	2308      	moveq	r3, #8
 8007518:	230a      	movne	r3, #10
 800751a:	4852      	ldr	r0, [pc, #328]	; (8007664 <_printf_i+0x244>)
 800751c:	2100      	movs	r1, #0
 800751e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007522:	6866      	ldr	r6, [r4, #4]
 8007524:	2e00      	cmp	r6, #0
 8007526:	bfa8      	it	ge
 8007528:	6821      	ldrge	r1, [r4, #0]
 800752a:	60a6      	str	r6, [r4, #8]
 800752c:	bfa4      	itt	ge
 800752e:	f021 0104 	bicge.w	r1, r1, #4
 8007532:	6021      	strge	r1, [r4, #0]
 8007534:	b90d      	cbnz	r5, 800753a <_printf_i+0x11a>
 8007536:	2e00      	cmp	r6, #0
 8007538:	d04d      	beq.n	80075d6 <_printf_i+0x1b6>
 800753a:	4616      	mov	r6, r2
 800753c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007540:	fb03 5711 	mls	r7, r3, r1, r5
 8007544:	5dc7      	ldrb	r7, [r0, r7]
 8007546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800754a:	462f      	mov	r7, r5
 800754c:	42bb      	cmp	r3, r7
 800754e:	460d      	mov	r5, r1
 8007550:	d9f4      	bls.n	800753c <_printf_i+0x11c>
 8007552:	2b08      	cmp	r3, #8
 8007554:	d10b      	bne.n	800756e <_printf_i+0x14e>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	07df      	lsls	r7, r3, #31
 800755a:	d508      	bpl.n	800756e <_printf_i+0x14e>
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	6861      	ldr	r1, [r4, #4]
 8007560:	4299      	cmp	r1, r3
 8007562:	bfde      	ittt	le
 8007564:	2330      	movle	r3, #48	; 0x30
 8007566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800756a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800756e:	1b92      	subs	r2, r2, r6
 8007570:	6122      	str	r2, [r4, #16]
 8007572:	464b      	mov	r3, r9
 8007574:	4621      	mov	r1, r4
 8007576:	4640      	mov	r0, r8
 8007578:	f8cd a000 	str.w	sl, [sp]
 800757c:	aa03      	add	r2, sp, #12
 800757e:	f7ff fedf 	bl	8007340 <_printf_common>
 8007582:	3001      	adds	r0, #1
 8007584:	d14c      	bne.n	8007620 <_printf_i+0x200>
 8007586:	f04f 30ff 	mov.w	r0, #4294967295
 800758a:	b004      	add	sp, #16
 800758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007590:	4834      	ldr	r0, [pc, #208]	; (8007664 <_printf_i+0x244>)
 8007592:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007596:	680e      	ldr	r6, [r1, #0]
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	f856 5b04 	ldr.w	r5, [r6], #4
 800759e:	061f      	lsls	r7, r3, #24
 80075a0:	600e      	str	r6, [r1, #0]
 80075a2:	d514      	bpl.n	80075ce <_printf_i+0x1ae>
 80075a4:	07d9      	lsls	r1, r3, #31
 80075a6:	bf44      	itt	mi
 80075a8:	f043 0320 	orrmi.w	r3, r3, #32
 80075ac:	6023      	strmi	r3, [r4, #0]
 80075ae:	b91d      	cbnz	r5, 80075b8 <_printf_i+0x198>
 80075b0:	6823      	ldr	r3, [r4, #0]
 80075b2:	f023 0320 	bic.w	r3, r3, #32
 80075b6:	6023      	str	r3, [r4, #0]
 80075b8:	2310      	movs	r3, #16
 80075ba:	e7af      	b.n	800751c <_printf_i+0xfc>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	f043 0320 	orr.w	r3, r3, #32
 80075c2:	6023      	str	r3, [r4, #0]
 80075c4:	2378      	movs	r3, #120	; 0x78
 80075c6:	4828      	ldr	r0, [pc, #160]	; (8007668 <_printf_i+0x248>)
 80075c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075cc:	e7e3      	b.n	8007596 <_printf_i+0x176>
 80075ce:	065e      	lsls	r6, r3, #25
 80075d0:	bf48      	it	mi
 80075d2:	b2ad      	uxthmi	r5, r5
 80075d4:	e7e6      	b.n	80075a4 <_printf_i+0x184>
 80075d6:	4616      	mov	r6, r2
 80075d8:	e7bb      	b.n	8007552 <_printf_i+0x132>
 80075da:	680b      	ldr	r3, [r1, #0]
 80075dc:	6826      	ldr	r6, [r4, #0]
 80075de:	1d1d      	adds	r5, r3, #4
 80075e0:	6960      	ldr	r0, [r4, #20]
 80075e2:	600d      	str	r5, [r1, #0]
 80075e4:	0635      	lsls	r5, r6, #24
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	d501      	bpl.n	80075ee <_printf_i+0x1ce>
 80075ea:	6018      	str	r0, [r3, #0]
 80075ec:	e002      	b.n	80075f4 <_printf_i+0x1d4>
 80075ee:	0671      	lsls	r1, r6, #25
 80075f0:	d5fb      	bpl.n	80075ea <_printf_i+0x1ca>
 80075f2:	8018      	strh	r0, [r3, #0]
 80075f4:	2300      	movs	r3, #0
 80075f6:	4616      	mov	r6, r2
 80075f8:	6123      	str	r3, [r4, #16]
 80075fa:	e7ba      	b.n	8007572 <_printf_i+0x152>
 80075fc:	680b      	ldr	r3, [r1, #0]
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	600a      	str	r2, [r1, #0]
 8007602:	681e      	ldr	r6, [r3, #0]
 8007604:	2100      	movs	r1, #0
 8007606:	4630      	mov	r0, r6
 8007608:	6862      	ldr	r2, [r4, #4]
 800760a:	f002 f887 	bl	800971c <memchr>
 800760e:	b108      	cbz	r0, 8007614 <_printf_i+0x1f4>
 8007610:	1b80      	subs	r0, r0, r6
 8007612:	6060      	str	r0, [r4, #4]
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	6123      	str	r3, [r4, #16]
 8007618:	2300      	movs	r3, #0
 800761a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800761e:	e7a8      	b.n	8007572 <_printf_i+0x152>
 8007620:	4632      	mov	r2, r6
 8007622:	4649      	mov	r1, r9
 8007624:	4640      	mov	r0, r8
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	47d0      	blx	sl
 800762a:	3001      	adds	r0, #1
 800762c:	d0ab      	beq.n	8007586 <_printf_i+0x166>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	079b      	lsls	r3, r3, #30
 8007632:	d413      	bmi.n	800765c <_printf_i+0x23c>
 8007634:	68e0      	ldr	r0, [r4, #12]
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	4298      	cmp	r0, r3
 800763a:	bfb8      	it	lt
 800763c:	4618      	movlt	r0, r3
 800763e:	e7a4      	b.n	800758a <_printf_i+0x16a>
 8007640:	2301      	movs	r3, #1
 8007642:	4632      	mov	r2, r6
 8007644:	4649      	mov	r1, r9
 8007646:	4640      	mov	r0, r8
 8007648:	47d0      	blx	sl
 800764a:	3001      	adds	r0, #1
 800764c:	d09b      	beq.n	8007586 <_printf_i+0x166>
 800764e:	3501      	adds	r5, #1
 8007650:	68e3      	ldr	r3, [r4, #12]
 8007652:	9903      	ldr	r1, [sp, #12]
 8007654:	1a5b      	subs	r3, r3, r1
 8007656:	42ab      	cmp	r3, r5
 8007658:	dcf2      	bgt.n	8007640 <_printf_i+0x220>
 800765a:	e7eb      	b.n	8007634 <_printf_i+0x214>
 800765c:	2500      	movs	r5, #0
 800765e:	f104 0619 	add.w	r6, r4, #25
 8007662:	e7f5      	b.n	8007650 <_printf_i+0x230>
 8007664:	0800b2da 	.word	0x0800b2da
 8007668:	0800b2eb 	.word	0x0800b2eb

0800766c <siprintf>:
 800766c:	b40e      	push	{r1, r2, r3}
 800766e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007672:	b500      	push	{lr}
 8007674:	b09c      	sub	sp, #112	; 0x70
 8007676:	ab1d      	add	r3, sp, #116	; 0x74
 8007678:	9002      	str	r0, [sp, #8]
 800767a:	9006      	str	r0, [sp, #24]
 800767c:	9107      	str	r1, [sp, #28]
 800767e:	9104      	str	r1, [sp, #16]
 8007680:	4808      	ldr	r0, [pc, #32]	; (80076a4 <siprintf+0x38>)
 8007682:	4909      	ldr	r1, [pc, #36]	; (80076a8 <siprintf+0x3c>)
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	6800      	ldr	r0, [r0, #0]
 800768c:	a902      	add	r1, sp, #8
 800768e:	9301      	str	r3, [sp, #4]
 8007690:	f002 fe28 	bl	800a2e4 <_svfiprintf_r>
 8007694:	2200      	movs	r2, #0
 8007696:	9b02      	ldr	r3, [sp, #8]
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	b01c      	add	sp, #112	; 0x70
 800769c:	f85d eb04 	ldr.w	lr, [sp], #4
 80076a0:	b003      	add	sp, #12
 80076a2:	4770      	bx	lr
 80076a4:	20000018 	.word	0x20000018
 80076a8:	ffff0208 	.word	0xffff0208

080076ac <strncmp>:
 80076ac:	b510      	push	{r4, lr}
 80076ae:	b16a      	cbz	r2, 80076cc <strncmp+0x20>
 80076b0:	3901      	subs	r1, #1
 80076b2:	1884      	adds	r4, r0, r2
 80076b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80076b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80076bc:	4293      	cmp	r3, r2
 80076be:	d103      	bne.n	80076c8 <strncmp+0x1c>
 80076c0:	42a0      	cmp	r0, r4
 80076c2:	d001      	beq.n	80076c8 <strncmp+0x1c>
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1f5      	bne.n	80076b4 <strncmp+0x8>
 80076c8:	1a98      	subs	r0, r3, r2
 80076ca:	bd10      	pop	{r4, pc}
 80076cc:	4610      	mov	r0, r2
 80076ce:	e7fc      	b.n	80076ca <strncmp+0x1e>

080076d0 <sulp>:
 80076d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	460f      	mov	r7, r1
 80076d6:	4690      	mov	r8, r2
 80076d8:	f002 fbac 	bl	8009e34 <__ulp>
 80076dc:	4604      	mov	r4, r0
 80076de:	460d      	mov	r5, r1
 80076e0:	f1b8 0f00 	cmp.w	r8, #0
 80076e4:	d011      	beq.n	800770a <sulp+0x3a>
 80076e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80076ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dd0b      	ble.n	800770a <sulp+0x3a>
 80076f2:	2400      	movs	r4, #0
 80076f4:	051b      	lsls	r3, r3, #20
 80076f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	f7f8 fee9 	bl	80004d8 <__aeabi_dmul>
 8007706:	4604      	mov	r4, r0
 8007708:	460d      	mov	r5, r1
 800770a:	4620      	mov	r0, r4
 800770c:	4629      	mov	r1, r5
 800770e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007712:	0000      	movs	r0, r0
 8007714:	0000      	movs	r0, r0
	...

08007718 <_strtod_l>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	469b      	mov	fp, r3
 800771e:	2300      	movs	r3, #0
 8007720:	b0a1      	sub	sp, #132	; 0x84
 8007722:	931c      	str	r3, [sp, #112]	; 0x70
 8007724:	4ba1      	ldr	r3, [pc, #644]	; (80079ac <_strtod_l+0x294>)
 8007726:	4682      	mov	sl, r0
 8007728:	681f      	ldr	r7, [r3, #0]
 800772a:	460e      	mov	r6, r1
 800772c:	4638      	mov	r0, r7
 800772e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007730:	f7f8 fd0e 	bl	8000150 <strlen>
 8007734:	f04f 0800 	mov.w	r8, #0
 8007738:	4604      	mov	r4, r0
 800773a:	f04f 0900 	mov.w	r9, #0
 800773e:	961b      	str	r6, [sp, #108]	; 0x6c
 8007740:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007742:	781a      	ldrb	r2, [r3, #0]
 8007744:	2a2b      	cmp	r2, #43	; 0x2b
 8007746:	d04c      	beq.n	80077e2 <_strtod_l+0xca>
 8007748:	d83a      	bhi.n	80077c0 <_strtod_l+0xa8>
 800774a:	2a0d      	cmp	r2, #13
 800774c:	d833      	bhi.n	80077b6 <_strtod_l+0x9e>
 800774e:	2a08      	cmp	r2, #8
 8007750:	d833      	bhi.n	80077ba <_strtod_l+0xa2>
 8007752:	2a00      	cmp	r2, #0
 8007754:	d03d      	beq.n	80077d2 <_strtod_l+0xba>
 8007756:	2300      	movs	r3, #0
 8007758:	930c      	str	r3, [sp, #48]	; 0x30
 800775a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800775c:	782b      	ldrb	r3, [r5, #0]
 800775e:	2b30      	cmp	r3, #48	; 0x30
 8007760:	f040 80af 	bne.w	80078c2 <_strtod_l+0x1aa>
 8007764:	786b      	ldrb	r3, [r5, #1]
 8007766:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800776a:	2b58      	cmp	r3, #88	; 0x58
 800776c:	d16c      	bne.n	8007848 <_strtod_l+0x130>
 800776e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007770:	4650      	mov	r0, sl
 8007772:	9301      	str	r3, [sp, #4]
 8007774:	ab1c      	add	r3, sp, #112	; 0x70
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	4a8d      	ldr	r2, [pc, #564]	; (80079b0 <_strtod_l+0x298>)
 800777a:	f8cd b008 	str.w	fp, [sp, #8]
 800777e:	ab1d      	add	r3, sp, #116	; 0x74
 8007780:	a91b      	add	r1, sp, #108	; 0x6c
 8007782:	f001 fcaf 	bl	80090e4 <__gethex>
 8007786:	f010 0607 	ands.w	r6, r0, #7
 800778a:	4604      	mov	r4, r0
 800778c:	d005      	beq.n	800779a <_strtod_l+0x82>
 800778e:	2e06      	cmp	r6, #6
 8007790:	d129      	bne.n	80077e6 <_strtod_l+0xce>
 8007792:	2300      	movs	r3, #0
 8007794:	3501      	adds	r5, #1
 8007796:	951b      	str	r5, [sp, #108]	; 0x6c
 8007798:	930c      	str	r3, [sp, #48]	; 0x30
 800779a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800779c:	2b00      	cmp	r3, #0
 800779e:	f040 8596 	bne.w	80082ce <_strtod_l+0xbb6>
 80077a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077a4:	b1d3      	cbz	r3, 80077dc <_strtod_l+0xc4>
 80077a6:	4642      	mov	r2, r8
 80077a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077ac:	4610      	mov	r0, r2
 80077ae:	4619      	mov	r1, r3
 80077b0:	b021      	add	sp, #132	; 0x84
 80077b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b6:	2a20      	cmp	r2, #32
 80077b8:	d1cd      	bne.n	8007756 <_strtod_l+0x3e>
 80077ba:	3301      	adds	r3, #1
 80077bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80077be:	e7bf      	b.n	8007740 <_strtod_l+0x28>
 80077c0:	2a2d      	cmp	r2, #45	; 0x2d
 80077c2:	d1c8      	bne.n	8007756 <_strtod_l+0x3e>
 80077c4:	2201      	movs	r2, #1
 80077c6:	920c      	str	r2, [sp, #48]	; 0x30
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	921b      	str	r2, [sp, #108]	; 0x6c
 80077cc:	785b      	ldrb	r3, [r3, #1]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1c3      	bne.n	800775a <_strtod_l+0x42>
 80077d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80077d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f040 8577 	bne.w	80082ca <_strtod_l+0xbb2>
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	e7e4      	b.n	80077ac <_strtod_l+0x94>
 80077e2:	2200      	movs	r2, #0
 80077e4:	e7ef      	b.n	80077c6 <_strtod_l+0xae>
 80077e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80077e8:	b13a      	cbz	r2, 80077fa <_strtod_l+0xe2>
 80077ea:	2135      	movs	r1, #53	; 0x35
 80077ec:	a81e      	add	r0, sp, #120	; 0x78
 80077ee:	f002 fc25 	bl	800a03c <__copybits>
 80077f2:	4650      	mov	r0, sl
 80077f4:	991c      	ldr	r1, [sp, #112]	; 0x70
 80077f6:	f001 ffed 	bl	80097d4 <_Bfree>
 80077fa:	3e01      	subs	r6, #1
 80077fc:	2e05      	cmp	r6, #5
 80077fe:	d807      	bhi.n	8007810 <_strtod_l+0xf8>
 8007800:	e8df f006 	tbb	[pc, r6]
 8007804:	1d180b0e 	.word	0x1d180b0e
 8007808:	030e      	.short	0x030e
 800780a:	f04f 0900 	mov.w	r9, #0
 800780e:	46c8      	mov	r8, r9
 8007810:	0721      	lsls	r1, r4, #28
 8007812:	d5c2      	bpl.n	800779a <_strtod_l+0x82>
 8007814:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007818:	e7bf      	b.n	800779a <_strtod_l+0x82>
 800781a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800781e:	e7f7      	b.n	8007810 <_strtod_l+0xf8>
 8007820:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007822:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8007826:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800782a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800782e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007832:	e7ed      	b.n	8007810 <_strtod_l+0xf8>
 8007834:	f04f 0800 	mov.w	r8, #0
 8007838:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80079b4 <_strtod_l+0x29c>
 800783c:	e7e8      	b.n	8007810 <_strtod_l+0xf8>
 800783e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007842:	f04f 38ff 	mov.w	r8, #4294967295
 8007846:	e7e3      	b.n	8007810 <_strtod_l+0xf8>
 8007848:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	921b      	str	r2, [sp, #108]	; 0x6c
 800784e:	785b      	ldrb	r3, [r3, #1]
 8007850:	2b30      	cmp	r3, #48	; 0x30
 8007852:	d0f9      	beq.n	8007848 <_strtod_l+0x130>
 8007854:	2b00      	cmp	r3, #0
 8007856:	d0a0      	beq.n	800779a <_strtod_l+0x82>
 8007858:	2301      	movs	r3, #1
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800785e:	220a      	movs	r2, #10
 8007860:	9308      	str	r3, [sp, #32]
 8007862:	2300      	movs	r3, #0
 8007864:	469b      	mov	fp, r3
 8007866:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800786a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800786c:	7805      	ldrb	r5, [r0, #0]
 800786e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007872:	b2d9      	uxtb	r1, r3
 8007874:	2909      	cmp	r1, #9
 8007876:	d926      	bls.n	80078c6 <_strtod_l+0x1ae>
 8007878:	4622      	mov	r2, r4
 800787a:	4639      	mov	r1, r7
 800787c:	f7ff ff16 	bl	80076ac <strncmp>
 8007880:	2800      	cmp	r0, #0
 8007882:	d032      	beq.n	80078ea <_strtod_l+0x1d2>
 8007884:	2000      	movs	r0, #0
 8007886:	462b      	mov	r3, r5
 8007888:	465c      	mov	r4, fp
 800788a:	4602      	mov	r2, r0
 800788c:	9004      	str	r0, [sp, #16]
 800788e:	2b65      	cmp	r3, #101	; 0x65
 8007890:	d001      	beq.n	8007896 <_strtod_l+0x17e>
 8007892:	2b45      	cmp	r3, #69	; 0x45
 8007894:	d113      	bne.n	80078be <_strtod_l+0x1a6>
 8007896:	b91c      	cbnz	r4, 80078a0 <_strtod_l+0x188>
 8007898:	9b07      	ldr	r3, [sp, #28]
 800789a:	4303      	orrs	r3, r0
 800789c:	d099      	beq.n	80077d2 <_strtod_l+0xba>
 800789e:	2400      	movs	r4, #0
 80078a0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80078a2:	1c73      	adds	r3, r6, #1
 80078a4:	931b      	str	r3, [sp, #108]	; 0x6c
 80078a6:	7873      	ldrb	r3, [r6, #1]
 80078a8:	2b2b      	cmp	r3, #43	; 0x2b
 80078aa:	d078      	beq.n	800799e <_strtod_l+0x286>
 80078ac:	2b2d      	cmp	r3, #45	; 0x2d
 80078ae:	d07b      	beq.n	80079a8 <_strtod_l+0x290>
 80078b0:	2700      	movs	r7, #0
 80078b2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80078b6:	2909      	cmp	r1, #9
 80078b8:	f240 8082 	bls.w	80079c0 <_strtod_l+0x2a8>
 80078bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80078be:	2500      	movs	r5, #0
 80078c0:	e09e      	b.n	8007a00 <_strtod_l+0x2e8>
 80078c2:	2300      	movs	r3, #0
 80078c4:	e7c9      	b.n	800785a <_strtod_l+0x142>
 80078c6:	f1bb 0f08 	cmp.w	fp, #8
 80078ca:	bfd5      	itete	le
 80078cc:	9906      	ldrle	r1, [sp, #24]
 80078ce:	9905      	ldrgt	r1, [sp, #20]
 80078d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80078d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80078d8:	f100 0001 	add.w	r0, r0, #1
 80078dc:	bfd4      	ite	le
 80078de:	9306      	strle	r3, [sp, #24]
 80078e0:	9305      	strgt	r3, [sp, #20]
 80078e2:	f10b 0b01 	add.w	fp, fp, #1
 80078e6:	901b      	str	r0, [sp, #108]	; 0x6c
 80078e8:	e7bf      	b.n	800786a <_strtod_l+0x152>
 80078ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078ec:	191a      	adds	r2, r3, r4
 80078ee:	921b      	str	r2, [sp, #108]	; 0x6c
 80078f0:	5d1b      	ldrb	r3, [r3, r4]
 80078f2:	f1bb 0f00 	cmp.w	fp, #0
 80078f6:	d036      	beq.n	8007966 <_strtod_l+0x24e>
 80078f8:	465c      	mov	r4, fp
 80078fa:	9004      	str	r0, [sp, #16]
 80078fc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007900:	2a09      	cmp	r2, #9
 8007902:	d912      	bls.n	800792a <_strtod_l+0x212>
 8007904:	2201      	movs	r2, #1
 8007906:	e7c2      	b.n	800788e <_strtod_l+0x176>
 8007908:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800790a:	3001      	adds	r0, #1
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	2b30      	cmp	r3, #48	; 0x30
 8007914:	d0f8      	beq.n	8007908 <_strtod_l+0x1f0>
 8007916:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800791a:	2a08      	cmp	r2, #8
 800791c:	f200 84dc 	bhi.w	80082d8 <_strtod_l+0xbc0>
 8007920:	9004      	str	r0, [sp, #16]
 8007922:	2000      	movs	r0, #0
 8007924:	4604      	mov	r4, r0
 8007926:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007928:	9208      	str	r2, [sp, #32]
 800792a:	3b30      	subs	r3, #48	; 0x30
 800792c:	f100 0201 	add.w	r2, r0, #1
 8007930:	d013      	beq.n	800795a <_strtod_l+0x242>
 8007932:	9904      	ldr	r1, [sp, #16]
 8007934:	1905      	adds	r5, r0, r4
 8007936:	4411      	add	r1, r2
 8007938:	9104      	str	r1, [sp, #16]
 800793a:	4622      	mov	r2, r4
 800793c:	210a      	movs	r1, #10
 800793e:	42aa      	cmp	r2, r5
 8007940:	d113      	bne.n	800796a <_strtod_l+0x252>
 8007942:	1822      	adds	r2, r4, r0
 8007944:	2a08      	cmp	r2, #8
 8007946:	f104 0401 	add.w	r4, r4, #1
 800794a:	4404      	add	r4, r0
 800794c:	dc1b      	bgt.n	8007986 <_strtod_l+0x26e>
 800794e:	220a      	movs	r2, #10
 8007950:	9906      	ldr	r1, [sp, #24]
 8007952:	fb02 3301 	mla	r3, r2, r1, r3
 8007956:	9306      	str	r3, [sp, #24]
 8007958:	2200      	movs	r2, #0
 800795a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800795c:	4610      	mov	r0, r2
 800795e:	1c59      	adds	r1, r3, #1
 8007960:	911b      	str	r1, [sp, #108]	; 0x6c
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	e7ca      	b.n	80078fc <_strtod_l+0x1e4>
 8007966:	4658      	mov	r0, fp
 8007968:	e7d3      	b.n	8007912 <_strtod_l+0x1fa>
 800796a:	2a08      	cmp	r2, #8
 800796c:	dc04      	bgt.n	8007978 <_strtod_l+0x260>
 800796e:	9f06      	ldr	r7, [sp, #24]
 8007970:	434f      	muls	r7, r1
 8007972:	9706      	str	r7, [sp, #24]
 8007974:	3201      	adds	r2, #1
 8007976:	e7e2      	b.n	800793e <_strtod_l+0x226>
 8007978:	1c57      	adds	r7, r2, #1
 800797a:	2f10      	cmp	r7, #16
 800797c:	bfde      	ittt	le
 800797e:	9f05      	ldrle	r7, [sp, #20]
 8007980:	434f      	mulle	r7, r1
 8007982:	9705      	strle	r7, [sp, #20]
 8007984:	e7f6      	b.n	8007974 <_strtod_l+0x25c>
 8007986:	2c10      	cmp	r4, #16
 8007988:	bfdf      	itttt	le
 800798a:	220a      	movle	r2, #10
 800798c:	9905      	ldrle	r1, [sp, #20]
 800798e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007992:	9305      	strle	r3, [sp, #20]
 8007994:	e7e0      	b.n	8007958 <_strtod_l+0x240>
 8007996:	2300      	movs	r3, #0
 8007998:	2201      	movs	r2, #1
 800799a:	9304      	str	r3, [sp, #16]
 800799c:	e77c      	b.n	8007898 <_strtod_l+0x180>
 800799e:	2700      	movs	r7, #0
 80079a0:	1cb3      	adds	r3, r6, #2
 80079a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80079a4:	78b3      	ldrb	r3, [r6, #2]
 80079a6:	e784      	b.n	80078b2 <_strtod_l+0x19a>
 80079a8:	2701      	movs	r7, #1
 80079aa:	e7f9      	b.n	80079a0 <_strtod_l+0x288>
 80079ac:	0800b450 	.word	0x0800b450
 80079b0:	0800b2fc 	.word	0x0800b2fc
 80079b4:	7ff00000 	.word	0x7ff00000
 80079b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ba:	1c59      	adds	r1, r3, #1
 80079bc:	911b      	str	r1, [sp, #108]	; 0x6c
 80079be:	785b      	ldrb	r3, [r3, #1]
 80079c0:	2b30      	cmp	r3, #48	; 0x30
 80079c2:	d0f9      	beq.n	80079b8 <_strtod_l+0x2a0>
 80079c4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80079c8:	2908      	cmp	r1, #8
 80079ca:	f63f af78 	bhi.w	80078be <_strtod_l+0x1a6>
 80079ce:	f04f 0e0a 	mov.w	lr, #10
 80079d2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80079d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079d8:	9309      	str	r3, [sp, #36]	; 0x24
 80079da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079dc:	1c59      	adds	r1, r3, #1
 80079de:	911b      	str	r1, [sp, #108]	; 0x6c
 80079e0:	785b      	ldrb	r3, [r3, #1]
 80079e2:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80079e6:	2d09      	cmp	r5, #9
 80079e8:	d935      	bls.n	8007a56 <_strtod_l+0x33e>
 80079ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079ec:	1b49      	subs	r1, r1, r5
 80079ee:	2908      	cmp	r1, #8
 80079f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80079f4:	dc02      	bgt.n	80079fc <_strtod_l+0x2e4>
 80079f6:	4565      	cmp	r5, ip
 80079f8:	bfa8      	it	ge
 80079fa:	4665      	movge	r5, ip
 80079fc:	b107      	cbz	r7, 8007a00 <_strtod_l+0x2e8>
 80079fe:	426d      	negs	r5, r5
 8007a00:	2c00      	cmp	r4, #0
 8007a02:	d14c      	bne.n	8007a9e <_strtod_l+0x386>
 8007a04:	9907      	ldr	r1, [sp, #28]
 8007a06:	4301      	orrs	r1, r0
 8007a08:	f47f aec7 	bne.w	800779a <_strtod_l+0x82>
 8007a0c:	2a00      	cmp	r2, #0
 8007a0e:	f47f aee0 	bne.w	80077d2 <_strtod_l+0xba>
 8007a12:	2b69      	cmp	r3, #105	; 0x69
 8007a14:	d026      	beq.n	8007a64 <_strtod_l+0x34c>
 8007a16:	dc23      	bgt.n	8007a60 <_strtod_l+0x348>
 8007a18:	2b49      	cmp	r3, #73	; 0x49
 8007a1a:	d023      	beq.n	8007a64 <_strtod_l+0x34c>
 8007a1c:	2b4e      	cmp	r3, #78	; 0x4e
 8007a1e:	f47f aed8 	bne.w	80077d2 <_strtod_l+0xba>
 8007a22:	499c      	ldr	r1, [pc, #624]	; (8007c94 <_strtod_l+0x57c>)
 8007a24:	a81b      	add	r0, sp, #108	; 0x6c
 8007a26:	f001 fdab 	bl	8009580 <__match>
 8007a2a:	2800      	cmp	r0, #0
 8007a2c:	f43f aed1 	beq.w	80077d2 <_strtod_l+0xba>
 8007a30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b28      	cmp	r3, #40	; 0x28
 8007a36:	d12c      	bne.n	8007a92 <_strtod_l+0x37a>
 8007a38:	4997      	ldr	r1, [pc, #604]	; (8007c98 <_strtod_l+0x580>)
 8007a3a:	aa1e      	add	r2, sp, #120	; 0x78
 8007a3c:	a81b      	add	r0, sp, #108	; 0x6c
 8007a3e:	f001 fdb3 	bl	80095a8 <__hexnan>
 8007a42:	2805      	cmp	r0, #5
 8007a44:	d125      	bne.n	8007a92 <_strtod_l+0x37a>
 8007a46:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a48:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8007a4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007a50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007a54:	e6a1      	b.n	800779a <_strtod_l+0x82>
 8007a56:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8007a5a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8007a5e:	e7bc      	b.n	80079da <_strtod_l+0x2c2>
 8007a60:	2b6e      	cmp	r3, #110	; 0x6e
 8007a62:	e7dc      	b.n	8007a1e <_strtod_l+0x306>
 8007a64:	498d      	ldr	r1, [pc, #564]	; (8007c9c <_strtod_l+0x584>)
 8007a66:	a81b      	add	r0, sp, #108	; 0x6c
 8007a68:	f001 fd8a 	bl	8009580 <__match>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f43f aeb0 	beq.w	80077d2 <_strtod_l+0xba>
 8007a72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a74:	498a      	ldr	r1, [pc, #552]	; (8007ca0 <_strtod_l+0x588>)
 8007a76:	3b01      	subs	r3, #1
 8007a78:	a81b      	add	r0, sp, #108	; 0x6c
 8007a7a:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a7c:	f001 fd80 	bl	8009580 <__match>
 8007a80:	b910      	cbnz	r0, 8007a88 <_strtod_l+0x370>
 8007a82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a84:	3301      	adds	r3, #1
 8007a86:	931b      	str	r3, [sp, #108]	; 0x6c
 8007a88:	f04f 0800 	mov.w	r8, #0
 8007a8c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007cb0 <_strtod_l+0x598>
 8007a90:	e683      	b.n	800779a <_strtod_l+0x82>
 8007a92:	4884      	ldr	r0, [pc, #528]	; (8007ca4 <_strtod_l+0x58c>)
 8007a94:	f002 fd26 	bl	800a4e4 <nan>
 8007a98:	4680      	mov	r8, r0
 8007a9a:	4689      	mov	r9, r1
 8007a9c:	e67d      	b.n	800779a <_strtod_l+0x82>
 8007a9e:	9b04      	ldr	r3, [sp, #16]
 8007aa0:	f1bb 0f00 	cmp.w	fp, #0
 8007aa4:	bf08      	it	eq
 8007aa6:	46a3      	moveq	fp, r4
 8007aa8:	1aeb      	subs	r3, r5, r3
 8007aaa:	2c10      	cmp	r4, #16
 8007aac:	9806      	ldr	r0, [sp, #24]
 8007aae:	4626      	mov	r6, r4
 8007ab0:	9307      	str	r3, [sp, #28]
 8007ab2:	bfa8      	it	ge
 8007ab4:	2610      	movge	r6, #16
 8007ab6:	f7f8 fc95 	bl	80003e4 <__aeabi_ui2d>
 8007aba:	2c09      	cmp	r4, #9
 8007abc:	4680      	mov	r8, r0
 8007abe:	4689      	mov	r9, r1
 8007ac0:	dd13      	ble.n	8007aea <_strtod_l+0x3d2>
 8007ac2:	4b79      	ldr	r3, [pc, #484]	; (8007ca8 <_strtod_l+0x590>)
 8007ac4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007ac8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007acc:	f7f8 fd04 	bl	80004d8 <__aeabi_dmul>
 8007ad0:	4680      	mov	r8, r0
 8007ad2:	9805      	ldr	r0, [sp, #20]
 8007ad4:	4689      	mov	r9, r1
 8007ad6:	f7f8 fc85 	bl	80003e4 <__aeabi_ui2d>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fb43 	bl	800016c <__adddf3>
 8007ae6:	4680      	mov	r8, r0
 8007ae8:	4689      	mov	r9, r1
 8007aea:	2c0f      	cmp	r4, #15
 8007aec:	dc36      	bgt.n	8007b5c <_strtod_l+0x444>
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f43f ae52 	beq.w	800779a <_strtod_l+0x82>
 8007af6:	dd22      	ble.n	8007b3e <_strtod_l+0x426>
 8007af8:	2b16      	cmp	r3, #22
 8007afa:	dc09      	bgt.n	8007b10 <_strtod_l+0x3f8>
 8007afc:	4c6a      	ldr	r4, [pc, #424]	; (8007ca8 <_strtod_l+0x590>)
 8007afe:	4642      	mov	r2, r8
 8007b00:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8007b04:	464b      	mov	r3, r9
 8007b06:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007b0a:	f7f8 fce5 	bl	80004d8 <__aeabi_dmul>
 8007b0e:	e7c3      	b.n	8007a98 <_strtod_l+0x380>
 8007b10:	9a07      	ldr	r2, [sp, #28]
 8007b12:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007b16:	4293      	cmp	r3, r2
 8007b18:	db20      	blt.n	8007b5c <_strtod_l+0x444>
 8007b1a:	4d63      	ldr	r5, [pc, #396]	; (8007ca8 <_strtod_l+0x590>)
 8007b1c:	f1c4 040f 	rsb	r4, r4, #15
 8007b20:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007b24:	4642      	mov	r2, r8
 8007b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b2a:	464b      	mov	r3, r9
 8007b2c:	f7f8 fcd4 	bl	80004d8 <__aeabi_dmul>
 8007b30:	9b07      	ldr	r3, [sp, #28]
 8007b32:	1b1c      	subs	r4, r3, r4
 8007b34:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007b38:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b3c:	e7e5      	b.n	8007b0a <_strtod_l+0x3f2>
 8007b3e:	9b07      	ldr	r3, [sp, #28]
 8007b40:	3316      	adds	r3, #22
 8007b42:	db0b      	blt.n	8007b5c <_strtod_l+0x444>
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	4a58      	ldr	r2, [pc, #352]	; (8007ca8 <_strtod_l+0x590>)
 8007b48:	1b5d      	subs	r5, r3, r5
 8007b4a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007b4e:	4640      	mov	r0, r8
 8007b50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fde9 	bl	800072c <__aeabi_ddiv>
 8007b5a:	e79d      	b.n	8007a98 <_strtod_l+0x380>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	1ba6      	subs	r6, r4, r6
 8007b60:	441e      	add	r6, r3
 8007b62:	2e00      	cmp	r6, #0
 8007b64:	dd71      	ble.n	8007c4a <_strtod_l+0x532>
 8007b66:	f016 030f 	ands.w	r3, r6, #15
 8007b6a:	d00a      	beq.n	8007b82 <_strtod_l+0x46a>
 8007b6c:	494e      	ldr	r1, [pc, #312]	; (8007ca8 <_strtod_l+0x590>)
 8007b6e:	4642      	mov	r2, r8
 8007b70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007b74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b78:	464b      	mov	r3, r9
 8007b7a:	f7f8 fcad 	bl	80004d8 <__aeabi_dmul>
 8007b7e:	4680      	mov	r8, r0
 8007b80:	4689      	mov	r9, r1
 8007b82:	f036 060f 	bics.w	r6, r6, #15
 8007b86:	d050      	beq.n	8007c2a <_strtod_l+0x512>
 8007b88:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007b8c:	dd27      	ble.n	8007bde <_strtod_l+0x4c6>
 8007b8e:	f04f 0b00 	mov.w	fp, #0
 8007b92:	f8cd b010 	str.w	fp, [sp, #16]
 8007b96:	f8cd b020 	str.w	fp, [sp, #32]
 8007b9a:	f8cd b018 	str.w	fp, [sp, #24]
 8007b9e:	2322      	movs	r3, #34	; 0x22
 8007ba0:	f04f 0800 	mov.w	r8, #0
 8007ba4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007cb0 <_strtod_l+0x598>
 8007ba8:	f8ca 3000 	str.w	r3, [sl]
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f43f adf3 	beq.w	800779a <_strtod_l+0x82>
 8007bb4:	4650      	mov	r0, sl
 8007bb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bb8:	f001 fe0c 	bl	80097d4 <_Bfree>
 8007bbc:	4650      	mov	r0, sl
 8007bbe:	9906      	ldr	r1, [sp, #24]
 8007bc0:	f001 fe08 	bl	80097d4 <_Bfree>
 8007bc4:	4650      	mov	r0, sl
 8007bc6:	9904      	ldr	r1, [sp, #16]
 8007bc8:	f001 fe04 	bl	80097d4 <_Bfree>
 8007bcc:	4650      	mov	r0, sl
 8007bce:	9908      	ldr	r1, [sp, #32]
 8007bd0:	f001 fe00 	bl	80097d4 <_Bfree>
 8007bd4:	4659      	mov	r1, fp
 8007bd6:	4650      	mov	r0, sl
 8007bd8:	f001 fdfc 	bl	80097d4 <_Bfree>
 8007bdc:	e5dd      	b.n	800779a <_strtod_l+0x82>
 8007bde:	2300      	movs	r3, #0
 8007be0:	4640      	mov	r0, r8
 8007be2:	4649      	mov	r1, r9
 8007be4:	461f      	mov	r7, r3
 8007be6:	1136      	asrs	r6, r6, #4
 8007be8:	2e01      	cmp	r6, #1
 8007bea:	dc21      	bgt.n	8007c30 <_strtod_l+0x518>
 8007bec:	b10b      	cbz	r3, 8007bf2 <_strtod_l+0x4da>
 8007bee:	4680      	mov	r8, r0
 8007bf0:	4689      	mov	r9, r1
 8007bf2:	4b2e      	ldr	r3, [pc, #184]	; (8007cac <_strtod_l+0x594>)
 8007bf4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007bf8:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007bfc:	4642      	mov	r2, r8
 8007bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c02:	464b      	mov	r3, r9
 8007c04:	f7f8 fc68 	bl	80004d8 <__aeabi_dmul>
 8007c08:	4b29      	ldr	r3, [pc, #164]	; (8007cb0 <_strtod_l+0x598>)
 8007c0a:	460a      	mov	r2, r1
 8007c0c:	400b      	ands	r3, r1
 8007c0e:	4929      	ldr	r1, [pc, #164]	; (8007cb4 <_strtod_l+0x59c>)
 8007c10:	4680      	mov	r8, r0
 8007c12:	428b      	cmp	r3, r1
 8007c14:	d8bb      	bhi.n	8007b8e <_strtod_l+0x476>
 8007c16:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007c1a:	428b      	cmp	r3, r1
 8007c1c:	bf86      	itte	hi
 8007c1e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007c22:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007cb8 <_strtod_l+0x5a0>
 8007c26:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	e07e      	b.n	8007d2e <_strtod_l+0x616>
 8007c30:	07f2      	lsls	r2, r6, #31
 8007c32:	d507      	bpl.n	8007c44 <_strtod_l+0x52c>
 8007c34:	4b1d      	ldr	r3, [pc, #116]	; (8007cac <_strtod_l+0x594>)
 8007c36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fc4b 	bl	80004d8 <__aeabi_dmul>
 8007c42:	2301      	movs	r3, #1
 8007c44:	3701      	adds	r7, #1
 8007c46:	1076      	asrs	r6, r6, #1
 8007c48:	e7ce      	b.n	8007be8 <_strtod_l+0x4d0>
 8007c4a:	d0ee      	beq.n	8007c2a <_strtod_l+0x512>
 8007c4c:	4276      	negs	r6, r6
 8007c4e:	f016 020f 	ands.w	r2, r6, #15
 8007c52:	d00a      	beq.n	8007c6a <_strtod_l+0x552>
 8007c54:	4b14      	ldr	r3, [pc, #80]	; (8007ca8 <_strtod_l+0x590>)
 8007c56:	4640      	mov	r0, r8
 8007c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c62:	f7f8 fd63 	bl	800072c <__aeabi_ddiv>
 8007c66:	4680      	mov	r8, r0
 8007c68:	4689      	mov	r9, r1
 8007c6a:	1136      	asrs	r6, r6, #4
 8007c6c:	d0dd      	beq.n	8007c2a <_strtod_l+0x512>
 8007c6e:	2e1f      	cmp	r6, #31
 8007c70:	dd24      	ble.n	8007cbc <_strtod_l+0x5a4>
 8007c72:	f04f 0b00 	mov.w	fp, #0
 8007c76:	f8cd b010 	str.w	fp, [sp, #16]
 8007c7a:	f8cd b020 	str.w	fp, [sp, #32]
 8007c7e:	f8cd b018 	str.w	fp, [sp, #24]
 8007c82:	2322      	movs	r3, #34	; 0x22
 8007c84:	f04f 0800 	mov.w	r8, #0
 8007c88:	f04f 0900 	mov.w	r9, #0
 8007c8c:	f8ca 3000 	str.w	r3, [sl]
 8007c90:	e78c      	b.n	8007bac <_strtod_l+0x494>
 8007c92:	bf00      	nop
 8007c94:	0800b2d5 	.word	0x0800b2d5
 8007c98:	0800b310 	.word	0x0800b310
 8007c9c:	0800b2cd 	.word	0x0800b2cd
 8007ca0:	0800b353 	.word	0x0800b353
 8007ca4:	0800b610 	.word	0x0800b610
 8007ca8:	0800b4f0 	.word	0x0800b4f0
 8007cac:	0800b4c8 	.word	0x0800b4c8
 8007cb0:	7ff00000 	.word	0x7ff00000
 8007cb4:	7ca00000 	.word	0x7ca00000
 8007cb8:	7fefffff 	.word	0x7fefffff
 8007cbc:	f016 0310 	ands.w	r3, r6, #16
 8007cc0:	bf18      	it	ne
 8007cc2:	236a      	movne	r3, #106	; 0x6a
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	9305      	str	r3, [sp, #20]
 8007cc8:	4649      	mov	r1, r9
 8007cca:	2300      	movs	r3, #0
 8007ccc:	4fb2      	ldr	r7, [pc, #712]	; (8007f98 <_strtod_l+0x880>)
 8007cce:	07f2      	lsls	r2, r6, #31
 8007cd0:	d504      	bpl.n	8007cdc <_strtod_l+0x5c4>
 8007cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cd6:	f7f8 fbff 	bl	80004d8 <__aeabi_dmul>
 8007cda:	2301      	movs	r3, #1
 8007cdc:	1076      	asrs	r6, r6, #1
 8007cde:	f107 0708 	add.w	r7, r7, #8
 8007ce2:	d1f4      	bne.n	8007cce <_strtod_l+0x5b6>
 8007ce4:	b10b      	cbz	r3, 8007cea <_strtod_l+0x5d2>
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	4689      	mov	r9, r1
 8007cea:	9b05      	ldr	r3, [sp, #20]
 8007cec:	b1bb      	cbz	r3, 8007d1e <_strtod_l+0x606>
 8007cee:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007cf2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	4649      	mov	r1, r9
 8007cfa:	dd10      	ble.n	8007d1e <_strtod_l+0x606>
 8007cfc:	2b1f      	cmp	r3, #31
 8007cfe:	f340 812b 	ble.w	8007f58 <_strtod_l+0x840>
 8007d02:	2b34      	cmp	r3, #52	; 0x34
 8007d04:	bfd8      	it	le
 8007d06:	f04f 32ff 	movle.w	r2, #4294967295
 8007d0a:	f04f 0800 	mov.w	r8, #0
 8007d0e:	bfcf      	iteee	gt
 8007d10:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007d14:	3b20      	suble	r3, #32
 8007d16:	fa02 f303 	lslle.w	r3, r2, r3
 8007d1a:	ea03 0901 	andle.w	r9, r3, r1
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	4640      	mov	r0, r8
 8007d24:	4649      	mov	r1, r9
 8007d26:	f7f8 fe3f 	bl	80009a8 <__aeabi_dcmpeq>
 8007d2a:	2800      	cmp	r0, #0
 8007d2c:	d1a1      	bne.n	8007c72 <_strtod_l+0x55a>
 8007d2e:	9b06      	ldr	r3, [sp, #24]
 8007d30:	465a      	mov	r2, fp
 8007d32:	9300      	str	r3, [sp, #0]
 8007d34:	4650      	mov	r0, sl
 8007d36:	4623      	mov	r3, r4
 8007d38:	9908      	ldr	r1, [sp, #32]
 8007d3a:	f001 fdb7 	bl	80098ac <__s2b>
 8007d3e:	9008      	str	r0, [sp, #32]
 8007d40:	2800      	cmp	r0, #0
 8007d42:	f43f af24 	beq.w	8007b8e <_strtod_l+0x476>
 8007d46:	9b04      	ldr	r3, [sp, #16]
 8007d48:	f04f 0b00 	mov.w	fp, #0
 8007d4c:	1b5d      	subs	r5, r3, r5
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	f8cd b010 	str.w	fp, [sp, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	bfb4      	ite	lt
 8007d58:	462b      	movlt	r3, r5
 8007d5a:	2300      	movge	r3, #0
 8007d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8007d5e:	9b07      	ldr	r3, [sp, #28]
 8007d60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d64:	9316      	str	r3, [sp, #88]	; 0x58
 8007d66:	9b08      	ldr	r3, [sp, #32]
 8007d68:	4650      	mov	r0, sl
 8007d6a:	6859      	ldr	r1, [r3, #4]
 8007d6c:	f001 fcf2 	bl	8009754 <_Balloc>
 8007d70:	9006      	str	r0, [sp, #24]
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f43f af13 	beq.w	8007b9e <_strtod_l+0x486>
 8007d78:	9b08      	ldr	r3, [sp, #32]
 8007d7a:	300c      	adds	r0, #12
 8007d7c:	691a      	ldr	r2, [r3, #16]
 8007d7e:	f103 010c 	add.w	r1, r3, #12
 8007d82:	3202      	adds	r2, #2
 8007d84:	0092      	lsls	r2, r2, #2
 8007d86:	f001 fcd7 	bl	8009738 <memcpy>
 8007d8a:	ab1e      	add	r3, sp, #120	; 0x78
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	ab1d      	add	r3, sp, #116	; 0x74
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4642      	mov	r2, r8
 8007d94:	464b      	mov	r3, r9
 8007d96:	4650      	mov	r0, sl
 8007d98:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8007d9c:	f002 f8c4 	bl	8009f28 <__d2b>
 8007da0:	901c      	str	r0, [sp, #112]	; 0x70
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f43f aefb 	beq.w	8007b9e <_strtod_l+0x486>
 8007da8:	2101      	movs	r1, #1
 8007daa:	4650      	mov	r0, sl
 8007dac:	f001 fe16 	bl	80099dc <__i2b>
 8007db0:	4603      	mov	r3, r0
 8007db2:	9004      	str	r0, [sp, #16]
 8007db4:	2800      	cmp	r0, #0
 8007db6:	f43f aef2 	beq.w	8007b9e <_strtod_l+0x486>
 8007dba:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007dbc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	bfab      	itete	ge
 8007dc2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007dc4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007dc6:	18ee      	addge	r6, r5, r3
 8007dc8:	1b5c      	sublt	r4, r3, r5
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	bfa8      	it	ge
 8007dce:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007dd0:	eba5 0503 	sub.w	r5, r5, r3
 8007dd4:	4415      	add	r5, r2
 8007dd6:	4b71      	ldr	r3, [pc, #452]	; (8007f9c <_strtod_l+0x884>)
 8007dd8:	f105 35ff 	add.w	r5, r5, #4294967295
 8007ddc:	bfb8      	it	lt
 8007dde:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007de0:	429d      	cmp	r5, r3
 8007de2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007de6:	f280 80c9 	bge.w	8007f7c <_strtod_l+0x864>
 8007dea:	1b5b      	subs	r3, r3, r5
 8007dec:	2b1f      	cmp	r3, #31
 8007dee:	f04f 0701 	mov.w	r7, #1
 8007df2:	eba2 0203 	sub.w	r2, r2, r3
 8007df6:	f300 80b6 	bgt.w	8007f66 <_strtod_l+0x84e>
 8007dfa:	2500      	movs	r5, #0
 8007dfc:	fa07 f303 	lsl.w	r3, r7, r3
 8007e00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e02:	18b7      	adds	r7, r6, r2
 8007e04:	9b05      	ldr	r3, [sp, #20]
 8007e06:	42be      	cmp	r6, r7
 8007e08:	4414      	add	r4, r2
 8007e0a:	441c      	add	r4, r3
 8007e0c:	4633      	mov	r3, r6
 8007e0e:	bfa8      	it	ge
 8007e10:	463b      	movge	r3, r7
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	bfa8      	it	ge
 8007e16:	4623      	movge	r3, r4
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	bfc2      	ittt	gt
 8007e1c:	1aff      	subgt	r7, r7, r3
 8007e1e:	1ae4      	subgt	r4, r4, r3
 8007e20:	1af6      	subgt	r6, r6, r3
 8007e22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dd17      	ble.n	8007e58 <_strtod_l+0x740>
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4650      	mov	r0, sl
 8007e2c:	9904      	ldr	r1, [sp, #16]
 8007e2e:	f001 fe8f 	bl	8009b50 <__pow5mult>
 8007e32:	9004      	str	r0, [sp, #16]
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f43f aeb2 	beq.w	8007b9e <_strtod_l+0x486>
 8007e3a:	4601      	mov	r1, r0
 8007e3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007e3e:	4650      	mov	r0, sl
 8007e40:	f001 fde2 	bl	8009a08 <__multiply>
 8007e44:	9009      	str	r0, [sp, #36]	; 0x24
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f43f aea9 	beq.w	8007b9e <_strtod_l+0x486>
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e50:	f001 fcc0 	bl	80097d4 <_Bfree>
 8007e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e56:	931c      	str	r3, [sp, #112]	; 0x70
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	f300 8093 	bgt.w	8007f84 <_strtod_l+0x86c>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dd08      	ble.n	8007e76 <_strtod_l+0x75e>
 8007e64:	4650      	mov	r0, sl
 8007e66:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007e68:	9906      	ldr	r1, [sp, #24]
 8007e6a:	f001 fe71 	bl	8009b50 <__pow5mult>
 8007e6e:	9006      	str	r0, [sp, #24]
 8007e70:	2800      	cmp	r0, #0
 8007e72:	f43f ae94 	beq.w	8007b9e <_strtod_l+0x486>
 8007e76:	2c00      	cmp	r4, #0
 8007e78:	dd08      	ble.n	8007e8c <_strtod_l+0x774>
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4650      	mov	r0, sl
 8007e7e:	9906      	ldr	r1, [sp, #24]
 8007e80:	f001 fec0 	bl	8009c04 <__lshift>
 8007e84:	9006      	str	r0, [sp, #24]
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f ae89 	beq.w	8007b9e <_strtod_l+0x486>
 8007e8c:	2e00      	cmp	r6, #0
 8007e8e:	dd08      	ble.n	8007ea2 <_strtod_l+0x78a>
 8007e90:	4632      	mov	r2, r6
 8007e92:	4650      	mov	r0, sl
 8007e94:	9904      	ldr	r1, [sp, #16]
 8007e96:	f001 feb5 	bl	8009c04 <__lshift>
 8007e9a:	9004      	str	r0, [sp, #16]
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f43f ae7e 	beq.w	8007b9e <_strtod_l+0x486>
 8007ea2:	4650      	mov	r0, sl
 8007ea4:	9a06      	ldr	r2, [sp, #24]
 8007ea6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ea8:	f001 ff34 	bl	8009d14 <__mdiff>
 8007eac:	4683      	mov	fp, r0
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f43f ae75 	beq.w	8007b9e <_strtod_l+0x486>
 8007eb4:	2400      	movs	r4, #0
 8007eb6:	68c3      	ldr	r3, [r0, #12]
 8007eb8:	9904      	ldr	r1, [sp, #16]
 8007eba:	60c4      	str	r4, [r0, #12]
 8007ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8007ebe:	f001 ff0d 	bl	8009cdc <__mcmp>
 8007ec2:	42a0      	cmp	r0, r4
 8007ec4:	da70      	bge.n	8007fa8 <_strtod_l+0x890>
 8007ec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ec8:	ea53 0308 	orrs.w	r3, r3, r8
 8007ecc:	f040 8096 	bne.w	8007ffc <_strtod_l+0x8e4>
 8007ed0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f040 8091 	bne.w	8007ffc <_strtod_l+0x8e4>
 8007eda:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ede:	0d1b      	lsrs	r3, r3, #20
 8007ee0:	051b      	lsls	r3, r3, #20
 8007ee2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ee6:	f240 8089 	bls.w	8007ffc <_strtod_l+0x8e4>
 8007eea:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007eee:	b923      	cbnz	r3, 8007efa <_strtod_l+0x7e2>
 8007ef0:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	f340 8081 	ble.w	8007ffc <_strtod_l+0x8e4>
 8007efa:	4659      	mov	r1, fp
 8007efc:	2201      	movs	r2, #1
 8007efe:	4650      	mov	r0, sl
 8007f00:	f001 fe80 	bl	8009c04 <__lshift>
 8007f04:	9904      	ldr	r1, [sp, #16]
 8007f06:	4683      	mov	fp, r0
 8007f08:	f001 fee8 	bl	8009cdc <__mcmp>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	dd75      	ble.n	8007ffc <_strtod_l+0x8e4>
 8007f10:	9905      	ldr	r1, [sp, #20]
 8007f12:	464b      	mov	r3, r9
 8007f14:	4a22      	ldr	r2, [pc, #136]	; (8007fa0 <_strtod_l+0x888>)
 8007f16:	2900      	cmp	r1, #0
 8007f18:	f000 8091 	beq.w	800803e <_strtod_l+0x926>
 8007f1c:	ea02 0109 	and.w	r1, r2, r9
 8007f20:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f24:	f300 808b 	bgt.w	800803e <_strtod_l+0x926>
 8007f28:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f2c:	f77f aea9 	ble.w	8007c82 <_strtod_l+0x56a>
 8007f30:	2300      	movs	r3, #0
 8007f32:	4a1c      	ldr	r2, [pc, #112]	; (8007fa4 <_strtod_l+0x88c>)
 8007f34:	4640      	mov	r0, r8
 8007f36:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007f3a:	4649      	mov	r1, r9
 8007f3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f40:	f7f8 faca 	bl	80004d8 <__aeabi_dmul>
 8007f44:	460b      	mov	r3, r1
 8007f46:	4303      	orrs	r3, r0
 8007f48:	bf08      	it	eq
 8007f4a:	2322      	moveq	r3, #34	; 0x22
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	4689      	mov	r9, r1
 8007f50:	bf08      	it	eq
 8007f52:	f8ca 3000 	streq.w	r3, [sl]
 8007f56:	e62d      	b.n	8007bb4 <_strtod_l+0x49c>
 8007f58:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	ea03 0808 	and.w	r8, r3, r8
 8007f64:	e6db      	b.n	8007d1e <_strtod_l+0x606>
 8007f66:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007f6a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007f6e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007f72:	35e2      	adds	r5, #226	; 0xe2
 8007f74:	fa07 f505 	lsl.w	r5, r7, r5
 8007f78:	970f      	str	r7, [sp, #60]	; 0x3c
 8007f7a:	e742      	b.n	8007e02 <_strtod_l+0x6ea>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	2500      	movs	r5, #0
 8007f80:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f82:	e73e      	b.n	8007e02 <_strtod_l+0x6ea>
 8007f84:	463a      	mov	r2, r7
 8007f86:	4650      	mov	r0, sl
 8007f88:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007f8a:	f001 fe3b 	bl	8009c04 <__lshift>
 8007f8e:	901c      	str	r0, [sp, #112]	; 0x70
 8007f90:	2800      	cmp	r0, #0
 8007f92:	f47f af64 	bne.w	8007e5e <_strtod_l+0x746>
 8007f96:	e602      	b.n	8007b9e <_strtod_l+0x486>
 8007f98:	0800b328 	.word	0x0800b328
 8007f9c:	fffffc02 	.word	0xfffffc02
 8007fa0:	7ff00000 	.word	0x7ff00000
 8007fa4:	39500000 	.word	0x39500000
 8007fa8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007fac:	d166      	bne.n	800807c <_strtod_l+0x964>
 8007fae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007fb4:	b35a      	cbz	r2, 800800e <_strtod_l+0x8f6>
 8007fb6:	4a9c      	ldr	r2, [pc, #624]	; (8008228 <_strtod_l+0xb10>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d12c      	bne.n	8008016 <_strtod_l+0x8fe>
 8007fbc:	9b05      	ldr	r3, [sp, #20]
 8007fbe:	4640      	mov	r0, r8
 8007fc0:	b303      	cbz	r3, 8008004 <_strtod_l+0x8ec>
 8007fc2:	464b      	mov	r3, r9
 8007fc4:	4a99      	ldr	r2, [pc, #612]	; (800822c <_strtod_l+0xb14>)
 8007fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8007fca:	401a      	ands	r2, r3
 8007fcc:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007fd0:	d81b      	bhi.n	800800a <_strtod_l+0x8f2>
 8007fd2:	0d12      	lsrs	r2, r2, #20
 8007fd4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fdc:	4298      	cmp	r0, r3
 8007fde:	d11a      	bne.n	8008016 <_strtod_l+0x8fe>
 8007fe0:	4b93      	ldr	r3, [pc, #588]	; (8008230 <_strtod_l+0xb18>)
 8007fe2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d102      	bne.n	8007fee <_strtod_l+0x8d6>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f43f add8 	beq.w	8007b9e <_strtod_l+0x486>
 8007fee:	f04f 0800 	mov.w	r8, #0
 8007ff2:	4b8e      	ldr	r3, [pc, #568]	; (800822c <_strtod_l+0xb14>)
 8007ff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff6:	401a      	ands	r2, r3
 8007ff8:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007ffc:	9b05      	ldr	r3, [sp, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d196      	bne.n	8007f30 <_strtod_l+0x818>
 8008002:	e5d7      	b.n	8007bb4 <_strtod_l+0x49c>
 8008004:	f04f 33ff 	mov.w	r3, #4294967295
 8008008:	e7e8      	b.n	8007fdc <_strtod_l+0x8c4>
 800800a:	460b      	mov	r3, r1
 800800c:	e7e6      	b.n	8007fdc <_strtod_l+0x8c4>
 800800e:	ea53 0308 	orrs.w	r3, r3, r8
 8008012:	f43f af7d 	beq.w	8007f10 <_strtod_l+0x7f8>
 8008016:	b1e5      	cbz	r5, 8008052 <_strtod_l+0x93a>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	421d      	tst	r5, r3
 800801c:	d0ee      	beq.n	8007ffc <_strtod_l+0x8e4>
 800801e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008020:	4640      	mov	r0, r8
 8008022:	4649      	mov	r1, r9
 8008024:	9a05      	ldr	r2, [sp, #20]
 8008026:	b1c3      	cbz	r3, 800805a <_strtod_l+0x942>
 8008028:	f7ff fb52 	bl	80076d0 <sulp>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008034:	f7f8 f89a 	bl	800016c <__adddf3>
 8008038:	4680      	mov	r8, r0
 800803a:	4689      	mov	r9, r1
 800803c:	e7de      	b.n	8007ffc <_strtod_l+0x8e4>
 800803e:	4013      	ands	r3, r2
 8008040:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008044:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008048:	f04f 38ff 	mov.w	r8, #4294967295
 800804c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008050:	e7d4      	b.n	8007ffc <_strtod_l+0x8e4>
 8008052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008054:	ea13 0f08 	tst.w	r3, r8
 8008058:	e7e0      	b.n	800801c <_strtod_l+0x904>
 800805a:	f7ff fb39 	bl	80076d0 <sulp>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008066:	f7f8 f87f 	bl	8000168 <__aeabi_dsub>
 800806a:	2200      	movs	r2, #0
 800806c:	2300      	movs	r3, #0
 800806e:	4680      	mov	r8, r0
 8008070:	4689      	mov	r9, r1
 8008072:	f7f8 fc99 	bl	80009a8 <__aeabi_dcmpeq>
 8008076:	2800      	cmp	r0, #0
 8008078:	d0c0      	beq.n	8007ffc <_strtod_l+0x8e4>
 800807a:	e602      	b.n	8007c82 <_strtod_l+0x56a>
 800807c:	4658      	mov	r0, fp
 800807e:	9904      	ldr	r1, [sp, #16]
 8008080:	f001 ffae 	bl	8009fe0 <__ratio>
 8008084:	2200      	movs	r2, #0
 8008086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800808a:	4606      	mov	r6, r0
 800808c:	460f      	mov	r7, r1
 800808e:	f7f8 fc9f 	bl	80009d0 <__aeabi_dcmple>
 8008092:	2800      	cmp	r0, #0
 8008094:	d075      	beq.n	8008182 <_strtod_l+0xa6a>
 8008096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008098:	2b00      	cmp	r3, #0
 800809a:	d047      	beq.n	800812c <_strtod_l+0xa14>
 800809c:	2600      	movs	r6, #0
 800809e:	4f65      	ldr	r7, [pc, #404]	; (8008234 <_strtod_l+0xb1c>)
 80080a0:	4d64      	ldr	r5, [pc, #400]	; (8008234 <_strtod_l+0xb1c>)
 80080a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080a8:	0d1b      	lsrs	r3, r3, #20
 80080aa:	051b      	lsls	r3, r3, #20
 80080ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80080ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80080b0:	4b61      	ldr	r3, [pc, #388]	; (8008238 <_strtod_l+0xb20>)
 80080b2:	429a      	cmp	r2, r3
 80080b4:	f040 80c8 	bne.w	8008248 <_strtod_l+0xb30>
 80080b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80080c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c2:	4640      	mov	r0, r8
 80080c4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 80080c8:	4649      	mov	r1, r9
 80080ca:	f001 feb3 	bl	8009e34 <__ulp>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4630      	mov	r0, r6
 80080d4:	4639      	mov	r1, r7
 80080d6:	f7f8 f9ff 	bl	80004d8 <__aeabi_dmul>
 80080da:	4642      	mov	r2, r8
 80080dc:	464b      	mov	r3, r9
 80080de:	f7f8 f845 	bl	800016c <__adddf3>
 80080e2:	460b      	mov	r3, r1
 80080e4:	4951      	ldr	r1, [pc, #324]	; (800822c <_strtod_l+0xb14>)
 80080e6:	4a55      	ldr	r2, [pc, #340]	; (800823c <_strtod_l+0xb24>)
 80080e8:	4019      	ands	r1, r3
 80080ea:	4291      	cmp	r1, r2
 80080ec:	4680      	mov	r8, r0
 80080ee:	d95e      	bls.n	80081ae <_strtod_l+0xa96>
 80080f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d103      	bne.n	8008102 <_strtod_l+0x9ea>
 80080fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080fc:	3301      	adds	r3, #1
 80080fe:	f43f ad4e 	beq.w	8007b9e <_strtod_l+0x486>
 8008102:	f04f 38ff 	mov.w	r8, #4294967295
 8008106:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8008230 <_strtod_l+0xb18>
 800810a:	4650      	mov	r0, sl
 800810c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800810e:	f001 fb61 	bl	80097d4 <_Bfree>
 8008112:	4650      	mov	r0, sl
 8008114:	9906      	ldr	r1, [sp, #24]
 8008116:	f001 fb5d 	bl	80097d4 <_Bfree>
 800811a:	4650      	mov	r0, sl
 800811c:	9904      	ldr	r1, [sp, #16]
 800811e:	f001 fb59 	bl	80097d4 <_Bfree>
 8008122:	4659      	mov	r1, fp
 8008124:	4650      	mov	r0, sl
 8008126:	f001 fb55 	bl	80097d4 <_Bfree>
 800812a:	e61c      	b.n	8007d66 <_strtod_l+0x64e>
 800812c:	f1b8 0f00 	cmp.w	r8, #0
 8008130:	d119      	bne.n	8008166 <_strtod_l+0xa4e>
 8008132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008138:	b9e3      	cbnz	r3, 8008174 <_strtod_l+0xa5c>
 800813a:	2200      	movs	r2, #0
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	4b3c      	ldr	r3, [pc, #240]	; (8008234 <_strtod_l+0xb1c>)
 8008142:	f7f8 fc3b 	bl	80009bc <__aeabi_dcmplt>
 8008146:	b9c8      	cbnz	r0, 800817c <_strtod_l+0xa64>
 8008148:	2200      	movs	r2, #0
 800814a:	4630      	mov	r0, r6
 800814c:	4639      	mov	r1, r7
 800814e:	4b3c      	ldr	r3, [pc, #240]	; (8008240 <_strtod_l+0xb28>)
 8008150:	f7f8 f9c2 	bl	80004d8 <__aeabi_dmul>
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800815c:	9418      	str	r4, [sp, #96]	; 0x60
 800815e:	9319      	str	r3, [sp, #100]	; 0x64
 8008160:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8008164:	e79d      	b.n	80080a2 <_strtod_l+0x98a>
 8008166:	f1b8 0f01 	cmp.w	r8, #1
 800816a:	d103      	bne.n	8008174 <_strtod_l+0xa5c>
 800816c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800816e:	2b00      	cmp	r3, #0
 8008170:	f43f ad87 	beq.w	8007c82 <_strtod_l+0x56a>
 8008174:	2600      	movs	r6, #0
 8008176:	2400      	movs	r4, #0
 8008178:	4f32      	ldr	r7, [pc, #200]	; (8008244 <_strtod_l+0xb2c>)
 800817a:	e791      	b.n	80080a0 <_strtod_l+0x988>
 800817c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800817e:	4d30      	ldr	r5, [pc, #192]	; (8008240 <_strtod_l+0xb28>)
 8008180:	e7ea      	b.n	8008158 <_strtod_l+0xa40>
 8008182:	4b2f      	ldr	r3, [pc, #188]	; (8008240 <_strtod_l+0xb28>)
 8008184:	2200      	movs	r2, #0
 8008186:	4630      	mov	r0, r6
 8008188:	4639      	mov	r1, r7
 800818a:	f7f8 f9a5 	bl	80004d8 <__aeabi_dmul>
 800818e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	b933      	cbnz	r3, 80081a4 <_strtod_l+0xa8c>
 8008196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800819a:	9010      	str	r0, [sp, #64]	; 0x40
 800819c:	9311      	str	r3, [sp, #68]	; 0x44
 800819e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80081a2:	e77e      	b.n	80080a2 <_strtod_l+0x98a>
 80081a4:	4602      	mov	r2, r0
 80081a6:	460b      	mov	r3, r1
 80081a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80081ac:	e7f7      	b.n	800819e <_strtod_l+0xa86>
 80081ae:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80081b2:	9b05      	ldr	r3, [sp, #20]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1a8      	bne.n	800810a <_strtod_l+0x9f2>
 80081b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081be:	0d1b      	lsrs	r3, r3, #20
 80081c0:	051b      	lsls	r3, r3, #20
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d1a1      	bne.n	800810a <_strtod_l+0x9f2>
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	f7f8 ffc1 	bl	8001150 <__aeabi_d2lz>
 80081ce:	f7f8 f955 	bl	800047c <__aeabi_l2d>
 80081d2:	4602      	mov	r2, r0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4620      	mov	r0, r4
 80081d8:	4629      	mov	r1, r5
 80081da:	f7f7 ffc5 	bl	8000168 <__aeabi_dsub>
 80081de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80081e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081e4:	ea43 0308 	orr.w	r3, r3, r8
 80081e8:	4313      	orrs	r3, r2
 80081ea:	4604      	mov	r4, r0
 80081ec:	460d      	mov	r5, r1
 80081ee:	d066      	beq.n	80082be <_strtod_l+0xba6>
 80081f0:	a309      	add	r3, pc, #36	; (adr r3, 8008218 <_strtod_l+0xb00>)
 80081f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081f6:	f7f8 fbe1 	bl	80009bc <__aeabi_dcmplt>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	f47f acda 	bne.w	8007bb4 <_strtod_l+0x49c>
 8008200:	a307      	add	r3, pc, #28	; (adr r3, 8008220 <_strtod_l+0xb08>)
 8008202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008206:	4620      	mov	r0, r4
 8008208:	4629      	mov	r1, r5
 800820a:	f7f8 fbf5 	bl	80009f8 <__aeabi_dcmpgt>
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f af7b 	beq.w	800810a <_strtod_l+0x9f2>
 8008214:	e4ce      	b.n	8007bb4 <_strtod_l+0x49c>
 8008216:	bf00      	nop
 8008218:	94a03595 	.word	0x94a03595
 800821c:	3fdfffff 	.word	0x3fdfffff
 8008220:	35afe535 	.word	0x35afe535
 8008224:	3fe00000 	.word	0x3fe00000
 8008228:	000fffff 	.word	0x000fffff
 800822c:	7ff00000 	.word	0x7ff00000
 8008230:	7fefffff 	.word	0x7fefffff
 8008234:	3ff00000 	.word	0x3ff00000
 8008238:	7fe00000 	.word	0x7fe00000
 800823c:	7c9fffff 	.word	0x7c9fffff
 8008240:	3fe00000 	.word	0x3fe00000
 8008244:	bff00000 	.word	0xbff00000
 8008248:	9b05      	ldr	r3, [sp, #20]
 800824a:	b313      	cbz	r3, 8008292 <_strtod_l+0xb7a>
 800824c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800824e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008252:	d81e      	bhi.n	8008292 <_strtod_l+0xb7a>
 8008254:	a326      	add	r3, pc, #152	; (adr r3, 80082f0 <_strtod_l+0xbd8>)
 8008256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825a:	4620      	mov	r0, r4
 800825c:	4629      	mov	r1, r5
 800825e:	f7f8 fbb7 	bl	80009d0 <__aeabi_dcmple>
 8008262:	b190      	cbz	r0, 800828a <_strtod_l+0xb72>
 8008264:	4629      	mov	r1, r5
 8008266:	4620      	mov	r0, r4
 8008268:	f7f8 fc0e 	bl	8000a88 <__aeabi_d2uiz>
 800826c:	2801      	cmp	r0, #1
 800826e:	bf38      	it	cc
 8008270:	2001      	movcc	r0, #1
 8008272:	f7f8 f8b7 	bl	80003e4 <__aeabi_ui2d>
 8008276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008278:	4604      	mov	r4, r0
 800827a:	460d      	mov	r5, r1
 800827c:	b9d3      	cbnz	r3, 80082b4 <_strtod_l+0xb9c>
 800827e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008282:	9012      	str	r0, [sp, #72]	; 0x48
 8008284:	9313      	str	r3, [sp, #76]	; 0x4c
 8008286:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800828a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800828c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008290:	1a9f      	subs	r7, r3, r2
 8008292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008296:	f001 fdcd 	bl	8009e34 <__ulp>
 800829a:	4602      	mov	r2, r0
 800829c:	460b      	mov	r3, r1
 800829e:	4630      	mov	r0, r6
 80082a0:	4639      	mov	r1, r7
 80082a2:	f7f8 f919 	bl	80004d8 <__aeabi_dmul>
 80082a6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80082aa:	f7f7 ff5f 	bl	800016c <__adddf3>
 80082ae:	4680      	mov	r8, r0
 80082b0:	4689      	mov	r9, r1
 80082b2:	e77e      	b.n	80081b2 <_strtod_l+0xa9a>
 80082b4:	4602      	mov	r2, r0
 80082b6:	460b      	mov	r3, r1
 80082b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80082bc:	e7e3      	b.n	8008286 <_strtod_l+0xb6e>
 80082be:	a30e      	add	r3, pc, #56	; (adr r3, 80082f8 <_strtod_l+0xbe0>)
 80082c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c4:	f7f8 fb7a 	bl	80009bc <__aeabi_dcmplt>
 80082c8:	e7a1      	b.n	800820e <_strtod_l+0xaf6>
 80082ca:	2300      	movs	r3, #0
 80082cc:	930c      	str	r3, [sp, #48]	; 0x30
 80082ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80082d2:	6013      	str	r3, [r2, #0]
 80082d4:	f7ff ba65 	b.w	80077a2 <_strtod_l+0x8a>
 80082d8:	2b65      	cmp	r3, #101	; 0x65
 80082da:	f43f ab5c 	beq.w	8007996 <_strtod_l+0x27e>
 80082de:	2b45      	cmp	r3, #69	; 0x45
 80082e0:	f43f ab59 	beq.w	8007996 <_strtod_l+0x27e>
 80082e4:	2201      	movs	r2, #1
 80082e6:	f7ff bb8d 	b.w	8007a04 <_strtod_l+0x2ec>
 80082ea:	bf00      	nop
 80082ec:	f3af 8000 	nop.w
 80082f0:	ffc00000 	.word	0xffc00000
 80082f4:	41dfffff 	.word	0x41dfffff
 80082f8:	94a03595 	.word	0x94a03595
 80082fc:	3fcfffff 	.word	0x3fcfffff

08008300 <strtod>:
 8008300:	460a      	mov	r2, r1
 8008302:	4601      	mov	r1, r0
 8008304:	4802      	ldr	r0, [pc, #8]	; (8008310 <strtod+0x10>)
 8008306:	4b03      	ldr	r3, [pc, #12]	; (8008314 <strtod+0x14>)
 8008308:	6800      	ldr	r0, [r0, #0]
 800830a:	f7ff ba05 	b.w	8007718 <_strtod_l>
 800830e:	bf00      	nop
 8008310:	20000018 	.word	0x20000018
 8008314:	20000080 	.word	0x20000080

08008318 <quorem>:
 8008318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	6903      	ldr	r3, [r0, #16]
 800831e:	690c      	ldr	r4, [r1, #16]
 8008320:	4607      	mov	r7, r0
 8008322:	42a3      	cmp	r3, r4
 8008324:	f2c0 8083 	blt.w	800842e <quorem+0x116>
 8008328:	3c01      	subs	r4, #1
 800832a:	f100 0514 	add.w	r5, r0, #20
 800832e:	f101 0814 	add.w	r8, r1, #20
 8008332:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008336:	9301      	str	r3, [sp, #4]
 8008338:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800833c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008340:	3301      	adds	r3, #1
 8008342:	429a      	cmp	r2, r3
 8008344:	fbb2 f6f3 	udiv	r6, r2, r3
 8008348:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800834c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008350:	d332      	bcc.n	80083b8 <quorem+0xa0>
 8008352:	f04f 0e00 	mov.w	lr, #0
 8008356:	4640      	mov	r0, r8
 8008358:	46ac      	mov	ip, r5
 800835a:	46f2      	mov	sl, lr
 800835c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008360:	b293      	uxth	r3, r2
 8008362:	fb06 e303 	mla	r3, r6, r3, lr
 8008366:	0c12      	lsrs	r2, r2, #16
 8008368:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800836c:	fb06 e202 	mla	r2, r6, r2, lr
 8008370:	b29b      	uxth	r3, r3
 8008372:	ebaa 0303 	sub.w	r3, sl, r3
 8008376:	f8dc a000 	ldr.w	sl, [ip]
 800837a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800837e:	fa1f fa8a 	uxth.w	sl, sl
 8008382:	4453      	add	r3, sl
 8008384:	fa1f fa82 	uxth.w	sl, r2
 8008388:	f8dc 2000 	ldr.w	r2, [ip]
 800838c:	4581      	cmp	r9, r0
 800838e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008392:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008396:	b29b      	uxth	r3, r3
 8008398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800839c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80083a0:	f84c 3b04 	str.w	r3, [ip], #4
 80083a4:	d2da      	bcs.n	800835c <quorem+0x44>
 80083a6:	f855 300b 	ldr.w	r3, [r5, fp]
 80083aa:	b92b      	cbnz	r3, 80083b8 <quorem+0xa0>
 80083ac:	9b01      	ldr	r3, [sp, #4]
 80083ae:	3b04      	subs	r3, #4
 80083b0:	429d      	cmp	r5, r3
 80083b2:	461a      	mov	r2, r3
 80083b4:	d32f      	bcc.n	8008416 <quorem+0xfe>
 80083b6:	613c      	str	r4, [r7, #16]
 80083b8:	4638      	mov	r0, r7
 80083ba:	f001 fc8f 	bl	8009cdc <__mcmp>
 80083be:	2800      	cmp	r0, #0
 80083c0:	db25      	blt.n	800840e <quorem+0xf6>
 80083c2:	4628      	mov	r0, r5
 80083c4:	f04f 0c00 	mov.w	ip, #0
 80083c8:	3601      	adds	r6, #1
 80083ca:	f858 1b04 	ldr.w	r1, [r8], #4
 80083ce:	f8d0 e000 	ldr.w	lr, [r0]
 80083d2:	b28b      	uxth	r3, r1
 80083d4:	ebac 0303 	sub.w	r3, ip, r3
 80083d8:	fa1f f28e 	uxth.w	r2, lr
 80083dc:	4413      	add	r3, r2
 80083de:	0c0a      	lsrs	r2, r1, #16
 80083e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80083e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ee:	45c1      	cmp	r9, r8
 80083f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80083f4:	f840 3b04 	str.w	r3, [r0], #4
 80083f8:	d2e7      	bcs.n	80083ca <quorem+0xb2>
 80083fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008402:	b922      	cbnz	r2, 800840e <quorem+0xf6>
 8008404:	3b04      	subs	r3, #4
 8008406:	429d      	cmp	r5, r3
 8008408:	461a      	mov	r2, r3
 800840a:	d30a      	bcc.n	8008422 <quorem+0x10a>
 800840c:	613c      	str	r4, [r7, #16]
 800840e:	4630      	mov	r0, r6
 8008410:	b003      	add	sp, #12
 8008412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008416:	6812      	ldr	r2, [r2, #0]
 8008418:	3b04      	subs	r3, #4
 800841a:	2a00      	cmp	r2, #0
 800841c:	d1cb      	bne.n	80083b6 <quorem+0x9e>
 800841e:	3c01      	subs	r4, #1
 8008420:	e7c6      	b.n	80083b0 <quorem+0x98>
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	3b04      	subs	r3, #4
 8008426:	2a00      	cmp	r2, #0
 8008428:	d1f0      	bne.n	800840c <quorem+0xf4>
 800842a:	3c01      	subs	r4, #1
 800842c:	e7eb      	b.n	8008406 <quorem+0xee>
 800842e:	2000      	movs	r0, #0
 8008430:	e7ee      	b.n	8008410 <quorem+0xf8>
 8008432:	0000      	movs	r0, r0
 8008434:	0000      	movs	r0, r0
	...

08008438 <_dtoa_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	4616      	mov	r6, r2
 800843e:	461f      	mov	r7, r3
 8008440:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008442:	b099      	sub	sp, #100	; 0x64
 8008444:	4605      	mov	r5, r0
 8008446:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800844a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800844e:	b974      	cbnz	r4, 800846e <_dtoa_r+0x36>
 8008450:	2010      	movs	r0, #16
 8008452:	f001 f949 	bl	80096e8 <malloc>
 8008456:	4602      	mov	r2, r0
 8008458:	6268      	str	r0, [r5, #36]	; 0x24
 800845a:	b920      	cbnz	r0, 8008466 <_dtoa_r+0x2e>
 800845c:	21ea      	movs	r1, #234	; 0xea
 800845e:	4bae      	ldr	r3, [pc, #696]	; (8008718 <_dtoa_r+0x2e0>)
 8008460:	48ae      	ldr	r0, [pc, #696]	; (800871c <_dtoa_r+0x2e4>)
 8008462:	f002 f863 	bl	800a52c <__assert_func>
 8008466:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800846a:	6004      	str	r4, [r0, #0]
 800846c:	60c4      	str	r4, [r0, #12]
 800846e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008470:	6819      	ldr	r1, [r3, #0]
 8008472:	b151      	cbz	r1, 800848a <_dtoa_r+0x52>
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	2301      	movs	r3, #1
 8008478:	4093      	lsls	r3, r2
 800847a:	604a      	str	r2, [r1, #4]
 800847c:	608b      	str	r3, [r1, #8]
 800847e:	4628      	mov	r0, r5
 8008480:	f001 f9a8 	bl	80097d4 <_Bfree>
 8008484:	2200      	movs	r2, #0
 8008486:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	1e3b      	subs	r3, r7, #0
 800848c:	bfaf      	iteee	ge
 800848e:	2300      	movge	r3, #0
 8008490:	2201      	movlt	r2, #1
 8008492:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008496:	9305      	strlt	r3, [sp, #20]
 8008498:	bfa8      	it	ge
 800849a:	f8c8 3000 	strge.w	r3, [r8]
 800849e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80084a2:	4b9f      	ldr	r3, [pc, #636]	; (8008720 <_dtoa_r+0x2e8>)
 80084a4:	bfb8      	it	lt
 80084a6:	f8c8 2000 	strlt.w	r2, [r8]
 80084aa:	ea33 0309 	bics.w	r3, r3, r9
 80084ae:	d119      	bne.n	80084e4 <_dtoa_r+0xac>
 80084b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80084b4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084bc:	4333      	orrs	r3, r6
 80084be:	f000 8580 	beq.w	8008fc2 <_dtoa_r+0xb8a>
 80084c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80084c4:	b953      	cbnz	r3, 80084dc <_dtoa_r+0xa4>
 80084c6:	4b97      	ldr	r3, [pc, #604]	; (8008724 <_dtoa_r+0x2ec>)
 80084c8:	e022      	b.n	8008510 <_dtoa_r+0xd8>
 80084ca:	4b97      	ldr	r3, [pc, #604]	; (8008728 <_dtoa_r+0x2f0>)
 80084cc:	9308      	str	r3, [sp, #32]
 80084ce:	3308      	adds	r3, #8
 80084d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	9808      	ldr	r0, [sp, #32]
 80084d6:	b019      	add	sp, #100	; 0x64
 80084d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084dc:	4b91      	ldr	r3, [pc, #580]	; (8008724 <_dtoa_r+0x2ec>)
 80084de:	9308      	str	r3, [sp, #32]
 80084e0:	3303      	adds	r3, #3
 80084e2:	e7f5      	b.n	80084d0 <_dtoa_r+0x98>
 80084e4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80084e8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80084ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	2300      	movs	r3, #0
 80084f4:	f7f8 fa58 	bl	80009a8 <__aeabi_dcmpeq>
 80084f8:	4680      	mov	r8, r0
 80084fa:	b158      	cbz	r0, 8008514 <_dtoa_r+0xdc>
 80084fc:	2301      	movs	r3, #1
 80084fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 8559 	beq.w	8008fbc <_dtoa_r+0xb84>
 800850a:	4888      	ldr	r0, [pc, #544]	; (800872c <_dtoa_r+0x2f4>)
 800850c:	6018      	str	r0, [r3, #0]
 800850e:	1e43      	subs	r3, r0, #1
 8008510:	9308      	str	r3, [sp, #32]
 8008512:	e7df      	b.n	80084d4 <_dtoa_r+0x9c>
 8008514:	ab16      	add	r3, sp, #88	; 0x58
 8008516:	9301      	str	r3, [sp, #4]
 8008518:	ab17      	add	r3, sp, #92	; 0x5c
 800851a:	9300      	str	r3, [sp, #0]
 800851c:	4628      	mov	r0, r5
 800851e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008522:	f001 fd01 	bl	8009f28 <__d2b>
 8008526:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800852a:	4682      	mov	sl, r0
 800852c:	2c00      	cmp	r4, #0
 800852e:	d07e      	beq.n	800862e <_dtoa_r+0x1f6>
 8008530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008536:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800853a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800853e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8008542:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8008546:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800854a:	2200      	movs	r2, #0
 800854c:	4b78      	ldr	r3, [pc, #480]	; (8008730 <_dtoa_r+0x2f8>)
 800854e:	f7f7 fe0b 	bl	8000168 <__aeabi_dsub>
 8008552:	a36b      	add	r3, pc, #428	; (adr r3, 8008700 <_dtoa_r+0x2c8>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	a36a      	add	r3, pc, #424	; (adr r3, 8008708 <_dtoa_r+0x2d0>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 fe03 	bl	800016c <__adddf3>
 8008566:	4606      	mov	r6, r0
 8008568:	4620      	mov	r0, r4
 800856a:	460f      	mov	r7, r1
 800856c:	f7f7 ff4a 	bl	8000404 <__aeabi_i2d>
 8008570:	a367      	add	r3, pc, #412	; (adr r3, 8008710 <_dtoa_r+0x2d8>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f7 ffaf 	bl	80004d8 <__aeabi_dmul>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4630      	mov	r0, r6
 8008580:	4639      	mov	r1, r7
 8008582:	f7f7 fdf3 	bl	800016c <__adddf3>
 8008586:	4606      	mov	r6, r0
 8008588:	460f      	mov	r7, r1
 800858a:	f7f8 fa55 	bl	8000a38 <__aeabi_d2iz>
 800858e:	2200      	movs	r2, #0
 8008590:	4681      	mov	r9, r0
 8008592:	2300      	movs	r3, #0
 8008594:	4630      	mov	r0, r6
 8008596:	4639      	mov	r1, r7
 8008598:	f7f8 fa10 	bl	80009bc <__aeabi_dcmplt>
 800859c:	b148      	cbz	r0, 80085b2 <_dtoa_r+0x17a>
 800859e:	4648      	mov	r0, r9
 80085a0:	f7f7 ff30 	bl	8000404 <__aeabi_i2d>
 80085a4:	4632      	mov	r2, r6
 80085a6:	463b      	mov	r3, r7
 80085a8:	f7f8 f9fe 	bl	80009a8 <__aeabi_dcmpeq>
 80085ac:	b908      	cbnz	r0, 80085b2 <_dtoa_r+0x17a>
 80085ae:	f109 39ff 	add.w	r9, r9, #4294967295
 80085b2:	f1b9 0f16 	cmp.w	r9, #22
 80085b6:	d857      	bhi.n	8008668 <_dtoa_r+0x230>
 80085b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085bc:	4b5d      	ldr	r3, [pc, #372]	; (8008734 <_dtoa_r+0x2fc>)
 80085be:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80085c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c6:	f7f8 f9f9 	bl	80009bc <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d04e      	beq.n	800866c <_dtoa_r+0x234>
 80085ce:	2300      	movs	r3, #0
 80085d0:	f109 39ff 	add.w	r9, r9, #4294967295
 80085d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80085d6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80085d8:	1b1c      	subs	r4, r3, r4
 80085da:	1e63      	subs	r3, r4, #1
 80085dc:	9309      	str	r3, [sp, #36]	; 0x24
 80085de:	bf49      	itett	mi
 80085e0:	f1c4 0301 	rsbmi	r3, r4, #1
 80085e4:	2300      	movpl	r3, #0
 80085e6:	9306      	strmi	r3, [sp, #24]
 80085e8:	2300      	movmi	r3, #0
 80085ea:	bf54      	ite	pl
 80085ec:	9306      	strpl	r3, [sp, #24]
 80085ee:	9309      	strmi	r3, [sp, #36]	; 0x24
 80085f0:	f1b9 0f00 	cmp.w	r9, #0
 80085f4:	db3c      	blt.n	8008670 <_dtoa_r+0x238>
 80085f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f8:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80085fc:	444b      	add	r3, r9
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	2300      	movs	r3, #0
 8008602:	930a      	str	r3, [sp, #40]	; 0x28
 8008604:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008606:	2b09      	cmp	r3, #9
 8008608:	d86c      	bhi.n	80086e4 <_dtoa_r+0x2ac>
 800860a:	2b05      	cmp	r3, #5
 800860c:	bfc4      	itt	gt
 800860e:	3b04      	subgt	r3, #4
 8008610:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008612:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008614:	bfc8      	it	gt
 8008616:	2400      	movgt	r4, #0
 8008618:	f1a3 0302 	sub.w	r3, r3, #2
 800861c:	bfd8      	it	le
 800861e:	2401      	movle	r4, #1
 8008620:	2b03      	cmp	r3, #3
 8008622:	f200 808b 	bhi.w	800873c <_dtoa_r+0x304>
 8008626:	e8df f003 	tbb	[pc, r3]
 800862a:	4f2d      	.short	0x4f2d
 800862c:	5b4d      	.short	0x5b4d
 800862e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008632:	441c      	add	r4, r3
 8008634:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008638:	2b20      	cmp	r3, #32
 800863a:	bfc3      	ittte	gt
 800863c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008640:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8008644:	fa09 f303 	lslgt.w	r3, r9, r3
 8008648:	f1c3 0320 	rsble	r3, r3, #32
 800864c:	bfc6      	itte	gt
 800864e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008652:	4318      	orrgt	r0, r3
 8008654:	fa06 f003 	lslle.w	r0, r6, r3
 8008658:	f7f7 fec4 	bl	80003e4 <__aeabi_ui2d>
 800865c:	2301      	movs	r3, #1
 800865e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008662:	3c01      	subs	r4, #1
 8008664:	9313      	str	r3, [sp, #76]	; 0x4c
 8008666:	e770      	b.n	800854a <_dtoa_r+0x112>
 8008668:	2301      	movs	r3, #1
 800866a:	e7b3      	b.n	80085d4 <_dtoa_r+0x19c>
 800866c:	900f      	str	r0, [sp, #60]	; 0x3c
 800866e:	e7b2      	b.n	80085d6 <_dtoa_r+0x19e>
 8008670:	9b06      	ldr	r3, [sp, #24]
 8008672:	eba3 0309 	sub.w	r3, r3, r9
 8008676:	9306      	str	r3, [sp, #24]
 8008678:	f1c9 0300 	rsb	r3, r9, #0
 800867c:	930a      	str	r3, [sp, #40]	; 0x28
 800867e:	2300      	movs	r3, #0
 8008680:	930e      	str	r3, [sp, #56]	; 0x38
 8008682:	e7bf      	b.n	8008604 <_dtoa_r+0x1cc>
 8008684:	2300      	movs	r3, #0
 8008686:	930b      	str	r3, [sp, #44]	; 0x2c
 8008688:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800868a:	2b00      	cmp	r3, #0
 800868c:	dc59      	bgt.n	8008742 <_dtoa_r+0x30a>
 800868e:	f04f 0b01 	mov.w	fp, #1
 8008692:	465b      	mov	r3, fp
 8008694:	f8cd b008 	str.w	fp, [sp, #8]
 8008698:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800869c:	2200      	movs	r2, #0
 800869e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80086a0:	6042      	str	r2, [r0, #4]
 80086a2:	2204      	movs	r2, #4
 80086a4:	f102 0614 	add.w	r6, r2, #20
 80086a8:	429e      	cmp	r6, r3
 80086aa:	6841      	ldr	r1, [r0, #4]
 80086ac:	d94f      	bls.n	800874e <_dtoa_r+0x316>
 80086ae:	4628      	mov	r0, r5
 80086b0:	f001 f850 	bl	8009754 <_Balloc>
 80086b4:	9008      	str	r0, [sp, #32]
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d14d      	bne.n	8008756 <_dtoa_r+0x31e>
 80086ba:	4602      	mov	r2, r0
 80086bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80086c0:	4b1d      	ldr	r3, [pc, #116]	; (8008738 <_dtoa_r+0x300>)
 80086c2:	e6cd      	b.n	8008460 <_dtoa_r+0x28>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7de      	b.n	8008686 <_dtoa_r+0x24e>
 80086c8:	2300      	movs	r3, #0
 80086ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80086cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80086ce:	eb09 0b03 	add.w	fp, r9, r3
 80086d2:	f10b 0301 	add.w	r3, fp, #1
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	bfb8      	it	lt
 80086dc:	2301      	movlt	r3, #1
 80086de:	e7dd      	b.n	800869c <_dtoa_r+0x264>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e7f2      	b.n	80086ca <_dtoa_r+0x292>
 80086e4:	2401      	movs	r4, #1
 80086e6:	2300      	movs	r3, #0
 80086e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80086ea:	9322      	str	r3, [sp, #136]	; 0x88
 80086ec:	f04f 3bff 	mov.w	fp, #4294967295
 80086f0:	2200      	movs	r2, #0
 80086f2:	2312      	movs	r3, #18
 80086f4:	f8cd b008 	str.w	fp, [sp, #8]
 80086f8:	9223      	str	r2, [sp, #140]	; 0x8c
 80086fa:	e7cf      	b.n	800869c <_dtoa_r+0x264>
 80086fc:	f3af 8000 	nop.w
 8008700:	636f4361 	.word	0x636f4361
 8008704:	3fd287a7 	.word	0x3fd287a7
 8008708:	8b60c8b3 	.word	0x8b60c8b3
 800870c:	3fc68a28 	.word	0x3fc68a28
 8008710:	509f79fb 	.word	0x509f79fb
 8008714:	3fd34413 	.word	0x3fd34413
 8008718:	0800b35d 	.word	0x0800b35d
 800871c:	0800b374 	.word	0x0800b374
 8008720:	7ff00000 	.word	0x7ff00000
 8008724:	0800b359 	.word	0x0800b359
 8008728:	0800b350 	.word	0x0800b350
 800872c:	0800b2d9 	.word	0x0800b2d9
 8008730:	3ff80000 	.word	0x3ff80000
 8008734:	0800b4f0 	.word	0x0800b4f0
 8008738:	0800b3d3 	.word	0x0800b3d3
 800873c:	2301      	movs	r3, #1
 800873e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008740:	e7d4      	b.n	80086ec <_dtoa_r+0x2b4>
 8008742:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8008746:	465b      	mov	r3, fp
 8008748:	f8cd b008 	str.w	fp, [sp, #8]
 800874c:	e7a6      	b.n	800869c <_dtoa_r+0x264>
 800874e:	3101      	adds	r1, #1
 8008750:	6041      	str	r1, [r0, #4]
 8008752:	0052      	lsls	r2, r2, #1
 8008754:	e7a6      	b.n	80086a4 <_dtoa_r+0x26c>
 8008756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008758:	9a08      	ldr	r2, [sp, #32]
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	9b02      	ldr	r3, [sp, #8]
 800875e:	2b0e      	cmp	r3, #14
 8008760:	f200 80a8 	bhi.w	80088b4 <_dtoa_r+0x47c>
 8008764:	2c00      	cmp	r4, #0
 8008766:	f000 80a5 	beq.w	80088b4 <_dtoa_r+0x47c>
 800876a:	f1b9 0f00 	cmp.w	r9, #0
 800876e:	dd34      	ble.n	80087da <_dtoa_r+0x3a2>
 8008770:	4a9a      	ldr	r2, [pc, #616]	; (80089dc <_dtoa_r+0x5a4>)
 8008772:	f009 030f 	and.w	r3, r9, #15
 8008776:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800877a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800877e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008782:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008786:	ea4f 1429 	mov.w	r4, r9, asr #4
 800878a:	d016      	beq.n	80087ba <_dtoa_r+0x382>
 800878c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008790:	4b93      	ldr	r3, [pc, #588]	; (80089e0 <_dtoa_r+0x5a8>)
 8008792:	2703      	movs	r7, #3
 8008794:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008798:	f7f7 ffc8 	bl	800072c <__aeabi_ddiv>
 800879c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087a0:	f004 040f 	and.w	r4, r4, #15
 80087a4:	4e8e      	ldr	r6, [pc, #568]	; (80089e0 <_dtoa_r+0x5a8>)
 80087a6:	b954      	cbnz	r4, 80087be <_dtoa_r+0x386>
 80087a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087b0:	f7f7 ffbc 	bl	800072c <__aeabi_ddiv>
 80087b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087b8:	e029      	b.n	800880e <_dtoa_r+0x3d6>
 80087ba:	2702      	movs	r7, #2
 80087bc:	e7f2      	b.n	80087a4 <_dtoa_r+0x36c>
 80087be:	07e1      	lsls	r1, r4, #31
 80087c0:	d508      	bpl.n	80087d4 <_dtoa_r+0x39c>
 80087c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087ca:	f7f7 fe85 	bl	80004d8 <__aeabi_dmul>
 80087ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087d2:	3701      	adds	r7, #1
 80087d4:	1064      	asrs	r4, r4, #1
 80087d6:	3608      	adds	r6, #8
 80087d8:	e7e5      	b.n	80087a6 <_dtoa_r+0x36e>
 80087da:	f000 80a5 	beq.w	8008928 <_dtoa_r+0x4f0>
 80087de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80087e2:	f1c9 0400 	rsb	r4, r9, #0
 80087e6:	4b7d      	ldr	r3, [pc, #500]	; (80089dc <_dtoa_r+0x5a4>)
 80087e8:	f004 020f 	and.w	r2, r4, #15
 80087ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f4:	f7f7 fe70 	bl	80004d8 <__aeabi_dmul>
 80087f8:	2702      	movs	r7, #2
 80087fa:	2300      	movs	r3, #0
 80087fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008800:	4e77      	ldr	r6, [pc, #476]	; (80089e0 <_dtoa_r+0x5a8>)
 8008802:	1124      	asrs	r4, r4, #4
 8008804:	2c00      	cmp	r4, #0
 8008806:	f040 8084 	bne.w	8008912 <_dtoa_r+0x4da>
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1d2      	bne.n	80087b4 <_dtoa_r+0x37c>
 800880e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 808b 	beq.w	800892c <_dtoa_r+0x4f4>
 8008816:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800881a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800881e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008822:	2200      	movs	r2, #0
 8008824:	4b6f      	ldr	r3, [pc, #444]	; (80089e4 <_dtoa_r+0x5ac>)
 8008826:	f7f8 f8c9 	bl	80009bc <__aeabi_dcmplt>
 800882a:	2800      	cmp	r0, #0
 800882c:	d07e      	beq.n	800892c <_dtoa_r+0x4f4>
 800882e:	9b02      	ldr	r3, [sp, #8]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d07b      	beq.n	800892c <_dtoa_r+0x4f4>
 8008834:	f1bb 0f00 	cmp.w	fp, #0
 8008838:	dd38      	ble.n	80088ac <_dtoa_r+0x474>
 800883a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800883e:	2200      	movs	r2, #0
 8008840:	4b69      	ldr	r3, [pc, #420]	; (80089e8 <_dtoa_r+0x5b0>)
 8008842:	f7f7 fe49 	bl	80004d8 <__aeabi_dmul>
 8008846:	465c      	mov	r4, fp
 8008848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800884c:	f109 38ff 	add.w	r8, r9, #4294967295
 8008850:	3701      	adds	r7, #1
 8008852:	4638      	mov	r0, r7
 8008854:	f7f7 fdd6 	bl	8000404 <__aeabi_i2d>
 8008858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800885c:	f7f7 fe3c 	bl	80004d8 <__aeabi_dmul>
 8008860:	2200      	movs	r2, #0
 8008862:	4b62      	ldr	r3, [pc, #392]	; (80089ec <_dtoa_r+0x5b4>)
 8008864:	f7f7 fc82 	bl	800016c <__adddf3>
 8008868:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800886c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008870:	9611      	str	r6, [sp, #68]	; 0x44
 8008872:	2c00      	cmp	r4, #0
 8008874:	d15d      	bne.n	8008932 <_dtoa_r+0x4fa>
 8008876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800887a:	2200      	movs	r2, #0
 800887c:	4b5c      	ldr	r3, [pc, #368]	; (80089f0 <_dtoa_r+0x5b8>)
 800887e:	f7f7 fc73 	bl	8000168 <__aeabi_dsub>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800888a:	4633      	mov	r3, r6
 800888c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800888e:	f7f8 f8b3 	bl	80009f8 <__aeabi_dcmpgt>
 8008892:	2800      	cmp	r0, #0
 8008894:	f040 829e 	bne.w	8008dd4 <_dtoa_r+0x99c>
 8008898:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800889c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800889e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80088a2:	f7f8 f88b 	bl	80009bc <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f040 8292 	bne.w	8008dd0 <_dtoa_r+0x998>
 80088ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80088b0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f2c0 8153 	blt.w	8008b62 <_dtoa_r+0x72a>
 80088bc:	f1b9 0f0e 	cmp.w	r9, #14
 80088c0:	f300 814f 	bgt.w	8008b62 <_dtoa_r+0x72a>
 80088c4:	4b45      	ldr	r3, [pc, #276]	; (80089dc <_dtoa_r+0x5a4>)
 80088c6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80088ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80088ce:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80088d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f280 80db 	bge.w	8008a90 <_dtoa_r+0x658>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f300 80d7 	bgt.w	8008a90 <_dtoa_r+0x658>
 80088e2:	f040 8274 	bne.w	8008dce <_dtoa_r+0x996>
 80088e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ea:	2200      	movs	r2, #0
 80088ec:	4b40      	ldr	r3, [pc, #256]	; (80089f0 <_dtoa_r+0x5b8>)
 80088ee:	f7f7 fdf3 	bl	80004d8 <__aeabi_dmul>
 80088f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088f6:	f7f8 f875 	bl	80009e4 <__aeabi_dcmpge>
 80088fa:	9c02      	ldr	r4, [sp, #8]
 80088fc:	4626      	mov	r6, r4
 80088fe:	2800      	cmp	r0, #0
 8008900:	f040 824a 	bne.w	8008d98 <_dtoa_r+0x960>
 8008904:	2331      	movs	r3, #49	; 0x31
 8008906:	9f08      	ldr	r7, [sp, #32]
 8008908:	f109 0901 	add.w	r9, r9, #1
 800890c:	f807 3b01 	strb.w	r3, [r7], #1
 8008910:	e246      	b.n	8008da0 <_dtoa_r+0x968>
 8008912:	07e2      	lsls	r2, r4, #31
 8008914:	d505      	bpl.n	8008922 <_dtoa_r+0x4ea>
 8008916:	e9d6 2300 	ldrd	r2, r3, [r6]
 800891a:	f7f7 fddd 	bl	80004d8 <__aeabi_dmul>
 800891e:	2301      	movs	r3, #1
 8008920:	3701      	adds	r7, #1
 8008922:	1064      	asrs	r4, r4, #1
 8008924:	3608      	adds	r6, #8
 8008926:	e76d      	b.n	8008804 <_dtoa_r+0x3cc>
 8008928:	2702      	movs	r7, #2
 800892a:	e770      	b.n	800880e <_dtoa_r+0x3d6>
 800892c:	46c8      	mov	r8, r9
 800892e:	9c02      	ldr	r4, [sp, #8]
 8008930:	e78f      	b.n	8008852 <_dtoa_r+0x41a>
 8008932:	9908      	ldr	r1, [sp, #32]
 8008934:	4b29      	ldr	r3, [pc, #164]	; (80089dc <_dtoa_r+0x5a4>)
 8008936:	4421      	add	r1, r4
 8008938:	9112      	str	r1, [sp, #72]	; 0x48
 800893a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800893c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008940:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008944:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008948:	2900      	cmp	r1, #0
 800894a:	d055      	beq.n	80089f8 <_dtoa_r+0x5c0>
 800894c:	2000      	movs	r0, #0
 800894e:	4929      	ldr	r1, [pc, #164]	; (80089f4 <_dtoa_r+0x5bc>)
 8008950:	f7f7 feec 	bl	800072c <__aeabi_ddiv>
 8008954:	463b      	mov	r3, r7
 8008956:	4632      	mov	r2, r6
 8008958:	f7f7 fc06 	bl	8000168 <__aeabi_dsub>
 800895c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008960:	9f08      	ldr	r7, [sp, #32]
 8008962:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008966:	f7f8 f867 	bl	8000a38 <__aeabi_d2iz>
 800896a:	4604      	mov	r4, r0
 800896c:	f7f7 fd4a 	bl	8000404 <__aeabi_i2d>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008978:	f7f7 fbf6 	bl	8000168 <__aeabi_dsub>
 800897c:	4602      	mov	r2, r0
 800897e:	460b      	mov	r3, r1
 8008980:	3430      	adds	r4, #48	; 0x30
 8008982:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008986:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800898a:	f807 4b01 	strb.w	r4, [r7], #1
 800898e:	f7f8 f815 	bl	80009bc <__aeabi_dcmplt>
 8008992:	2800      	cmp	r0, #0
 8008994:	d174      	bne.n	8008a80 <_dtoa_r+0x648>
 8008996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800899a:	2000      	movs	r0, #0
 800899c:	4911      	ldr	r1, [pc, #68]	; (80089e4 <_dtoa_r+0x5ac>)
 800899e:	f7f7 fbe3 	bl	8000168 <__aeabi_dsub>
 80089a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80089a6:	f7f8 f809 	bl	80009bc <__aeabi_dcmplt>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	f040 80b6 	bne.w	8008b1c <_dtoa_r+0x6e4>
 80089b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b2:	429f      	cmp	r7, r3
 80089b4:	f43f af7a 	beq.w	80088ac <_dtoa_r+0x474>
 80089b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80089bc:	2200      	movs	r2, #0
 80089be:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <_dtoa_r+0x5b0>)
 80089c0:	f7f7 fd8a 	bl	80004d8 <__aeabi_dmul>
 80089c4:	2200      	movs	r2, #0
 80089c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80089ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089ce:	4b06      	ldr	r3, [pc, #24]	; (80089e8 <_dtoa_r+0x5b0>)
 80089d0:	f7f7 fd82 	bl	80004d8 <__aeabi_dmul>
 80089d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089d8:	e7c3      	b.n	8008962 <_dtoa_r+0x52a>
 80089da:	bf00      	nop
 80089dc:	0800b4f0 	.word	0x0800b4f0
 80089e0:	0800b4c8 	.word	0x0800b4c8
 80089e4:	3ff00000 	.word	0x3ff00000
 80089e8:	40240000 	.word	0x40240000
 80089ec:	401c0000 	.word	0x401c0000
 80089f0:	40140000 	.word	0x40140000
 80089f4:	3fe00000 	.word	0x3fe00000
 80089f8:	4630      	mov	r0, r6
 80089fa:	4639      	mov	r1, r7
 80089fc:	f7f7 fd6c 	bl	80004d8 <__aeabi_dmul>
 8008a00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a02:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008a06:	9c08      	ldr	r4, [sp, #32]
 8008a08:	9314      	str	r3, [sp, #80]	; 0x50
 8008a0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a0e:	f7f8 f813 	bl	8000a38 <__aeabi_d2iz>
 8008a12:	9015      	str	r0, [sp, #84]	; 0x54
 8008a14:	f7f7 fcf6 	bl	8000404 <__aeabi_i2d>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a20:	f7f7 fba2 	bl	8000168 <__aeabi_dsub>
 8008a24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a26:	4606      	mov	r6, r0
 8008a28:	3330      	adds	r3, #48	; 0x30
 8008a2a:	f804 3b01 	strb.w	r3, [r4], #1
 8008a2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a30:	460f      	mov	r7, r1
 8008a32:	429c      	cmp	r4, r3
 8008a34:	f04f 0200 	mov.w	r2, #0
 8008a38:	d124      	bne.n	8008a84 <_dtoa_r+0x64c>
 8008a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a3e:	4bb3      	ldr	r3, [pc, #716]	; (8008d0c <_dtoa_r+0x8d4>)
 8008a40:	f7f7 fb94 	bl	800016c <__adddf3>
 8008a44:	4602      	mov	r2, r0
 8008a46:	460b      	mov	r3, r1
 8008a48:	4630      	mov	r0, r6
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	f7f7 ffd4 	bl	80009f8 <__aeabi_dcmpgt>
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d162      	bne.n	8008b1a <_dtoa_r+0x6e2>
 8008a54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a58:	2000      	movs	r0, #0
 8008a5a:	49ac      	ldr	r1, [pc, #688]	; (8008d0c <_dtoa_r+0x8d4>)
 8008a5c:	f7f7 fb84 	bl	8000168 <__aeabi_dsub>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	4630      	mov	r0, r6
 8008a66:	4639      	mov	r1, r7
 8008a68:	f7f7 ffa8 	bl	80009bc <__aeabi_dcmplt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	f43f af1d 	beq.w	80088ac <_dtoa_r+0x474>
 8008a72:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008a74:	1e7b      	subs	r3, r7, #1
 8008a76:	9314      	str	r3, [sp, #80]	; 0x50
 8008a78:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008a7c:	2b30      	cmp	r3, #48	; 0x30
 8008a7e:	d0f8      	beq.n	8008a72 <_dtoa_r+0x63a>
 8008a80:	46c1      	mov	r9, r8
 8008a82:	e03a      	b.n	8008afa <_dtoa_r+0x6c2>
 8008a84:	4ba2      	ldr	r3, [pc, #648]	; (8008d10 <_dtoa_r+0x8d8>)
 8008a86:	f7f7 fd27 	bl	80004d8 <__aeabi_dmul>
 8008a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a8e:	e7bc      	b.n	8008a0a <_dtoa_r+0x5d2>
 8008a90:	9f08      	ldr	r7, [sp, #32]
 8008a92:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a9a:	f7f7 fe47 	bl	800072c <__aeabi_ddiv>
 8008a9e:	f7f7 ffcb 	bl	8000a38 <__aeabi_d2iz>
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	f7f7 fcae 	bl	8000404 <__aeabi_i2d>
 8008aa8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aac:	f7f7 fd14 	bl	80004d8 <__aeabi_dmul>
 8008ab0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008abc:	f7f7 fb54 	bl	8000168 <__aeabi_dsub>
 8008ac0:	f807 6b01 	strb.w	r6, [r7], #1
 8008ac4:	9e08      	ldr	r6, [sp, #32]
 8008ac6:	9b02      	ldr	r3, [sp, #8]
 8008ac8:	1bbe      	subs	r6, r7, r6
 8008aca:	42b3      	cmp	r3, r6
 8008acc:	d13a      	bne.n	8008b44 <_dtoa_r+0x70c>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	f7f7 fb4b 	bl	800016c <__adddf3>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ade:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ae2:	f7f7 ff89 	bl	80009f8 <__aeabi_dcmpgt>
 8008ae6:	bb58      	cbnz	r0, 8008b40 <_dtoa_r+0x708>
 8008ae8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008aec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008af0:	f7f7 ff5a 	bl	80009a8 <__aeabi_dcmpeq>
 8008af4:	b108      	cbz	r0, 8008afa <_dtoa_r+0x6c2>
 8008af6:	07e1      	lsls	r1, r4, #31
 8008af8:	d422      	bmi.n	8008b40 <_dtoa_r+0x708>
 8008afa:	4628      	mov	r0, r5
 8008afc:	4651      	mov	r1, sl
 8008afe:	f000 fe69 	bl	80097d4 <_Bfree>
 8008b02:	2300      	movs	r3, #0
 8008b04:	703b      	strb	r3, [r7, #0]
 8008b06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008b08:	f109 0001 	add.w	r0, r9, #1
 8008b0c:	6018      	str	r0, [r3, #0]
 8008b0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	f43f acdf 	beq.w	80084d4 <_dtoa_r+0x9c>
 8008b16:	601f      	str	r7, [r3, #0]
 8008b18:	e4dc      	b.n	80084d4 <_dtoa_r+0x9c>
 8008b1a:	4627      	mov	r7, r4
 8008b1c:	463b      	mov	r3, r7
 8008b1e:	461f      	mov	r7, r3
 8008b20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b24:	2a39      	cmp	r2, #57	; 0x39
 8008b26:	d107      	bne.n	8008b38 <_dtoa_r+0x700>
 8008b28:	9a08      	ldr	r2, [sp, #32]
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d1f7      	bne.n	8008b1e <_dtoa_r+0x6e6>
 8008b2e:	2230      	movs	r2, #48	; 0x30
 8008b30:	9908      	ldr	r1, [sp, #32]
 8008b32:	f108 0801 	add.w	r8, r8, #1
 8008b36:	700a      	strb	r2, [r1, #0]
 8008b38:	781a      	ldrb	r2, [r3, #0]
 8008b3a:	3201      	adds	r2, #1
 8008b3c:	701a      	strb	r2, [r3, #0]
 8008b3e:	e79f      	b.n	8008a80 <_dtoa_r+0x648>
 8008b40:	46c8      	mov	r8, r9
 8008b42:	e7eb      	b.n	8008b1c <_dtoa_r+0x6e4>
 8008b44:	2200      	movs	r2, #0
 8008b46:	4b72      	ldr	r3, [pc, #456]	; (8008d10 <_dtoa_r+0x8d8>)
 8008b48:	f7f7 fcc6 	bl	80004d8 <__aeabi_dmul>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b54:	2200      	movs	r2, #0
 8008b56:	2300      	movs	r3, #0
 8008b58:	f7f7 ff26 	bl	80009a8 <__aeabi_dcmpeq>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d098      	beq.n	8008a92 <_dtoa_r+0x65a>
 8008b60:	e7cb      	b.n	8008afa <_dtoa_r+0x6c2>
 8008b62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b64:	2a00      	cmp	r2, #0
 8008b66:	f000 80cd 	beq.w	8008d04 <_dtoa_r+0x8cc>
 8008b6a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008b6c:	2a01      	cmp	r2, #1
 8008b6e:	f300 80af 	bgt.w	8008cd0 <_dtoa_r+0x898>
 8008b72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b74:	2a00      	cmp	r2, #0
 8008b76:	f000 80a7 	beq.w	8008cc8 <_dtoa_r+0x890>
 8008b7a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008b7e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b80:	9f06      	ldr	r7, [sp, #24]
 8008b82:	9a06      	ldr	r2, [sp, #24]
 8008b84:	2101      	movs	r1, #1
 8008b86:	441a      	add	r2, r3
 8008b88:	9206      	str	r2, [sp, #24]
 8008b8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	441a      	add	r2, r3
 8008b90:	9209      	str	r2, [sp, #36]	; 0x24
 8008b92:	f000 ff23 	bl	80099dc <__i2b>
 8008b96:	4606      	mov	r6, r0
 8008b98:	2f00      	cmp	r7, #0
 8008b9a:	dd0c      	ble.n	8008bb6 <_dtoa_r+0x77e>
 8008b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	dd09      	ble.n	8008bb6 <_dtoa_r+0x77e>
 8008ba2:	42bb      	cmp	r3, r7
 8008ba4:	bfa8      	it	ge
 8008ba6:	463b      	movge	r3, r7
 8008ba8:	9a06      	ldr	r2, [sp, #24]
 8008baa:	1aff      	subs	r7, r7, r3
 8008bac:	1ad2      	subs	r2, r2, r3
 8008bae:	9206      	str	r2, [sp, #24]
 8008bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bb8:	b1f3      	cbz	r3, 8008bf8 <_dtoa_r+0x7c0>
 8008bba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80a9 	beq.w	8008d14 <_dtoa_r+0x8dc>
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	dd10      	ble.n	8008be8 <_dtoa_r+0x7b0>
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4622      	mov	r2, r4
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f000 ffc0 	bl	8009b50 <__pow5mult>
 8008bd0:	4652      	mov	r2, sl
 8008bd2:	4601      	mov	r1, r0
 8008bd4:	4606      	mov	r6, r0
 8008bd6:	4628      	mov	r0, r5
 8008bd8:	f000 ff16 	bl	8009a08 <__multiply>
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4651      	mov	r1, sl
 8008be0:	4628      	mov	r0, r5
 8008be2:	f000 fdf7 	bl	80097d4 <_Bfree>
 8008be6:	46c2      	mov	sl, r8
 8008be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bea:	1b1a      	subs	r2, r3, r4
 8008bec:	d004      	beq.n	8008bf8 <_dtoa_r+0x7c0>
 8008bee:	4651      	mov	r1, sl
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 ffad 	bl	8009b50 <__pow5mult>
 8008bf6:	4682      	mov	sl, r0
 8008bf8:	2101      	movs	r1, #1
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	f000 feee 	bl	80099dc <__i2b>
 8008c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c02:	4604      	mov	r4, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f340 8087 	ble.w	8008d18 <_dtoa_r+0x8e0>
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	4601      	mov	r1, r0
 8008c0e:	4628      	mov	r0, r5
 8008c10:	f000 ff9e 	bl	8009b50 <__pow5mult>
 8008c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c16:	4604      	mov	r4, r0
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	f340 8080 	ble.w	8008d1e <_dtoa_r+0x8e6>
 8008c1e:	f04f 0800 	mov.w	r8, #0
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c28:	6918      	ldr	r0, [r3, #16]
 8008c2a:	f000 fe89 	bl	8009940 <__hi0bits>
 8008c2e:	f1c0 0020 	rsb	r0, r0, #32
 8008c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c34:	4418      	add	r0, r3
 8008c36:	f010 001f 	ands.w	r0, r0, #31
 8008c3a:	f000 8092 	beq.w	8008d62 <_dtoa_r+0x92a>
 8008c3e:	f1c0 0320 	rsb	r3, r0, #32
 8008c42:	2b04      	cmp	r3, #4
 8008c44:	f340 808a 	ble.w	8008d5c <_dtoa_r+0x924>
 8008c48:	f1c0 001c 	rsb	r0, r0, #28
 8008c4c:	9b06      	ldr	r3, [sp, #24]
 8008c4e:	4407      	add	r7, r0
 8008c50:	4403      	add	r3, r0
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c56:	4403      	add	r3, r0
 8008c58:	9309      	str	r3, [sp, #36]	; 0x24
 8008c5a:	9b06      	ldr	r3, [sp, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd05      	ble.n	8008c6c <_dtoa_r+0x834>
 8008c60:	4651      	mov	r1, sl
 8008c62:	461a      	mov	r2, r3
 8008c64:	4628      	mov	r0, r5
 8008c66:	f000 ffcd 	bl	8009c04 <__lshift>
 8008c6a:	4682      	mov	sl, r0
 8008c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	dd05      	ble.n	8008c7e <_dtoa_r+0x846>
 8008c72:	4621      	mov	r1, r4
 8008c74:	461a      	mov	r2, r3
 8008c76:	4628      	mov	r0, r5
 8008c78:	f000 ffc4 	bl	8009c04 <__lshift>
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d070      	beq.n	8008d66 <_dtoa_r+0x92e>
 8008c84:	4621      	mov	r1, r4
 8008c86:	4650      	mov	r0, sl
 8008c88:	f001 f828 	bl	8009cdc <__mcmp>
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	da6a      	bge.n	8008d66 <_dtoa_r+0x92e>
 8008c90:	2300      	movs	r3, #0
 8008c92:	4651      	mov	r1, sl
 8008c94:	220a      	movs	r2, #10
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 fdbe 	bl	8009818 <__multadd>
 8008c9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c9e:	4682      	mov	sl, r0
 8008ca0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 8193 	beq.w	8008fd0 <_dtoa_r+0xb98>
 8008caa:	4631      	mov	r1, r6
 8008cac:	2300      	movs	r3, #0
 8008cae:	220a      	movs	r2, #10
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	f000 fdb1 	bl	8009818 <__multadd>
 8008cb6:	f1bb 0f00 	cmp.w	fp, #0
 8008cba:	4606      	mov	r6, r0
 8008cbc:	f300 8093 	bgt.w	8008de6 <_dtoa_r+0x9ae>
 8008cc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	dc57      	bgt.n	8008d76 <_dtoa_r+0x93e>
 8008cc6:	e08e      	b.n	8008de6 <_dtoa_r+0x9ae>
 8008cc8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008cca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cce:	e756      	b.n	8008b7e <_dtoa_r+0x746>
 8008cd0:	9b02      	ldr	r3, [sp, #8]
 8008cd2:	1e5c      	subs	r4, r3, #1
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	bfb7      	itett	lt
 8008cda:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008cdc:	1b1c      	subge	r4, r3, r4
 8008cde:	1ae2      	sublt	r2, r4, r3
 8008ce0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008ce2:	bfbe      	ittt	lt
 8008ce4:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008ce6:	189b      	addlt	r3, r3, r2
 8008ce8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008cea:	9b02      	ldr	r3, [sp, #8]
 8008cec:	bfb8      	it	lt
 8008cee:	2400      	movlt	r4, #0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bfbb      	ittet	lt
 8008cf4:	9b06      	ldrlt	r3, [sp, #24]
 8008cf6:	9a02      	ldrlt	r2, [sp, #8]
 8008cf8:	9f06      	ldrge	r7, [sp, #24]
 8008cfa:	1a9f      	sublt	r7, r3, r2
 8008cfc:	bfac      	ite	ge
 8008cfe:	9b02      	ldrge	r3, [sp, #8]
 8008d00:	2300      	movlt	r3, #0
 8008d02:	e73e      	b.n	8008b82 <_dtoa_r+0x74a>
 8008d04:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008d06:	9f06      	ldr	r7, [sp, #24]
 8008d08:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008d0a:	e745      	b.n	8008b98 <_dtoa_r+0x760>
 8008d0c:	3fe00000 	.word	0x3fe00000
 8008d10:	40240000 	.word	0x40240000
 8008d14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d16:	e76a      	b.n	8008bee <_dtoa_r+0x7b6>
 8008d18:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	dc19      	bgt.n	8008d52 <_dtoa_r+0x91a>
 8008d1e:	9b04      	ldr	r3, [sp, #16]
 8008d20:	b9bb      	cbnz	r3, 8008d52 <_dtoa_r+0x91a>
 8008d22:	9b05      	ldr	r3, [sp, #20]
 8008d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d28:	b99b      	cbnz	r3, 8008d52 <_dtoa_r+0x91a>
 8008d2a:	9b05      	ldr	r3, [sp, #20]
 8008d2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d30:	0d1b      	lsrs	r3, r3, #20
 8008d32:	051b      	lsls	r3, r3, #20
 8008d34:	b183      	cbz	r3, 8008d58 <_dtoa_r+0x920>
 8008d36:	f04f 0801 	mov.w	r8, #1
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	9306      	str	r3, [sp, #24]
 8008d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d42:	3301      	adds	r3, #1
 8008d44:	9309      	str	r3, [sp, #36]	; 0x24
 8008d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f47f af6a 	bne.w	8008c22 <_dtoa_r+0x7ea>
 8008d4e:	2001      	movs	r0, #1
 8008d50:	e76f      	b.n	8008c32 <_dtoa_r+0x7fa>
 8008d52:	f04f 0800 	mov.w	r8, #0
 8008d56:	e7f6      	b.n	8008d46 <_dtoa_r+0x90e>
 8008d58:	4698      	mov	r8, r3
 8008d5a:	e7f4      	b.n	8008d46 <_dtoa_r+0x90e>
 8008d5c:	f43f af7d 	beq.w	8008c5a <_dtoa_r+0x822>
 8008d60:	4618      	mov	r0, r3
 8008d62:	301c      	adds	r0, #28
 8008d64:	e772      	b.n	8008c4c <_dtoa_r+0x814>
 8008d66:	9b02      	ldr	r3, [sp, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	dc36      	bgt.n	8008dda <_dtoa_r+0x9a2>
 8008d6c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	dd33      	ble.n	8008dda <_dtoa_r+0x9a2>
 8008d72:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008d76:	f1bb 0f00 	cmp.w	fp, #0
 8008d7a:	d10d      	bne.n	8008d98 <_dtoa_r+0x960>
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	465b      	mov	r3, fp
 8008d80:	2205      	movs	r2, #5
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 fd48 	bl	8009818 <__multadd>
 8008d88:	4601      	mov	r1, r0
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	4650      	mov	r0, sl
 8008d8e:	f000 ffa5 	bl	8009cdc <__mcmp>
 8008d92:	2800      	cmp	r0, #0
 8008d94:	f73f adb6 	bgt.w	8008904 <_dtoa_r+0x4cc>
 8008d98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008d9a:	9f08      	ldr	r7, [sp, #32]
 8008d9c:	ea6f 0903 	mvn.w	r9, r3
 8008da0:	f04f 0800 	mov.w	r8, #0
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	f000 fd14 	bl	80097d4 <_Bfree>
 8008dac:	2e00      	cmp	r6, #0
 8008dae:	f43f aea4 	beq.w	8008afa <_dtoa_r+0x6c2>
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	d005      	beq.n	8008dc4 <_dtoa_r+0x98c>
 8008db8:	45b0      	cmp	r8, r6
 8008dba:	d003      	beq.n	8008dc4 <_dtoa_r+0x98c>
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 fd08 	bl	80097d4 <_Bfree>
 8008dc4:	4631      	mov	r1, r6
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f000 fd04 	bl	80097d4 <_Bfree>
 8008dcc:	e695      	b.n	8008afa <_dtoa_r+0x6c2>
 8008dce:	2400      	movs	r4, #0
 8008dd0:	4626      	mov	r6, r4
 8008dd2:	e7e1      	b.n	8008d98 <_dtoa_r+0x960>
 8008dd4:	46c1      	mov	r9, r8
 8008dd6:	4626      	mov	r6, r4
 8008dd8:	e594      	b.n	8008904 <_dtoa_r+0x4cc>
 8008dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ddc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	f000 80fc 	beq.w	8008fde <_dtoa_r+0xba6>
 8008de6:	2f00      	cmp	r7, #0
 8008de8:	dd05      	ble.n	8008df6 <_dtoa_r+0x9be>
 8008dea:	4631      	mov	r1, r6
 8008dec:	463a      	mov	r2, r7
 8008dee:	4628      	mov	r0, r5
 8008df0:	f000 ff08 	bl	8009c04 <__lshift>
 8008df4:	4606      	mov	r6, r0
 8008df6:	f1b8 0f00 	cmp.w	r8, #0
 8008dfa:	d05c      	beq.n	8008eb6 <_dtoa_r+0xa7e>
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	6871      	ldr	r1, [r6, #4]
 8008e00:	f000 fca8 	bl	8009754 <_Balloc>
 8008e04:	4607      	mov	r7, r0
 8008e06:	b928      	cbnz	r0, 8008e14 <_dtoa_r+0x9dc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e0e:	4b7e      	ldr	r3, [pc, #504]	; (8009008 <_dtoa_r+0xbd0>)
 8008e10:	f7ff bb26 	b.w	8008460 <_dtoa_r+0x28>
 8008e14:	6932      	ldr	r2, [r6, #16]
 8008e16:	f106 010c 	add.w	r1, r6, #12
 8008e1a:	3202      	adds	r2, #2
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	300c      	adds	r0, #12
 8008e20:	f000 fc8a 	bl	8009738 <memcpy>
 8008e24:	2201      	movs	r2, #1
 8008e26:	4639      	mov	r1, r7
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 feeb 	bl	8009c04 <__lshift>
 8008e2e:	46b0      	mov	r8, r6
 8008e30:	4606      	mov	r6, r0
 8008e32:	9b08      	ldr	r3, [sp, #32]
 8008e34:	3301      	adds	r3, #1
 8008e36:	9302      	str	r3, [sp, #8]
 8008e38:	9b08      	ldr	r3, [sp, #32]
 8008e3a:	445b      	add	r3, fp
 8008e3c:	930a      	str	r3, [sp, #40]	; 0x28
 8008e3e:	9b04      	ldr	r3, [sp, #16]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	9b02      	ldr	r3, [sp, #8]
 8008e48:	4621      	mov	r1, r4
 8008e4a:	4650      	mov	r0, sl
 8008e4c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008e50:	f7ff fa62 	bl	8008318 <quorem>
 8008e54:	4603      	mov	r3, r0
 8008e56:	4641      	mov	r1, r8
 8008e58:	3330      	adds	r3, #48	; 0x30
 8008e5a:	9004      	str	r0, [sp, #16]
 8008e5c:	4650      	mov	r0, sl
 8008e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e60:	f000 ff3c 	bl	8009cdc <__mcmp>
 8008e64:	4632      	mov	r2, r6
 8008e66:	9006      	str	r0, [sp, #24]
 8008e68:	4621      	mov	r1, r4
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f000 ff52 	bl	8009d14 <__mdiff>
 8008e70:	68c2      	ldr	r2, [r0, #12]
 8008e72:	4607      	mov	r7, r0
 8008e74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e76:	bb02      	cbnz	r2, 8008eba <_dtoa_r+0xa82>
 8008e78:	4601      	mov	r1, r0
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f000 ff2e 	bl	8009cdc <__mcmp>
 8008e80:	4602      	mov	r2, r0
 8008e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e84:	4639      	mov	r1, r7
 8008e86:	4628      	mov	r0, r5
 8008e88:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008e8c:	f000 fca2 	bl	80097d4 <_Bfree>
 8008e90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e94:	9f02      	ldr	r7, [sp, #8]
 8008e96:	ea43 0102 	orr.w	r1, r3, r2
 8008e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e9c:	430b      	orrs	r3, r1
 8008e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ea0:	d10d      	bne.n	8008ebe <_dtoa_r+0xa86>
 8008ea2:	2b39      	cmp	r3, #57	; 0x39
 8008ea4:	d027      	beq.n	8008ef6 <_dtoa_r+0xabe>
 8008ea6:	9a06      	ldr	r2, [sp, #24]
 8008ea8:	2a00      	cmp	r2, #0
 8008eaa:	dd01      	ble.n	8008eb0 <_dtoa_r+0xa78>
 8008eac:	9b04      	ldr	r3, [sp, #16]
 8008eae:	3331      	adds	r3, #49	; 0x31
 8008eb0:	f88b 3000 	strb.w	r3, [fp]
 8008eb4:	e776      	b.n	8008da4 <_dtoa_r+0x96c>
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	e7b9      	b.n	8008e2e <_dtoa_r+0x9f6>
 8008eba:	2201      	movs	r2, #1
 8008ebc:	e7e2      	b.n	8008e84 <_dtoa_r+0xa4c>
 8008ebe:	9906      	ldr	r1, [sp, #24]
 8008ec0:	2900      	cmp	r1, #0
 8008ec2:	db04      	blt.n	8008ece <_dtoa_r+0xa96>
 8008ec4:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008ec6:	4301      	orrs	r1, r0
 8008ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eca:	4301      	orrs	r1, r0
 8008ecc:	d120      	bne.n	8008f10 <_dtoa_r+0xad8>
 8008ece:	2a00      	cmp	r2, #0
 8008ed0:	ddee      	ble.n	8008eb0 <_dtoa_r+0xa78>
 8008ed2:	4651      	mov	r1, sl
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	9302      	str	r3, [sp, #8]
 8008eda:	f000 fe93 	bl	8009c04 <__lshift>
 8008ede:	4621      	mov	r1, r4
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	f000 fefb 	bl	8009cdc <__mcmp>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	9b02      	ldr	r3, [sp, #8]
 8008eea:	dc02      	bgt.n	8008ef2 <_dtoa_r+0xaba>
 8008eec:	d1e0      	bne.n	8008eb0 <_dtoa_r+0xa78>
 8008eee:	07da      	lsls	r2, r3, #31
 8008ef0:	d5de      	bpl.n	8008eb0 <_dtoa_r+0xa78>
 8008ef2:	2b39      	cmp	r3, #57	; 0x39
 8008ef4:	d1da      	bne.n	8008eac <_dtoa_r+0xa74>
 8008ef6:	2339      	movs	r3, #57	; 0x39
 8008ef8:	f88b 3000 	strb.w	r3, [fp]
 8008efc:	463b      	mov	r3, r7
 8008efe:	461f      	mov	r7, r3
 8008f00:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	2a39      	cmp	r2, #57	; 0x39
 8008f08:	d050      	beq.n	8008fac <_dtoa_r+0xb74>
 8008f0a:	3201      	adds	r2, #1
 8008f0c:	701a      	strb	r2, [r3, #0]
 8008f0e:	e749      	b.n	8008da4 <_dtoa_r+0x96c>
 8008f10:	2a00      	cmp	r2, #0
 8008f12:	dd03      	ble.n	8008f1c <_dtoa_r+0xae4>
 8008f14:	2b39      	cmp	r3, #57	; 0x39
 8008f16:	d0ee      	beq.n	8008ef6 <_dtoa_r+0xabe>
 8008f18:	3301      	adds	r3, #1
 8008f1a:	e7c9      	b.n	8008eb0 <_dtoa_r+0xa78>
 8008f1c:	9a02      	ldr	r2, [sp, #8]
 8008f1e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008f20:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f24:	428a      	cmp	r2, r1
 8008f26:	d02a      	beq.n	8008f7e <_dtoa_r+0xb46>
 8008f28:	4651      	mov	r1, sl
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	220a      	movs	r2, #10
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f000 fc72 	bl	8009818 <__multadd>
 8008f34:	45b0      	cmp	r8, r6
 8008f36:	4682      	mov	sl, r0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	f04f 020a 	mov.w	r2, #10
 8008f40:	4641      	mov	r1, r8
 8008f42:	4628      	mov	r0, r5
 8008f44:	d107      	bne.n	8008f56 <_dtoa_r+0xb1e>
 8008f46:	f000 fc67 	bl	8009818 <__multadd>
 8008f4a:	4680      	mov	r8, r0
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	9b02      	ldr	r3, [sp, #8]
 8008f50:	3301      	adds	r3, #1
 8008f52:	9302      	str	r3, [sp, #8]
 8008f54:	e777      	b.n	8008e46 <_dtoa_r+0xa0e>
 8008f56:	f000 fc5f 	bl	8009818 <__multadd>
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4680      	mov	r8, r0
 8008f5e:	2300      	movs	r3, #0
 8008f60:	220a      	movs	r2, #10
 8008f62:	4628      	mov	r0, r5
 8008f64:	f000 fc58 	bl	8009818 <__multadd>
 8008f68:	4606      	mov	r6, r0
 8008f6a:	e7f0      	b.n	8008f4e <_dtoa_r+0xb16>
 8008f6c:	f1bb 0f00 	cmp.w	fp, #0
 8008f70:	bfcc      	ite	gt
 8008f72:	465f      	movgt	r7, fp
 8008f74:	2701      	movle	r7, #1
 8008f76:	f04f 0800 	mov.w	r8, #0
 8008f7a:	9a08      	ldr	r2, [sp, #32]
 8008f7c:	4417      	add	r7, r2
 8008f7e:	4651      	mov	r1, sl
 8008f80:	2201      	movs	r2, #1
 8008f82:	4628      	mov	r0, r5
 8008f84:	9302      	str	r3, [sp, #8]
 8008f86:	f000 fe3d 	bl	8009c04 <__lshift>
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	4682      	mov	sl, r0
 8008f8e:	f000 fea5 	bl	8009cdc <__mcmp>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	dcb2      	bgt.n	8008efc <_dtoa_r+0xac4>
 8008f96:	d102      	bne.n	8008f9e <_dtoa_r+0xb66>
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	07db      	lsls	r3, r3, #31
 8008f9c:	d4ae      	bmi.n	8008efc <_dtoa_r+0xac4>
 8008f9e:	463b      	mov	r3, r7
 8008fa0:	461f      	mov	r7, r3
 8008fa2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fa6:	2a30      	cmp	r2, #48	; 0x30
 8008fa8:	d0fa      	beq.n	8008fa0 <_dtoa_r+0xb68>
 8008faa:	e6fb      	b.n	8008da4 <_dtoa_r+0x96c>
 8008fac:	9a08      	ldr	r2, [sp, #32]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d1a5      	bne.n	8008efe <_dtoa_r+0xac6>
 8008fb2:	2331      	movs	r3, #49	; 0x31
 8008fb4:	f109 0901 	add.w	r9, r9, #1
 8008fb8:	7013      	strb	r3, [r2, #0]
 8008fba:	e6f3      	b.n	8008da4 <_dtoa_r+0x96c>
 8008fbc:	4b13      	ldr	r3, [pc, #76]	; (800900c <_dtoa_r+0xbd4>)
 8008fbe:	f7ff baa7 	b.w	8008510 <_dtoa_r+0xd8>
 8008fc2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f47f aa80 	bne.w	80084ca <_dtoa_r+0x92>
 8008fca:	4b11      	ldr	r3, [pc, #68]	; (8009010 <_dtoa_r+0xbd8>)
 8008fcc:	f7ff baa0 	b.w	8008510 <_dtoa_r+0xd8>
 8008fd0:	f1bb 0f00 	cmp.w	fp, #0
 8008fd4:	dc03      	bgt.n	8008fde <_dtoa_r+0xba6>
 8008fd6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	f73f aecc 	bgt.w	8008d76 <_dtoa_r+0x93e>
 8008fde:	9f08      	ldr	r7, [sp, #32]
 8008fe0:	4621      	mov	r1, r4
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f7ff f998 	bl	8008318 <quorem>
 8008fe8:	9a08      	ldr	r2, [sp, #32]
 8008fea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008fee:	f807 3b01 	strb.w	r3, [r7], #1
 8008ff2:	1aba      	subs	r2, r7, r2
 8008ff4:	4593      	cmp	fp, r2
 8008ff6:	ddb9      	ble.n	8008f6c <_dtoa_r+0xb34>
 8008ff8:	4651      	mov	r1, sl
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	220a      	movs	r2, #10
 8008ffe:	4628      	mov	r0, r5
 8009000:	f000 fc0a 	bl	8009818 <__multadd>
 8009004:	4682      	mov	sl, r0
 8009006:	e7eb      	b.n	8008fe0 <_dtoa_r+0xba8>
 8009008:	0800b3d3 	.word	0x0800b3d3
 800900c:	0800b2d8 	.word	0x0800b2d8
 8009010:	0800b350 	.word	0x0800b350

08009014 <rshift>:
 8009014:	6903      	ldr	r3, [r0, #16]
 8009016:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800901a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800901e:	f100 0414 	add.w	r4, r0, #20
 8009022:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009026:	dd46      	ble.n	80090b6 <rshift+0xa2>
 8009028:	f011 011f 	ands.w	r1, r1, #31
 800902c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009030:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009034:	d10c      	bne.n	8009050 <rshift+0x3c>
 8009036:	4629      	mov	r1, r5
 8009038:	f100 0710 	add.w	r7, r0, #16
 800903c:	42b1      	cmp	r1, r6
 800903e:	d335      	bcc.n	80090ac <rshift+0x98>
 8009040:	1a9b      	subs	r3, r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	1eea      	subs	r2, r5, #3
 8009046:	4296      	cmp	r6, r2
 8009048:	bf38      	it	cc
 800904a:	2300      	movcc	r3, #0
 800904c:	4423      	add	r3, r4
 800904e:	e015      	b.n	800907c <rshift+0x68>
 8009050:	46a1      	mov	r9, r4
 8009052:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009056:	f1c1 0820 	rsb	r8, r1, #32
 800905a:	40cf      	lsrs	r7, r1
 800905c:	f105 0e04 	add.w	lr, r5, #4
 8009060:	4576      	cmp	r6, lr
 8009062:	46f4      	mov	ip, lr
 8009064:	d816      	bhi.n	8009094 <rshift+0x80>
 8009066:	1a9b      	subs	r3, r3, r2
 8009068:	009a      	lsls	r2, r3, #2
 800906a:	3a04      	subs	r2, #4
 800906c:	3501      	adds	r5, #1
 800906e:	42ae      	cmp	r6, r5
 8009070:	bf38      	it	cc
 8009072:	2200      	movcc	r2, #0
 8009074:	18a3      	adds	r3, r4, r2
 8009076:	50a7      	str	r7, [r4, r2]
 8009078:	b107      	cbz	r7, 800907c <rshift+0x68>
 800907a:	3304      	adds	r3, #4
 800907c:	42a3      	cmp	r3, r4
 800907e:	eba3 0204 	sub.w	r2, r3, r4
 8009082:	bf08      	it	eq
 8009084:	2300      	moveq	r3, #0
 8009086:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800908a:	6102      	str	r2, [r0, #16]
 800908c:	bf08      	it	eq
 800908e:	6143      	streq	r3, [r0, #20]
 8009090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009094:	f8dc c000 	ldr.w	ip, [ip]
 8009098:	fa0c fc08 	lsl.w	ip, ip, r8
 800909c:	ea4c 0707 	orr.w	r7, ip, r7
 80090a0:	f849 7b04 	str.w	r7, [r9], #4
 80090a4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090a8:	40cf      	lsrs	r7, r1
 80090aa:	e7d9      	b.n	8009060 <rshift+0x4c>
 80090ac:	f851 cb04 	ldr.w	ip, [r1], #4
 80090b0:	f847 cf04 	str.w	ip, [r7, #4]!
 80090b4:	e7c2      	b.n	800903c <rshift+0x28>
 80090b6:	4623      	mov	r3, r4
 80090b8:	e7e0      	b.n	800907c <rshift+0x68>

080090ba <__hexdig_fun>:
 80090ba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090be:	2b09      	cmp	r3, #9
 80090c0:	d802      	bhi.n	80090c8 <__hexdig_fun+0xe>
 80090c2:	3820      	subs	r0, #32
 80090c4:	b2c0      	uxtb	r0, r0
 80090c6:	4770      	bx	lr
 80090c8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090cc:	2b05      	cmp	r3, #5
 80090ce:	d801      	bhi.n	80090d4 <__hexdig_fun+0x1a>
 80090d0:	3847      	subs	r0, #71	; 0x47
 80090d2:	e7f7      	b.n	80090c4 <__hexdig_fun+0xa>
 80090d4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090d8:	2b05      	cmp	r3, #5
 80090da:	d801      	bhi.n	80090e0 <__hexdig_fun+0x26>
 80090dc:	3827      	subs	r0, #39	; 0x27
 80090de:	e7f1      	b.n	80090c4 <__hexdig_fun+0xa>
 80090e0:	2000      	movs	r0, #0
 80090e2:	4770      	bx	lr

080090e4 <__gethex>:
 80090e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090e8:	b08b      	sub	sp, #44	; 0x2c
 80090ea:	9306      	str	r3, [sp, #24]
 80090ec:	4bb9      	ldr	r3, [pc, #740]	; (80093d4 <__gethex+0x2f0>)
 80090ee:	9002      	str	r0, [sp, #8]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	468b      	mov	fp, r1
 80090f4:	4618      	mov	r0, r3
 80090f6:	4690      	mov	r8, r2
 80090f8:	9303      	str	r3, [sp, #12]
 80090fa:	f7f7 f829 	bl	8000150 <strlen>
 80090fe:	4682      	mov	sl, r0
 8009100:	9b03      	ldr	r3, [sp, #12]
 8009102:	f8db 2000 	ldr.w	r2, [fp]
 8009106:	4403      	add	r3, r0
 8009108:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800910c:	9307      	str	r3, [sp, #28]
 800910e:	1c93      	adds	r3, r2, #2
 8009110:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009114:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009118:	32fe      	adds	r2, #254	; 0xfe
 800911a:	18d1      	adds	r1, r2, r3
 800911c:	461f      	mov	r7, r3
 800911e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009122:	9101      	str	r1, [sp, #4]
 8009124:	2830      	cmp	r0, #48	; 0x30
 8009126:	d0f8      	beq.n	800911a <__gethex+0x36>
 8009128:	f7ff ffc7 	bl	80090ba <__hexdig_fun>
 800912c:	4604      	mov	r4, r0
 800912e:	2800      	cmp	r0, #0
 8009130:	d13a      	bne.n	80091a8 <__gethex+0xc4>
 8009132:	4652      	mov	r2, sl
 8009134:	4638      	mov	r0, r7
 8009136:	9903      	ldr	r1, [sp, #12]
 8009138:	f7fe fab8 	bl	80076ac <strncmp>
 800913c:	4605      	mov	r5, r0
 800913e:	2800      	cmp	r0, #0
 8009140:	d166      	bne.n	8009210 <__gethex+0x12c>
 8009142:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009146:	eb07 060a 	add.w	r6, r7, sl
 800914a:	f7ff ffb6 	bl	80090ba <__hexdig_fun>
 800914e:	2800      	cmp	r0, #0
 8009150:	d060      	beq.n	8009214 <__gethex+0x130>
 8009152:	4633      	mov	r3, r6
 8009154:	7818      	ldrb	r0, [r3, #0]
 8009156:	461f      	mov	r7, r3
 8009158:	2830      	cmp	r0, #48	; 0x30
 800915a:	f103 0301 	add.w	r3, r3, #1
 800915e:	d0f9      	beq.n	8009154 <__gethex+0x70>
 8009160:	f7ff ffab 	bl	80090ba <__hexdig_fun>
 8009164:	2301      	movs	r3, #1
 8009166:	fab0 f480 	clz	r4, r0
 800916a:	4635      	mov	r5, r6
 800916c:	0964      	lsrs	r4, r4, #5
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	463a      	mov	r2, r7
 8009172:	4616      	mov	r6, r2
 8009174:	7830      	ldrb	r0, [r6, #0]
 8009176:	3201      	adds	r2, #1
 8009178:	f7ff ff9f 	bl	80090ba <__hexdig_fun>
 800917c:	2800      	cmp	r0, #0
 800917e:	d1f8      	bne.n	8009172 <__gethex+0x8e>
 8009180:	4652      	mov	r2, sl
 8009182:	4630      	mov	r0, r6
 8009184:	9903      	ldr	r1, [sp, #12]
 8009186:	f7fe fa91 	bl	80076ac <strncmp>
 800918a:	b980      	cbnz	r0, 80091ae <__gethex+0xca>
 800918c:	b94d      	cbnz	r5, 80091a2 <__gethex+0xbe>
 800918e:	eb06 050a 	add.w	r5, r6, sl
 8009192:	462a      	mov	r2, r5
 8009194:	4616      	mov	r6, r2
 8009196:	7830      	ldrb	r0, [r6, #0]
 8009198:	3201      	adds	r2, #1
 800919a:	f7ff ff8e 	bl	80090ba <__hexdig_fun>
 800919e:	2800      	cmp	r0, #0
 80091a0:	d1f8      	bne.n	8009194 <__gethex+0xb0>
 80091a2:	1bad      	subs	r5, r5, r6
 80091a4:	00ad      	lsls	r5, r5, #2
 80091a6:	e004      	b.n	80091b2 <__gethex+0xce>
 80091a8:	2400      	movs	r4, #0
 80091aa:	4625      	mov	r5, r4
 80091ac:	e7e0      	b.n	8009170 <__gethex+0x8c>
 80091ae:	2d00      	cmp	r5, #0
 80091b0:	d1f7      	bne.n	80091a2 <__gethex+0xbe>
 80091b2:	7833      	ldrb	r3, [r6, #0]
 80091b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80091b8:	2b50      	cmp	r3, #80	; 0x50
 80091ba:	d139      	bne.n	8009230 <__gethex+0x14c>
 80091bc:	7873      	ldrb	r3, [r6, #1]
 80091be:	2b2b      	cmp	r3, #43	; 0x2b
 80091c0:	d02a      	beq.n	8009218 <__gethex+0x134>
 80091c2:	2b2d      	cmp	r3, #45	; 0x2d
 80091c4:	d02c      	beq.n	8009220 <__gethex+0x13c>
 80091c6:	f04f 0900 	mov.w	r9, #0
 80091ca:	1c71      	adds	r1, r6, #1
 80091cc:	7808      	ldrb	r0, [r1, #0]
 80091ce:	f7ff ff74 	bl	80090ba <__hexdig_fun>
 80091d2:	1e43      	subs	r3, r0, #1
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b18      	cmp	r3, #24
 80091d8:	d82a      	bhi.n	8009230 <__gethex+0x14c>
 80091da:	f1a0 0210 	sub.w	r2, r0, #16
 80091de:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091e2:	f7ff ff6a 	bl	80090ba <__hexdig_fun>
 80091e6:	1e43      	subs	r3, r0, #1
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b18      	cmp	r3, #24
 80091ec:	d91b      	bls.n	8009226 <__gethex+0x142>
 80091ee:	f1b9 0f00 	cmp.w	r9, #0
 80091f2:	d000      	beq.n	80091f6 <__gethex+0x112>
 80091f4:	4252      	negs	r2, r2
 80091f6:	4415      	add	r5, r2
 80091f8:	f8cb 1000 	str.w	r1, [fp]
 80091fc:	b1d4      	cbz	r4, 8009234 <__gethex+0x150>
 80091fe:	9b01      	ldr	r3, [sp, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bf14      	ite	ne
 8009204:	2700      	movne	r7, #0
 8009206:	2706      	moveq	r7, #6
 8009208:	4638      	mov	r0, r7
 800920a:	b00b      	add	sp, #44	; 0x2c
 800920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009210:	463e      	mov	r6, r7
 8009212:	4625      	mov	r5, r4
 8009214:	2401      	movs	r4, #1
 8009216:	e7cc      	b.n	80091b2 <__gethex+0xce>
 8009218:	f04f 0900 	mov.w	r9, #0
 800921c:	1cb1      	adds	r1, r6, #2
 800921e:	e7d5      	b.n	80091cc <__gethex+0xe8>
 8009220:	f04f 0901 	mov.w	r9, #1
 8009224:	e7fa      	b.n	800921c <__gethex+0x138>
 8009226:	230a      	movs	r3, #10
 8009228:	fb03 0202 	mla	r2, r3, r2, r0
 800922c:	3a10      	subs	r2, #16
 800922e:	e7d6      	b.n	80091de <__gethex+0xfa>
 8009230:	4631      	mov	r1, r6
 8009232:	e7e1      	b.n	80091f8 <__gethex+0x114>
 8009234:	4621      	mov	r1, r4
 8009236:	1bf3      	subs	r3, r6, r7
 8009238:	3b01      	subs	r3, #1
 800923a:	2b07      	cmp	r3, #7
 800923c:	dc0a      	bgt.n	8009254 <__gethex+0x170>
 800923e:	9802      	ldr	r0, [sp, #8]
 8009240:	f000 fa88 	bl	8009754 <_Balloc>
 8009244:	4604      	mov	r4, r0
 8009246:	b940      	cbnz	r0, 800925a <__gethex+0x176>
 8009248:	4602      	mov	r2, r0
 800924a:	21de      	movs	r1, #222	; 0xde
 800924c:	4b62      	ldr	r3, [pc, #392]	; (80093d8 <__gethex+0x2f4>)
 800924e:	4863      	ldr	r0, [pc, #396]	; (80093dc <__gethex+0x2f8>)
 8009250:	f001 f96c 	bl	800a52c <__assert_func>
 8009254:	3101      	adds	r1, #1
 8009256:	105b      	asrs	r3, r3, #1
 8009258:	e7ef      	b.n	800923a <__gethex+0x156>
 800925a:	f04f 0b00 	mov.w	fp, #0
 800925e:	f100 0914 	add.w	r9, r0, #20
 8009262:	f1ca 0301 	rsb	r3, sl, #1
 8009266:	f8cd 9010 	str.w	r9, [sp, #16]
 800926a:	f8cd b004 	str.w	fp, [sp, #4]
 800926e:	9308      	str	r3, [sp, #32]
 8009270:	42b7      	cmp	r7, r6
 8009272:	d33f      	bcc.n	80092f4 <__gethex+0x210>
 8009274:	9f04      	ldr	r7, [sp, #16]
 8009276:	9b01      	ldr	r3, [sp, #4]
 8009278:	f847 3b04 	str.w	r3, [r7], #4
 800927c:	eba7 0709 	sub.w	r7, r7, r9
 8009280:	10bf      	asrs	r7, r7, #2
 8009282:	6127      	str	r7, [r4, #16]
 8009284:	4618      	mov	r0, r3
 8009286:	f000 fb5b 	bl	8009940 <__hi0bits>
 800928a:	017f      	lsls	r7, r7, #5
 800928c:	f8d8 6000 	ldr.w	r6, [r8]
 8009290:	1a3f      	subs	r7, r7, r0
 8009292:	42b7      	cmp	r7, r6
 8009294:	dd62      	ble.n	800935c <__gethex+0x278>
 8009296:	1bbf      	subs	r7, r7, r6
 8009298:	4639      	mov	r1, r7
 800929a:	4620      	mov	r0, r4
 800929c:	f000 fef1 	bl	800a082 <__any_on>
 80092a0:	4682      	mov	sl, r0
 80092a2:	b1a8      	cbz	r0, 80092d0 <__gethex+0x1ec>
 80092a4:	f04f 0a01 	mov.w	sl, #1
 80092a8:	1e7b      	subs	r3, r7, #1
 80092aa:	1159      	asrs	r1, r3, #5
 80092ac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80092b0:	f003 021f 	and.w	r2, r3, #31
 80092b4:	fa0a f202 	lsl.w	r2, sl, r2
 80092b8:	420a      	tst	r2, r1
 80092ba:	d009      	beq.n	80092d0 <__gethex+0x1ec>
 80092bc:	4553      	cmp	r3, sl
 80092be:	dd05      	ble.n	80092cc <__gethex+0x1e8>
 80092c0:	4620      	mov	r0, r4
 80092c2:	1eb9      	subs	r1, r7, #2
 80092c4:	f000 fedd 	bl	800a082 <__any_on>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d144      	bne.n	8009356 <__gethex+0x272>
 80092cc:	f04f 0a02 	mov.w	sl, #2
 80092d0:	4639      	mov	r1, r7
 80092d2:	4620      	mov	r0, r4
 80092d4:	f7ff fe9e 	bl	8009014 <rshift>
 80092d8:	443d      	add	r5, r7
 80092da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092de:	42ab      	cmp	r3, r5
 80092e0:	da4a      	bge.n	8009378 <__gethex+0x294>
 80092e2:	4621      	mov	r1, r4
 80092e4:	9802      	ldr	r0, [sp, #8]
 80092e6:	f000 fa75 	bl	80097d4 <_Bfree>
 80092ea:	2300      	movs	r3, #0
 80092ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092ee:	27a3      	movs	r7, #163	; 0xa3
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	e789      	b.n	8009208 <__gethex+0x124>
 80092f4:	1e73      	subs	r3, r6, #1
 80092f6:	9a07      	ldr	r2, [sp, #28]
 80092f8:	9305      	str	r3, [sp, #20]
 80092fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092fe:	4293      	cmp	r3, r2
 8009300:	d019      	beq.n	8009336 <__gethex+0x252>
 8009302:	f1bb 0f20 	cmp.w	fp, #32
 8009306:	d107      	bne.n	8009318 <__gethex+0x234>
 8009308:	9b04      	ldr	r3, [sp, #16]
 800930a:	9a01      	ldr	r2, [sp, #4]
 800930c:	f843 2b04 	str.w	r2, [r3], #4
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	2300      	movs	r3, #0
 8009314:	469b      	mov	fp, r3
 8009316:	9301      	str	r3, [sp, #4]
 8009318:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800931c:	f7ff fecd 	bl	80090ba <__hexdig_fun>
 8009320:	9b01      	ldr	r3, [sp, #4]
 8009322:	f000 000f 	and.w	r0, r0, #15
 8009326:	fa00 f00b 	lsl.w	r0, r0, fp
 800932a:	4303      	orrs	r3, r0
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	f10b 0b04 	add.w	fp, fp, #4
 8009332:	9b05      	ldr	r3, [sp, #20]
 8009334:	e00d      	b.n	8009352 <__gethex+0x26e>
 8009336:	9b05      	ldr	r3, [sp, #20]
 8009338:	9a08      	ldr	r2, [sp, #32]
 800933a:	4413      	add	r3, r2
 800933c:	42bb      	cmp	r3, r7
 800933e:	d3e0      	bcc.n	8009302 <__gethex+0x21e>
 8009340:	4618      	mov	r0, r3
 8009342:	4652      	mov	r2, sl
 8009344:	9903      	ldr	r1, [sp, #12]
 8009346:	9309      	str	r3, [sp, #36]	; 0x24
 8009348:	f7fe f9b0 	bl	80076ac <strncmp>
 800934c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800934e:	2800      	cmp	r0, #0
 8009350:	d1d7      	bne.n	8009302 <__gethex+0x21e>
 8009352:	461e      	mov	r6, r3
 8009354:	e78c      	b.n	8009270 <__gethex+0x18c>
 8009356:	f04f 0a03 	mov.w	sl, #3
 800935a:	e7b9      	b.n	80092d0 <__gethex+0x1ec>
 800935c:	da09      	bge.n	8009372 <__gethex+0x28e>
 800935e:	1bf7      	subs	r7, r6, r7
 8009360:	4621      	mov	r1, r4
 8009362:	463a      	mov	r2, r7
 8009364:	9802      	ldr	r0, [sp, #8]
 8009366:	f000 fc4d 	bl	8009c04 <__lshift>
 800936a:	4604      	mov	r4, r0
 800936c:	1bed      	subs	r5, r5, r7
 800936e:	f100 0914 	add.w	r9, r0, #20
 8009372:	f04f 0a00 	mov.w	sl, #0
 8009376:	e7b0      	b.n	80092da <__gethex+0x1f6>
 8009378:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800937c:	42a8      	cmp	r0, r5
 800937e:	dd71      	ble.n	8009464 <__gethex+0x380>
 8009380:	1b45      	subs	r5, r0, r5
 8009382:	42ae      	cmp	r6, r5
 8009384:	dc34      	bgt.n	80093f0 <__gethex+0x30c>
 8009386:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d028      	beq.n	80093e0 <__gethex+0x2fc>
 800938e:	2b03      	cmp	r3, #3
 8009390:	d02a      	beq.n	80093e8 <__gethex+0x304>
 8009392:	2b01      	cmp	r3, #1
 8009394:	d115      	bne.n	80093c2 <__gethex+0x2de>
 8009396:	42ae      	cmp	r6, r5
 8009398:	d113      	bne.n	80093c2 <__gethex+0x2de>
 800939a:	2e01      	cmp	r6, #1
 800939c:	d10b      	bne.n	80093b6 <__gethex+0x2d2>
 800939e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093a2:	9a06      	ldr	r2, [sp, #24]
 80093a4:	2762      	movs	r7, #98	; 0x62
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	2301      	movs	r3, #1
 80093aa:	6123      	str	r3, [r4, #16]
 80093ac:	f8c9 3000 	str.w	r3, [r9]
 80093b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093b2:	601c      	str	r4, [r3, #0]
 80093b4:	e728      	b.n	8009208 <__gethex+0x124>
 80093b6:	4620      	mov	r0, r4
 80093b8:	1e71      	subs	r1, r6, #1
 80093ba:	f000 fe62 	bl	800a082 <__any_on>
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1ed      	bne.n	800939e <__gethex+0x2ba>
 80093c2:	4621      	mov	r1, r4
 80093c4:	9802      	ldr	r0, [sp, #8]
 80093c6:	f000 fa05 	bl	80097d4 <_Bfree>
 80093ca:	2300      	movs	r3, #0
 80093cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093ce:	2750      	movs	r7, #80	; 0x50
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e719      	b.n	8009208 <__gethex+0x124>
 80093d4:	0800b450 	.word	0x0800b450
 80093d8:	0800b3d3 	.word	0x0800b3d3
 80093dc:	0800b3e4 	.word	0x0800b3e4
 80093e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1ed      	bne.n	80093c2 <__gethex+0x2de>
 80093e6:	e7da      	b.n	800939e <__gethex+0x2ba>
 80093e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d1d7      	bne.n	800939e <__gethex+0x2ba>
 80093ee:	e7e8      	b.n	80093c2 <__gethex+0x2de>
 80093f0:	1e6f      	subs	r7, r5, #1
 80093f2:	f1ba 0f00 	cmp.w	sl, #0
 80093f6:	d132      	bne.n	800945e <__gethex+0x37a>
 80093f8:	b127      	cbz	r7, 8009404 <__gethex+0x320>
 80093fa:	4639      	mov	r1, r7
 80093fc:	4620      	mov	r0, r4
 80093fe:	f000 fe40 	bl	800a082 <__any_on>
 8009402:	4682      	mov	sl, r0
 8009404:	2101      	movs	r1, #1
 8009406:	117b      	asrs	r3, r7, #5
 8009408:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800940c:	f007 071f 	and.w	r7, r7, #31
 8009410:	fa01 f707 	lsl.w	r7, r1, r7
 8009414:	421f      	tst	r7, r3
 8009416:	f04f 0702 	mov.w	r7, #2
 800941a:	4629      	mov	r1, r5
 800941c:	4620      	mov	r0, r4
 800941e:	bf18      	it	ne
 8009420:	f04a 0a02 	orrne.w	sl, sl, #2
 8009424:	1b76      	subs	r6, r6, r5
 8009426:	f7ff fdf5 	bl	8009014 <rshift>
 800942a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800942e:	f1ba 0f00 	cmp.w	sl, #0
 8009432:	d048      	beq.n	80094c6 <__gethex+0x3e2>
 8009434:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009438:	2b02      	cmp	r3, #2
 800943a:	d015      	beq.n	8009468 <__gethex+0x384>
 800943c:	2b03      	cmp	r3, #3
 800943e:	d017      	beq.n	8009470 <__gethex+0x38c>
 8009440:	2b01      	cmp	r3, #1
 8009442:	d109      	bne.n	8009458 <__gethex+0x374>
 8009444:	f01a 0f02 	tst.w	sl, #2
 8009448:	d006      	beq.n	8009458 <__gethex+0x374>
 800944a:	f8d9 0000 	ldr.w	r0, [r9]
 800944e:	ea4a 0a00 	orr.w	sl, sl, r0
 8009452:	f01a 0f01 	tst.w	sl, #1
 8009456:	d10e      	bne.n	8009476 <__gethex+0x392>
 8009458:	f047 0710 	orr.w	r7, r7, #16
 800945c:	e033      	b.n	80094c6 <__gethex+0x3e2>
 800945e:	f04f 0a01 	mov.w	sl, #1
 8009462:	e7cf      	b.n	8009404 <__gethex+0x320>
 8009464:	2701      	movs	r7, #1
 8009466:	e7e2      	b.n	800942e <__gethex+0x34a>
 8009468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800946a:	f1c3 0301 	rsb	r3, r3, #1
 800946e:	9315      	str	r3, [sp, #84]	; 0x54
 8009470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0f0      	beq.n	8009458 <__gethex+0x374>
 8009476:	f04f 0c00 	mov.w	ip, #0
 800947a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800947e:	f104 0314 	add.w	r3, r4, #20
 8009482:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009486:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800948a:	4618      	mov	r0, r3
 800948c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009490:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009494:	d01c      	beq.n	80094d0 <__gethex+0x3ec>
 8009496:	3201      	adds	r2, #1
 8009498:	6002      	str	r2, [r0, #0]
 800949a:	2f02      	cmp	r7, #2
 800949c:	f104 0314 	add.w	r3, r4, #20
 80094a0:	d13d      	bne.n	800951e <__gethex+0x43a>
 80094a2:	f8d8 2000 	ldr.w	r2, [r8]
 80094a6:	3a01      	subs	r2, #1
 80094a8:	42b2      	cmp	r2, r6
 80094aa:	d10a      	bne.n	80094c2 <__gethex+0x3de>
 80094ac:	2201      	movs	r2, #1
 80094ae:	1171      	asrs	r1, r6, #5
 80094b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094b4:	f006 061f 	and.w	r6, r6, #31
 80094b8:	fa02 f606 	lsl.w	r6, r2, r6
 80094bc:	421e      	tst	r6, r3
 80094be:	bf18      	it	ne
 80094c0:	4617      	movne	r7, r2
 80094c2:	f047 0720 	orr.w	r7, r7, #32
 80094c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094c8:	601c      	str	r4, [r3, #0]
 80094ca:	9b06      	ldr	r3, [sp, #24]
 80094cc:	601d      	str	r5, [r3, #0]
 80094ce:	e69b      	b.n	8009208 <__gethex+0x124>
 80094d0:	4299      	cmp	r1, r3
 80094d2:	f843 cc04 	str.w	ip, [r3, #-4]
 80094d6:	d8d8      	bhi.n	800948a <__gethex+0x3a6>
 80094d8:	68a3      	ldr	r3, [r4, #8]
 80094da:	459b      	cmp	fp, r3
 80094dc:	db17      	blt.n	800950e <__gethex+0x42a>
 80094de:	6861      	ldr	r1, [r4, #4]
 80094e0:	9802      	ldr	r0, [sp, #8]
 80094e2:	3101      	adds	r1, #1
 80094e4:	f000 f936 	bl	8009754 <_Balloc>
 80094e8:	4681      	mov	r9, r0
 80094ea:	b918      	cbnz	r0, 80094f4 <__gethex+0x410>
 80094ec:	4602      	mov	r2, r0
 80094ee:	2184      	movs	r1, #132	; 0x84
 80094f0:	4b19      	ldr	r3, [pc, #100]	; (8009558 <__gethex+0x474>)
 80094f2:	e6ac      	b.n	800924e <__gethex+0x16a>
 80094f4:	6922      	ldr	r2, [r4, #16]
 80094f6:	f104 010c 	add.w	r1, r4, #12
 80094fa:	3202      	adds	r2, #2
 80094fc:	0092      	lsls	r2, r2, #2
 80094fe:	300c      	adds	r0, #12
 8009500:	f000 f91a 	bl	8009738 <memcpy>
 8009504:	4621      	mov	r1, r4
 8009506:	9802      	ldr	r0, [sp, #8]
 8009508:	f000 f964 	bl	80097d4 <_Bfree>
 800950c:	464c      	mov	r4, r9
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	6122      	str	r2, [r4, #16]
 8009514:	2201      	movs	r2, #1
 8009516:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800951a:	615a      	str	r2, [r3, #20]
 800951c:	e7bd      	b.n	800949a <__gethex+0x3b6>
 800951e:	6922      	ldr	r2, [r4, #16]
 8009520:	455a      	cmp	r2, fp
 8009522:	dd0b      	ble.n	800953c <__gethex+0x458>
 8009524:	2101      	movs	r1, #1
 8009526:	4620      	mov	r0, r4
 8009528:	f7ff fd74 	bl	8009014 <rshift>
 800952c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009530:	3501      	adds	r5, #1
 8009532:	42ab      	cmp	r3, r5
 8009534:	f6ff aed5 	blt.w	80092e2 <__gethex+0x1fe>
 8009538:	2701      	movs	r7, #1
 800953a:	e7c2      	b.n	80094c2 <__gethex+0x3de>
 800953c:	f016 061f 	ands.w	r6, r6, #31
 8009540:	d0fa      	beq.n	8009538 <__gethex+0x454>
 8009542:	449a      	add	sl, r3
 8009544:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009548:	f000 f9fa 	bl	8009940 <__hi0bits>
 800954c:	f1c6 0620 	rsb	r6, r6, #32
 8009550:	42b0      	cmp	r0, r6
 8009552:	dbe7      	blt.n	8009524 <__gethex+0x440>
 8009554:	e7f0      	b.n	8009538 <__gethex+0x454>
 8009556:	bf00      	nop
 8009558:	0800b3d3 	.word	0x0800b3d3

0800955c <L_shift>:
 800955c:	f1c2 0208 	rsb	r2, r2, #8
 8009560:	0092      	lsls	r2, r2, #2
 8009562:	b570      	push	{r4, r5, r6, lr}
 8009564:	f1c2 0620 	rsb	r6, r2, #32
 8009568:	6843      	ldr	r3, [r0, #4]
 800956a:	6804      	ldr	r4, [r0, #0]
 800956c:	fa03 f506 	lsl.w	r5, r3, r6
 8009570:	432c      	orrs	r4, r5
 8009572:	40d3      	lsrs	r3, r2
 8009574:	6004      	str	r4, [r0, #0]
 8009576:	f840 3f04 	str.w	r3, [r0, #4]!
 800957a:	4288      	cmp	r0, r1
 800957c:	d3f4      	bcc.n	8009568 <L_shift+0xc>
 800957e:	bd70      	pop	{r4, r5, r6, pc}

08009580 <__match>:
 8009580:	b530      	push	{r4, r5, lr}
 8009582:	6803      	ldr	r3, [r0, #0]
 8009584:	3301      	adds	r3, #1
 8009586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800958a:	b914      	cbnz	r4, 8009592 <__match+0x12>
 800958c:	6003      	str	r3, [r0, #0]
 800958e:	2001      	movs	r0, #1
 8009590:	bd30      	pop	{r4, r5, pc}
 8009592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009596:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800959a:	2d19      	cmp	r5, #25
 800959c:	bf98      	it	ls
 800959e:	3220      	addls	r2, #32
 80095a0:	42a2      	cmp	r2, r4
 80095a2:	d0f0      	beq.n	8009586 <__match+0x6>
 80095a4:	2000      	movs	r0, #0
 80095a6:	e7f3      	b.n	8009590 <__match+0x10>

080095a8 <__hexnan>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	2500      	movs	r5, #0
 80095ae:	680b      	ldr	r3, [r1, #0]
 80095b0:	4682      	mov	sl, r0
 80095b2:	115e      	asrs	r6, r3, #5
 80095b4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80095b8:	f013 031f 	ands.w	r3, r3, #31
 80095bc:	bf18      	it	ne
 80095be:	3604      	addne	r6, #4
 80095c0:	1f37      	subs	r7, r6, #4
 80095c2:	4690      	mov	r8, r2
 80095c4:	46b9      	mov	r9, r7
 80095c6:	463c      	mov	r4, r7
 80095c8:	46ab      	mov	fp, r5
 80095ca:	b087      	sub	sp, #28
 80095cc:	6801      	ldr	r1, [r0, #0]
 80095ce:	9301      	str	r3, [sp, #4]
 80095d0:	f846 5c04 	str.w	r5, [r6, #-4]
 80095d4:	9502      	str	r5, [sp, #8]
 80095d6:	784a      	ldrb	r2, [r1, #1]
 80095d8:	1c4b      	adds	r3, r1, #1
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	b342      	cbz	r2, 8009630 <__hexnan+0x88>
 80095de:	4610      	mov	r0, r2
 80095e0:	9105      	str	r1, [sp, #20]
 80095e2:	9204      	str	r2, [sp, #16]
 80095e4:	f7ff fd69 	bl	80090ba <__hexdig_fun>
 80095e8:	2800      	cmp	r0, #0
 80095ea:	d14f      	bne.n	800968c <__hexnan+0xe4>
 80095ec:	9a04      	ldr	r2, [sp, #16]
 80095ee:	9905      	ldr	r1, [sp, #20]
 80095f0:	2a20      	cmp	r2, #32
 80095f2:	d818      	bhi.n	8009626 <__hexnan+0x7e>
 80095f4:	9b02      	ldr	r3, [sp, #8]
 80095f6:	459b      	cmp	fp, r3
 80095f8:	dd13      	ble.n	8009622 <__hexnan+0x7a>
 80095fa:	454c      	cmp	r4, r9
 80095fc:	d206      	bcs.n	800960c <__hexnan+0x64>
 80095fe:	2d07      	cmp	r5, #7
 8009600:	dc04      	bgt.n	800960c <__hexnan+0x64>
 8009602:	462a      	mov	r2, r5
 8009604:	4649      	mov	r1, r9
 8009606:	4620      	mov	r0, r4
 8009608:	f7ff ffa8 	bl	800955c <L_shift>
 800960c:	4544      	cmp	r4, r8
 800960e:	d950      	bls.n	80096b2 <__hexnan+0x10a>
 8009610:	2300      	movs	r3, #0
 8009612:	f1a4 0904 	sub.w	r9, r4, #4
 8009616:	f844 3c04 	str.w	r3, [r4, #-4]
 800961a:	461d      	mov	r5, r3
 800961c:	464c      	mov	r4, r9
 800961e:	f8cd b008 	str.w	fp, [sp, #8]
 8009622:	9903      	ldr	r1, [sp, #12]
 8009624:	e7d7      	b.n	80095d6 <__hexnan+0x2e>
 8009626:	2a29      	cmp	r2, #41	; 0x29
 8009628:	d156      	bne.n	80096d8 <__hexnan+0x130>
 800962a:	3102      	adds	r1, #2
 800962c:	f8ca 1000 	str.w	r1, [sl]
 8009630:	f1bb 0f00 	cmp.w	fp, #0
 8009634:	d050      	beq.n	80096d8 <__hexnan+0x130>
 8009636:	454c      	cmp	r4, r9
 8009638:	d206      	bcs.n	8009648 <__hexnan+0xa0>
 800963a:	2d07      	cmp	r5, #7
 800963c:	dc04      	bgt.n	8009648 <__hexnan+0xa0>
 800963e:	462a      	mov	r2, r5
 8009640:	4649      	mov	r1, r9
 8009642:	4620      	mov	r0, r4
 8009644:	f7ff ff8a 	bl	800955c <L_shift>
 8009648:	4544      	cmp	r4, r8
 800964a:	d934      	bls.n	80096b6 <__hexnan+0x10e>
 800964c:	4623      	mov	r3, r4
 800964e:	f1a8 0204 	sub.w	r2, r8, #4
 8009652:	f853 1b04 	ldr.w	r1, [r3], #4
 8009656:	429f      	cmp	r7, r3
 8009658:	f842 1f04 	str.w	r1, [r2, #4]!
 800965c:	d2f9      	bcs.n	8009652 <__hexnan+0xaa>
 800965e:	1b3b      	subs	r3, r7, r4
 8009660:	f023 0303 	bic.w	r3, r3, #3
 8009664:	3304      	adds	r3, #4
 8009666:	3401      	adds	r4, #1
 8009668:	3e03      	subs	r6, #3
 800966a:	42b4      	cmp	r4, r6
 800966c:	bf88      	it	hi
 800966e:	2304      	movhi	r3, #4
 8009670:	2200      	movs	r2, #0
 8009672:	4443      	add	r3, r8
 8009674:	f843 2b04 	str.w	r2, [r3], #4
 8009678:	429f      	cmp	r7, r3
 800967a:	d2fb      	bcs.n	8009674 <__hexnan+0xcc>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	b91b      	cbnz	r3, 8009688 <__hexnan+0xe0>
 8009680:	4547      	cmp	r7, r8
 8009682:	d127      	bne.n	80096d4 <__hexnan+0x12c>
 8009684:	2301      	movs	r3, #1
 8009686:	603b      	str	r3, [r7, #0]
 8009688:	2005      	movs	r0, #5
 800968a:	e026      	b.n	80096da <__hexnan+0x132>
 800968c:	3501      	adds	r5, #1
 800968e:	2d08      	cmp	r5, #8
 8009690:	f10b 0b01 	add.w	fp, fp, #1
 8009694:	dd06      	ble.n	80096a4 <__hexnan+0xfc>
 8009696:	4544      	cmp	r4, r8
 8009698:	d9c3      	bls.n	8009622 <__hexnan+0x7a>
 800969a:	2300      	movs	r3, #0
 800969c:	2501      	movs	r5, #1
 800969e:	f844 3c04 	str.w	r3, [r4, #-4]
 80096a2:	3c04      	subs	r4, #4
 80096a4:	6822      	ldr	r2, [r4, #0]
 80096a6:	f000 000f 	and.w	r0, r0, #15
 80096aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80096ae:	6022      	str	r2, [r4, #0]
 80096b0:	e7b7      	b.n	8009622 <__hexnan+0x7a>
 80096b2:	2508      	movs	r5, #8
 80096b4:	e7b5      	b.n	8009622 <__hexnan+0x7a>
 80096b6:	9b01      	ldr	r3, [sp, #4]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0df      	beq.n	800967c <__hexnan+0xd4>
 80096bc:	f04f 32ff 	mov.w	r2, #4294967295
 80096c0:	f1c3 0320 	rsb	r3, r3, #32
 80096c4:	fa22 f303 	lsr.w	r3, r2, r3
 80096c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80096cc:	401a      	ands	r2, r3
 80096ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80096d2:	e7d3      	b.n	800967c <__hexnan+0xd4>
 80096d4:	3f04      	subs	r7, #4
 80096d6:	e7d1      	b.n	800967c <__hexnan+0xd4>
 80096d8:	2004      	movs	r0, #4
 80096da:	b007      	add	sp, #28
 80096dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096e0 <_localeconv_r>:
 80096e0:	4800      	ldr	r0, [pc, #0]	; (80096e4 <_localeconv_r+0x4>)
 80096e2:	4770      	bx	lr
 80096e4:	20000170 	.word	0x20000170

080096e8 <malloc>:
 80096e8:	4b02      	ldr	r3, [pc, #8]	; (80096f4 <malloc+0xc>)
 80096ea:	4601      	mov	r1, r0
 80096ec:	6818      	ldr	r0, [r3, #0]
 80096ee:	f000 bd43 	b.w	800a178 <_malloc_r>
 80096f2:	bf00      	nop
 80096f4:	20000018 	.word	0x20000018

080096f8 <__ascii_mbtowc>:
 80096f8:	b082      	sub	sp, #8
 80096fa:	b901      	cbnz	r1, 80096fe <__ascii_mbtowc+0x6>
 80096fc:	a901      	add	r1, sp, #4
 80096fe:	b142      	cbz	r2, 8009712 <__ascii_mbtowc+0x1a>
 8009700:	b14b      	cbz	r3, 8009716 <__ascii_mbtowc+0x1e>
 8009702:	7813      	ldrb	r3, [r2, #0]
 8009704:	600b      	str	r3, [r1, #0]
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	1e10      	subs	r0, r2, #0
 800970a:	bf18      	it	ne
 800970c:	2001      	movne	r0, #1
 800970e:	b002      	add	sp, #8
 8009710:	4770      	bx	lr
 8009712:	4610      	mov	r0, r2
 8009714:	e7fb      	b.n	800970e <__ascii_mbtowc+0x16>
 8009716:	f06f 0001 	mvn.w	r0, #1
 800971a:	e7f8      	b.n	800970e <__ascii_mbtowc+0x16>

0800971c <memchr>:
 800971c:	4603      	mov	r3, r0
 800971e:	b510      	push	{r4, lr}
 8009720:	b2c9      	uxtb	r1, r1
 8009722:	4402      	add	r2, r0
 8009724:	4293      	cmp	r3, r2
 8009726:	4618      	mov	r0, r3
 8009728:	d101      	bne.n	800972e <memchr+0x12>
 800972a:	2000      	movs	r0, #0
 800972c:	e003      	b.n	8009736 <memchr+0x1a>
 800972e:	7804      	ldrb	r4, [r0, #0]
 8009730:	3301      	adds	r3, #1
 8009732:	428c      	cmp	r4, r1
 8009734:	d1f6      	bne.n	8009724 <memchr+0x8>
 8009736:	bd10      	pop	{r4, pc}

08009738 <memcpy>:
 8009738:	440a      	add	r2, r1
 800973a:	4291      	cmp	r1, r2
 800973c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009740:	d100      	bne.n	8009744 <memcpy+0xc>
 8009742:	4770      	bx	lr
 8009744:	b510      	push	{r4, lr}
 8009746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800974a:	4291      	cmp	r1, r2
 800974c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009750:	d1f9      	bne.n	8009746 <memcpy+0xe>
 8009752:	bd10      	pop	{r4, pc}

08009754 <_Balloc>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	b976      	cbnz	r6, 800977c <_Balloc+0x28>
 800975e:	2010      	movs	r0, #16
 8009760:	f7ff ffc2 	bl	80096e8 <malloc>
 8009764:	4602      	mov	r2, r0
 8009766:	6260      	str	r0, [r4, #36]	; 0x24
 8009768:	b920      	cbnz	r0, 8009774 <_Balloc+0x20>
 800976a:	2166      	movs	r1, #102	; 0x66
 800976c:	4b17      	ldr	r3, [pc, #92]	; (80097cc <_Balloc+0x78>)
 800976e:	4818      	ldr	r0, [pc, #96]	; (80097d0 <_Balloc+0x7c>)
 8009770:	f000 fedc 	bl	800a52c <__assert_func>
 8009774:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009778:	6006      	str	r6, [r0, #0]
 800977a:	60c6      	str	r6, [r0, #12]
 800977c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800977e:	68f3      	ldr	r3, [r6, #12]
 8009780:	b183      	cbz	r3, 80097a4 <_Balloc+0x50>
 8009782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800978a:	b9b8      	cbnz	r0, 80097bc <_Balloc+0x68>
 800978c:	2101      	movs	r1, #1
 800978e:	fa01 f605 	lsl.w	r6, r1, r5
 8009792:	1d72      	adds	r2, r6, #5
 8009794:	4620      	mov	r0, r4
 8009796:	0092      	lsls	r2, r2, #2
 8009798:	f000 fc94 	bl	800a0c4 <_calloc_r>
 800979c:	b160      	cbz	r0, 80097b8 <_Balloc+0x64>
 800979e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80097a2:	e00e      	b.n	80097c2 <_Balloc+0x6e>
 80097a4:	2221      	movs	r2, #33	; 0x21
 80097a6:	2104      	movs	r1, #4
 80097a8:	4620      	mov	r0, r4
 80097aa:	f000 fc8b 	bl	800a0c4 <_calloc_r>
 80097ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097b0:	60f0      	str	r0, [r6, #12]
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e4      	bne.n	8009782 <_Balloc+0x2e>
 80097b8:	2000      	movs	r0, #0
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	6802      	ldr	r2, [r0, #0]
 80097be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80097c2:	2300      	movs	r3, #0
 80097c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80097c8:	e7f7      	b.n	80097ba <_Balloc+0x66>
 80097ca:	bf00      	nop
 80097cc:	0800b35d 	.word	0x0800b35d
 80097d0:	0800b464 	.word	0x0800b464

080097d4 <_Bfree>:
 80097d4:	b570      	push	{r4, r5, r6, lr}
 80097d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80097d8:	4605      	mov	r5, r0
 80097da:	460c      	mov	r4, r1
 80097dc:	b976      	cbnz	r6, 80097fc <_Bfree+0x28>
 80097de:	2010      	movs	r0, #16
 80097e0:	f7ff ff82 	bl	80096e8 <malloc>
 80097e4:	4602      	mov	r2, r0
 80097e6:	6268      	str	r0, [r5, #36]	; 0x24
 80097e8:	b920      	cbnz	r0, 80097f4 <_Bfree+0x20>
 80097ea:	218a      	movs	r1, #138	; 0x8a
 80097ec:	4b08      	ldr	r3, [pc, #32]	; (8009810 <_Bfree+0x3c>)
 80097ee:	4809      	ldr	r0, [pc, #36]	; (8009814 <_Bfree+0x40>)
 80097f0:	f000 fe9c 	bl	800a52c <__assert_func>
 80097f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80097f8:	6006      	str	r6, [r0, #0]
 80097fa:	60c6      	str	r6, [r0, #12]
 80097fc:	b13c      	cbz	r4, 800980e <_Bfree+0x3a>
 80097fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009800:	6862      	ldr	r2, [r4, #4]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009808:	6021      	str	r1, [r4, #0]
 800980a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	0800b35d 	.word	0x0800b35d
 8009814:	0800b464 	.word	0x0800b464

08009818 <__multadd>:
 8009818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981c:	4698      	mov	r8, r3
 800981e:	460c      	mov	r4, r1
 8009820:	2300      	movs	r3, #0
 8009822:	690e      	ldr	r6, [r1, #16]
 8009824:	4607      	mov	r7, r0
 8009826:	f101 0014 	add.w	r0, r1, #20
 800982a:	6805      	ldr	r5, [r0, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	b2a9      	uxth	r1, r5
 8009830:	fb02 8101 	mla	r1, r2, r1, r8
 8009834:	0c2d      	lsrs	r5, r5, #16
 8009836:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800983a:	fb02 c505 	mla	r5, r2, r5, ip
 800983e:	b289      	uxth	r1, r1
 8009840:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009844:	429e      	cmp	r6, r3
 8009846:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800984a:	f840 1b04 	str.w	r1, [r0], #4
 800984e:	dcec      	bgt.n	800982a <__multadd+0x12>
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	d022      	beq.n	800989c <__multadd+0x84>
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	42b3      	cmp	r3, r6
 800985a:	dc19      	bgt.n	8009890 <__multadd+0x78>
 800985c:	6861      	ldr	r1, [r4, #4]
 800985e:	4638      	mov	r0, r7
 8009860:	3101      	adds	r1, #1
 8009862:	f7ff ff77 	bl	8009754 <_Balloc>
 8009866:	4605      	mov	r5, r0
 8009868:	b928      	cbnz	r0, 8009876 <__multadd+0x5e>
 800986a:	4602      	mov	r2, r0
 800986c:	21b5      	movs	r1, #181	; 0xb5
 800986e:	4b0d      	ldr	r3, [pc, #52]	; (80098a4 <__multadd+0x8c>)
 8009870:	480d      	ldr	r0, [pc, #52]	; (80098a8 <__multadd+0x90>)
 8009872:	f000 fe5b 	bl	800a52c <__assert_func>
 8009876:	6922      	ldr	r2, [r4, #16]
 8009878:	f104 010c 	add.w	r1, r4, #12
 800987c:	3202      	adds	r2, #2
 800987e:	0092      	lsls	r2, r2, #2
 8009880:	300c      	adds	r0, #12
 8009882:	f7ff ff59 	bl	8009738 <memcpy>
 8009886:	4621      	mov	r1, r4
 8009888:	4638      	mov	r0, r7
 800988a:	f7ff ffa3 	bl	80097d4 <_Bfree>
 800988e:	462c      	mov	r4, r5
 8009890:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009894:	3601      	adds	r6, #1
 8009896:	f8c3 8014 	str.w	r8, [r3, #20]
 800989a:	6126      	str	r6, [r4, #16]
 800989c:	4620      	mov	r0, r4
 800989e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098a2:	bf00      	nop
 80098a4:	0800b3d3 	.word	0x0800b3d3
 80098a8:	0800b464 	.word	0x0800b464

080098ac <__s2b>:
 80098ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b0:	4615      	mov	r5, r2
 80098b2:	2209      	movs	r2, #9
 80098b4:	461f      	mov	r7, r3
 80098b6:	3308      	adds	r3, #8
 80098b8:	460c      	mov	r4, r1
 80098ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80098be:	4606      	mov	r6, r0
 80098c0:	2201      	movs	r2, #1
 80098c2:	2100      	movs	r1, #0
 80098c4:	429a      	cmp	r2, r3
 80098c6:	db09      	blt.n	80098dc <__s2b+0x30>
 80098c8:	4630      	mov	r0, r6
 80098ca:	f7ff ff43 	bl	8009754 <_Balloc>
 80098ce:	b940      	cbnz	r0, 80098e2 <__s2b+0x36>
 80098d0:	4602      	mov	r2, r0
 80098d2:	21ce      	movs	r1, #206	; 0xce
 80098d4:	4b18      	ldr	r3, [pc, #96]	; (8009938 <__s2b+0x8c>)
 80098d6:	4819      	ldr	r0, [pc, #100]	; (800993c <__s2b+0x90>)
 80098d8:	f000 fe28 	bl	800a52c <__assert_func>
 80098dc:	0052      	lsls	r2, r2, #1
 80098de:	3101      	adds	r1, #1
 80098e0:	e7f0      	b.n	80098c4 <__s2b+0x18>
 80098e2:	9b08      	ldr	r3, [sp, #32]
 80098e4:	2d09      	cmp	r5, #9
 80098e6:	6143      	str	r3, [r0, #20]
 80098e8:	f04f 0301 	mov.w	r3, #1
 80098ec:	6103      	str	r3, [r0, #16]
 80098ee:	dd16      	ble.n	800991e <__s2b+0x72>
 80098f0:	f104 0909 	add.w	r9, r4, #9
 80098f4:	46c8      	mov	r8, r9
 80098f6:	442c      	add	r4, r5
 80098f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80098fc:	4601      	mov	r1, r0
 80098fe:	220a      	movs	r2, #10
 8009900:	4630      	mov	r0, r6
 8009902:	3b30      	subs	r3, #48	; 0x30
 8009904:	f7ff ff88 	bl	8009818 <__multadd>
 8009908:	45a0      	cmp	r8, r4
 800990a:	d1f5      	bne.n	80098f8 <__s2b+0x4c>
 800990c:	f1a5 0408 	sub.w	r4, r5, #8
 8009910:	444c      	add	r4, r9
 8009912:	1b2d      	subs	r5, r5, r4
 8009914:	1963      	adds	r3, r4, r5
 8009916:	42bb      	cmp	r3, r7
 8009918:	db04      	blt.n	8009924 <__s2b+0x78>
 800991a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800991e:	2509      	movs	r5, #9
 8009920:	340a      	adds	r4, #10
 8009922:	e7f6      	b.n	8009912 <__s2b+0x66>
 8009924:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009928:	4601      	mov	r1, r0
 800992a:	220a      	movs	r2, #10
 800992c:	4630      	mov	r0, r6
 800992e:	3b30      	subs	r3, #48	; 0x30
 8009930:	f7ff ff72 	bl	8009818 <__multadd>
 8009934:	e7ee      	b.n	8009914 <__s2b+0x68>
 8009936:	bf00      	nop
 8009938:	0800b3d3 	.word	0x0800b3d3
 800993c:	0800b464 	.word	0x0800b464

08009940 <__hi0bits>:
 8009940:	0c02      	lsrs	r2, r0, #16
 8009942:	0412      	lsls	r2, r2, #16
 8009944:	4603      	mov	r3, r0
 8009946:	b9ca      	cbnz	r2, 800997c <__hi0bits+0x3c>
 8009948:	0403      	lsls	r3, r0, #16
 800994a:	2010      	movs	r0, #16
 800994c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009950:	bf04      	itt	eq
 8009952:	021b      	lsleq	r3, r3, #8
 8009954:	3008      	addeq	r0, #8
 8009956:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800995a:	bf04      	itt	eq
 800995c:	011b      	lsleq	r3, r3, #4
 800995e:	3004      	addeq	r0, #4
 8009960:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009964:	bf04      	itt	eq
 8009966:	009b      	lsleq	r3, r3, #2
 8009968:	3002      	addeq	r0, #2
 800996a:	2b00      	cmp	r3, #0
 800996c:	db05      	blt.n	800997a <__hi0bits+0x3a>
 800996e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009972:	f100 0001 	add.w	r0, r0, #1
 8009976:	bf08      	it	eq
 8009978:	2020      	moveq	r0, #32
 800997a:	4770      	bx	lr
 800997c:	2000      	movs	r0, #0
 800997e:	e7e5      	b.n	800994c <__hi0bits+0xc>

08009980 <__lo0bits>:
 8009980:	6803      	ldr	r3, [r0, #0]
 8009982:	4602      	mov	r2, r0
 8009984:	f013 0007 	ands.w	r0, r3, #7
 8009988:	d00b      	beq.n	80099a2 <__lo0bits+0x22>
 800998a:	07d9      	lsls	r1, r3, #31
 800998c:	d422      	bmi.n	80099d4 <__lo0bits+0x54>
 800998e:	0798      	lsls	r0, r3, #30
 8009990:	bf49      	itett	mi
 8009992:	085b      	lsrmi	r3, r3, #1
 8009994:	089b      	lsrpl	r3, r3, #2
 8009996:	2001      	movmi	r0, #1
 8009998:	6013      	strmi	r3, [r2, #0]
 800999a:	bf5c      	itt	pl
 800999c:	2002      	movpl	r0, #2
 800999e:	6013      	strpl	r3, [r2, #0]
 80099a0:	4770      	bx	lr
 80099a2:	b299      	uxth	r1, r3
 80099a4:	b909      	cbnz	r1, 80099aa <__lo0bits+0x2a>
 80099a6:	2010      	movs	r0, #16
 80099a8:	0c1b      	lsrs	r3, r3, #16
 80099aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80099ae:	bf04      	itt	eq
 80099b0:	0a1b      	lsreq	r3, r3, #8
 80099b2:	3008      	addeq	r0, #8
 80099b4:	0719      	lsls	r1, r3, #28
 80099b6:	bf04      	itt	eq
 80099b8:	091b      	lsreq	r3, r3, #4
 80099ba:	3004      	addeq	r0, #4
 80099bc:	0799      	lsls	r1, r3, #30
 80099be:	bf04      	itt	eq
 80099c0:	089b      	lsreq	r3, r3, #2
 80099c2:	3002      	addeq	r0, #2
 80099c4:	07d9      	lsls	r1, r3, #31
 80099c6:	d403      	bmi.n	80099d0 <__lo0bits+0x50>
 80099c8:	085b      	lsrs	r3, r3, #1
 80099ca:	f100 0001 	add.w	r0, r0, #1
 80099ce:	d003      	beq.n	80099d8 <__lo0bits+0x58>
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	4770      	bx	lr
 80099d4:	2000      	movs	r0, #0
 80099d6:	4770      	bx	lr
 80099d8:	2020      	movs	r0, #32
 80099da:	4770      	bx	lr

080099dc <__i2b>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	460c      	mov	r4, r1
 80099e0:	2101      	movs	r1, #1
 80099e2:	f7ff feb7 	bl	8009754 <_Balloc>
 80099e6:	4602      	mov	r2, r0
 80099e8:	b928      	cbnz	r0, 80099f6 <__i2b+0x1a>
 80099ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80099ee:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <__i2b+0x24>)
 80099f0:	4804      	ldr	r0, [pc, #16]	; (8009a04 <__i2b+0x28>)
 80099f2:	f000 fd9b 	bl	800a52c <__assert_func>
 80099f6:	2301      	movs	r3, #1
 80099f8:	6144      	str	r4, [r0, #20]
 80099fa:	6103      	str	r3, [r0, #16]
 80099fc:	bd10      	pop	{r4, pc}
 80099fe:	bf00      	nop
 8009a00:	0800b3d3 	.word	0x0800b3d3
 8009a04:	0800b464 	.word	0x0800b464

08009a08 <__multiply>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	4614      	mov	r4, r2
 8009a0e:	690a      	ldr	r2, [r1, #16]
 8009a10:	6923      	ldr	r3, [r4, #16]
 8009a12:	460d      	mov	r5, r1
 8009a14:	429a      	cmp	r2, r3
 8009a16:	bfbe      	ittt	lt
 8009a18:	460b      	movlt	r3, r1
 8009a1a:	4625      	movlt	r5, r4
 8009a1c:	461c      	movlt	r4, r3
 8009a1e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009a22:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009a26:	68ab      	ldr	r3, [r5, #8]
 8009a28:	6869      	ldr	r1, [r5, #4]
 8009a2a:	eb0a 0709 	add.w	r7, sl, r9
 8009a2e:	42bb      	cmp	r3, r7
 8009a30:	b085      	sub	sp, #20
 8009a32:	bfb8      	it	lt
 8009a34:	3101      	addlt	r1, #1
 8009a36:	f7ff fe8d 	bl	8009754 <_Balloc>
 8009a3a:	b930      	cbnz	r0, 8009a4a <__multiply+0x42>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	f240 115d 	movw	r1, #349	; 0x15d
 8009a42:	4b41      	ldr	r3, [pc, #260]	; (8009b48 <__multiply+0x140>)
 8009a44:	4841      	ldr	r0, [pc, #260]	; (8009b4c <__multiply+0x144>)
 8009a46:	f000 fd71 	bl	800a52c <__assert_func>
 8009a4a:	f100 0614 	add.w	r6, r0, #20
 8009a4e:	4633      	mov	r3, r6
 8009a50:	2200      	movs	r2, #0
 8009a52:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009a56:	4543      	cmp	r3, r8
 8009a58:	d31e      	bcc.n	8009a98 <__multiply+0x90>
 8009a5a:	f105 0c14 	add.w	ip, r5, #20
 8009a5e:	f104 0314 	add.w	r3, r4, #20
 8009a62:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009a66:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009a6a:	9202      	str	r2, [sp, #8]
 8009a6c:	ebac 0205 	sub.w	r2, ip, r5
 8009a70:	3a15      	subs	r2, #21
 8009a72:	f022 0203 	bic.w	r2, r2, #3
 8009a76:	3204      	adds	r2, #4
 8009a78:	f105 0115 	add.w	r1, r5, #21
 8009a7c:	458c      	cmp	ip, r1
 8009a7e:	bf38      	it	cc
 8009a80:	2204      	movcc	r2, #4
 8009a82:	9201      	str	r2, [sp, #4]
 8009a84:	9a02      	ldr	r2, [sp, #8]
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d808      	bhi.n	8009a9e <__multiply+0x96>
 8009a8c:	2f00      	cmp	r7, #0
 8009a8e:	dc55      	bgt.n	8009b3c <__multiply+0x134>
 8009a90:	6107      	str	r7, [r0, #16]
 8009a92:	b005      	add	sp, #20
 8009a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a98:	f843 2b04 	str.w	r2, [r3], #4
 8009a9c:	e7db      	b.n	8009a56 <__multiply+0x4e>
 8009a9e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009aa2:	f1ba 0f00 	cmp.w	sl, #0
 8009aa6:	d020      	beq.n	8009aea <__multiply+0xe2>
 8009aa8:	46b1      	mov	r9, r6
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f105 0e14 	add.w	lr, r5, #20
 8009ab0:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009ab4:	f8d9 b000 	ldr.w	fp, [r9]
 8009ab8:	b2a1      	uxth	r1, r4
 8009aba:	fa1f fb8b 	uxth.w	fp, fp
 8009abe:	fb0a b101 	mla	r1, sl, r1, fp
 8009ac2:	4411      	add	r1, r2
 8009ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8009ac8:	0c24      	lsrs	r4, r4, #16
 8009aca:	0c12      	lsrs	r2, r2, #16
 8009acc:	fb0a 2404 	mla	r4, sl, r4, r2
 8009ad0:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009ad4:	b289      	uxth	r1, r1
 8009ad6:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009ada:	45f4      	cmp	ip, lr
 8009adc:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009ae0:	f849 1b04 	str.w	r1, [r9], #4
 8009ae4:	d8e4      	bhi.n	8009ab0 <__multiply+0xa8>
 8009ae6:	9901      	ldr	r1, [sp, #4]
 8009ae8:	5072      	str	r2, [r6, r1]
 8009aea:	9a03      	ldr	r2, [sp, #12]
 8009aec:	3304      	adds	r3, #4
 8009aee:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009af2:	f1b9 0f00 	cmp.w	r9, #0
 8009af6:	d01f      	beq.n	8009b38 <__multiply+0x130>
 8009af8:	46b6      	mov	lr, r6
 8009afa:	f04f 0a00 	mov.w	sl, #0
 8009afe:	6834      	ldr	r4, [r6, #0]
 8009b00:	f105 0114 	add.w	r1, r5, #20
 8009b04:	880a      	ldrh	r2, [r1, #0]
 8009b06:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009b0a:	b2a4      	uxth	r4, r4
 8009b0c:	fb09 b202 	mla	r2, r9, r2, fp
 8009b10:	4492      	add	sl, r2
 8009b12:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009b16:	f84e 4b04 	str.w	r4, [lr], #4
 8009b1a:	f851 4b04 	ldr.w	r4, [r1], #4
 8009b1e:	f8be 2000 	ldrh.w	r2, [lr]
 8009b22:	0c24      	lsrs	r4, r4, #16
 8009b24:	fb09 2404 	mla	r4, r9, r4, r2
 8009b28:	458c      	cmp	ip, r1
 8009b2a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009b2e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009b32:	d8e7      	bhi.n	8009b04 <__multiply+0xfc>
 8009b34:	9a01      	ldr	r2, [sp, #4]
 8009b36:	50b4      	str	r4, [r6, r2]
 8009b38:	3604      	adds	r6, #4
 8009b3a:	e7a3      	b.n	8009a84 <__multiply+0x7c>
 8009b3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1a5      	bne.n	8009a90 <__multiply+0x88>
 8009b44:	3f01      	subs	r7, #1
 8009b46:	e7a1      	b.n	8009a8c <__multiply+0x84>
 8009b48:	0800b3d3 	.word	0x0800b3d3
 8009b4c:	0800b464 	.word	0x0800b464

08009b50 <__pow5mult>:
 8009b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b54:	4615      	mov	r5, r2
 8009b56:	f012 0203 	ands.w	r2, r2, #3
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	d007      	beq.n	8009b70 <__pow5mult+0x20>
 8009b60:	4c25      	ldr	r4, [pc, #148]	; (8009bf8 <__pow5mult+0xa8>)
 8009b62:	3a01      	subs	r2, #1
 8009b64:	2300      	movs	r3, #0
 8009b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009b6a:	f7ff fe55 	bl	8009818 <__multadd>
 8009b6e:	4607      	mov	r7, r0
 8009b70:	10ad      	asrs	r5, r5, #2
 8009b72:	d03d      	beq.n	8009bf0 <__pow5mult+0xa0>
 8009b74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009b76:	b97c      	cbnz	r4, 8009b98 <__pow5mult+0x48>
 8009b78:	2010      	movs	r0, #16
 8009b7a:	f7ff fdb5 	bl	80096e8 <malloc>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	6270      	str	r0, [r6, #36]	; 0x24
 8009b82:	b928      	cbnz	r0, 8009b90 <__pow5mult+0x40>
 8009b84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009b88:	4b1c      	ldr	r3, [pc, #112]	; (8009bfc <__pow5mult+0xac>)
 8009b8a:	481d      	ldr	r0, [pc, #116]	; (8009c00 <__pow5mult+0xb0>)
 8009b8c:	f000 fcce 	bl	800a52c <__assert_func>
 8009b90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b94:	6004      	str	r4, [r0, #0]
 8009b96:	60c4      	str	r4, [r0, #12]
 8009b98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009b9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ba0:	b94c      	cbnz	r4, 8009bb6 <__pow5mult+0x66>
 8009ba2:	f240 2171 	movw	r1, #625	; 0x271
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	f7ff ff18 	bl	80099dc <__i2b>
 8009bac:	2300      	movs	r3, #0
 8009bae:	4604      	mov	r4, r0
 8009bb0:	f8c8 0008 	str.w	r0, [r8, #8]
 8009bb4:	6003      	str	r3, [r0, #0]
 8009bb6:	f04f 0900 	mov.w	r9, #0
 8009bba:	07eb      	lsls	r3, r5, #31
 8009bbc:	d50a      	bpl.n	8009bd4 <__pow5mult+0x84>
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	4622      	mov	r2, r4
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7ff ff20 	bl	8009a08 <__multiply>
 8009bc8:	4680      	mov	r8, r0
 8009bca:	4639      	mov	r1, r7
 8009bcc:	4630      	mov	r0, r6
 8009bce:	f7ff fe01 	bl	80097d4 <_Bfree>
 8009bd2:	4647      	mov	r7, r8
 8009bd4:	106d      	asrs	r5, r5, #1
 8009bd6:	d00b      	beq.n	8009bf0 <__pow5mult+0xa0>
 8009bd8:	6820      	ldr	r0, [r4, #0]
 8009bda:	b938      	cbnz	r0, 8009bec <__pow5mult+0x9c>
 8009bdc:	4622      	mov	r2, r4
 8009bde:	4621      	mov	r1, r4
 8009be0:	4630      	mov	r0, r6
 8009be2:	f7ff ff11 	bl	8009a08 <__multiply>
 8009be6:	6020      	str	r0, [r4, #0]
 8009be8:	f8c0 9000 	str.w	r9, [r0]
 8009bec:	4604      	mov	r4, r0
 8009bee:	e7e4      	b.n	8009bba <__pow5mult+0x6a>
 8009bf0:	4638      	mov	r0, r7
 8009bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf6:	bf00      	nop
 8009bf8:	0800b5b8 	.word	0x0800b5b8
 8009bfc:	0800b35d 	.word	0x0800b35d
 8009c00:	0800b464 	.word	0x0800b464

08009c04 <__lshift>:
 8009c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c08:	460c      	mov	r4, r1
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	4691      	mov	r9, r2
 8009c0e:	6923      	ldr	r3, [r4, #16]
 8009c10:	6849      	ldr	r1, [r1, #4]
 8009c12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009c1c:	f108 0601 	add.w	r6, r8, #1
 8009c20:	42b3      	cmp	r3, r6
 8009c22:	db0b      	blt.n	8009c3c <__lshift+0x38>
 8009c24:	4638      	mov	r0, r7
 8009c26:	f7ff fd95 	bl	8009754 <_Balloc>
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	b948      	cbnz	r0, 8009c42 <__lshift+0x3e>
 8009c2e:	4602      	mov	r2, r0
 8009c30:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009c34:	4b27      	ldr	r3, [pc, #156]	; (8009cd4 <__lshift+0xd0>)
 8009c36:	4828      	ldr	r0, [pc, #160]	; (8009cd8 <__lshift+0xd4>)
 8009c38:	f000 fc78 	bl	800a52c <__assert_func>
 8009c3c:	3101      	adds	r1, #1
 8009c3e:	005b      	lsls	r3, r3, #1
 8009c40:	e7ee      	b.n	8009c20 <__lshift+0x1c>
 8009c42:	2300      	movs	r3, #0
 8009c44:	f100 0114 	add.w	r1, r0, #20
 8009c48:	f100 0210 	add.w	r2, r0, #16
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	4553      	cmp	r3, sl
 8009c50:	db33      	blt.n	8009cba <__lshift+0xb6>
 8009c52:	6920      	ldr	r0, [r4, #16]
 8009c54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009c58:	f104 0314 	add.w	r3, r4, #20
 8009c5c:	f019 091f 	ands.w	r9, r9, #31
 8009c60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009c64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009c68:	d02b      	beq.n	8009cc2 <__lshift+0xbe>
 8009c6a:	468a      	mov	sl, r1
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f1c9 0e20 	rsb	lr, r9, #32
 8009c72:	6818      	ldr	r0, [r3, #0]
 8009c74:	fa00 f009 	lsl.w	r0, r0, r9
 8009c78:	4302      	orrs	r2, r0
 8009c7a:	f84a 2b04 	str.w	r2, [sl], #4
 8009c7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c82:	459c      	cmp	ip, r3
 8009c84:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c88:	d8f3      	bhi.n	8009c72 <__lshift+0x6e>
 8009c8a:	ebac 0304 	sub.w	r3, ip, r4
 8009c8e:	3b15      	subs	r3, #21
 8009c90:	f023 0303 	bic.w	r3, r3, #3
 8009c94:	3304      	adds	r3, #4
 8009c96:	f104 0015 	add.w	r0, r4, #21
 8009c9a:	4584      	cmp	ip, r0
 8009c9c:	bf38      	it	cc
 8009c9e:	2304      	movcc	r3, #4
 8009ca0:	50ca      	str	r2, [r1, r3]
 8009ca2:	b10a      	cbz	r2, 8009ca8 <__lshift+0xa4>
 8009ca4:	f108 0602 	add.w	r6, r8, #2
 8009ca8:	3e01      	subs	r6, #1
 8009caa:	4638      	mov	r0, r7
 8009cac:	4621      	mov	r1, r4
 8009cae:	612e      	str	r6, [r5, #16]
 8009cb0:	f7ff fd90 	bl	80097d4 <_Bfree>
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	e7c5      	b.n	8009c4e <__lshift+0x4a>
 8009cc2:	3904      	subs	r1, #4
 8009cc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cc8:	459c      	cmp	ip, r3
 8009cca:	f841 2f04 	str.w	r2, [r1, #4]!
 8009cce:	d8f9      	bhi.n	8009cc4 <__lshift+0xc0>
 8009cd0:	e7ea      	b.n	8009ca8 <__lshift+0xa4>
 8009cd2:	bf00      	nop
 8009cd4:	0800b3d3 	.word	0x0800b3d3
 8009cd8:	0800b464 	.word	0x0800b464

08009cdc <__mcmp>:
 8009cdc:	4603      	mov	r3, r0
 8009cde:	690a      	ldr	r2, [r1, #16]
 8009ce0:	6900      	ldr	r0, [r0, #16]
 8009ce2:	b530      	push	{r4, r5, lr}
 8009ce4:	1a80      	subs	r0, r0, r2
 8009ce6:	d10d      	bne.n	8009d04 <__mcmp+0x28>
 8009ce8:	3314      	adds	r3, #20
 8009cea:	3114      	adds	r1, #20
 8009cec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009cf0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009cf4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009cf8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009cfc:	4295      	cmp	r5, r2
 8009cfe:	d002      	beq.n	8009d06 <__mcmp+0x2a>
 8009d00:	d304      	bcc.n	8009d0c <__mcmp+0x30>
 8009d02:	2001      	movs	r0, #1
 8009d04:	bd30      	pop	{r4, r5, pc}
 8009d06:	42a3      	cmp	r3, r4
 8009d08:	d3f4      	bcc.n	8009cf4 <__mcmp+0x18>
 8009d0a:	e7fb      	b.n	8009d04 <__mcmp+0x28>
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	e7f8      	b.n	8009d04 <__mcmp+0x28>
	...

08009d14 <__mdiff>:
 8009d14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	460c      	mov	r4, r1
 8009d1a:	4606      	mov	r6, r0
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	4620      	mov	r0, r4
 8009d20:	4692      	mov	sl, r2
 8009d22:	f7ff ffdb 	bl	8009cdc <__mcmp>
 8009d26:	1e05      	subs	r5, r0, #0
 8009d28:	d111      	bne.n	8009d4e <__mdiff+0x3a>
 8009d2a:	4629      	mov	r1, r5
 8009d2c:	4630      	mov	r0, r6
 8009d2e:	f7ff fd11 	bl	8009754 <_Balloc>
 8009d32:	4602      	mov	r2, r0
 8009d34:	b928      	cbnz	r0, 8009d42 <__mdiff+0x2e>
 8009d36:	f240 2132 	movw	r1, #562	; 0x232
 8009d3a:	4b3c      	ldr	r3, [pc, #240]	; (8009e2c <__mdiff+0x118>)
 8009d3c:	483c      	ldr	r0, [pc, #240]	; (8009e30 <__mdiff+0x11c>)
 8009d3e:	f000 fbf5 	bl	800a52c <__assert_func>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009d48:	4610      	mov	r0, r2
 8009d4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4e:	bfa4      	itt	ge
 8009d50:	4653      	movge	r3, sl
 8009d52:	46a2      	movge	sl, r4
 8009d54:	4630      	mov	r0, r6
 8009d56:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009d5a:	bfa6      	itte	ge
 8009d5c:	461c      	movge	r4, r3
 8009d5e:	2500      	movge	r5, #0
 8009d60:	2501      	movlt	r5, #1
 8009d62:	f7ff fcf7 	bl	8009754 <_Balloc>
 8009d66:	4602      	mov	r2, r0
 8009d68:	b918      	cbnz	r0, 8009d72 <__mdiff+0x5e>
 8009d6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009d6e:	4b2f      	ldr	r3, [pc, #188]	; (8009e2c <__mdiff+0x118>)
 8009d70:	e7e4      	b.n	8009d3c <__mdiff+0x28>
 8009d72:	f100 0814 	add.w	r8, r0, #20
 8009d76:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009d7a:	60c5      	str	r5, [r0, #12]
 8009d7c:	f04f 0c00 	mov.w	ip, #0
 8009d80:	f10a 0514 	add.w	r5, sl, #20
 8009d84:	f10a 0010 	add.w	r0, sl, #16
 8009d88:	46c2      	mov	sl, r8
 8009d8a:	6926      	ldr	r6, [r4, #16]
 8009d8c:	f104 0914 	add.w	r9, r4, #20
 8009d90:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009d94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009d98:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009d9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009da0:	fa1f f18b 	uxth.w	r1, fp
 8009da4:	4461      	add	r1, ip
 8009da6:	fa1f fc83 	uxth.w	ip, r3
 8009daa:	0c1b      	lsrs	r3, r3, #16
 8009dac:	eba1 010c 	sub.w	r1, r1, ip
 8009db0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009db4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009db8:	b289      	uxth	r1, r1
 8009dba:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009dbe:	454e      	cmp	r6, r9
 8009dc0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009dc4:	f84a 3b04 	str.w	r3, [sl], #4
 8009dc8:	d8e6      	bhi.n	8009d98 <__mdiff+0x84>
 8009dca:	1b33      	subs	r3, r6, r4
 8009dcc:	3b15      	subs	r3, #21
 8009dce:	f023 0303 	bic.w	r3, r3, #3
 8009dd2:	3415      	adds	r4, #21
 8009dd4:	3304      	adds	r3, #4
 8009dd6:	42a6      	cmp	r6, r4
 8009dd8:	bf38      	it	cc
 8009dda:	2304      	movcc	r3, #4
 8009ddc:	441d      	add	r5, r3
 8009dde:	4443      	add	r3, r8
 8009de0:	461e      	mov	r6, r3
 8009de2:	462c      	mov	r4, r5
 8009de4:	4574      	cmp	r4, lr
 8009de6:	d30e      	bcc.n	8009e06 <__mdiff+0xf2>
 8009de8:	f10e 0103 	add.w	r1, lr, #3
 8009dec:	1b49      	subs	r1, r1, r5
 8009dee:	f021 0103 	bic.w	r1, r1, #3
 8009df2:	3d03      	subs	r5, #3
 8009df4:	45ae      	cmp	lr, r5
 8009df6:	bf38      	it	cc
 8009df8:	2100      	movcc	r1, #0
 8009dfa:	4419      	add	r1, r3
 8009dfc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009e00:	b18b      	cbz	r3, 8009e26 <__mdiff+0x112>
 8009e02:	6117      	str	r7, [r2, #16]
 8009e04:	e7a0      	b.n	8009d48 <__mdiff+0x34>
 8009e06:	f854 8b04 	ldr.w	r8, [r4], #4
 8009e0a:	fa1f f188 	uxth.w	r1, r8
 8009e0e:	4461      	add	r1, ip
 8009e10:	1408      	asrs	r0, r1, #16
 8009e12:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009e16:	b289      	uxth	r1, r1
 8009e18:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009e1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e20:	f846 1b04 	str.w	r1, [r6], #4
 8009e24:	e7de      	b.n	8009de4 <__mdiff+0xd0>
 8009e26:	3f01      	subs	r7, #1
 8009e28:	e7e8      	b.n	8009dfc <__mdiff+0xe8>
 8009e2a:	bf00      	nop
 8009e2c:	0800b3d3 	.word	0x0800b3d3
 8009e30:	0800b464 	.word	0x0800b464

08009e34 <__ulp>:
 8009e34:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <__ulp+0x48>)
 8009e36:	400b      	ands	r3, r1
 8009e38:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	dd02      	ble.n	8009e46 <__ulp+0x12>
 8009e40:	2000      	movs	r0, #0
 8009e42:	4619      	mov	r1, r3
 8009e44:	4770      	bx	lr
 8009e46:	425b      	negs	r3, r3
 8009e48:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009e4c:	f04f 0000 	mov.w	r0, #0
 8009e50:	f04f 0100 	mov.w	r1, #0
 8009e54:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009e58:	da04      	bge.n	8009e64 <__ulp+0x30>
 8009e5a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e5e:	fa43 f102 	asr.w	r1, r3, r2
 8009e62:	4770      	bx	lr
 8009e64:	f1a2 0314 	sub.w	r3, r2, #20
 8009e68:	2b1e      	cmp	r3, #30
 8009e6a:	bfd6      	itet	le
 8009e6c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009e70:	2301      	movgt	r3, #1
 8009e72:	fa22 f303 	lsrle.w	r3, r2, r3
 8009e76:	4618      	mov	r0, r3
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	7ff00000 	.word	0x7ff00000

08009e80 <__b2d>:
 8009e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e84:	6907      	ldr	r7, [r0, #16]
 8009e86:	f100 0914 	add.w	r9, r0, #20
 8009e8a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009e8e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009e92:	f1a7 0804 	sub.w	r8, r7, #4
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7ff fd52 	bl	8009940 <__hi0bits>
 8009e9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ea0:	280a      	cmp	r0, #10
 8009ea2:	600b      	str	r3, [r1, #0]
 8009ea4:	491f      	ldr	r1, [pc, #124]	; (8009f24 <__b2d+0xa4>)
 8009ea6:	dc17      	bgt.n	8009ed8 <__b2d+0x58>
 8009ea8:	45c1      	cmp	r9, r8
 8009eaa:	bf28      	it	cs
 8009eac:	2200      	movcs	r2, #0
 8009eae:	f1c0 0c0b 	rsb	ip, r0, #11
 8009eb2:	fa26 f30c 	lsr.w	r3, r6, ip
 8009eb6:	bf38      	it	cc
 8009eb8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ebc:	ea43 0501 	orr.w	r5, r3, r1
 8009ec0:	f100 0315 	add.w	r3, r0, #21
 8009ec4:	fa06 f303 	lsl.w	r3, r6, r3
 8009ec8:	fa22 f20c 	lsr.w	r2, r2, ip
 8009ecc:	ea43 0402 	orr.w	r4, r3, r2
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ed8:	45c1      	cmp	r9, r8
 8009eda:	bf2e      	itee	cs
 8009edc:	2200      	movcs	r2, #0
 8009ede:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009ee2:	f1a7 0808 	subcc.w	r8, r7, #8
 8009ee6:	f1b0 030b 	subs.w	r3, r0, #11
 8009eea:	d016      	beq.n	8009f1a <__b2d+0x9a>
 8009eec:	f1c3 0720 	rsb	r7, r3, #32
 8009ef0:	fa22 f107 	lsr.w	r1, r2, r7
 8009ef4:	45c8      	cmp	r8, r9
 8009ef6:	fa06 f603 	lsl.w	r6, r6, r3
 8009efa:	ea46 0601 	orr.w	r6, r6, r1
 8009efe:	bf94      	ite	ls
 8009f00:	2100      	movls	r1, #0
 8009f02:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009f06:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009f0a:	fa02 f003 	lsl.w	r0, r2, r3
 8009f0e:	40f9      	lsrs	r1, r7
 8009f10:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009f14:	ea40 0401 	orr.w	r4, r0, r1
 8009f18:	e7da      	b.n	8009ed0 <__b2d+0x50>
 8009f1a:	4614      	mov	r4, r2
 8009f1c:	ea46 0501 	orr.w	r5, r6, r1
 8009f20:	e7d6      	b.n	8009ed0 <__b2d+0x50>
 8009f22:	bf00      	nop
 8009f24:	3ff00000 	.word	0x3ff00000

08009f28 <__d2b>:
 8009f28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009f2c:	2101      	movs	r1, #1
 8009f2e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009f32:	4690      	mov	r8, r2
 8009f34:	461d      	mov	r5, r3
 8009f36:	f7ff fc0d 	bl	8009754 <_Balloc>
 8009f3a:	4604      	mov	r4, r0
 8009f3c:	b930      	cbnz	r0, 8009f4c <__d2b+0x24>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	f240 310a 	movw	r1, #778	; 0x30a
 8009f44:	4b24      	ldr	r3, [pc, #144]	; (8009fd8 <__d2b+0xb0>)
 8009f46:	4825      	ldr	r0, [pc, #148]	; (8009fdc <__d2b+0xb4>)
 8009f48:	f000 faf0 	bl	800a52c <__assert_func>
 8009f4c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009f50:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009f54:	bb2d      	cbnz	r5, 8009fa2 <__d2b+0x7a>
 8009f56:	9301      	str	r3, [sp, #4]
 8009f58:	f1b8 0300 	subs.w	r3, r8, #0
 8009f5c:	d026      	beq.n	8009fac <__d2b+0x84>
 8009f5e:	4668      	mov	r0, sp
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	f7ff fd0d 	bl	8009980 <__lo0bits>
 8009f66:	9900      	ldr	r1, [sp, #0]
 8009f68:	b1f0      	cbz	r0, 8009fa8 <__d2b+0x80>
 8009f6a:	9a01      	ldr	r2, [sp, #4]
 8009f6c:	f1c0 0320 	rsb	r3, r0, #32
 8009f70:	fa02 f303 	lsl.w	r3, r2, r3
 8009f74:	430b      	orrs	r3, r1
 8009f76:	40c2      	lsrs	r2, r0
 8009f78:	6163      	str	r3, [r4, #20]
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9b01      	ldr	r3, [sp, #4]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bf14      	ite	ne
 8009f82:	2102      	movne	r1, #2
 8009f84:	2101      	moveq	r1, #1
 8009f86:	61a3      	str	r3, [r4, #24]
 8009f88:	6121      	str	r1, [r4, #16]
 8009f8a:	b1c5      	cbz	r5, 8009fbe <__d2b+0x96>
 8009f8c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009f90:	4405      	add	r5, r0
 8009f92:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009f96:	603d      	str	r5, [r7, #0]
 8009f98:	6030      	str	r0, [r6, #0]
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	b002      	add	sp, #8
 8009f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009fa6:	e7d6      	b.n	8009f56 <__d2b+0x2e>
 8009fa8:	6161      	str	r1, [r4, #20]
 8009faa:	e7e7      	b.n	8009f7c <__d2b+0x54>
 8009fac:	a801      	add	r0, sp, #4
 8009fae:	f7ff fce7 	bl	8009980 <__lo0bits>
 8009fb2:	2101      	movs	r1, #1
 8009fb4:	9b01      	ldr	r3, [sp, #4]
 8009fb6:	6121      	str	r1, [r4, #16]
 8009fb8:	6163      	str	r3, [r4, #20]
 8009fba:	3020      	adds	r0, #32
 8009fbc:	e7e5      	b.n	8009f8a <__d2b+0x62>
 8009fbe:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009fc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009fc6:	6038      	str	r0, [r7, #0]
 8009fc8:	6918      	ldr	r0, [r3, #16]
 8009fca:	f7ff fcb9 	bl	8009940 <__hi0bits>
 8009fce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009fd2:	6031      	str	r1, [r6, #0]
 8009fd4:	e7e1      	b.n	8009f9a <__d2b+0x72>
 8009fd6:	bf00      	nop
 8009fd8:	0800b3d3 	.word	0x0800b3d3
 8009fdc:	0800b464 	.word	0x0800b464

08009fe0 <__ratio>:
 8009fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	4688      	mov	r8, r1
 8009fe6:	4669      	mov	r1, sp
 8009fe8:	4681      	mov	r9, r0
 8009fea:	f7ff ff49 	bl	8009e80 <__b2d>
 8009fee:	460f      	mov	r7, r1
 8009ff0:	4604      	mov	r4, r0
 8009ff2:	460d      	mov	r5, r1
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	a901      	add	r1, sp, #4
 8009ff8:	f7ff ff42 	bl	8009e80 <__b2d>
 8009ffc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a000:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a004:	468b      	mov	fp, r1
 800a006:	eba3 0c02 	sub.w	ip, r3, r2
 800a00a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a00e:	1a9b      	subs	r3, r3, r2
 800a010:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a014:	2b00      	cmp	r3, #0
 800a016:	bfd5      	itete	le
 800a018:	460a      	movle	r2, r1
 800a01a:	462a      	movgt	r2, r5
 800a01c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a020:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a024:	bfd8      	it	le
 800a026:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a02a:	465b      	mov	r3, fp
 800a02c:	4602      	mov	r2, r0
 800a02e:	4639      	mov	r1, r7
 800a030:	4620      	mov	r0, r4
 800a032:	f7f6 fb7b 	bl	800072c <__aeabi_ddiv>
 800a036:	b003      	add	sp, #12
 800a038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a03c <__copybits>:
 800a03c:	3901      	subs	r1, #1
 800a03e:	b570      	push	{r4, r5, r6, lr}
 800a040:	1149      	asrs	r1, r1, #5
 800a042:	6914      	ldr	r4, [r2, #16]
 800a044:	3101      	adds	r1, #1
 800a046:	f102 0314 	add.w	r3, r2, #20
 800a04a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a04e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a052:	1f05      	subs	r5, r0, #4
 800a054:	42a3      	cmp	r3, r4
 800a056:	d30c      	bcc.n	800a072 <__copybits+0x36>
 800a058:	1aa3      	subs	r3, r4, r2
 800a05a:	3b11      	subs	r3, #17
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	3211      	adds	r2, #17
 800a062:	42a2      	cmp	r2, r4
 800a064:	bf88      	it	hi
 800a066:	2300      	movhi	r3, #0
 800a068:	4418      	add	r0, r3
 800a06a:	2300      	movs	r3, #0
 800a06c:	4288      	cmp	r0, r1
 800a06e:	d305      	bcc.n	800a07c <__copybits+0x40>
 800a070:	bd70      	pop	{r4, r5, r6, pc}
 800a072:	f853 6b04 	ldr.w	r6, [r3], #4
 800a076:	f845 6f04 	str.w	r6, [r5, #4]!
 800a07a:	e7eb      	b.n	800a054 <__copybits+0x18>
 800a07c:	f840 3b04 	str.w	r3, [r0], #4
 800a080:	e7f4      	b.n	800a06c <__copybits+0x30>

0800a082 <__any_on>:
 800a082:	f100 0214 	add.w	r2, r0, #20
 800a086:	6900      	ldr	r0, [r0, #16]
 800a088:	114b      	asrs	r3, r1, #5
 800a08a:	4298      	cmp	r0, r3
 800a08c:	b510      	push	{r4, lr}
 800a08e:	db11      	blt.n	800a0b4 <__any_on+0x32>
 800a090:	dd0a      	ble.n	800a0a8 <__any_on+0x26>
 800a092:	f011 011f 	ands.w	r1, r1, #31
 800a096:	d007      	beq.n	800a0a8 <__any_on+0x26>
 800a098:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a09c:	fa24 f001 	lsr.w	r0, r4, r1
 800a0a0:	fa00 f101 	lsl.w	r1, r0, r1
 800a0a4:	428c      	cmp	r4, r1
 800a0a6:	d10b      	bne.n	800a0c0 <__any_on+0x3e>
 800a0a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d803      	bhi.n	800a0b8 <__any_on+0x36>
 800a0b0:	2000      	movs	r0, #0
 800a0b2:	bd10      	pop	{r4, pc}
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	e7f7      	b.n	800a0a8 <__any_on+0x26>
 800a0b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	d0f5      	beq.n	800a0ac <__any_on+0x2a>
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	e7f6      	b.n	800a0b2 <__any_on+0x30>

0800a0c4 <_calloc_r>:
 800a0c4:	b538      	push	{r3, r4, r5, lr}
 800a0c6:	fb02 f501 	mul.w	r5, r2, r1
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	f000 f854 	bl	800a178 <_malloc_r>
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	b118      	cbz	r0, 800a0dc <_calloc_r+0x18>
 800a0d4:	462a      	mov	r2, r5
 800a0d6:	2100      	movs	r1, #0
 800a0d8:	f7fc fe60 	bl	8006d9c <memset>
 800a0dc:	4620      	mov	r0, r4
 800a0de:	bd38      	pop	{r3, r4, r5, pc}

0800a0e0 <_free_r>:
 800a0e0:	b538      	push	{r3, r4, r5, lr}
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	d043      	beq.n	800a170 <_free_r+0x90>
 800a0e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ec:	1f0c      	subs	r4, r1, #4
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	bfb8      	it	lt
 800a0f2:	18e4      	addlt	r4, r4, r3
 800a0f4:	f000 fa64 	bl	800a5c0 <__malloc_lock>
 800a0f8:	4a1e      	ldr	r2, [pc, #120]	; (800a174 <_free_r+0x94>)
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	4610      	mov	r0, r2
 800a0fe:	b933      	cbnz	r3, 800a10e <_free_r+0x2e>
 800a100:	6063      	str	r3, [r4, #4]
 800a102:	6014      	str	r4, [r2, #0]
 800a104:	4628      	mov	r0, r5
 800a106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a10a:	f000 ba5f 	b.w	800a5cc <__malloc_unlock>
 800a10e:	42a3      	cmp	r3, r4
 800a110:	d90a      	bls.n	800a128 <_free_r+0x48>
 800a112:	6821      	ldr	r1, [r4, #0]
 800a114:	1862      	adds	r2, r4, r1
 800a116:	4293      	cmp	r3, r2
 800a118:	bf01      	itttt	eq
 800a11a:	681a      	ldreq	r2, [r3, #0]
 800a11c:	685b      	ldreq	r3, [r3, #4]
 800a11e:	1852      	addeq	r2, r2, r1
 800a120:	6022      	streq	r2, [r4, #0]
 800a122:	6063      	str	r3, [r4, #4]
 800a124:	6004      	str	r4, [r0, #0]
 800a126:	e7ed      	b.n	800a104 <_free_r+0x24>
 800a128:	461a      	mov	r2, r3
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	b10b      	cbz	r3, 800a132 <_free_r+0x52>
 800a12e:	42a3      	cmp	r3, r4
 800a130:	d9fa      	bls.n	800a128 <_free_r+0x48>
 800a132:	6811      	ldr	r1, [r2, #0]
 800a134:	1850      	adds	r0, r2, r1
 800a136:	42a0      	cmp	r0, r4
 800a138:	d10b      	bne.n	800a152 <_free_r+0x72>
 800a13a:	6820      	ldr	r0, [r4, #0]
 800a13c:	4401      	add	r1, r0
 800a13e:	1850      	adds	r0, r2, r1
 800a140:	4283      	cmp	r3, r0
 800a142:	6011      	str	r1, [r2, #0]
 800a144:	d1de      	bne.n	800a104 <_free_r+0x24>
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	4401      	add	r1, r0
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	6053      	str	r3, [r2, #4]
 800a150:	e7d8      	b.n	800a104 <_free_r+0x24>
 800a152:	d902      	bls.n	800a15a <_free_r+0x7a>
 800a154:	230c      	movs	r3, #12
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	e7d4      	b.n	800a104 <_free_r+0x24>
 800a15a:	6820      	ldr	r0, [r4, #0]
 800a15c:	1821      	adds	r1, r4, r0
 800a15e:	428b      	cmp	r3, r1
 800a160:	bf01      	itttt	eq
 800a162:	6819      	ldreq	r1, [r3, #0]
 800a164:	685b      	ldreq	r3, [r3, #4]
 800a166:	1809      	addeq	r1, r1, r0
 800a168:	6021      	streq	r1, [r4, #0]
 800a16a:	6063      	str	r3, [r4, #4]
 800a16c:	6054      	str	r4, [r2, #4]
 800a16e:	e7c9      	b.n	800a104 <_free_r+0x24>
 800a170:	bd38      	pop	{r3, r4, r5, pc}
 800a172:	bf00      	nop
 800a174:	20000238 	.word	0x20000238

0800a178 <_malloc_r>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	1ccd      	adds	r5, r1, #3
 800a17c:	f025 0503 	bic.w	r5, r5, #3
 800a180:	3508      	adds	r5, #8
 800a182:	2d0c      	cmp	r5, #12
 800a184:	bf38      	it	cc
 800a186:	250c      	movcc	r5, #12
 800a188:	2d00      	cmp	r5, #0
 800a18a:	4606      	mov	r6, r0
 800a18c:	db01      	blt.n	800a192 <_malloc_r+0x1a>
 800a18e:	42a9      	cmp	r1, r5
 800a190:	d903      	bls.n	800a19a <_malloc_r+0x22>
 800a192:	230c      	movs	r3, #12
 800a194:	6033      	str	r3, [r6, #0]
 800a196:	2000      	movs	r0, #0
 800a198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a19a:	f000 fa11 	bl	800a5c0 <__malloc_lock>
 800a19e:	4921      	ldr	r1, [pc, #132]	; (800a224 <_malloc_r+0xac>)
 800a1a0:	680a      	ldr	r2, [r1, #0]
 800a1a2:	4614      	mov	r4, r2
 800a1a4:	b99c      	cbnz	r4, 800a1ce <_malloc_r+0x56>
 800a1a6:	4f20      	ldr	r7, [pc, #128]	; (800a228 <_malloc_r+0xb0>)
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	b923      	cbnz	r3, 800a1b6 <_malloc_r+0x3e>
 800a1ac:	4621      	mov	r1, r4
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	f000 f99e 	bl	800a4f0 <_sbrk_r>
 800a1b4:	6038      	str	r0, [r7, #0]
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	4630      	mov	r0, r6
 800a1ba:	f000 f999 	bl	800a4f0 <_sbrk_r>
 800a1be:	1c43      	adds	r3, r0, #1
 800a1c0:	d123      	bne.n	800a20a <_malloc_r+0x92>
 800a1c2:	230c      	movs	r3, #12
 800a1c4:	4630      	mov	r0, r6
 800a1c6:	6033      	str	r3, [r6, #0]
 800a1c8:	f000 fa00 	bl	800a5cc <__malloc_unlock>
 800a1cc:	e7e3      	b.n	800a196 <_malloc_r+0x1e>
 800a1ce:	6823      	ldr	r3, [r4, #0]
 800a1d0:	1b5b      	subs	r3, r3, r5
 800a1d2:	d417      	bmi.n	800a204 <_malloc_r+0x8c>
 800a1d4:	2b0b      	cmp	r3, #11
 800a1d6:	d903      	bls.n	800a1e0 <_malloc_r+0x68>
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	441c      	add	r4, r3
 800a1dc:	6025      	str	r5, [r4, #0]
 800a1de:	e004      	b.n	800a1ea <_malloc_r+0x72>
 800a1e0:	6863      	ldr	r3, [r4, #4]
 800a1e2:	42a2      	cmp	r2, r4
 800a1e4:	bf0c      	ite	eq
 800a1e6:	600b      	streq	r3, [r1, #0]
 800a1e8:	6053      	strne	r3, [r2, #4]
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f000 f9ee 	bl	800a5cc <__malloc_unlock>
 800a1f0:	f104 000b 	add.w	r0, r4, #11
 800a1f4:	1d23      	adds	r3, r4, #4
 800a1f6:	f020 0007 	bic.w	r0, r0, #7
 800a1fa:	1ac2      	subs	r2, r0, r3
 800a1fc:	d0cc      	beq.n	800a198 <_malloc_r+0x20>
 800a1fe:	1a1b      	subs	r3, r3, r0
 800a200:	50a3      	str	r3, [r4, r2]
 800a202:	e7c9      	b.n	800a198 <_malloc_r+0x20>
 800a204:	4622      	mov	r2, r4
 800a206:	6864      	ldr	r4, [r4, #4]
 800a208:	e7cc      	b.n	800a1a4 <_malloc_r+0x2c>
 800a20a:	1cc4      	adds	r4, r0, #3
 800a20c:	f024 0403 	bic.w	r4, r4, #3
 800a210:	42a0      	cmp	r0, r4
 800a212:	d0e3      	beq.n	800a1dc <_malloc_r+0x64>
 800a214:	1a21      	subs	r1, r4, r0
 800a216:	4630      	mov	r0, r6
 800a218:	f000 f96a 	bl	800a4f0 <_sbrk_r>
 800a21c:	3001      	adds	r0, #1
 800a21e:	d1dd      	bne.n	800a1dc <_malloc_r+0x64>
 800a220:	e7cf      	b.n	800a1c2 <_malloc_r+0x4a>
 800a222:	bf00      	nop
 800a224:	20000238 	.word	0x20000238
 800a228:	2000023c 	.word	0x2000023c

0800a22c <__ssputs_r>:
 800a22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a230:	688e      	ldr	r6, [r1, #8]
 800a232:	4682      	mov	sl, r0
 800a234:	429e      	cmp	r6, r3
 800a236:	460c      	mov	r4, r1
 800a238:	4690      	mov	r8, r2
 800a23a:	461f      	mov	r7, r3
 800a23c:	d838      	bhi.n	800a2b0 <__ssputs_r+0x84>
 800a23e:	898a      	ldrh	r2, [r1, #12]
 800a240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a244:	d032      	beq.n	800a2ac <__ssputs_r+0x80>
 800a246:	6825      	ldr	r5, [r4, #0]
 800a248:	6909      	ldr	r1, [r1, #16]
 800a24a:	3301      	adds	r3, #1
 800a24c:	eba5 0901 	sub.w	r9, r5, r1
 800a250:	6965      	ldr	r5, [r4, #20]
 800a252:	444b      	add	r3, r9
 800a254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a25c:	106d      	asrs	r5, r5, #1
 800a25e:	429d      	cmp	r5, r3
 800a260:	bf38      	it	cc
 800a262:	461d      	movcc	r5, r3
 800a264:	0553      	lsls	r3, r2, #21
 800a266:	d531      	bpl.n	800a2cc <__ssputs_r+0xa0>
 800a268:	4629      	mov	r1, r5
 800a26a:	f7ff ff85 	bl	800a178 <_malloc_r>
 800a26e:	4606      	mov	r6, r0
 800a270:	b950      	cbnz	r0, 800a288 <__ssputs_r+0x5c>
 800a272:	230c      	movs	r3, #12
 800a274:	f04f 30ff 	mov.w	r0, #4294967295
 800a278:	f8ca 3000 	str.w	r3, [sl]
 800a27c:	89a3      	ldrh	r3, [r4, #12]
 800a27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a282:	81a3      	strh	r3, [r4, #12]
 800a284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a288:	464a      	mov	r2, r9
 800a28a:	6921      	ldr	r1, [r4, #16]
 800a28c:	f7ff fa54 	bl	8009738 <memcpy>
 800a290:	89a3      	ldrh	r3, [r4, #12]
 800a292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a29a:	81a3      	strh	r3, [r4, #12]
 800a29c:	6126      	str	r6, [r4, #16]
 800a29e:	444e      	add	r6, r9
 800a2a0:	6026      	str	r6, [r4, #0]
 800a2a2:	463e      	mov	r6, r7
 800a2a4:	6165      	str	r5, [r4, #20]
 800a2a6:	eba5 0509 	sub.w	r5, r5, r9
 800a2aa:	60a5      	str	r5, [r4, #8]
 800a2ac:	42be      	cmp	r6, r7
 800a2ae:	d900      	bls.n	800a2b2 <__ssputs_r+0x86>
 800a2b0:	463e      	mov	r6, r7
 800a2b2:	4632      	mov	r2, r6
 800a2b4:	4641      	mov	r1, r8
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	f000 f968 	bl	800a58c <memmove>
 800a2bc:	68a3      	ldr	r3, [r4, #8]
 800a2be:	6822      	ldr	r2, [r4, #0]
 800a2c0:	1b9b      	subs	r3, r3, r6
 800a2c2:	4432      	add	r2, r6
 800a2c4:	2000      	movs	r0, #0
 800a2c6:	60a3      	str	r3, [r4, #8]
 800a2c8:	6022      	str	r2, [r4, #0]
 800a2ca:	e7db      	b.n	800a284 <__ssputs_r+0x58>
 800a2cc:	462a      	mov	r2, r5
 800a2ce:	f000 f983 	bl	800a5d8 <_realloc_r>
 800a2d2:	4606      	mov	r6, r0
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	d1e1      	bne.n	800a29c <__ssputs_r+0x70>
 800a2d8:	4650      	mov	r0, sl
 800a2da:	6921      	ldr	r1, [r4, #16]
 800a2dc:	f7ff ff00 	bl	800a0e0 <_free_r>
 800a2e0:	e7c7      	b.n	800a272 <__ssputs_r+0x46>
	...

0800a2e4 <_svfiprintf_r>:
 800a2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2e8:	4698      	mov	r8, r3
 800a2ea:	898b      	ldrh	r3, [r1, #12]
 800a2ec:	4607      	mov	r7, r0
 800a2ee:	061b      	lsls	r3, r3, #24
 800a2f0:	460d      	mov	r5, r1
 800a2f2:	4614      	mov	r4, r2
 800a2f4:	b09d      	sub	sp, #116	; 0x74
 800a2f6:	d50e      	bpl.n	800a316 <_svfiprintf_r+0x32>
 800a2f8:	690b      	ldr	r3, [r1, #16]
 800a2fa:	b963      	cbnz	r3, 800a316 <_svfiprintf_r+0x32>
 800a2fc:	2140      	movs	r1, #64	; 0x40
 800a2fe:	f7ff ff3b 	bl	800a178 <_malloc_r>
 800a302:	6028      	str	r0, [r5, #0]
 800a304:	6128      	str	r0, [r5, #16]
 800a306:	b920      	cbnz	r0, 800a312 <_svfiprintf_r+0x2e>
 800a308:	230c      	movs	r3, #12
 800a30a:	603b      	str	r3, [r7, #0]
 800a30c:	f04f 30ff 	mov.w	r0, #4294967295
 800a310:	e0d1      	b.n	800a4b6 <_svfiprintf_r+0x1d2>
 800a312:	2340      	movs	r3, #64	; 0x40
 800a314:	616b      	str	r3, [r5, #20]
 800a316:	2300      	movs	r3, #0
 800a318:	9309      	str	r3, [sp, #36]	; 0x24
 800a31a:	2320      	movs	r3, #32
 800a31c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a320:	2330      	movs	r3, #48	; 0x30
 800a322:	f04f 0901 	mov.w	r9, #1
 800a326:	f8cd 800c 	str.w	r8, [sp, #12]
 800a32a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a4d0 <_svfiprintf_r+0x1ec>
 800a32e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a332:	4623      	mov	r3, r4
 800a334:	469a      	mov	sl, r3
 800a336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a33a:	b10a      	cbz	r2, 800a340 <_svfiprintf_r+0x5c>
 800a33c:	2a25      	cmp	r2, #37	; 0x25
 800a33e:	d1f9      	bne.n	800a334 <_svfiprintf_r+0x50>
 800a340:	ebba 0b04 	subs.w	fp, sl, r4
 800a344:	d00b      	beq.n	800a35e <_svfiprintf_r+0x7a>
 800a346:	465b      	mov	r3, fp
 800a348:	4622      	mov	r2, r4
 800a34a:	4629      	mov	r1, r5
 800a34c:	4638      	mov	r0, r7
 800a34e:	f7ff ff6d 	bl	800a22c <__ssputs_r>
 800a352:	3001      	adds	r0, #1
 800a354:	f000 80aa 	beq.w	800a4ac <_svfiprintf_r+0x1c8>
 800a358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a35a:	445a      	add	r2, fp
 800a35c:	9209      	str	r2, [sp, #36]	; 0x24
 800a35e:	f89a 3000 	ldrb.w	r3, [sl]
 800a362:	2b00      	cmp	r3, #0
 800a364:	f000 80a2 	beq.w	800a4ac <_svfiprintf_r+0x1c8>
 800a368:	2300      	movs	r3, #0
 800a36a:	f04f 32ff 	mov.w	r2, #4294967295
 800a36e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a372:	f10a 0a01 	add.w	sl, sl, #1
 800a376:	9304      	str	r3, [sp, #16]
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a37e:	931a      	str	r3, [sp, #104]	; 0x68
 800a380:	4654      	mov	r4, sl
 800a382:	2205      	movs	r2, #5
 800a384:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a388:	4851      	ldr	r0, [pc, #324]	; (800a4d0 <_svfiprintf_r+0x1ec>)
 800a38a:	f7ff f9c7 	bl	800971c <memchr>
 800a38e:	9a04      	ldr	r2, [sp, #16]
 800a390:	b9d8      	cbnz	r0, 800a3ca <_svfiprintf_r+0xe6>
 800a392:	06d0      	lsls	r0, r2, #27
 800a394:	bf44      	itt	mi
 800a396:	2320      	movmi	r3, #32
 800a398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a39c:	0711      	lsls	r1, r2, #28
 800a39e:	bf44      	itt	mi
 800a3a0:	232b      	movmi	r3, #43	; 0x2b
 800a3a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a3a6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a3ac:	d015      	beq.n	800a3da <_svfiprintf_r+0xf6>
 800a3ae:	4654      	mov	r4, sl
 800a3b0:	2000      	movs	r0, #0
 800a3b2:	f04f 0c0a 	mov.w	ip, #10
 800a3b6:	9a07      	ldr	r2, [sp, #28]
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3be:	3b30      	subs	r3, #48	; 0x30
 800a3c0:	2b09      	cmp	r3, #9
 800a3c2:	d94e      	bls.n	800a462 <_svfiprintf_r+0x17e>
 800a3c4:	b1b0      	cbz	r0, 800a3f4 <_svfiprintf_r+0x110>
 800a3c6:	9207      	str	r2, [sp, #28]
 800a3c8:	e014      	b.n	800a3f4 <_svfiprintf_r+0x110>
 800a3ca:	eba0 0308 	sub.w	r3, r0, r8
 800a3ce:	fa09 f303 	lsl.w	r3, r9, r3
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	46a2      	mov	sl, r4
 800a3d6:	9304      	str	r3, [sp, #16]
 800a3d8:	e7d2      	b.n	800a380 <_svfiprintf_r+0x9c>
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	1d19      	adds	r1, r3, #4
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	9103      	str	r1, [sp, #12]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfbb      	ittet	lt
 800a3e6:	425b      	neglt	r3, r3
 800a3e8:	f042 0202 	orrlt.w	r2, r2, #2
 800a3ec:	9307      	strge	r3, [sp, #28]
 800a3ee:	9307      	strlt	r3, [sp, #28]
 800a3f0:	bfb8      	it	lt
 800a3f2:	9204      	strlt	r2, [sp, #16]
 800a3f4:	7823      	ldrb	r3, [r4, #0]
 800a3f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a3f8:	d10c      	bne.n	800a414 <_svfiprintf_r+0x130>
 800a3fa:	7863      	ldrb	r3, [r4, #1]
 800a3fc:	2b2a      	cmp	r3, #42	; 0x2a
 800a3fe:	d135      	bne.n	800a46c <_svfiprintf_r+0x188>
 800a400:	9b03      	ldr	r3, [sp, #12]
 800a402:	3402      	adds	r4, #2
 800a404:	1d1a      	adds	r2, r3, #4
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	9203      	str	r2, [sp, #12]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	bfb8      	it	lt
 800a40e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a412:	9305      	str	r3, [sp, #20]
 800a414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a4e0 <_svfiprintf_r+0x1fc>
 800a418:	2203      	movs	r2, #3
 800a41a:	4650      	mov	r0, sl
 800a41c:	7821      	ldrb	r1, [r4, #0]
 800a41e:	f7ff f97d 	bl	800971c <memchr>
 800a422:	b140      	cbz	r0, 800a436 <_svfiprintf_r+0x152>
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	eba0 000a 	sub.w	r0, r0, sl
 800a42a:	fa03 f000 	lsl.w	r0, r3, r0
 800a42e:	9b04      	ldr	r3, [sp, #16]
 800a430:	3401      	adds	r4, #1
 800a432:	4303      	orrs	r3, r0
 800a434:	9304      	str	r3, [sp, #16]
 800a436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a43a:	2206      	movs	r2, #6
 800a43c:	4825      	ldr	r0, [pc, #148]	; (800a4d4 <_svfiprintf_r+0x1f0>)
 800a43e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a442:	f7ff f96b 	bl	800971c <memchr>
 800a446:	2800      	cmp	r0, #0
 800a448:	d038      	beq.n	800a4bc <_svfiprintf_r+0x1d8>
 800a44a:	4b23      	ldr	r3, [pc, #140]	; (800a4d8 <_svfiprintf_r+0x1f4>)
 800a44c:	bb1b      	cbnz	r3, 800a496 <_svfiprintf_r+0x1b2>
 800a44e:	9b03      	ldr	r3, [sp, #12]
 800a450:	3307      	adds	r3, #7
 800a452:	f023 0307 	bic.w	r3, r3, #7
 800a456:	3308      	adds	r3, #8
 800a458:	9303      	str	r3, [sp, #12]
 800a45a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a45c:	4433      	add	r3, r6
 800a45e:	9309      	str	r3, [sp, #36]	; 0x24
 800a460:	e767      	b.n	800a332 <_svfiprintf_r+0x4e>
 800a462:	460c      	mov	r4, r1
 800a464:	2001      	movs	r0, #1
 800a466:	fb0c 3202 	mla	r2, ip, r2, r3
 800a46a:	e7a5      	b.n	800a3b8 <_svfiprintf_r+0xd4>
 800a46c:	2300      	movs	r3, #0
 800a46e:	f04f 0c0a 	mov.w	ip, #10
 800a472:	4619      	mov	r1, r3
 800a474:	3401      	adds	r4, #1
 800a476:	9305      	str	r3, [sp, #20]
 800a478:	4620      	mov	r0, r4
 800a47a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a47e:	3a30      	subs	r2, #48	; 0x30
 800a480:	2a09      	cmp	r2, #9
 800a482:	d903      	bls.n	800a48c <_svfiprintf_r+0x1a8>
 800a484:	2b00      	cmp	r3, #0
 800a486:	d0c5      	beq.n	800a414 <_svfiprintf_r+0x130>
 800a488:	9105      	str	r1, [sp, #20]
 800a48a:	e7c3      	b.n	800a414 <_svfiprintf_r+0x130>
 800a48c:	4604      	mov	r4, r0
 800a48e:	2301      	movs	r3, #1
 800a490:	fb0c 2101 	mla	r1, ip, r1, r2
 800a494:	e7f0      	b.n	800a478 <_svfiprintf_r+0x194>
 800a496:	ab03      	add	r3, sp, #12
 800a498:	9300      	str	r3, [sp, #0]
 800a49a:	462a      	mov	r2, r5
 800a49c:	4638      	mov	r0, r7
 800a49e:	4b0f      	ldr	r3, [pc, #60]	; (800a4dc <_svfiprintf_r+0x1f8>)
 800a4a0:	a904      	add	r1, sp, #16
 800a4a2:	f7fc fd21 	bl	8006ee8 <_printf_float>
 800a4a6:	1c42      	adds	r2, r0, #1
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	d1d6      	bne.n	800a45a <_svfiprintf_r+0x176>
 800a4ac:	89ab      	ldrh	r3, [r5, #12]
 800a4ae:	065b      	lsls	r3, r3, #25
 800a4b0:	f53f af2c 	bmi.w	800a30c <_svfiprintf_r+0x28>
 800a4b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b6:	b01d      	add	sp, #116	; 0x74
 800a4b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4bc:	ab03      	add	r3, sp, #12
 800a4be:	9300      	str	r3, [sp, #0]
 800a4c0:	462a      	mov	r2, r5
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	4b05      	ldr	r3, [pc, #20]	; (800a4dc <_svfiprintf_r+0x1f8>)
 800a4c6:	a904      	add	r1, sp, #16
 800a4c8:	f7fc ffaa 	bl	8007420 <_printf_i>
 800a4cc:	e7eb      	b.n	800a4a6 <_svfiprintf_r+0x1c2>
 800a4ce:	bf00      	nop
 800a4d0:	0800b5c4 	.word	0x0800b5c4
 800a4d4:	0800b5ce 	.word	0x0800b5ce
 800a4d8:	08006ee9 	.word	0x08006ee9
 800a4dc:	0800a22d 	.word	0x0800a22d
 800a4e0:	0800b5ca 	.word	0x0800b5ca

0800a4e4 <nan>:
 800a4e4:	2000      	movs	r0, #0
 800a4e6:	4901      	ldr	r1, [pc, #4]	; (800a4ec <nan+0x8>)
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop
 800a4ec:	7ff80000 	.word	0x7ff80000

0800a4f0 <_sbrk_r>:
 800a4f0:	b538      	push	{r3, r4, r5, lr}
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4d05      	ldr	r5, [pc, #20]	; (800a50c <_sbrk_r+0x1c>)
 800a4f6:	4604      	mov	r4, r0
 800a4f8:	4608      	mov	r0, r1
 800a4fa:	602b      	str	r3, [r5, #0]
 800a4fc:	f7f9 f86c 	bl	80035d8 <_sbrk>
 800a500:	1c43      	adds	r3, r0, #1
 800a502:	d102      	bne.n	800a50a <_sbrk_r+0x1a>
 800a504:	682b      	ldr	r3, [r5, #0]
 800a506:	b103      	cbz	r3, 800a50a <_sbrk_r+0x1a>
 800a508:	6023      	str	r3, [r4, #0]
 800a50a:	bd38      	pop	{r3, r4, r5, pc}
 800a50c:	20001428 	.word	0x20001428

0800a510 <__ascii_wctomb>:
 800a510:	4603      	mov	r3, r0
 800a512:	4608      	mov	r0, r1
 800a514:	b141      	cbz	r1, 800a528 <__ascii_wctomb+0x18>
 800a516:	2aff      	cmp	r2, #255	; 0xff
 800a518:	d904      	bls.n	800a524 <__ascii_wctomb+0x14>
 800a51a:	228a      	movs	r2, #138	; 0x8a
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	4770      	bx	lr
 800a524:	2001      	movs	r0, #1
 800a526:	700a      	strb	r2, [r1, #0]
 800a528:	4770      	bx	lr
	...

0800a52c <__assert_func>:
 800a52c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a52e:	4614      	mov	r4, r2
 800a530:	461a      	mov	r2, r3
 800a532:	4b09      	ldr	r3, [pc, #36]	; (800a558 <__assert_func+0x2c>)
 800a534:	4605      	mov	r5, r0
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68d8      	ldr	r0, [r3, #12]
 800a53a:	b14c      	cbz	r4, 800a550 <__assert_func+0x24>
 800a53c:	4b07      	ldr	r3, [pc, #28]	; (800a55c <__assert_func+0x30>)
 800a53e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a542:	9100      	str	r1, [sp, #0]
 800a544:	462b      	mov	r3, r5
 800a546:	4906      	ldr	r1, [pc, #24]	; (800a560 <__assert_func+0x34>)
 800a548:	f000 f80e 	bl	800a568 <fiprintf>
 800a54c:	f000 fa82 	bl	800aa54 <abort>
 800a550:	4b04      	ldr	r3, [pc, #16]	; (800a564 <__assert_func+0x38>)
 800a552:	461c      	mov	r4, r3
 800a554:	e7f3      	b.n	800a53e <__assert_func+0x12>
 800a556:	bf00      	nop
 800a558:	20000018 	.word	0x20000018
 800a55c:	0800b5d5 	.word	0x0800b5d5
 800a560:	0800b5e2 	.word	0x0800b5e2
 800a564:	0800b610 	.word	0x0800b610

0800a568 <fiprintf>:
 800a568:	b40e      	push	{r1, r2, r3}
 800a56a:	b503      	push	{r0, r1, lr}
 800a56c:	4601      	mov	r1, r0
 800a56e:	ab03      	add	r3, sp, #12
 800a570:	4805      	ldr	r0, [pc, #20]	; (800a588 <fiprintf+0x20>)
 800a572:	f853 2b04 	ldr.w	r2, [r3], #4
 800a576:	6800      	ldr	r0, [r0, #0]
 800a578:	9301      	str	r3, [sp, #4]
 800a57a:	f000 f87b 	bl	800a674 <_vfiprintf_r>
 800a57e:	b002      	add	sp, #8
 800a580:	f85d eb04 	ldr.w	lr, [sp], #4
 800a584:	b003      	add	sp, #12
 800a586:	4770      	bx	lr
 800a588:	20000018 	.word	0x20000018

0800a58c <memmove>:
 800a58c:	4288      	cmp	r0, r1
 800a58e:	b510      	push	{r4, lr}
 800a590:	eb01 0402 	add.w	r4, r1, r2
 800a594:	d902      	bls.n	800a59c <memmove+0x10>
 800a596:	4284      	cmp	r4, r0
 800a598:	4623      	mov	r3, r4
 800a59a:	d807      	bhi.n	800a5ac <memmove+0x20>
 800a59c:	1e43      	subs	r3, r0, #1
 800a59e:	42a1      	cmp	r1, r4
 800a5a0:	d008      	beq.n	800a5b4 <memmove+0x28>
 800a5a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5aa:	e7f8      	b.n	800a59e <memmove+0x12>
 800a5ac:	4601      	mov	r1, r0
 800a5ae:	4402      	add	r2, r0
 800a5b0:	428a      	cmp	r2, r1
 800a5b2:	d100      	bne.n	800a5b6 <memmove+0x2a>
 800a5b4:	bd10      	pop	{r4, pc}
 800a5b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5be:	e7f7      	b.n	800a5b0 <memmove+0x24>

0800a5c0 <__malloc_lock>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__malloc_lock+0x8>)
 800a5c2:	f000 bc07 	b.w	800add4 <__retarget_lock_acquire_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	20001430 	.word	0x20001430

0800a5cc <__malloc_unlock>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__malloc_unlock+0x8>)
 800a5ce:	f000 bc02 	b.w	800add6 <__retarget_lock_release_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	20001430 	.word	0x20001430

0800a5d8 <_realloc_r>:
 800a5d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5da:	4607      	mov	r7, r0
 800a5dc:	4614      	mov	r4, r2
 800a5de:	460e      	mov	r6, r1
 800a5e0:	b921      	cbnz	r1, 800a5ec <_realloc_r+0x14>
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5e8:	f7ff bdc6 	b.w	800a178 <_malloc_r>
 800a5ec:	b922      	cbnz	r2, 800a5f8 <_realloc_r+0x20>
 800a5ee:	f7ff fd77 	bl	800a0e0 <_free_r>
 800a5f2:	4625      	mov	r5, r4
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5f8:	f000 fc52 	bl	800aea0 <_malloc_usable_size_r>
 800a5fc:	42a0      	cmp	r0, r4
 800a5fe:	d20f      	bcs.n	800a620 <_realloc_r+0x48>
 800a600:	4621      	mov	r1, r4
 800a602:	4638      	mov	r0, r7
 800a604:	f7ff fdb8 	bl	800a178 <_malloc_r>
 800a608:	4605      	mov	r5, r0
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d0f2      	beq.n	800a5f4 <_realloc_r+0x1c>
 800a60e:	4631      	mov	r1, r6
 800a610:	4622      	mov	r2, r4
 800a612:	f7ff f891 	bl	8009738 <memcpy>
 800a616:	4631      	mov	r1, r6
 800a618:	4638      	mov	r0, r7
 800a61a:	f7ff fd61 	bl	800a0e0 <_free_r>
 800a61e:	e7e9      	b.n	800a5f4 <_realloc_r+0x1c>
 800a620:	4635      	mov	r5, r6
 800a622:	e7e7      	b.n	800a5f4 <_realloc_r+0x1c>

0800a624 <__sfputc_r>:
 800a624:	6893      	ldr	r3, [r2, #8]
 800a626:	b410      	push	{r4}
 800a628:	3b01      	subs	r3, #1
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	6093      	str	r3, [r2, #8]
 800a62e:	da07      	bge.n	800a640 <__sfputc_r+0x1c>
 800a630:	6994      	ldr	r4, [r2, #24]
 800a632:	42a3      	cmp	r3, r4
 800a634:	db01      	blt.n	800a63a <__sfputc_r+0x16>
 800a636:	290a      	cmp	r1, #10
 800a638:	d102      	bne.n	800a640 <__sfputc_r+0x1c>
 800a63a:	bc10      	pop	{r4}
 800a63c:	f000 b94a 	b.w	800a8d4 <__swbuf_r>
 800a640:	6813      	ldr	r3, [r2, #0]
 800a642:	1c58      	adds	r0, r3, #1
 800a644:	6010      	str	r0, [r2, #0]
 800a646:	7019      	strb	r1, [r3, #0]
 800a648:	4608      	mov	r0, r1
 800a64a:	bc10      	pop	{r4}
 800a64c:	4770      	bx	lr

0800a64e <__sfputs_r>:
 800a64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a650:	4606      	mov	r6, r0
 800a652:	460f      	mov	r7, r1
 800a654:	4614      	mov	r4, r2
 800a656:	18d5      	adds	r5, r2, r3
 800a658:	42ac      	cmp	r4, r5
 800a65a:	d101      	bne.n	800a660 <__sfputs_r+0x12>
 800a65c:	2000      	movs	r0, #0
 800a65e:	e007      	b.n	800a670 <__sfputs_r+0x22>
 800a660:	463a      	mov	r2, r7
 800a662:	4630      	mov	r0, r6
 800a664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a668:	f7ff ffdc 	bl	800a624 <__sfputc_r>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d1f3      	bne.n	800a658 <__sfputs_r+0xa>
 800a670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a674 <_vfiprintf_r>:
 800a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a678:	460d      	mov	r5, r1
 800a67a:	4614      	mov	r4, r2
 800a67c:	4698      	mov	r8, r3
 800a67e:	4606      	mov	r6, r0
 800a680:	b09d      	sub	sp, #116	; 0x74
 800a682:	b118      	cbz	r0, 800a68c <_vfiprintf_r+0x18>
 800a684:	6983      	ldr	r3, [r0, #24]
 800a686:	b90b      	cbnz	r3, 800a68c <_vfiprintf_r+0x18>
 800a688:	f000 fb06 	bl	800ac98 <__sinit>
 800a68c:	4b89      	ldr	r3, [pc, #548]	; (800a8b4 <_vfiprintf_r+0x240>)
 800a68e:	429d      	cmp	r5, r3
 800a690:	d11b      	bne.n	800a6ca <_vfiprintf_r+0x56>
 800a692:	6875      	ldr	r5, [r6, #4]
 800a694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a696:	07d9      	lsls	r1, r3, #31
 800a698:	d405      	bmi.n	800a6a6 <_vfiprintf_r+0x32>
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	059a      	lsls	r2, r3, #22
 800a69e:	d402      	bmi.n	800a6a6 <_vfiprintf_r+0x32>
 800a6a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a2:	f000 fb97 	bl	800add4 <__retarget_lock_acquire_recursive>
 800a6a6:	89ab      	ldrh	r3, [r5, #12]
 800a6a8:	071b      	lsls	r3, r3, #28
 800a6aa:	d501      	bpl.n	800a6b0 <_vfiprintf_r+0x3c>
 800a6ac:	692b      	ldr	r3, [r5, #16]
 800a6ae:	b9eb      	cbnz	r3, 800a6ec <_vfiprintf_r+0x78>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f000 f960 	bl	800a978 <__swsetup_r>
 800a6b8:	b1c0      	cbz	r0, 800a6ec <_vfiprintf_r+0x78>
 800a6ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6bc:	07dc      	lsls	r4, r3, #31
 800a6be:	d50e      	bpl.n	800a6de <_vfiprintf_r+0x6a>
 800a6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c4:	b01d      	add	sp, #116	; 0x74
 800a6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ca:	4b7b      	ldr	r3, [pc, #492]	; (800a8b8 <_vfiprintf_r+0x244>)
 800a6cc:	429d      	cmp	r5, r3
 800a6ce:	d101      	bne.n	800a6d4 <_vfiprintf_r+0x60>
 800a6d0:	68b5      	ldr	r5, [r6, #8]
 800a6d2:	e7df      	b.n	800a694 <_vfiprintf_r+0x20>
 800a6d4:	4b79      	ldr	r3, [pc, #484]	; (800a8bc <_vfiprintf_r+0x248>)
 800a6d6:	429d      	cmp	r5, r3
 800a6d8:	bf08      	it	eq
 800a6da:	68f5      	ldreq	r5, [r6, #12]
 800a6dc:	e7da      	b.n	800a694 <_vfiprintf_r+0x20>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	0598      	lsls	r0, r3, #22
 800a6e2:	d4ed      	bmi.n	800a6c0 <_vfiprintf_r+0x4c>
 800a6e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6e6:	f000 fb76 	bl	800add6 <__retarget_lock_release_recursive>
 800a6ea:	e7e9      	b.n	800a6c0 <_vfiprintf_r+0x4c>
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f0:	2320      	movs	r3, #32
 800a6f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6f6:	2330      	movs	r3, #48	; 0x30
 800a6f8:	f04f 0901 	mov.w	r9, #1
 800a6fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a700:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a8c0 <_vfiprintf_r+0x24c>
 800a704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a708:	4623      	mov	r3, r4
 800a70a:	469a      	mov	sl, r3
 800a70c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a710:	b10a      	cbz	r2, 800a716 <_vfiprintf_r+0xa2>
 800a712:	2a25      	cmp	r2, #37	; 0x25
 800a714:	d1f9      	bne.n	800a70a <_vfiprintf_r+0x96>
 800a716:	ebba 0b04 	subs.w	fp, sl, r4
 800a71a:	d00b      	beq.n	800a734 <_vfiprintf_r+0xc0>
 800a71c:	465b      	mov	r3, fp
 800a71e:	4622      	mov	r2, r4
 800a720:	4629      	mov	r1, r5
 800a722:	4630      	mov	r0, r6
 800a724:	f7ff ff93 	bl	800a64e <__sfputs_r>
 800a728:	3001      	adds	r0, #1
 800a72a:	f000 80aa 	beq.w	800a882 <_vfiprintf_r+0x20e>
 800a72e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a730:	445a      	add	r2, fp
 800a732:	9209      	str	r2, [sp, #36]	; 0x24
 800a734:	f89a 3000 	ldrb.w	r3, [sl]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	f000 80a2 	beq.w	800a882 <_vfiprintf_r+0x20e>
 800a73e:	2300      	movs	r3, #0
 800a740:	f04f 32ff 	mov.w	r2, #4294967295
 800a744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a748:	f10a 0a01 	add.w	sl, sl, #1
 800a74c:	9304      	str	r3, [sp, #16]
 800a74e:	9307      	str	r3, [sp, #28]
 800a750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a754:	931a      	str	r3, [sp, #104]	; 0x68
 800a756:	4654      	mov	r4, sl
 800a758:	2205      	movs	r2, #5
 800a75a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75e:	4858      	ldr	r0, [pc, #352]	; (800a8c0 <_vfiprintf_r+0x24c>)
 800a760:	f7fe ffdc 	bl	800971c <memchr>
 800a764:	9a04      	ldr	r2, [sp, #16]
 800a766:	b9d8      	cbnz	r0, 800a7a0 <_vfiprintf_r+0x12c>
 800a768:	06d1      	lsls	r1, r2, #27
 800a76a:	bf44      	itt	mi
 800a76c:	2320      	movmi	r3, #32
 800a76e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a772:	0713      	lsls	r3, r2, #28
 800a774:	bf44      	itt	mi
 800a776:	232b      	movmi	r3, #43	; 0x2b
 800a778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a77c:	f89a 3000 	ldrb.w	r3, [sl]
 800a780:	2b2a      	cmp	r3, #42	; 0x2a
 800a782:	d015      	beq.n	800a7b0 <_vfiprintf_r+0x13c>
 800a784:	4654      	mov	r4, sl
 800a786:	2000      	movs	r0, #0
 800a788:	f04f 0c0a 	mov.w	ip, #10
 800a78c:	9a07      	ldr	r2, [sp, #28]
 800a78e:	4621      	mov	r1, r4
 800a790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a794:	3b30      	subs	r3, #48	; 0x30
 800a796:	2b09      	cmp	r3, #9
 800a798:	d94e      	bls.n	800a838 <_vfiprintf_r+0x1c4>
 800a79a:	b1b0      	cbz	r0, 800a7ca <_vfiprintf_r+0x156>
 800a79c:	9207      	str	r2, [sp, #28]
 800a79e:	e014      	b.n	800a7ca <_vfiprintf_r+0x156>
 800a7a0:	eba0 0308 	sub.w	r3, r0, r8
 800a7a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	46a2      	mov	sl, r4
 800a7ac:	9304      	str	r3, [sp, #16]
 800a7ae:	e7d2      	b.n	800a756 <_vfiprintf_r+0xe2>
 800a7b0:	9b03      	ldr	r3, [sp, #12]
 800a7b2:	1d19      	adds	r1, r3, #4
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	9103      	str	r1, [sp, #12]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bfbb      	ittet	lt
 800a7bc:	425b      	neglt	r3, r3
 800a7be:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c2:	9307      	strge	r3, [sp, #28]
 800a7c4:	9307      	strlt	r3, [sp, #28]
 800a7c6:	bfb8      	it	lt
 800a7c8:	9204      	strlt	r2, [sp, #16]
 800a7ca:	7823      	ldrb	r3, [r4, #0]
 800a7cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ce:	d10c      	bne.n	800a7ea <_vfiprintf_r+0x176>
 800a7d0:	7863      	ldrb	r3, [r4, #1]
 800a7d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d4:	d135      	bne.n	800a842 <_vfiprintf_r+0x1ce>
 800a7d6:	9b03      	ldr	r3, [sp, #12]
 800a7d8:	3402      	adds	r4, #2
 800a7da:	1d1a      	adds	r2, r3, #4
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	9203      	str	r2, [sp, #12]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	bfb8      	it	lt
 800a7e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7e8:	9305      	str	r3, [sp, #20]
 800a7ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8d0 <_vfiprintf_r+0x25c>
 800a7ee:	2203      	movs	r2, #3
 800a7f0:	4650      	mov	r0, sl
 800a7f2:	7821      	ldrb	r1, [r4, #0]
 800a7f4:	f7fe ff92 	bl	800971c <memchr>
 800a7f8:	b140      	cbz	r0, 800a80c <_vfiprintf_r+0x198>
 800a7fa:	2340      	movs	r3, #64	; 0x40
 800a7fc:	eba0 000a 	sub.w	r0, r0, sl
 800a800:	fa03 f000 	lsl.w	r0, r3, r0
 800a804:	9b04      	ldr	r3, [sp, #16]
 800a806:	3401      	adds	r4, #1
 800a808:	4303      	orrs	r3, r0
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a810:	2206      	movs	r2, #6
 800a812:	482c      	ldr	r0, [pc, #176]	; (800a8c4 <_vfiprintf_r+0x250>)
 800a814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a818:	f7fe ff80 	bl	800971c <memchr>
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d03f      	beq.n	800a8a0 <_vfiprintf_r+0x22c>
 800a820:	4b29      	ldr	r3, [pc, #164]	; (800a8c8 <_vfiprintf_r+0x254>)
 800a822:	bb1b      	cbnz	r3, 800a86c <_vfiprintf_r+0x1f8>
 800a824:	9b03      	ldr	r3, [sp, #12]
 800a826:	3307      	adds	r3, #7
 800a828:	f023 0307 	bic.w	r3, r3, #7
 800a82c:	3308      	adds	r3, #8
 800a82e:	9303      	str	r3, [sp, #12]
 800a830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a832:	443b      	add	r3, r7
 800a834:	9309      	str	r3, [sp, #36]	; 0x24
 800a836:	e767      	b.n	800a708 <_vfiprintf_r+0x94>
 800a838:	460c      	mov	r4, r1
 800a83a:	2001      	movs	r0, #1
 800a83c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a840:	e7a5      	b.n	800a78e <_vfiprintf_r+0x11a>
 800a842:	2300      	movs	r3, #0
 800a844:	f04f 0c0a 	mov.w	ip, #10
 800a848:	4619      	mov	r1, r3
 800a84a:	3401      	adds	r4, #1
 800a84c:	9305      	str	r3, [sp, #20]
 800a84e:	4620      	mov	r0, r4
 800a850:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a854:	3a30      	subs	r2, #48	; 0x30
 800a856:	2a09      	cmp	r2, #9
 800a858:	d903      	bls.n	800a862 <_vfiprintf_r+0x1ee>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d0c5      	beq.n	800a7ea <_vfiprintf_r+0x176>
 800a85e:	9105      	str	r1, [sp, #20]
 800a860:	e7c3      	b.n	800a7ea <_vfiprintf_r+0x176>
 800a862:	4604      	mov	r4, r0
 800a864:	2301      	movs	r3, #1
 800a866:	fb0c 2101 	mla	r1, ip, r1, r2
 800a86a:	e7f0      	b.n	800a84e <_vfiprintf_r+0x1da>
 800a86c:	ab03      	add	r3, sp, #12
 800a86e:	9300      	str	r3, [sp, #0]
 800a870:	462a      	mov	r2, r5
 800a872:	4630      	mov	r0, r6
 800a874:	4b15      	ldr	r3, [pc, #84]	; (800a8cc <_vfiprintf_r+0x258>)
 800a876:	a904      	add	r1, sp, #16
 800a878:	f7fc fb36 	bl	8006ee8 <_printf_float>
 800a87c:	4607      	mov	r7, r0
 800a87e:	1c78      	adds	r0, r7, #1
 800a880:	d1d6      	bne.n	800a830 <_vfiprintf_r+0x1bc>
 800a882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a884:	07d9      	lsls	r1, r3, #31
 800a886:	d405      	bmi.n	800a894 <_vfiprintf_r+0x220>
 800a888:	89ab      	ldrh	r3, [r5, #12]
 800a88a:	059a      	lsls	r2, r3, #22
 800a88c:	d402      	bmi.n	800a894 <_vfiprintf_r+0x220>
 800a88e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a890:	f000 faa1 	bl	800add6 <__retarget_lock_release_recursive>
 800a894:	89ab      	ldrh	r3, [r5, #12]
 800a896:	065b      	lsls	r3, r3, #25
 800a898:	f53f af12 	bmi.w	800a6c0 <_vfiprintf_r+0x4c>
 800a89c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a89e:	e711      	b.n	800a6c4 <_vfiprintf_r+0x50>
 800a8a0:	ab03      	add	r3, sp, #12
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	462a      	mov	r2, r5
 800a8a6:	4630      	mov	r0, r6
 800a8a8:	4b08      	ldr	r3, [pc, #32]	; (800a8cc <_vfiprintf_r+0x258>)
 800a8aa:	a904      	add	r1, sp, #16
 800a8ac:	f7fc fdb8 	bl	8007420 <_printf_i>
 800a8b0:	e7e4      	b.n	800a87c <_vfiprintf_r+0x208>
 800a8b2:	bf00      	nop
 800a8b4:	0800b734 	.word	0x0800b734
 800a8b8:	0800b754 	.word	0x0800b754
 800a8bc:	0800b714 	.word	0x0800b714
 800a8c0:	0800b5c4 	.word	0x0800b5c4
 800a8c4:	0800b5ce 	.word	0x0800b5ce
 800a8c8:	08006ee9 	.word	0x08006ee9
 800a8cc:	0800a64f 	.word	0x0800a64f
 800a8d0:	0800b5ca 	.word	0x0800b5ca

0800a8d4 <__swbuf_r>:
 800a8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	4614      	mov	r4, r2
 800a8da:	4605      	mov	r5, r0
 800a8dc:	b118      	cbz	r0, 800a8e6 <__swbuf_r+0x12>
 800a8de:	6983      	ldr	r3, [r0, #24]
 800a8e0:	b90b      	cbnz	r3, 800a8e6 <__swbuf_r+0x12>
 800a8e2:	f000 f9d9 	bl	800ac98 <__sinit>
 800a8e6:	4b21      	ldr	r3, [pc, #132]	; (800a96c <__swbuf_r+0x98>)
 800a8e8:	429c      	cmp	r4, r3
 800a8ea:	d12b      	bne.n	800a944 <__swbuf_r+0x70>
 800a8ec:	686c      	ldr	r4, [r5, #4]
 800a8ee:	69a3      	ldr	r3, [r4, #24]
 800a8f0:	60a3      	str	r3, [r4, #8]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	071a      	lsls	r2, r3, #28
 800a8f6:	d52f      	bpl.n	800a958 <__swbuf_r+0x84>
 800a8f8:	6923      	ldr	r3, [r4, #16]
 800a8fa:	b36b      	cbz	r3, 800a958 <__swbuf_r+0x84>
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	6820      	ldr	r0, [r4, #0]
 800a900:	b2f6      	uxtb	r6, r6
 800a902:	1ac0      	subs	r0, r0, r3
 800a904:	6963      	ldr	r3, [r4, #20]
 800a906:	4637      	mov	r7, r6
 800a908:	4283      	cmp	r3, r0
 800a90a:	dc04      	bgt.n	800a916 <__swbuf_r+0x42>
 800a90c:	4621      	mov	r1, r4
 800a90e:	4628      	mov	r0, r5
 800a910:	f000 f92e 	bl	800ab70 <_fflush_r>
 800a914:	bb30      	cbnz	r0, 800a964 <__swbuf_r+0x90>
 800a916:	68a3      	ldr	r3, [r4, #8]
 800a918:	3001      	adds	r0, #1
 800a91a:	3b01      	subs	r3, #1
 800a91c:	60a3      	str	r3, [r4, #8]
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	1c5a      	adds	r2, r3, #1
 800a922:	6022      	str	r2, [r4, #0]
 800a924:	701e      	strb	r6, [r3, #0]
 800a926:	6963      	ldr	r3, [r4, #20]
 800a928:	4283      	cmp	r3, r0
 800a92a:	d004      	beq.n	800a936 <__swbuf_r+0x62>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	07db      	lsls	r3, r3, #31
 800a930:	d506      	bpl.n	800a940 <__swbuf_r+0x6c>
 800a932:	2e0a      	cmp	r6, #10
 800a934:	d104      	bne.n	800a940 <__swbuf_r+0x6c>
 800a936:	4621      	mov	r1, r4
 800a938:	4628      	mov	r0, r5
 800a93a:	f000 f919 	bl	800ab70 <_fflush_r>
 800a93e:	b988      	cbnz	r0, 800a964 <__swbuf_r+0x90>
 800a940:	4638      	mov	r0, r7
 800a942:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a944:	4b0a      	ldr	r3, [pc, #40]	; (800a970 <__swbuf_r+0x9c>)
 800a946:	429c      	cmp	r4, r3
 800a948:	d101      	bne.n	800a94e <__swbuf_r+0x7a>
 800a94a:	68ac      	ldr	r4, [r5, #8]
 800a94c:	e7cf      	b.n	800a8ee <__swbuf_r+0x1a>
 800a94e:	4b09      	ldr	r3, [pc, #36]	; (800a974 <__swbuf_r+0xa0>)
 800a950:	429c      	cmp	r4, r3
 800a952:	bf08      	it	eq
 800a954:	68ec      	ldreq	r4, [r5, #12]
 800a956:	e7ca      	b.n	800a8ee <__swbuf_r+0x1a>
 800a958:	4621      	mov	r1, r4
 800a95a:	4628      	mov	r0, r5
 800a95c:	f000 f80c 	bl	800a978 <__swsetup_r>
 800a960:	2800      	cmp	r0, #0
 800a962:	d0cb      	beq.n	800a8fc <__swbuf_r+0x28>
 800a964:	f04f 37ff 	mov.w	r7, #4294967295
 800a968:	e7ea      	b.n	800a940 <__swbuf_r+0x6c>
 800a96a:	bf00      	nop
 800a96c:	0800b734 	.word	0x0800b734
 800a970:	0800b754 	.word	0x0800b754
 800a974:	0800b714 	.word	0x0800b714

0800a978 <__swsetup_r>:
 800a978:	4b32      	ldr	r3, [pc, #200]	; (800aa44 <__swsetup_r+0xcc>)
 800a97a:	b570      	push	{r4, r5, r6, lr}
 800a97c:	681d      	ldr	r5, [r3, #0]
 800a97e:	4606      	mov	r6, r0
 800a980:	460c      	mov	r4, r1
 800a982:	b125      	cbz	r5, 800a98e <__swsetup_r+0x16>
 800a984:	69ab      	ldr	r3, [r5, #24]
 800a986:	b913      	cbnz	r3, 800a98e <__swsetup_r+0x16>
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 f985 	bl	800ac98 <__sinit>
 800a98e:	4b2e      	ldr	r3, [pc, #184]	; (800aa48 <__swsetup_r+0xd0>)
 800a990:	429c      	cmp	r4, r3
 800a992:	d10f      	bne.n	800a9b4 <__swsetup_r+0x3c>
 800a994:	686c      	ldr	r4, [r5, #4]
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a99c:	0719      	lsls	r1, r3, #28
 800a99e:	d42c      	bmi.n	800a9fa <__swsetup_r+0x82>
 800a9a0:	06dd      	lsls	r5, r3, #27
 800a9a2:	d411      	bmi.n	800a9c8 <__swsetup_r+0x50>
 800a9a4:	2309      	movs	r3, #9
 800a9a6:	6033      	str	r3, [r6, #0]
 800a9a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b0:	81a3      	strh	r3, [r4, #12]
 800a9b2:	e03e      	b.n	800aa32 <__swsetup_r+0xba>
 800a9b4:	4b25      	ldr	r3, [pc, #148]	; (800aa4c <__swsetup_r+0xd4>)
 800a9b6:	429c      	cmp	r4, r3
 800a9b8:	d101      	bne.n	800a9be <__swsetup_r+0x46>
 800a9ba:	68ac      	ldr	r4, [r5, #8]
 800a9bc:	e7eb      	b.n	800a996 <__swsetup_r+0x1e>
 800a9be:	4b24      	ldr	r3, [pc, #144]	; (800aa50 <__swsetup_r+0xd8>)
 800a9c0:	429c      	cmp	r4, r3
 800a9c2:	bf08      	it	eq
 800a9c4:	68ec      	ldreq	r4, [r5, #12]
 800a9c6:	e7e6      	b.n	800a996 <__swsetup_r+0x1e>
 800a9c8:	0758      	lsls	r0, r3, #29
 800a9ca:	d512      	bpl.n	800a9f2 <__swsetup_r+0x7a>
 800a9cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9ce:	b141      	cbz	r1, 800a9e2 <__swsetup_r+0x6a>
 800a9d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9d4:	4299      	cmp	r1, r3
 800a9d6:	d002      	beq.n	800a9de <__swsetup_r+0x66>
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f7ff fb81 	bl	800a0e0 <_free_r>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a9e8:	81a3      	strh	r3, [r4, #12]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	6063      	str	r3, [r4, #4]
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	f043 0308 	orr.w	r3, r3, #8
 800a9f8:	81a3      	strh	r3, [r4, #12]
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	b94b      	cbnz	r3, 800aa12 <__swsetup_r+0x9a>
 800a9fe:	89a3      	ldrh	r3, [r4, #12]
 800aa00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa08:	d003      	beq.n	800aa12 <__swsetup_r+0x9a>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	f000 fa07 	bl	800ae20 <__smakebuf_r>
 800aa12:	89a0      	ldrh	r0, [r4, #12]
 800aa14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa18:	f010 0301 	ands.w	r3, r0, #1
 800aa1c:	d00a      	beq.n	800aa34 <__swsetup_r+0xbc>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	60a3      	str	r3, [r4, #8]
 800aa22:	6963      	ldr	r3, [r4, #20]
 800aa24:	425b      	negs	r3, r3
 800aa26:	61a3      	str	r3, [r4, #24]
 800aa28:	6923      	ldr	r3, [r4, #16]
 800aa2a:	b943      	cbnz	r3, 800aa3e <__swsetup_r+0xc6>
 800aa2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa30:	d1ba      	bne.n	800a9a8 <__swsetup_r+0x30>
 800aa32:	bd70      	pop	{r4, r5, r6, pc}
 800aa34:	0781      	lsls	r1, r0, #30
 800aa36:	bf58      	it	pl
 800aa38:	6963      	ldrpl	r3, [r4, #20]
 800aa3a:	60a3      	str	r3, [r4, #8]
 800aa3c:	e7f4      	b.n	800aa28 <__swsetup_r+0xb0>
 800aa3e:	2000      	movs	r0, #0
 800aa40:	e7f7      	b.n	800aa32 <__swsetup_r+0xba>
 800aa42:	bf00      	nop
 800aa44:	20000018 	.word	0x20000018
 800aa48:	0800b734 	.word	0x0800b734
 800aa4c:	0800b754 	.word	0x0800b754
 800aa50:	0800b714 	.word	0x0800b714

0800aa54 <abort>:
 800aa54:	2006      	movs	r0, #6
 800aa56:	b508      	push	{r3, lr}
 800aa58:	f000 fa52 	bl	800af00 <raise>
 800aa5c:	2001      	movs	r0, #1
 800aa5e:	f7f8 fd48 	bl	80034f2 <_exit>
	...

0800aa64 <__sflush_r>:
 800aa64:	898a      	ldrh	r2, [r1, #12]
 800aa66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	0710      	lsls	r0, r2, #28
 800aa6e:	460c      	mov	r4, r1
 800aa70:	d458      	bmi.n	800ab24 <__sflush_r+0xc0>
 800aa72:	684b      	ldr	r3, [r1, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	dc05      	bgt.n	800aa84 <__sflush_r+0x20>
 800aa78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	dc02      	bgt.n	800aa84 <__sflush_r+0x20>
 800aa7e:	2000      	movs	r0, #0
 800aa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	d0f9      	beq.n	800aa7e <__sflush_r+0x1a>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa90:	682f      	ldr	r7, [r5, #0]
 800aa92:	602b      	str	r3, [r5, #0]
 800aa94:	d032      	beq.n	800aafc <__sflush_r+0x98>
 800aa96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa98:	89a3      	ldrh	r3, [r4, #12]
 800aa9a:	075a      	lsls	r2, r3, #29
 800aa9c:	d505      	bpl.n	800aaaa <__sflush_r+0x46>
 800aa9e:	6863      	ldr	r3, [r4, #4]
 800aaa0:	1ac0      	subs	r0, r0, r3
 800aaa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaa4:	b10b      	cbz	r3, 800aaaa <__sflush_r+0x46>
 800aaa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aaa8:	1ac0      	subs	r0, r0, r3
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4602      	mov	r2, r0
 800aaae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aab0:	4628      	mov	r0, r5
 800aab2:	6a21      	ldr	r1, [r4, #32]
 800aab4:	47b0      	blx	r6
 800aab6:	1c43      	adds	r3, r0, #1
 800aab8:	89a3      	ldrh	r3, [r4, #12]
 800aaba:	d106      	bne.n	800aaca <__sflush_r+0x66>
 800aabc:	6829      	ldr	r1, [r5, #0]
 800aabe:	291d      	cmp	r1, #29
 800aac0:	d82c      	bhi.n	800ab1c <__sflush_r+0xb8>
 800aac2:	4a2a      	ldr	r2, [pc, #168]	; (800ab6c <__sflush_r+0x108>)
 800aac4:	40ca      	lsrs	r2, r1
 800aac6:	07d6      	lsls	r6, r2, #31
 800aac8:	d528      	bpl.n	800ab1c <__sflush_r+0xb8>
 800aaca:	2200      	movs	r2, #0
 800aacc:	6062      	str	r2, [r4, #4]
 800aace:	6922      	ldr	r2, [r4, #16]
 800aad0:	04d9      	lsls	r1, r3, #19
 800aad2:	6022      	str	r2, [r4, #0]
 800aad4:	d504      	bpl.n	800aae0 <__sflush_r+0x7c>
 800aad6:	1c42      	adds	r2, r0, #1
 800aad8:	d101      	bne.n	800aade <__sflush_r+0x7a>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	b903      	cbnz	r3, 800aae0 <__sflush_r+0x7c>
 800aade:	6560      	str	r0, [r4, #84]	; 0x54
 800aae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aae2:	602f      	str	r7, [r5, #0]
 800aae4:	2900      	cmp	r1, #0
 800aae6:	d0ca      	beq.n	800aa7e <__sflush_r+0x1a>
 800aae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aaec:	4299      	cmp	r1, r3
 800aaee:	d002      	beq.n	800aaf6 <__sflush_r+0x92>
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f7ff faf5 	bl	800a0e0 <_free_r>
 800aaf6:	2000      	movs	r0, #0
 800aaf8:	6360      	str	r0, [r4, #52]	; 0x34
 800aafa:	e7c1      	b.n	800aa80 <__sflush_r+0x1c>
 800aafc:	6a21      	ldr	r1, [r4, #32]
 800aafe:	2301      	movs	r3, #1
 800ab00:	4628      	mov	r0, r5
 800ab02:	47b0      	blx	r6
 800ab04:	1c41      	adds	r1, r0, #1
 800ab06:	d1c7      	bne.n	800aa98 <__sflush_r+0x34>
 800ab08:	682b      	ldr	r3, [r5, #0]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d0c4      	beq.n	800aa98 <__sflush_r+0x34>
 800ab0e:	2b1d      	cmp	r3, #29
 800ab10:	d001      	beq.n	800ab16 <__sflush_r+0xb2>
 800ab12:	2b16      	cmp	r3, #22
 800ab14:	d101      	bne.n	800ab1a <__sflush_r+0xb6>
 800ab16:	602f      	str	r7, [r5, #0]
 800ab18:	e7b1      	b.n	800aa7e <__sflush_r+0x1a>
 800ab1a:	89a3      	ldrh	r3, [r4, #12]
 800ab1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab20:	81a3      	strh	r3, [r4, #12]
 800ab22:	e7ad      	b.n	800aa80 <__sflush_r+0x1c>
 800ab24:	690f      	ldr	r7, [r1, #16]
 800ab26:	2f00      	cmp	r7, #0
 800ab28:	d0a9      	beq.n	800aa7e <__sflush_r+0x1a>
 800ab2a:	0793      	lsls	r3, r2, #30
 800ab2c:	bf18      	it	ne
 800ab2e:	2300      	movne	r3, #0
 800ab30:	680e      	ldr	r6, [r1, #0]
 800ab32:	bf08      	it	eq
 800ab34:	694b      	ldreq	r3, [r1, #20]
 800ab36:	eba6 0807 	sub.w	r8, r6, r7
 800ab3a:	600f      	str	r7, [r1, #0]
 800ab3c:	608b      	str	r3, [r1, #8]
 800ab3e:	f1b8 0f00 	cmp.w	r8, #0
 800ab42:	dd9c      	ble.n	800aa7e <__sflush_r+0x1a>
 800ab44:	4643      	mov	r3, r8
 800ab46:	463a      	mov	r2, r7
 800ab48:	4628      	mov	r0, r5
 800ab4a:	6a21      	ldr	r1, [r4, #32]
 800ab4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab4e:	47b0      	blx	r6
 800ab50:	2800      	cmp	r0, #0
 800ab52:	dc06      	bgt.n	800ab62 <__sflush_r+0xfe>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab5e:	81a3      	strh	r3, [r4, #12]
 800ab60:	e78e      	b.n	800aa80 <__sflush_r+0x1c>
 800ab62:	4407      	add	r7, r0
 800ab64:	eba8 0800 	sub.w	r8, r8, r0
 800ab68:	e7e9      	b.n	800ab3e <__sflush_r+0xda>
 800ab6a:	bf00      	nop
 800ab6c:	20400001 	.word	0x20400001

0800ab70 <_fflush_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	4605      	mov	r5, r0
 800ab76:	460c      	mov	r4, r1
 800ab78:	b913      	cbnz	r3, 800ab80 <_fflush_r+0x10>
 800ab7a:	2500      	movs	r5, #0
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	bd38      	pop	{r3, r4, r5, pc}
 800ab80:	b118      	cbz	r0, 800ab8a <_fflush_r+0x1a>
 800ab82:	6983      	ldr	r3, [r0, #24]
 800ab84:	b90b      	cbnz	r3, 800ab8a <_fflush_r+0x1a>
 800ab86:	f000 f887 	bl	800ac98 <__sinit>
 800ab8a:	4b14      	ldr	r3, [pc, #80]	; (800abdc <_fflush_r+0x6c>)
 800ab8c:	429c      	cmp	r4, r3
 800ab8e:	d11b      	bne.n	800abc8 <_fflush_r+0x58>
 800ab90:	686c      	ldr	r4, [r5, #4]
 800ab92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0ef      	beq.n	800ab7a <_fflush_r+0xa>
 800ab9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab9c:	07d0      	lsls	r0, r2, #31
 800ab9e:	d404      	bmi.n	800abaa <_fflush_r+0x3a>
 800aba0:	0599      	lsls	r1, r3, #22
 800aba2:	d402      	bmi.n	800abaa <_fflush_r+0x3a>
 800aba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aba6:	f000 f915 	bl	800add4 <__retarget_lock_acquire_recursive>
 800abaa:	4628      	mov	r0, r5
 800abac:	4621      	mov	r1, r4
 800abae:	f7ff ff59 	bl	800aa64 <__sflush_r>
 800abb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800abb4:	4605      	mov	r5, r0
 800abb6:	07da      	lsls	r2, r3, #31
 800abb8:	d4e0      	bmi.n	800ab7c <_fflush_r+0xc>
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	059b      	lsls	r3, r3, #22
 800abbe:	d4dd      	bmi.n	800ab7c <_fflush_r+0xc>
 800abc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abc2:	f000 f908 	bl	800add6 <__retarget_lock_release_recursive>
 800abc6:	e7d9      	b.n	800ab7c <_fflush_r+0xc>
 800abc8:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <_fflush_r+0x70>)
 800abca:	429c      	cmp	r4, r3
 800abcc:	d101      	bne.n	800abd2 <_fflush_r+0x62>
 800abce:	68ac      	ldr	r4, [r5, #8]
 800abd0:	e7df      	b.n	800ab92 <_fflush_r+0x22>
 800abd2:	4b04      	ldr	r3, [pc, #16]	; (800abe4 <_fflush_r+0x74>)
 800abd4:	429c      	cmp	r4, r3
 800abd6:	bf08      	it	eq
 800abd8:	68ec      	ldreq	r4, [r5, #12]
 800abda:	e7da      	b.n	800ab92 <_fflush_r+0x22>
 800abdc:	0800b734 	.word	0x0800b734
 800abe0:	0800b754 	.word	0x0800b754
 800abe4:	0800b714 	.word	0x0800b714

0800abe8 <std>:
 800abe8:	2300      	movs	r3, #0
 800abea:	b510      	push	{r4, lr}
 800abec:	4604      	mov	r4, r0
 800abee:	e9c0 3300 	strd	r3, r3, [r0]
 800abf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abf6:	6083      	str	r3, [r0, #8]
 800abf8:	8181      	strh	r1, [r0, #12]
 800abfa:	6643      	str	r3, [r0, #100]	; 0x64
 800abfc:	81c2      	strh	r2, [r0, #14]
 800abfe:	6183      	str	r3, [r0, #24]
 800ac00:	4619      	mov	r1, r3
 800ac02:	2208      	movs	r2, #8
 800ac04:	305c      	adds	r0, #92	; 0x5c
 800ac06:	f7fc f8c9 	bl	8006d9c <memset>
 800ac0a:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <std+0x38>)
 800ac0c:	6224      	str	r4, [r4, #32]
 800ac0e:	6263      	str	r3, [r4, #36]	; 0x24
 800ac10:	4b04      	ldr	r3, [pc, #16]	; (800ac24 <std+0x3c>)
 800ac12:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac14:	4b04      	ldr	r3, [pc, #16]	; (800ac28 <std+0x40>)
 800ac16:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac18:	4b04      	ldr	r3, [pc, #16]	; (800ac2c <std+0x44>)
 800ac1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800af39 	.word	0x0800af39
 800ac24:	0800af5b 	.word	0x0800af5b
 800ac28:	0800af93 	.word	0x0800af93
 800ac2c:	0800afb7 	.word	0x0800afb7

0800ac30 <_cleanup_r>:
 800ac30:	4901      	ldr	r1, [pc, #4]	; (800ac38 <_cleanup_r+0x8>)
 800ac32:	f000 b8af 	b.w	800ad94 <_fwalk_reent>
 800ac36:	bf00      	nop
 800ac38:	0800ab71 	.word	0x0800ab71

0800ac3c <__sfmoreglue>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	2568      	movs	r5, #104	; 0x68
 800ac40:	1e4a      	subs	r2, r1, #1
 800ac42:	4355      	muls	r5, r2
 800ac44:	460e      	mov	r6, r1
 800ac46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac4a:	f7ff fa95 	bl	800a178 <_malloc_r>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	b140      	cbz	r0, 800ac64 <__sfmoreglue+0x28>
 800ac52:	2100      	movs	r1, #0
 800ac54:	e9c0 1600 	strd	r1, r6, [r0]
 800ac58:	300c      	adds	r0, #12
 800ac5a:	60a0      	str	r0, [r4, #8]
 800ac5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac60:	f7fc f89c 	bl	8006d9c <memset>
 800ac64:	4620      	mov	r0, r4
 800ac66:	bd70      	pop	{r4, r5, r6, pc}

0800ac68 <__sfp_lock_acquire>:
 800ac68:	4801      	ldr	r0, [pc, #4]	; (800ac70 <__sfp_lock_acquire+0x8>)
 800ac6a:	f000 b8b3 	b.w	800add4 <__retarget_lock_acquire_recursive>
 800ac6e:	bf00      	nop
 800ac70:	20001434 	.word	0x20001434

0800ac74 <__sfp_lock_release>:
 800ac74:	4801      	ldr	r0, [pc, #4]	; (800ac7c <__sfp_lock_release+0x8>)
 800ac76:	f000 b8ae 	b.w	800add6 <__retarget_lock_release_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20001434 	.word	0x20001434

0800ac80 <__sinit_lock_acquire>:
 800ac80:	4801      	ldr	r0, [pc, #4]	; (800ac88 <__sinit_lock_acquire+0x8>)
 800ac82:	f000 b8a7 	b.w	800add4 <__retarget_lock_acquire_recursive>
 800ac86:	bf00      	nop
 800ac88:	2000142f 	.word	0x2000142f

0800ac8c <__sinit_lock_release>:
 800ac8c:	4801      	ldr	r0, [pc, #4]	; (800ac94 <__sinit_lock_release+0x8>)
 800ac8e:	f000 b8a2 	b.w	800add6 <__retarget_lock_release_recursive>
 800ac92:	bf00      	nop
 800ac94:	2000142f 	.word	0x2000142f

0800ac98 <__sinit>:
 800ac98:	b510      	push	{r4, lr}
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	f7ff fff0 	bl	800ac80 <__sinit_lock_acquire>
 800aca0:	69a3      	ldr	r3, [r4, #24]
 800aca2:	b11b      	cbz	r3, 800acac <__sinit+0x14>
 800aca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aca8:	f7ff bff0 	b.w	800ac8c <__sinit_lock_release>
 800acac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800acb0:	6523      	str	r3, [r4, #80]	; 0x50
 800acb2:	4b13      	ldr	r3, [pc, #76]	; (800ad00 <__sinit+0x68>)
 800acb4:	4a13      	ldr	r2, [pc, #76]	; (800ad04 <__sinit+0x6c>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	62a2      	str	r2, [r4, #40]	; 0x28
 800acba:	42a3      	cmp	r3, r4
 800acbc:	bf08      	it	eq
 800acbe:	2301      	moveq	r3, #1
 800acc0:	4620      	mov	r0, r4
 800acc2:	bf08      	it	eq
 800acc4:	61a3      	streq	r3, [r4, #24]
 800acc6:	f000 f81f 	bl	800ad08 <__sfp>
 800acca:	6060      	str	r0, [r4, #4]
 800accc:	4620      	mov	r0, r4
 800acce:	f000 f81b 	bl	800ad08 <__sfp>
 800acd2:	60a0      	str	r0, [r4, #8]
 800acd4:	4620      	mov	r0, r4
 800acd6:	f000 f817 	bl	800ad08 <__sfp>
 800acda:	2200      	movs	r2, #0
 800acdc:	2104      	movs	r1, #4
 800acde:	60e0      	str	r0, [r4, #12]
 800ace0:	6860      	ldr	r0, [r4, #4]
 800ace2:	f7ff ff81 	bl	800abe8 <std>
 800ace6:	2201      	movs	r2, #1
 800ace8:	2109      	movs	r1, #9
 800acea:	68a0      	ldr	r0, [r4, #8]
 800acec:	f7ff ff7c 	bl	800abe8 <std>
 800acf0:	2202      	movs	r2, #2
 800acf2:	2112      	movs	r1, #18
 800acf4:	68e0      	ldr	r0, [r4, #12]
 800acf6:	f7ff ff77 	bl	800abe8 <std>
 800acfa:	2301      	movs	r3, #1
 800acfc:	61a3      	str	r3, [r4, #24]
 800acfe:	e7d1      	b.n	800aca4 <__sinit+0xc>
 800ad00:	0800b2c4 	.word	0x0800b2c4
 800ad04:	0800ac31 	.word	0x0800ac31

0800ad08 <__sfp>:
 800ad08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad0a:	4607      	mov	r7, r0
 800ad0c:	f7ff ffac 	bl	800ac68 <__sfp_lock_acquire>
 800ad10:	4b1e      	ldr	r3, [pc, #120]	; (800ad8c <__sfp+0x84>)
 800ad12:	681e      	ldr	r6, [r3, #0]
 800ad14:	69b3      	ldr	r3, [r6, #24]
 800ad16:	b913      	cbnz	r3, 800ad1e <__sfp+0x16>
 800ad18:	4630      	mov	r0, r6
 800ad1a:	f7ff ffbd 	bl	800ac98 <__sinit>
 800ad1e:	3648      	adds	r6, #72	; 0x48
 800ad20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ad24:	3b01      	subs	r3, #1
 800ad26:	d503      	bpl.n	800ad30 <__sfp+0x28>
 800ad28:	6833      	ldr	r3, [r6, #0]
 800ad2a:	b30b      	cbz	r3, 800ad70 <__sfp+0x68>
 800ad2c:	6836      	ldr	r6, [r6, #0]
 800ad2e:	e7f7      	b.n	800ad20 <__sfp+0x18>
 800ad30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ad34:	b9d5      	cbnz	r5, 800ad6c <__sfp+0x64>
 800ad36:	4b16      	ldr	r3, [pc, #88]	; (800ad90 <__sfp+0x88>)
 800ad38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad3c:	60e3      	str	r3, [r4, #12]
 800ad3e:	6665      	str	r5, [r4, #100]	; 0x64
 800ad40:	f000 f847 	bl	800add2 <__retarget_lock_init_recursive>
 800ad44:	f7ff ff96 	bl	800ac74 <__sfp_lock_release>
 800ad48:	2208      	movs	r2, #8
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ad50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ad54:	6025      	str	r5, [r4, #0]
 800ad56:	61a5      	str	r5, [r4, #24]
 800ad58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad5c:	f7fc f81e 	bl	8006d9c <memset>
 800ad60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad68:	4620      	mov	r0, r4
 800ad6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad6c:	3468      	adds	r4, #104	; 0x68
 800ad6e:	e7d9      	b.n	800ad24 <__sfp+0x1c>
 800ad70:	2104      	movs	r1, #4
 800ad72:	4638      	mov	r0, r7
 800ad74:	f7ff ff62 	bl	800ac3c <__sfmoreglue>
 800ad78:	4604      	mov	r4, r0
 800ad7a:	6030      	str	r0, [r6, #0]
 800ad7c:	2800      	cmp	r0, #0
 800ad7e:	d1d5      	bne.n	800ad2c <__sfp+0x24>
 800ad80:	f7ff ff78 	bl	800ac74 <__sfp_lock_release>
 800ad84:	230c      	movs	r3, #12
 800ad86:	603b      	str	r3, [r7, #0]
 800ad88:	e7ee      	b.n	800ad68 <__sfp+0x60>
 800ad8a:	bf00      	nop
 800ad8c:	0800b2c4 	.word	0x0800b2c4
 800ad90:	ffff0001 	.word	0xffff0001

0800ad94 <_fwalk_reent>:
 800ad94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad98:	4606      	mov	r6, r0
 800ad9a:	4688      	mov	r8, r1
 800ad9c:	2700      	movs	r7, #0
 800ad9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ada2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ada6:	f1b9 0901 	subs.w	r9, r9, #1
 800adaa:	d505      	bpl.n	800adb8 <_fwalk_reent+0x24>
 800adac:	6824      	ldr	r4, [r4, #0]
 800adae:	2c00      	cmp	r4, #0
 800adb0:	d1f7      	bne.n	800ada2 <_fwalk_reent+0xe>
 800adb2:	4638      	mov	r0, r7
 800adb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adb8:	89ab      	ldrh	r3, [r5, #12]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d907      	bls.n	800adce <_fwalk_reent+0x3a>
 800adbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800adc2:	3301      	adds	r3, #1
 800adc4:	d003      	beq.n	800adce <_fwalk_reent+0x3a>
 800adc6:	4629      	mov	r1, r5
 800adc8:	4630      	mov	r0, r6
 800adca:	47c0      	blx	r8
 800adcc:	4307      	orrs	r7, r0
 800adce:	3568      	adds	r5, #104	; 0x68
 800add0:	e7e9      	b.n	800ada6 <_fwalk_reent+0x12>

0800add2 <__retarget_lock_init_recursive>:
 800add2:	4770      	bx	lr

0800add4 <__retarget_lock_acquire_recursive>:
 800add4:	4770      	bx	lr

0800add6 <__retarget_lock_release_recursive>:
 800add6:	4770      	bx	lr

0800add8 <__swhatbuf_r>:
 800add8:	b570      	push	{r4, r5, r6, lr}
 800adda:	460e      	mov	r6, r1
 800addc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade0:	4614      	mov	r4, r2
 800ade2:	2900      	cmp	r1, #0
 800ade4:	461d      	mov	r5, r3
 800ade6:	b096      	sub	sp, #88	; 0x58
 800ade8:	da07      	bge.n	800adfa <__swhatbuf_r+0x22>
 800adea:	2300      	movs	r3, #0
 800adec:	602b      	str	r3, [r5, #0]
 800adee:	89b3      	ldrh	r3, [r6, #12]
 800adf0:	061a      	lsls	r2, r3, #24
 800adf2:	d410      	bmi.n	800ae16 <__swhatbuf_r+0x3e>
 800adf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf8:	e00e      	b.n	800ae18 <__swhatbuf_r+0x40>
 800adfa:	466a      	mov	r2, sp
 800adfc:	f000 f902 	bl	800b004 <_fstat_r>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	dbf2      	blt.n	800adea <__swhatbuf_r+0x12>
 800ae04:	9a01      	ldr	r2, [sp, #4]
 800ae06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ae0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ae0e:	425a      	negs	r2, r3
 800ae10:	415a      	adcs	r2, r3
 800ae12:	602a      	str	r2, [r5, #0]
 800ae14:	e7ee      	b.n	800adf4 <__swhatbuf_r+0x1c>
 800ae16:	2340      	movs	r3, #64	; 0x40
 800ae18:	2000      	movs	r0, #0
 800ae1a:	6023      	str	r3, [r4, #0]
 800ae1c:	b016      	add	sp, #88	; 0x58
 800ae1e:	bd70      	pop	{r4, r5, r6, pc}

0800ae20 <__smakebuf_r>:
 800ae20:	898b      	ldrh	r3, [r1, #12]
 800ae22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae24:	079d      	lsls	r5, r3, #30
 800ae26:	4606      	mov	r6, r0
 800ae28:	460c      	mov	r4, r1
 800ae2a:	d507      	bpl.n	800ae3c <__smakebuf_r+0x1c>
 800ae2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae30:	6023      	str	r3, [r4, #0]
 800ae32:	6123      	str	r3, [r4, #16]
 800ae34:	2301      	movs	r3, #1
 800ae36:	6163      	str	r3, [r4, #20]
 800ae38:	b002      	add	sp, #8
 800ae3a:	bd70      	pop	{r4, r5, r6, pc}
 800ae3c:	466a      	mov	r2, sp
 800ae3e:	ab01      	add	r3, sp, #4
 800ae40:	f7ff ffca 	bl	800add8 <__swhatbuf_r>
 800ae44:	9900      	ldr	r1, [sp, #0]
 800ae46:	4605      	mov	r5, r0
 800ae48:	4630      	mov	r0, r6
 800ae4a:	f7ff f995 	bl	800a178 <_malloc_r>
 800ae4e:	b948      	cbnz	r0, 800ae64 <__smakebuf_r+0x44>
 800ae50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae54:	059a      	lsls	r2, r3, #22
 800ae56:	d4ef      	bmi.n	800ae38 <__smakebuf_r+0x18>
 800ae58:	f023 0303 	bic.w	r3, r3, #3
 800ae5c:	f043 0302 	orr.w	r3, r3, #2
 800ae60:	81a3      	strh	r3, [r4, #12]
 800ae62:	e7e3      	b.n	800ae2c <__smakebuf_r+0xc>
 800ae64:	4b0d      	ldr	r3, [pc, #52]	; (800ae9c <__smakebuf_r+0x7c>)
 800ae66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	6020      	str	r0, [r4, #0]
 800ae6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae70:	81a3      	strh	r3, [r4, #12]
 800ae72:	9b00      	ldr	r3, [sp, #0]
 800ae74:	6120      	str	r0, [r4, #16]
 800ae76:	6163      	str	r3, [r4, #20]
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	b15b      	cbz	r3, 800ae94 <__smakebuf_r+0x74>
 800ae7c:	4630      	mov	r0, r6
 800ae7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae82:	f000 f8d1 	bl	800b028 <_isatty_r>
 800ae86:	b128      	cbz	r0, 800ae94 <__smakebuf_r+0x74>
 800ae88:	89a3      	ldrh	r3, [r4, #12]
 800ae8a:	f023 0303 	bic.w	r3, r3, #3
 800ae8e:	f043 0301 	orr.w	r3, r3, #1
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	89a0      	ldrh	r0, [r4, #12]
 800ae96:	4305      	orrs	r5, r0
 800ae98:	81a5      	strh	r5, [r4, #12]
 800ae9a:	e7cd      	b.n	800ae38 <__smakebuf_r+0x18>
 800ae9c:	0800ac31 	.word	0x0800ac31

0800aea0 <_malloc_usable_size_r>:
 800aea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aea4:	1f18      	subs	r0, r3, #4
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	bfbc      	itt	lt
 800aeaa:	580b      	ldrlt	r3, [r1, r0]
 800aeac:	18c0      	addlt	r0, r0, r3
 800aeae:	4770      	bx	lr

0800aeb0 <_raise_r>:
 800aeb0:	291f      	cmp	r1, #31
 800aeb2:	b538      	push	{r3, r4, r5, lr}
 800aeb4:	4604      	mov	r4, r0
 800aeb6:	460d      	mov	r5, r1
 800aeb8:	d904      	bls.n	800aec4 <_raise_r+0x14>
 800aeba:	2316      	movs	r3, #22
 800aebc:	6003      	str	r3, [r0, #0]
 800aebe:	f04f 30ff 	mov.w	r0, #4294967295
 800aec2:	bd38      	pop	{r3, r4, r5, pc}
 800aec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aec6:	b112      	cbz	r2, 800aece <_raise_r+0x1e>
 800aec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aecc:	b94b      	cbnz	r3, 800aee2 <_raise_r+0x32>
 800aece:	4620      	mov	r0, r4
 800aed0:	f000 f830 	bl	800af34 <_getpid_r>
 800aed4:	462a      	mov	r2, r5
 800aed6:	4601      	mov	r1, r0
 800aed8:	4620      	mov	r0, r4
 800aeda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aede:	f000 b817 	b.w	800af10 <_kill_r>
 800aee2:	2b01      	cmp	r3, #1
 800aee4:	d00a      	beq.n	800aefc <_raise_r+0x4c>
 800aee6:	1c59      	adds	r1, r3, #1
 800aee8:	d103      	bne.n	800aef2 <_raise_r+0x42>
 800aeea:	2316      	movs	r3, #22
 800aeec:	6003      	str	r3, [r0, #0]
 800aeee:	2001      	movs	r0, #1
 800aef0:	e7e7      	b.n	800aec2 <_raise_r+0x12>
 800aef2:	2400      	movs	r4, #0
 800aef4:	4628      	mov	r0, r5
 800aef6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aefa:	4798      	blx	r3
 800aefc:	2000      	movs	r0, #0
 800aefe:	e7e0      	b.n	800aec2 <_raise_r+0x12>

0800af00 <raise>:
 800af00:	4b02      	ldr	r3, [pc, #8]	; (800af0c <raise+0xc>)
 800af02:	4601      	mov	r1, r0
 800af04:	6818      	ldr	r0, [r3, #0]
 800af06:	f7ff bfd3 	b.w	800aeb0 <_raise_r>
 800af0a:	bf00      	nop
 800af0c:	20000018 	.word	0x20000018

0800af10 <_kill_r>:
 800af10:	b538      	push	{r3, r4, r5, lr}
 800af12:	2300      	movs	r3, #0
 800af14:	4d06      	ldr	r5, [pc, #24]	; (800af30 <_kill_r+0x20>)
 800af16:	4604      	mov	r4, r0
 800af18:	4608      	mov	r0, r1
 800af1a:	4611      	mov	r1, r2
 800af1c:	602b      	str	r3, [r5, #0]
 800af1e:	f7f8 fad8 	bl	80034d2 <_kill>
 800af22:	1c43      	adds	r3, r0, #1
 800af24:	d102      	bne.n	800af2c <_kill_r+0x1c>
 800af26:	682b      	ldr	r3, [r5, #0]
 800af28:	b103      	cbz	r3, 800af2c <_kill_r+0x1c>
 800af2a:	6023      	str	r3, [r4, #0]
 800af2c:	bd38      	pop	{r3, r4, r5, pc}
 800af2e:	bf00      	nop
 800af30:	20001428 	.word	0x20001428

0800af34 <_getpid_r>:
 800af34:	f7f8 bac6 	b.w	80034c4 <_getpid>

0800af38 <__sread>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	460c      	mov	r4, r1
 800af3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af40:	f000 f894 	bl	800b06c <_read_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	bfab      	itete	ge
 800af48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af4a:	89a3      	ldrhlt	r3, [r4, #12]
 800af4c:	181b      	addge	r3, r3, r0
 800af4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af52:	bfac      	ite	ge
 800af54:	6563      	strge	r3, [r4, #84]	; 0x54
 800af56:	81a3      	strhlt	r3, [r4, #12]
 800af58:	bd10      	pop	{r4, pc}

0800af5a <__swrite>:
 800af5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5e:	461f      	mov	r7, r3
 800af60:	898b      	ldrh	r3, [r1, #12]
 800af62:	4605      	mov	r5, r0
 800af64:	05db      	lsls	r3, r3, #23
 800af66:	460c      	mov	r4, r1
 800af68:	4616      	mov	r6, r2
 800af6a:	d505      	bpl.n	800af78 <__swrite+0x1e>
 800af6c:	2302      	movs	r3, #2
 800af6e:	2200      	movs	r2, #0
 800af70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af74:	f000 f868 	bl	800b048 <_lseek_r>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	4632      	mov	r2, r6
 800af7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	4628      	mov	r0, r5
 800af84:	463b      	mov	r3, r7
 800af86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8e:	f000 b817 	b.w	800afc0 <_write_r>

0800af92 <__sseek>:
 800af92:	b510      	push	{r4, lr}
 800af94:	460c      	mov	r4, r1
 800af96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af9a:	f000 f855 	bl	800b048 <_lseek_r>
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	89a3      	ldrh	r3, [r4, #12]
 800afa2:	bf15      	itete	ne
 800afa4:	6560      	strne	r0, [r4, #84]	; 0x54
 800afa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800afaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800afae:	81a3      	strheq	r3, [r4, #12]
 800afb0:	bf18      	it	ne
 800afb2:	81a3      	strhne	r3, [r4, #12]
 800afb4:	bd10      	pop	{r4, pc}

0800afb6 <__sclose>:
 800afb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afba:	f000 b813 	b.w	800afe4 <_close_r>
	...

0800afc0 <_write_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	4608      	mov	r0, r1
 800afc6:	4611      	mov	r1, r2
 800afc8:	2200      	movs	r2, #0
 800afca:	4d05      	ldr	r5, [pc, #20]	; (800afe0 <_write_r+0x20>)
 800afcc:	602a      	str	r2, [r5, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	f7f8 fab6 	bl	8003540 <_write>
 800afd4:	1c43      	adds	r3, r0, #1
 800afd6:	d102      	bne.n	800afde <_write_r+0x1e>
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	b103      	cbz	r3, 800afde <_write_r+0x1e>
 800afdc:	6023      	str	r3, [r4, #0]
 800afde:	bd38      	pop	{r3, r4, r5, pc}
 800afe0:	20001428 	.word	0x20001428

0800afe4 <_close_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	2300      	movs	r3, #0
 800afe8:	4d05      	ldr	r5, [pc, #20]	; (800b000 <_close_r+0x1c>)
 800afea:	4604      	mov	r4, r0
 800afec:	4608      	mov	r0, r1
 800afee:	602b      	str	r3, [r5, #0]
 800aff0:	f7f8 fac2 	bl	8003578 <_close>
 800aff4:	1c43      	adds	r3, r0, #1
 800aff6:	d102      	bne.n	800affe <_close_r+0x1a>
 800aff8:	682b      	ldr	r3, [r5, #0]
 800affa:	b103      	cbz	r3, 800affe <_close_r+0x1a>
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	bd38      	pop	{r3, r4, r5, pc}
 800b000:	20001428 	.word	0x20001428

0800b004 <_fstat_r>:
 800b004:	b538      	push	{r3, r4, r5, lr}
 800b006:	2300      	movs	r3, #0
 800b008:	4d06      	ldr	r5, [pc, #24]	; (800b024 <_fstat_r+0x20>)
 800b00a:	4604      	mov	r4, r0
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	f7f8 fabc 	bl	800358e <_fstat>
 800b016:	1c43      	adds	r3, r0, #1
 800b018:	d102      	bne.n	800b020 <_fstat_r+0x1c>
 800b01a:	682b      	ldr	r3, [r5, #0]
 800b01c:	b103      	cbz	r3, 800b020 <_fstat_r+0x1c>
 800b01e:	6023      	str	r3, [r4, #0]
 800b020:	bd38      	pop	{r3, r4, r5, pc}
 800b022:	bf00      	nop
 800b024:	20001428 	.word	0x20001428

0800b028 <_isatty_r>:
 800b028:	b538      	push	{r3, r4, r5, lr}
 800b02a:	2300      	movs	r3, #0
 800b02c:	4d05      	ldr	r5, [pc, #20]	; (800b044 <_isatty_r+0x1c>)
 800b02e:	4604      	mov	r4, r0
 800b030:	4608      	mov	r0, r1
 800b032:	602b      	str	r3, [r5, #0]
 800b034:	f7f8 faba 	bl	80035ac <_isatty>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d102      	bne.n	800b042 <_isatty_r+0x1a>
 800b03c:	682b      	ldr	r3, [r5, #0]
 800b03e:	b103      	cbz	r3, 800b042 <_isatty_r+0x1a>
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	bd38      	pop	{r3, r4, r5, pc}
 800b044:	20001428 	.word	0x20001428

0800b048 <_lseek_r>:
 800b048:	b538      	push	{r3, r4, r5, lr}
 800b04a:	4604      	mov	r4, r0
 800b04c:	4608      	mov	r0, r1
 800b04e:	4611      	mov	r1, r2
 800b050:	2200      	movs	r2, #0
 800b052:	4d05      	ldr	r5, [pc, #20]	; (800b068 <_lseek_r+0x20>)
 800b054:	602a      	str	r2, [r5, #0]
 800b056:	461a      	mov	r2, r3
 800b058:	f7f8 fab2 	bl	80035c0 <_lseek>
 800b05c:	1c43      	adds	r3, r0, #1
 800b05e:	d102      	bne.n	800b066 <_lseek_r+0x1e>
 800b060:	682b      	ldr	r3, [r5, #0]
 800b062:	b103      	cbz	r3, 800b066 <_lseek_r+0x1e>
 800b064:	6023      	str	r3, [r4, #0]
 800b066:	bd38      	pop	{r3, r4, r5, pc}
 800b068:	20001428 	.word	0x20001428

0800b06c <_read_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	4611      	mov	r1, r2
 800b074:	2200      	movs	r2, #0
 800b076:	4d05      	ldr	r5, [pc, #20]	; (800b08c <_read_r+0x20>)
 800b078:	602a      	str	r2, [r5, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f7f8 fa43 	bl	8003506 <_read>
 800b080:	1c43      	adds	r3, r0, #1
 800b082:	d102      	bne.n	800b08a <_read_r+0x1e>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	b103      	cbz	r3, 800b08a <_read_r+0x1e>
 800b088:	6023      	str	r3, [r4, #0]
 800b08a:	bd38      	pop	{r3, r4, r5, pc}
 800b08c:	20001428 	.word	0x20001428

0800b090 <_init>:
 800b090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b092:	bf00      	nop
 800b094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b096:	bc08      	pop	{r3}
 800b098:	469e      	mov	lr, r3
 800b09a:	4770      	bx	lr

0800b09c <_fini>:
 800b09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b09e:	bf00      	nop
 800b0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0a2:	bc08      	pop	{r3}
 800b0a4:	469e      	mov	lr, r3
 800b0a6:	4770      	bx	lr
