
Reflow_Oven_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  0800ae48  0800ae48  0001ae48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b514  0800b514  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800b514  0800b514  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b514  0800b514  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b514  0800b514  0001b514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b518  0800b518  0001b518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800b51c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001240  200001f0  0800b708  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001430  0800b708  00021430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001130d  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a21  00000000  00000000  00031522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00033f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00035008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000196ee  00000000  00000000  00035fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001153a  00000000  00000000  0004f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2d9  00000000  00000000  00060be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  000efec1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b9c  00000000  00000000  000eff84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000005c  00000000  00000000  000f5b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ae30 	.word	0x0800ae30

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800ae30 	.word	0x0800ae30

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2uiz>:
 8000bf0:	004a      	lsls	r2, r1, #1
 8000bf2:	d211      	bcs.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bf4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf8:	d211      	bcs.n	8000c1e <__aeabi_d2uiz+0x2e>
 8000bfa:	d50d      	bpl.n	8000c18 <__aeabi_d2uiz+0x28>
 8000bfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c04:	d40e      	bmi.n	8000c24 <__aeabi_d2uiz+0x34>
 8000c06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c12:	fa23 f002 	lsr.w	r0, r3, r2
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d102      	bne.n	8000c2a <__aeabi_d2uiz+0x3a>
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	4770      	bx	lr
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	4770      	bx	lr

08000c30 <__aeabi_d2f>:
 8000c30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c38:	bf24      	itt	cs
 8000c3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c42:	d90d      	bls.n	8000c60 <__aeabi_d2f+0x30>
 8000c44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c64:	d121      	bne.n	8000caa <__aeabi_d2f+0x7a>
 8000c66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c6a:	bfbc      	itt	lt
 8000c6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c70:	4770      	bxlt	lr
 8000c72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c7a:	f1c2 0218 	rsb	r2, r2, #24
 8000c7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c86:	fa20 f002 	lsr.w	r0, r0, r2
 8000c8a:	bf18      	it	ne
 8000c8c:	f040 0001 	orrne.w	r0, r0, #1
 8000c90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ca0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ca4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca8:	e7cc      	b.n	8000c44 <__aeabi_d2f+0x14>
 8000caa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cae:	d107      	bne.n	8000cc0 <__aeabi_d2f+0x90>
 8000cb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cb4:	bf1e      	ittt	ne
 8000cb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cbe:	4770      	bxne	lr
 8000cc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <__aeabi_frsub>:
 8000cd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	e002      	b.n	8000cdc <__addsf3>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fsub>:
 8000cd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000cdc <__addsf3>:
 8000cdc:	0042      	lsls	r2, r0, #1
 8000cde:	bf1f      	itttt	ne
 8000ce0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ce4:	ea92 0f03 	teqne	r2, r3
 8000ce8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf0:	d06a      	beq.n	8000dc8 <__addsf3+0xec>
 8000cf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cfa:	bfc1      	itttt	gt
 8000cfc:	18d2      	addgt	r2, r2, r3
 8000cfe:	4041      	eorgt	r1, r0
 8000d00:	4048      	eorgt	r0, r1
 8000d02:	4041      	eorgt	r1, r0
 8000d04:	bfb8      	it	lt
 8000d06:	425b      	neglt	r3, r3
 8000d08:	2b19      	cmp	r3, #25
 8000d0a:	bf88      	it	hi
 8000d0c:	4770      	bxhi	lr
 8000d0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000d1a:	bf18      	it	ne
 8000d1c:	4240      	negne	r0, r0
 8000d1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000d26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000d2a:	bf18      	it	ne
 8000d2c:	4249      	negne	r1, r1
 8000d2e:	ea92 0f03 	teq	r2, r3
 8000d32:	d03f      	beq.n	8000db4 <__addsf3+0xd8>
 8000d34:	f1a2 0201 	sub.w	r2, r2, #1
 8000d38:	fa41 fc03 	asr.w	ip, r1, r3
 8000d3c:	eb10 000c 	adds.w	r0, r0, ip
 8000d40:	f1c3 0320 	rsb	r3, r3, #32
 8000d44:	fa01 f103 	lsl.w	r1, r1, r3
 8000d48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__addsf3+0x78>
 8000d4e:	4249      	negs	r1, r1
 8000d50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d58:	d313      	bcc.n	8000d82 <__addsf3+0xa6>
 8000d5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d5e:	d306      	bcc.n	8000d6e <__addsf3+0x92>
 8000d60:	0840      	lsrs	r0, r0, #1
 8000d62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d66:	f102 0201 	add.w	r2, r2, #1
 8000d6a:	2afe      	cmp	r2, #254	; 0xfe
 8000d6c:	d251      	bcs.n	8000e12 <__addsf3+0x136>
 8000d6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d76:	bf08      	it	eq
 8000d78:	f020 0001 	biceq.w	r0, r0, #1
 8000d7c:	ea40 0003 	orr.w	r0, r0, r3
 8000d80:	4770      	bx	lr
 8000d82:	0049      	lsls	r1, r1, #1
 8000d84:	eb40 0000 	adc.w	r0, r0, r0
 8000d88:	3a01      	subs	r2, #1
 8000d8a:	bf28      	it	cs
 8000d8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d90:	d2ed      	bcs.n	8000d6e <__addsf3+0x92>
 8000d92:	fab0 fc80 	clz	ip, r0
 8000d96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000da2:	bfaa      	itet	ge
 8000da4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000da8:	4252      	neglt	r2, r2
 8000daa:	4318      	orrge	r0, r3
 8000dac:	bfbc      	itt	lt
 8000dae:	40d0      	lsrlt	r0, r2
 8000db0:	4318      	orrlt	r0, r3
 8000db2:	4770      	bx	lr
 8000db4:	f092 0f00 	teq	r2, #0
 8000db8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000dbc:	bf06      	itte	eq
 8000dbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000dc2:	3201      	addeq	r2, #1
 8000dc4:	3b01      	subne	r3, #1
 8000dc6:	e7b5      	b.n	8000d34 <__addsf3+0x58>
 8000dc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dcc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd0:	bf18      	it	ne
 8000dd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dd6:	d021      	beq.n	8000e1c <__addsf3+0x140>
 8000dd8:	ea92 0f03 	teq	r2, r3
 8000ddc:	d004      	beq.n	8000de8 <__addsf3+0x10c>
 8000dde:	f092 0f00 	teq	r2, #0
 8000de2:	bf08      	it	eq
 8000de4:	4608      	moveq	r0, r1
 8000de6:	4770      	bx	lr
 8000de8:	ea90 0f01 	teq	r0, r1
 8000dec:	bf1c      	itt	ne
 8000dee:	2000      	movne	r0, #0
 8000df0:	4770      	bxne	lr
 8000df2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000df6:	d104      	bne.n	8000e02 <__addsf3+0x126>
 8000df8:	0040      	lsls	r0, r0, #1
 8000dfa:	bf28      	it	cs
 8000dfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000e06:	bf3c      	itt	cc
 8000e08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000e0c:	4770      	bxcc	lr
 8000e0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000e12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000e16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e1a:	4770      	bx	lr
 8000e1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e20:	bf16      	itet	ne
 8000e22:	4608      	movne	r0, r1
 8000e24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e28:	4601      	movne	r1, r0
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	bf06      	itte	eq
 8000e2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e32:	ea90 0f01 	teqeq	r0, r1
 8000e36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e3a:	4770      	bx	lr

08000e3c <__aeabi_ui2f>:
 8000e3c:	f04f 0300 	mov.w	r3, #0
 8000e40:	e004      	b.n	8000e4c <__aeabi_i2f+0x8>
 8000e42:	bf00      	nop

08000e44 <__aeabi_i2f>:
 8000e44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e48:	bf48      	it	mi
 8000e4a:	4240      	negmi	r0, r0
 8000e4c:	ea5f 0c00 	movs.w	ip, r0
 8000e50:	bf08      	it	eq
 8000e52:	4770      	bxeq	lr
 8000e54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e58:	4601      	mov	r1, r0
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	e01c      	b.n	8000e9a <__aeabi_l2f+0x2a>

08000e60 <__aeabi_ul2f>:
 8000e60:	ea50 0201 	orrs.w	r2, r0, r1
 8000e64:	bf08      	it	eq
 8000e66:	4770      	bxeq	lr
 8000e68:	f04f 0300 	mov.w	r3, #0
 8000e6c:	e00a      	b.n	8000e84 <__aeabi_l2f+0x14>
 8000e6e:	bf00      	nop

08000e70 <__aeabi_l2f>:
 8000e70:	ea50 0201 	orrs.w	r2, r0, r1
 8000e74:	bf08      	it	eq
 8000e76:	4770      	bxeq	lr
 8000e78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e7c:	d502      	bpl.n	8000e84 <__aeabi_l2f+0x14>
 8000e7e:	4240      	negs	r0, r0
 8000e80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e84:	ea5f 0c01 	movs.w	ip, r1
 8000e88:	bf02      	ittt	eq
 8000e8a:	4684      	moveq	ip, r0
 8000e8c:	4601      	moveq	r1, r0
 8000e8e:	2000      	moveq	r0, #0
 8000e90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e94:	bf08      	it	eq
 8000e96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e9e:	fabc f28c 	clz	r2, ip
 8000ea2:	3a08      	subs	r2, #8
 8000ea4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ea8:	db10      	blt.n	8000ecc <__aeabi_l2f+0x5c>
 8000eaa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eae:	4463      	add	r3, ip
 8000eb0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb4:	f1c2 0220 	rsb	r2, r2, #32
 8000eb8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	eb43 0002 	adc.w	r0, r3, r2
 8000ec4:	bf08      	it	eq
 8000ec6:	f020 0001 	biceq.w	r0, r0, #1
 8000eca:	4770      	bx	lr
 8000ecc:	f102 0220 	add.w	r2, r2, #32
 8000ed0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ed4:	f1c2 0220 	rsb	r2, r2, #32
 8000ed8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000edc:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee0:	eb43 0002 	adc.w	r0, r3, r2
 8000ee4:	bf08      	it	eq
 8000ee6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eea:	4770      	bx	lr

08000eec <__gesf2>:
 8000eec:	f04f 3cff 	mov.w	ip, #4294967295
 8000ef0:	e006      	b.n	8000f00 <__cmpsf2+0x4>
 8000ef2:	bf00      	nop

08000ef4 <__lesf2>:
 8000ef4:	f04f 0c01 	mov.w	ip, #1
 8000ef8:	e002      	b.n	8000f00 <__cmpsf2+0x4>
 8000efa:	bf00      	nop

08000efc <__cmpsf2>:
 8000efc:	f04f 0c01 	mov.w	ip, #1
 8000f00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f04:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f10:	bf18      	it	ne
 8000f12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f16:	d011      	beq.n	8000f3c <__cmpsf2+0x40>
 8000f18:	b001      	add	sp, #4
 8000f1a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f1e:	bf18      	it	ne
 8000f20:	ea90 0f01 	teqne	r0, r1
 8000f24:	bf58      	it	pl
 8000f26:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f2a:	bf88      	it	hi
 8000f2c:	17c8      	asrhi	r0, r1, #31
 8000f2e:	bf38      	it	cc
 8000f30:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f34:	bf18      	it	ne
 8000f36:	f040 0001 	orrne.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f40:	d102      	bne.n	8000f48 <__cmpsf2+0x4c>
 8000f42:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f46:	d105      	bne.n	8000f54 <__cmpsf2+0x58>
 8000f48:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f4c:	d1e4      	bne.n	8000f18 <__cmpsf2+0x1c>
 8000f4e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f52:	d0e1      	beq.n	8000f18 <__cmpsf2+0x1c>
 8000f54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <__aeabi_cfrcmple>:
 8000f5c:	4684      	mov	ip, r0
 8000f5e:	4608      	mov	r0, r1
 8000f60:	4661      	mov	r1, ip
 8000f62:	e7ff      	b.n	8000f64 <__aeabi_cfcmpeq>

08000f64 <__aeabi_cfcmpeq>:
 8000f64:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f66:	f7ff ffc9 	bl	8000efc <__cmpsf2>
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	bf48      	it	mi
 8000f6e:	f110 0f00 	cmnmi.w	r0, #0
 8000f72:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f74 <__aeabi_fcmpeq>:
 8000f74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f78:	f7ff fff4 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f7c:	bf0c      	ite	eq
 8000f7e:	2001      	moveq	r0, #1
 8000f80:	2000      	movne	r0, #0
 8000f82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f86:	bf00      	nop

08000f88 <__aeabi_fcmplt>:
 8000f88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f8c:	f7ff ffea 	bl	8000f64 <__aeabi_cfcmpeq>
 8000f90:	bf34      	ite	cc
 8000f92:	2001      	movcc	r0, #1
 8000f94:	2000      	movcs	r0, #0
 8000f96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f9a:	bf00      	nop

08000f9c <__aeabi_fcmple>:
 8000f9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fa0:	f7ff ffe0 	bl	8000f64 <__aeabi_cfcmpeq>
 8000fa4:	bf94      	ite	ls
 8000fa6:	2001      	movls	r0, #1
 8000fa8:	2000      	movhi	r0, #0
 8000faa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fae:	bf00      	nop

08000fb0 <__aeabi_fcmpge>:
 8000fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fb4:	f7ff ffd2 	bl	8000f5c <__aeabi_cfrcmple>
 8000fb8:	bf94      	ite	ls
 8000fba:	2001      	movls	r0, #1
 8000fbc:	2000      	movhi	r0, #0
 8000fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fc2:	bf00      	nop

08000fc4 <__aeabi_fcmpgt>:
 8000fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc8:	f7ff ffc8 	bl	8000f5c <__aeabi_cfrcmple>
 8000fcc:	bf34      	ite	cc
 8000fce:	2001      	movcc	r0, #1
 8000fd0:	2000      	movcs	r0, #0
 8000fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_f2uiz>:
 8000fd8:	0042      	lsls	r2, r0, #1
 8000fda:	d20e      	bcs.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fdc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe0:	d30b      	bcc.n	8000ffa <__aeabi_f2uiz+0x22>
 8000fe2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fe6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fea:	d409      	bmi.n	8001000 <__aeabi_f2uiz+0x28>
 8000fec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ff8:	4770      	bx	lr
 8000ffa:	f04f 0000 	mov.w	r0, #0
 8000ffe:	4770      	bx	lr
 8001000:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001004:	d101      	bne.n	800100a <__aeabi_f2uiz+0x32>
 8001006:	0242      	lsls	r2, r0, #9
 8001008:	d102      	bne.n	8001010 <__aeabi_f2uiz+0x38>
 800100a:	f04f 30ff 	mov.w	r0, #4294967295
 800100e:	4770      	bx	lr
 8001010:	f04f 0000 	mov.w	r0, #0
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_d2lz>:
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	460c      	mov	r4, r1
 800101c:	4605      	mov	r5, r0
 800101e:	4621      	mov	r1, r4
 8001020:	4628      	mov	r0, r5
 8001022:	2200      	movs	r2, #0
 8001024:	2300      	movs	r3, #0
 8001026:	f7ff fd7d 	bl	8000b24 <__aeabi_dcmplt>
 800102a:	b928      	cbnz	r0, 8001038 <__aeabi_d2lz+0x20>
 800102c:	4628      	mov	r0, r5
 800102e:	4621      	mov	r1, r4
 8001030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001034:	f000 b80a 	b.w	800104c <__aeabi_d2ulz>
 8001038:	4628      	mov	r0, r5
 800103a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 800103e:	f000 f805 	bl	800104c <__aeabi_d2ulz>
 8001042:	4240      	negs	r0, r0
 8001044:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001048:	bd38      	pop	{r3, r4, r5, pc}
 800104a:	bf00      	nop

0800104c <__aeabi_d2ulz>:
 800104c:	b5d0      	push	{r4, r6, r7, lr}
 800104e:	2200      	movs	r2, #0
 8001050:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <__aeabi_d2ulz+0x34>)
 8001052:	4606      	mov	r6, r0
 8001054:	460f      	mov	r7, r1
 8001056:	f7ff faf3 	bl	8000640 <__aeabi_dmul>
 800105a:	f7ff fdc9 	bl	8000bf0 <__aeabi_d2uiz>
 800105e:	4604      	mov	r4, r0
 8001060:	f7ff fa74 	bl	800054c <__aeabi_ui2d>
 8001064:	2200      	movs	r2, #0
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <__aeabi_d2ulz+0x38>)
 8001068:	f7ff faea 	bl	8000640 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4630      	mov	r0, r6
 8001072:	4639      	mov	r1, r7
 8001074:	f7ff f92c 	bl	80002d0 <__aeabi_dsub>
 8001078:	f7ff fdba 	bl	8000bf0 <__aeabi_d2uiz>
 800107c:	4621      	mov	r1, r4
 800107e:	bdd0      	pop	{r4, r6, r7, pc}
 8001080:	3df00000 	.word	0x3df00000
 8001084:	41f00000 	.word	0x41f00000

08001088 <GetPage>:
#include "string.h"
#include "stdio.h"


static uint32_t GetPage(uint32_t Address)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e018      	b.n	80010c8 <GetPage+0x40>
  {
	  if((Address < (0x08000000 + (1024 *(indx+1))) ) && (Address >= (0x08000000 + 1024*indx)))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 800109c:	3301      	adds	r3, #1
 800109e:	029b      	lsls	r3, r3, #10
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d20c      	bcs.n	80010c2 <GetPage+0x3a>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010ae:	029b      	lsls	r3, r3, #10
 80010b0:	461a      	mov	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d304      	bcc.n	80010c2 <GetPage+0x3a>
	  {
		  return (0x08000000 + 1024*indx);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	e007      	b.n	80010d2 <GetPage+0x4a>
  for (int indx=0; indx<128; indx++)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3301      	adds	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b7f      	cmp	r3, #127	; 0x7f
 80010cc:	dde3      	ble.n	8001096 <GetPage+0xe>
	  }
  }

  return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <Flash_Write_Data>:

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *DATA_32, uint32_t NumberWords)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24

	int numberofwords = NumberWords;//(strlen(DATA_32)/4) + ((strlen(DATA_32) % 4) != 0);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	623b      	str	r3, [r7, #32]

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 80010f0:	f002 fc58 	bl	80039a4 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 80010f4:	68f8      	ldr	r0, [r7, #12]
 80010f6:	f7ff ffc7 	bl	8001088 <GetPage>
 80010fa:	61f8      	str	r0, [r7, #28]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	461a      	mov	r2, r3
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	4413      	add	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8001108:	69b8      	ldr	r0, [r7, #24]
 800110a:	f7ff ffbd 	bl	8001088 <GetPage>
 800110e:	6178      	str	r0, [r7, #20]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <Flash_Write_Data+0xb4>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8001116:	4a1e      	ldr	r2, [pc, #120]	; (8001190 <Flash_Write_Data+0xb4>)
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	0a9b      	lsrs	r3, r3, #10
 8001124:	3301      	adds	r3, #1
 8001126:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <Flash_Write_Data+0xb4>)
 8001128:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 800112a:	f107 0310 	add.w	r3, r7, #16
 800112e:	4619      	mov	r1, r3
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <Flash_Write_Data+0xb4>)
 8001132:	f002 fd29 	bl	8003b88 <HAL_FLASHEx_Erase>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01d      	beq.n	8001178 <Flash_Write_Data+0x9c>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 800113c:	f002 fc68 	bl	8003a10 <HAL_FLASH_GetError>
 8001140:	4603      	mov	r3, r0
 8001142:	e020      	b.n	8001186 <Flash_Write_Data+0xaa>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, DATA_32[sofar]) == HAL_OK)
 8001144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	4413      	add	r3, r2
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	2002      	movs	r0, #2
 8001158:	f002 fbb4 	bl	80038c4 <HAL_FLASH_Program>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d106      	bne.n	8001170 <Flash_Write_Data+0x94>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	3304      	adds	r3, #4
 8001166:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	3301      	adds	r3, #1
 800116c:	627b      	str	r3, [r7, #36]	; 0x24
 800116e:	e003      	b.n	8001178 <Flash_Write_Data+0x9c>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001170:	f002 fc4e 	bl	8003a10 <HAL_FLASH_GetError>
 8001174:	4603      	mov	r3, r0
 8001176:	e006      	b.n	8001186 <Flash_Write_Data+0xaa>
	   while (sofar<numberofwords)
 8001178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800117a:	6a3b      	ldr	r3, [r7, #32]
 800117c:	429a      	cmp	r2, r3
 800117e:	dbe1      	blt.n	8001144 <Flash_Write_Data+0x68>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8001180:	f002 fc36 	bl	80039f0 <HAL_FLASH_Lock>

	   return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3728      	adds	r7, #40	; 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2000020c 	.word	0x2000020c

08001194 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, __IO uint32_t * DATA_32)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	while (1)
	{
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	601a      	str	r2, [r3, #0]
		if (*DATA_32 == 0xffffffff)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ae:	d103      	bne.n	80011b8 <Flash_Read_Data+0x24>
		{
			*DATA_32 = '\0';
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
			break;
 80011b6:	e006      	b.n	80011c6 <Flash_Read_Data+0x32>
		}
		StartPageAddress += 4;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3304      	adds	r3, #4
 80011bc:	607b      	str	r3, [r7, #4]
		DATA_32++;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3304      	adds	r3, #4
 80011c2:	603b      	str	r3, [r7, #0]
		*DATA_32 = *(__IO uint32_t *)StartPageAddress;
 80011c4:	e7eb      	b.n	800119e <Flash_Read_Data+0xa>
	}
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <arm_pid_f32>:
   * @return out processed output sample.
   */
  static __INLINE float32_t arm_pid_f32(
  arm_pid_instance_f32 * S,
  float32_t in)
  {
 80011d0:	b590      	push	{r4, r7, lr}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6839      	ldr	r1, [r7, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7fe ffbd 	bl	8000160 <__aeabi_fmul>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685a      	ldr	r2, [r3, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4610      	mov	r0, r2
 80011f6:	f7fe ffb3 	bl	8000160 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
    out = (S->A0 * in) +
 80011fc:	4619      	mov	r1, r3
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff fd6c 	bl	8000cdc <__addsf3>
 8001204:	4603      	mov	r3, r0
 8001206:	461c      	mov	r4, r3
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	4619      	mov	r1, r3
 8001212:	4610      	mov	r0, r2
 8001214:	f7fe ffa4 	bl	8000160 <__aeabi_fmul>
 8001218:	4603      	mov	r3, r0
 800121a:	4619      	mov	r1, r3
 800121c:	4620      	mov	r0, r4
 800121e:	f7ff fd5d 	bl	8000cdc <__addsf3>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	695b      	ldr	r3, [r3, #20]
    out = (S->A0 * in) +
 800122a:	4619      	mov	r1, r3
 800122c:	4610      	mov	r0, r2
 800122e:	f7ff fd55 	bl	8000cdc <__addsf3>
 8001232:	4603      	mov	r3, r0
 8001234:	60fb      	str	r3, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800124a:	68fb      	ldr	r3, [r7, #12]

  }
 800124c:	4618      	mov	r0, r3
 800124e:	3714      	adds	r7, #20
 8001250:	46bd      	mov	sp, r7
 8001252:	bd90      	pop	{r4, r7, pc}

08001254 <SaveReflowParameters>:
//    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_address, *data_p);
//HAL_FLASH_Lock();
//}


void SaveReflowParameters(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	Flash_Write_Data(0x0801FC00, (uint32_t *)&ReflowParameters, 33);
 8001258:	2221      	movs	r2, #33	; 0x21
 800125a:	4903      	ldr	r1, [pc, #12]	; (8001268 <SaveReflowParameters+0x14>)
 800125c:	4803      	ldr	r0, [pc, #12]	; (800126c <SaveReflowParameters+0x18>)
 800125e:	f7ff ff3d 	bl	80010dc <Flash_Write_Data>
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	200012a8 	.word	0x200012a8
 800126c:	0801fc00 	.word	0x0801fc00

08001270 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8001278:	2205      	movs	r2, #5
 800127a:	4905      	ldr	r1, [pc, #20]	; (8001290 <HAL_UART_RxCpltCallback+0x20>)
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_UART_RxCpltCallback+0x24>)
 800127e:	f004 ffaf 	bl	80061e0 <HAL_UART_Receive_IT>
	UART_Recieved_Flag =1;
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <HAL_UART_RxCpltCallback+0x28>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000004 	.word	0x20000004
 8001294:	200002c4 	.word	0x200002c4
 8001298:	20000220 	.word	0x20000220

0800129c <NEXTION_SendString>:


void NEXTION_SendString (char *ID, char *string){
 800129c:	b580      	push	{r7, lr}
 800129e:	b090      	sub	sp, #64	; 0x40
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%s\"", ID, string);
 80012a6:	f107 0008 	add.w	r0, r7, #8
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	490b      	ldr	r1, [pc, #44]	; (80012dc <NEXTION_SendString+0x40>)
 80012b0:	f006 f8ac 	bl	800740c <siprintf>
 80012b4:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80012b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	f107 0108 	add.w	r1, r7, #8
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <NEXTION_SendString+0x44>)
 80012c4:	f004 fefa 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80012c8:	2364      	movs	r3, #100	; 0x64
 80012ca:	2203      	movs	r2, #3
 80012cc:	4905      	ldr	r1, [pc, #20]	; (80012e4 <NEXTION_SendString+0x48>)
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <NEXTION_SendString+0x44>)
 80012d0:	f004 fef4 	bl	80060bc <HAL_UART_Transmit>

}
 80012d4:	bf00      	nop
 80012d6:	3740      	adds	r7, #64	; 0x40
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	0800ae48 	.word	0x0800ae48
 80012e0:	200002c4 	.word	0x200002c4
 80012e4:	20000000 	.word	0x20000000

080012e8 <NEXTION_SendFloat>:


void NEXTION_SendFloat (char *ID, float32_t number){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b092      	sub	sp, #72	; 0x48
 80012ec:	af02      	add	r7, sp, #8
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.2f\"", ID, number);
 80012f2:	6838      	ldr	r0, [r7, #0]
 80012f4:	f7ff f94c 	bl	8000590 <__aeabi_f2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	f107 0008 	add.w	r0, r7, #8
 8001300:	e9cd 2300 	strd	r2, r3, [sp]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	490b      	ldr	r1, [pc, #44]	; (8001334 <NEXTION_SendFloat+0x4c>)
 8001308:	f006 f880 	bl	800740c <siprintf>
 800130c:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800130e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001310:	b29a      	uxth	r2, r3
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <NEXTION_SendFloat+0x50>)
 800131c:	f004 fece 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001320:	2364      	movs	r3, #100	; 0x64
 8001322:	2203      	movs	r2, #3
 8001324:	4905      	ldr	r1, [pc, #20]	; (800133c <NEXTION_SendFloat+0x54>)
 8001326:	4804      	ldr	r0, [pc, #16]	; (8001338 <NEXTION_SendFloat+0x50>)
 8001328:	f004 fec8 	bl	80060bc <HAL_UART_Transmit>
}
 800132c:	bf00      	nop
 800132e:	3740      	adds	r7, #64	; 0x40
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	0800ae54 	.word	0x0800ae54
 8001338:	200002c4 	.word	0x200002c4
 800133c:	20000000 	.word	0x20000000

08001340 <NEXTION_SendFloat_CurrentTemp>:

void NEXTION_SendFloat_CurrentTemp (char *ID, float32_t number){
 8001340:	b580      	push	{r7, lr}
 8001342:	b092      	sub	sp, #72	; 0x48
 8001344:	af02      	add	r7, sp, #8
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%.1f\"", ID, number);
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f7ff f920 	bl	8000590 <__aeabi_f2d>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	f107 0008 	add.w	r0, r7, #8
 8001358:	e9cd 2300 	strd	r2, r3, [sp]
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	490b      	ldr	r1, [pc, #44]	; (800138c <NEXTION_SendFloat_CurrentTemp+0x4c>)
 8001360:	f006 f854 	bl	800740c <siprintf>
 8001364:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001368:	b29a      	uxth	r2, r3
 800136a:	f107 0108 	add.w	r1, r7, #8
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <NEXTION_SendFloat_CurrentTemp+0x50>)
 8001374:	f004 fea2 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001378:	2364      	movs	r3, #100	; 0x64
 800137a:	2203      	movs	r2, #3
 800137c:	4905      	ldr	r1, [pc, #20]	; (8001394 <NEXTION_SendFloat_CurrentTemp+0x54>)
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <NEXTION_SendFloat_CurrentTemp+0x50>)
 8001380:	f004 fe9c 	bl	80060bc <HAL_UART_Transmit>
}
 8001384:	bf00      	nop
 8001386:	3740      	adds	r7, #64	; 0x40
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	0800ae64 	.word	0x0800ae64
 8001390:	200002c4 	.word	0x200002c4
 8001394:	20000000 	.word	0x20000000

08001398 <NEXTION_SenduInt>:


void NEXTION_SenduInt (char *ID, uint32_t number){
 8001398:	b580      	push	{r7, lr}
 800139a:	b090      	sub	sp, #64	; 0x40
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	char buf[50];
	int len = sprintf(buf, "%s.txt=\"%lu\"", ID, number);
 80013a2:	f107 0008 	add.w	r0, r7, #8
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	490b      	ldr	r1, [pc, #44]	; (80013d8 <NEXTION_SenduInt+0x40>)
 80013ac:	f006 f82e 	bl	800740c <siprintf>
 80013b0:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 80013b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	f107 0108 	add.w	r1, r7, #8
 80013ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013be:	4807      	ldr	r0, [pc, #28]	; (80013dc <NEXTION_SenduInt+0x44>)
 80013c0:	f004 fe7c 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	2203      	movs	r2, #3
 80013c8:	4905      	ldr	r1, [pc, #20]	; (80013e0 <NEXTION_SenduInt+0x48>)
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <NEXTION_SenduInt+0x44>)
 80013cc:	f004 fe76 	bl	80060bc <HAL_UART_Transmit>
}
 80013d0:	bf00      	nop
 80013d2:	3740      	adds	r7, #64	; 0x40
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0800ae74 	.word	0x0800ae74
 80013dc:	200002c4 	.word	0x200002c4
 80013e0:	20000000 	.word	0x20000000

080013e4 <NEXTION_CMD>:


void NEXTION_CMD (char *string){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)string, strlen(string), 1000);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7fe feaf 	bl	8000150 <strlen>
 80013f2:	4603      	mov	r3, r0
 80013f4:	b29a      	uxth	r2, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <NEXTION_CMD+0x34>)
 80013fe:	f004 fe5d 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	2203      	movs	r2, #3
 8001406:	4905      	ldr	r1, [pc, #20]	; (800141c <NEXTION_CMD+0x38>)
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <NEXTION_CMD+0x34>)
 800140a:	f004 fe57 	bl	80060bc <HAL_UART_Transmit>
}
 800140e:	bf00      	nop
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200002c4 	.word	0x200002c4
 800141c:	20000000 	.word	0x20000000

08001420 <NextionDrawDot>:
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
}


void NextionDrawDot(uint32_t x, uint32_t y){
 8001420:	b580      	push	{r7, lr}
 8001422:	b090      	sub	sp, #64	; 0x40
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,1311", x, y);	//RGB888: 0.160.255 RGB565:1311
 800142a:	f107 0008 	add.w	r0, r7, #8
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	490b      	ldr	r1, [pc, #44]	; (8001460 <NextionDrawDot+0x40>)
 8001434:	f005 ffea 	bl	800740c <siprintf>
 8001438:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 800143a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143c:	b29a      	uxth	r2, r3
 800143e:	f107 0108 	add.w	r1, r7, #8
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <NextionDrawDot+0x44>)
 8001448:	f004 fe38 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 800144c:	2364      	movs	r3, #100	; 0x64
 800144e:	2203      	movs	r2, #3
 8001450:	4905      	ldr	r1, [pc, #20]	; (8001468 <NextionDrawDot+0x48>)
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <NextionDrawDot+0x44>)
 8001454:	f004 fe32 	bl	80060bc <HAL_UART_Transmit>
}
 8001458:	bf00      	nop
 800145a:	3740      	adds	r7, #64	; 0x40
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	0800ae9c 	.word	0x0800ae9c
 8001464:	200002c4 	.word	0x200002c4
 8001468:	20000000 	.word	0x20000000

0800146c <NextionDrawTemp>:


void NextionDrawTemp(uint32_t x, uint32_t y){
 800146c:	b580      	push	{r7, lr}
 800146e:	b090      	sub	sp, #64	; 0x40
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]

	char buf[50];
	int len = sprintf(buf, "cirs %lu,%lu,2,RED", x, y);
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	490b      	ldr	r1, [pc, #44]	; (80014ac <NextionDrawTemp+0x40>)
 8001480:	f005 ffc4 	bl	800740c <siprintf>
 8001484:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, len, 1000);
 8001486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001488:	b29a      	uxth	r2, r3
 800148a:	f107 0108 	add.w	r1, r7, #8
 800148e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001492:	4807      	ldr	r0, [pc, #28]	; (80014b0 <NextionDrawTemp+0x44>)
 8001494:	f004 fe12 	bl	80060bc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, Cmd_End, 3, 100);
 8001498:	2364      	movs	r3, #100	; 0x64
 800149a:	2203      	movs	r2, #3
 800149c:	4905      	ldr	r1, [pc, #20]	; (80014b4 <NextionDrawTemp+0x48>)
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <NextionDrawTemp+0x44>)
 80014a0:	f004 fe0c 	bl	80060bc <HAL_UART_Transmit>
}
 80014a4:	bf00      	nop
 80014a6:	3740      	adds	r7, #64	; 0x40
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	0800aeb0 	.word	0x0800aeb0
 80014b0:	200002c4 	.word	0x200002c4
 80014b4:	20000000 	.word	0x20000000

080014b8 <HandleKeyPad>:

float32_t HandleKeyPad() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

	//clear Input
	for (int i = 0; i < 20; i++) {
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	e007      	b.n	80014d4 <HandleKeyPad+0x1c>
		input[i] = 0;
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HandleKeyPad+0xb0>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	2200      	movs	r2, #0
 80014cc:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 20; i++) {
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3301      	adds	r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b13      	cmp	r3, #19
 80014d8:	ddf4      	ble.n	80014c4 <HandleKeyPad+0xc>
	}

	uint8_t index = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	70fb      	strb	r3, [r7, #3]

	NEXTION_SendString("t0", "");
 80014de:	4923      	ldr	r1, [pc, #140]	; (800156c <HandleKeyPad+0xb4>)
 80014e0:	4823      	ldr	r0, [pc, #140]	; (8001570 <HandleKeyPad+0xb8>)
 80014e2:	f7ff fedb 	bl	800129c <NEXTION_SendString>
	UART_Recieved_Flag = 0;
 80014e6:	4b23      	ldr	r3, [pc, #140]	; (8001574 <HandleKeyPad+0xbc>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]

	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 80014ec:	e026      	b.n	800153c <HandleKeyPad+0x84>

		if(strncmp((char*) UART_Recieved_Data, "abbre", 5) == 0)
 80014ee:	2205      	movs	r2, #5
 80014f0:	4921      	ldr	r1, [pc, #132]	; (8001578 <HandleKeyPad+0xc0>)
 80014f2:	4822      	ldr	r0, [pc, #136]	; (800157c <HandleKeyPad+0xc4>)
 80014f4:	f005 ffaa 	bl	800744c <strncmp>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HandleKeyPad+0x4a>
				return 9999;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HandleKeyPad+0xc8>)
 8001500:	e02e      	b.n	8001560 <HandleKeyPad+0xa8>
		if(strncmp((char*) UART_Recieved_Data, "kback", 5) == 0)
 8001502:	2205      	movs	r2, #5
 8001504:	491f      	ldr	r1, [pc, #124]	; (8001584 <HandleKeyPad+0xcc>)
 8001506:	481d      	ldr	r0, [pc, #116]	; (800157c <HandleKeyPad+0xc4>)
 8001508:	f005 ffa0 	bl	800744c <strncmp>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HandleKeyPad+0x5e>
				return 8888;
 8001512:	4b1d      	ldr	r3, [pc, #116]	; (8001588 <HandleKeyPad+0xd0>)
 8001514:	e024      	b.n	8001560 <HandleKeyPad+0xa8>

		if (UART_Recieved_Flag == 1) {
 8001516:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HandleKeyPad+0xbc>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d10e      	bne.n	800153c <HandleKeyPad+0x84>
			input[index] = UART_Recieved_Data[4];
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	4a16      	ldr	r2, [pc, #88]	; (800157c <HandleKeyPad+0xc4>)
 8001522:	7911      	ldrb	r1, [r2, #4]
 8001524:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HandleKeyPad+0xb0>)
 8001526:	54d1      	strb	r1, [r2, r3]
			UART_Recieved_Flag = 0;
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HandleKeyPad+0xbc>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
			index++;
 800152e:	78fb      	ldrb	r3, [r7, #3]
 8001530:	3301      	adds	r3, #1
 8001532:	70fb      	strb	r3, [r7, #3]
			NEXTION_SendString("t0", input);
 8001534:	490c      	ldr	r1, [pc, #48]	; (8001568 <HandleKeyPad+0xb0>)
 8001536:	480e      	ldr	r0, [pc, #56]	; (8001570 <HandleKeyPad+0xb8>)
 8001538:	f7ff feb0 	bl	800129c <NEXTION_SendString>
	while (strncmp((char*) UART_Recieved_Data, "enter", 5) != 0) {
 800153c:	2205      	movs	r2, #5
 800153e:	4913      	ldr	r1, [pc, #76]	; (800158c <HandleKeyPad+0xd4>)
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <HandleKeyPad+0xc4>)
 8001542:	f005 ff83 	bl	800744c <strncmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1d0      	bne.n	80014ee <HandleKeyPad+0x36>
		}
	}
	return atof(input);
 800154c:	4806      	ldr	r0, [pc, #24]	; (8001568 <HandleKeyPad+0xb0>)
 800154e:	f005 fac7 	bl	8006ae0 <atof>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb69 	bl	8000c30 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200002ac 	.word	0x200002ac
 800156c:	0800aec4 	.word	0x0800aec4
 8001570:	0800aec8 	.word	0x0800aec8
 8001574:	20000220 	.word	0x20000220
 8001578:	0800aecc 	.word	0x0800aecc
 800157c:	20000004 	.word	0x20000004
 8001580:	461c3c00 	.word	0x461c3c00
 8001584:	0800aed4 	.word	0x0800aed4
 8001588:	460ae000 	.word	0x460ae000
 800158c:	0800aedc 	.word	0x0800aedc

08001590 <Update_Page_3>:


void Update_Page_3() {
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','3','x','x','x'};
 8001596:	4a20      	ldr	r2, [pc, #128]	; (8001618 <Update_Page_3+0x88>)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800159e:	6018      	str	r0, [r3, #0]
 80015a0:	3304      	adds	r3, #4
 80015a2:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e00b      	b.n	80015c2 <Update_Page_3+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80015aa:	1d3a      	adds	r2, r7, #4
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	4413      	add	r3, r2
 80015b0:	7819      	ldrb	r1, [r3, #0]
 80015b2:	4a1a      	ldr	r2, [pc, #104]	; (800161c <Update_Page_3+0x8c>)
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	460a      	mov	r2, r1
 80015ba:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	ddf0      	ble.n	80015aa <Update_Page_3+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <Update_Page_3+0x90>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4619      	mov	r1, r3
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <Update_Page_3+0x94>)
 80015d0:	f7ff fe8a 	bl	80012e8 <NEXTION_SendFloat>
	NEXTION_SenduInt("t1", ReflowParameters.SoakTime);
 80015d4:	4b12      	ldr	r3, [pc, #72]	; (8001620 <Update_Page_3+0x90>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	4619      	mov	r1, r3
 80015da:	4813      	ldr	r0, [pc, #76]	; (8001628 <Update_Page_3+0x98>)
 80015dc:	f7ff fedc 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <Update_Page_3+0x90>)
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <Update_Page_3+0x9c>)
 80015e8:	f7ff fed6 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SendFloat("t3", ReflowParameters.secondHeatUpRate);
 80015ec:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <Update_Page_3+0x90>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4619      	mov	r1, r3
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <Update_Page_3+0xa0>)
 80015f4:	f7ff fe78 	bl	80012e8 <NEXTION_SendFloat>
	NEXTION_SenduInt("t4", ReflowParameters.ReflowTime);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <Update_Page_3+0x90>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4619      	mov	r1, r3
 80015fe:	480d      	ldr	r0, [pc, #52]	; (8001634 <Update_Page_3+0xa4>)
 8001600:	f7ff feca 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <Update_Page_3+0x90>)
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	4619      	mov	r1, r3
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <Update_Page_3+0xa8>)
 800160c:	f7ff fec4 	bl	8001398 <NEXTION_SenduInt>

}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	0800aee4 	.word	0x0800aee4
 800161c:	20000004 	.word	0x20000004
 8001620:	200012a8 	.word	0x200012a8
 8001624:	0800aec8 	.word	0x0800aec8
 8001628:	0800ae84 	.word	0x0800ae84
 800162c:	0800ae88 	.word	0x0800ae88
 8001630:	0800ae8c 	.word	0x0800ae8c
 8001634:	0800ae90 	.word	0x0800ae90
 8001638:	0800ae94 	.word	0x0800ae94

0800163c <Update_Page_0>:


void Update_Page_0() {
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b089      	sub	sp, #36	; 0x24
 8001640:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','0','x','x','x'};
 8001642:	4a44      	ldr	r2, [pc, #272]	; (8001754 <Update_Page_0+0x118>)
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164a:	6018      	str	r0, [r3, #0]
 800164c:	3304      	adds	r3, #4
 800164e:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++)	{
 8001650:	2300      	movs	r3, #0
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	e00b      	b.n	800166e <Update_Page_0+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 8001656:	1d3a      	adds	r2, r7, #4
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	4413      	add	r3, r2
 800165c:	7819      	ldrb	r1, [r3, #0]
 800165e:	4a3e      	ldr	r2, [pc, #248]	; (8001758 <Update_Page_0+0x11c>)
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	4413      	add	r3, r2
 8001664:	460a      	mov	r2, r1
 8001666:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++)	{
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	2b04      	cmp	r3, #4
 8001672:	ddf0      	ble.n	8001656 <Update_Page_0+0x1a>
	}

	float32_t dx = 0.20833; //275px / 660s / 500 ms
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <Update_Page_0+0x120>)
 8001676:	61bb      	str	r3, [r7, #24]
	float32_t dy = 0.7143; //175px / 245 Grad
 8001678:	4b39      	ldr	r3, [pc, #228]	; (8001760 <Update_Page_0+0x124>)
 800167a:	617b      	str	r3, [r7, #20]
	uint32_t OffsetX = 35;
 800167c:	2323      	movs	r3, #35	; 0x23
 800167e:	613b      	str	r3, [r7, #16]
	uint32_t OffsetY = 240;
 8001680:	23f0      	movs	r3, #240	; 0xf0
 8001682:	60fb      	str	r3, [r7, #12]

		//Reflow Aktuelle Temperatur anzeigen:
		if (ReflowEnable == 1)	{
 8001684:	4b37      	ldr	r3, [pc, #220]	; (8001764 <Update_Page_0+0x128>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d102      	bne.n	8001692 <Update_Page_0+0x56>
			TempDrawEnable = 1;
 800168c:	4b36      	ldr	r3, [pc, #216]	; (8001768 <Update_Page_0+0x12c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]

		}

		if(TempDrawEnable == 1){
 8001692:	4b35      	ldr	r3, [pc, #212]	; (8001768 <Update_Page_0+0x12c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d12a      	bne.n	80016f0 <Update_Page_0+0xb4>
			NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(TempDrawCounter)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <Update_Page_0+0x130>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fbcc 	bl	8000e3c <__aeabi_ui2f>
 80016a4:	4603      	mov	r3, r0
 80016a6:	69b9      	ldr	r1, [r7, #24]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fd59 	bl	8000160 <__aeabi_fmul>
 80016ae:	4603      	mov	r3, r0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fc91 	bl	8000fd8 <__aeabi_f2uiz>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	18d4      	adds	r4, r2, r3
 80016bc:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <Update_Page_0+0x134>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6979      	ldr	r1, [r7, #20]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe fd4c 	bl	8000160 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fc84 	bl	8000fd8 <__aeabi_f2uiz>
 80016d0:	4602      	mov	r2, r0
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	1a9b      	subs	r3, r3, r2
 80016d6:	4619      	mov	r1, r3
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fec7 	bl	800146c <NextionDrawTemp>

		if(ReflowCurve[TempDrawCounter] == 0 ){
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <Update_Page_0+0x130>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a24      	ldr	r2, [pc, #144]	; (8001774 <Update_Page_0+0x138>)
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <Update_Page_0+0xb4>
			TempDrawEnable = 0;
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <Update_Page_0+0x12c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
		}


		}

	NEXTION_SendFloat_CurrentTemp("t0", temp);
 80016f0:	4b1f      	ldr	r3, [pc, #124]	; (8001770 <Update_Page_0+0x134>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4619      	mov	r1, r3
 80016f6:	4820      	ldr	r0, [pc, #128]	; (8001778 <Update_Page_0+0x13c>)
 80016f8:	f7ff fe22 	bl	8001340 <NEXTION_SendFloat_CurrentTemp>
	NEXTION_SendFloat("t1", ReflowParameters.firstHeatUpRate);
 80016fc:	4b1f      	ldr	r3, [pc, #124]	; (800177c <Update_Page_0+0x140>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	4619      	mov	r1, r3
 8001702:	481f      	ldr	r0, [pc, #124]	; (8001780 <Update_Page_0+0x144>)
 8001704:	f7ff fdf0 	bl	80012e8 <NEXTION_SendFloat>
	NEXTION_SenduInt("t3", ReflowParameters.SoakTime);
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <Update_Page_0+0x140>)
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	4619      	mov	r1, r3
 800170e:	481d      	ldr	r0, [pc, #116]	; (8001784 <Update_Page_0+0x148>)
 8001710:	f7ff fe42 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SenduInt("t2", ReflowParameters.SoakTempeture);
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <Update_Page_0+0x140>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4619      	mov	r1, r3
 800171a:	481b      	ldr	r0, [pc, #108]	; (8001788 <Update_Page_0+0x14c>)
 800171c:	f7ff fe3c 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SendFloat("t4", ReflowParameters.secondHeatUpRate);
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <Update_Page_0+0x140>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	4619      	mov	r1, r3
 8001726:	4819      	ldr	r0, [pc, #100]	; (800178c <Update_Page_0+0x150>)
 8001728:	f7ff fdde 	bl	80012e8 <NEXTION_SendFloat>
	NEXTION_SenduInt("t6", ReflowParameters.ReflowTime);
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <Update_Page_0+0x140>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4619      	mov	r1, r3
 8001732:	4817      	ldr	r0, [pc, #92]	; (8001790 <Update_Page_0+0x154>)
 8001734:	f7ff fe30 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SenduInt("t5", ReflowParameters.ReflowTempeture);
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <Update_Page_0+0x140>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4619      	mov	r1, r3
 800173e:	4815      	ldr	r0, [pc, #84]	; (8001794 <Update_Page_0+0x158>)
 8001740:	f7ff fe2a 	bl	8001398 <NEXTION_SenduInt>
	NEXTION_SendString("g1", ConsoleMSG);
 8001744:	4914      	ldr	r1, [pc, #80]	; (8001798 <Update_Page_0+0x15c>)
 8001746:	4815      	ldr	r0, [pc, #84]	; (800179c <Update_Page_0+0x160>)
 8001748:	f7ff fda8 	bl	800129c <NEXTION_SendString>

}
 800174c:	bf00      	nop
 800174e:	3724      	adds	r7, #36	; 0x24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd90      	pop	{r4, r7, pc}
 8001754:	0800aef0 	.word	0x0800aef0
 8001758:	20000004 	.word	0x20000004
 800175c:	3e555476 	.word	0x3e555476
 8001760:	3f36dc5d 	.word	0x3f36dc5d
 8001764:	2000021c 	.word	0x2000021c
 8001768:	2000022e 	.word	0x2000022e
 800176c:	20000230 	.word	0x20000230
 8001770:	200002c0 	.word	0x200002c0
 8001774:	20000308 	.word	0x20000308
 8001778:	0800aec8 	.word	0x0800aec8
 800177c:	200012a8 	.word	0x200012a8
 8001780:	0800ae84 	.word	0x0800ae84
 8001784:	0800ae8c 	.word	0x0800ae8c
 8001788:	0800ae88 	.word	0x0800ae88
 800178c:	0800ae90 	.word	0x0800ae90
 8001790:	0800ae98 	.word	0x0800ae98
 8001794:	0800ae94 	.word	0x0800ae94
 8001798:	200013d8 	.word	0x200013d8
 800179c:	0800aeec 	.word	0x0800aeec

080017a0 <Update_Page_2>:


void Update_Page_2() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
	uint8_t defaultUart[5] = {'p','2','x','x','x'};
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <Update_Page_2+0x64>)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ae:	6018      	str	r0, [r3, #0]
 80017b0:	3304      	adds	r3, #4
 80017b2:	7019      	strb	r1, [r3, #0]
	for(int i=0;i<5;i++){
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e00b      	b.n	80017d2 <Update_Page_2+0x32>
		UART_Recieved_Data[i]=defaultUart[i];
 80017ba:	1d3a      	adds	r2, r7, #4
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	7819      	ldrb	r1, [r3, #0]
 80017c2:	4a11      	ldr	r2, [pc, #68]	; (8001808 <Update_Page_2+0x68>)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<5;i++){
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3301      	adds	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	ddf0      	ble.n	80017ba <Update_Page_2+0x1a>
	}

	NEXTION_SendFloat("t0", ReflowParameters.KP);
 80017d8:	4b0c      	ldr	r3, [pc, #48]	; (800180c <Update_Page_2+0x6c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4619      	mov	r1, r3
 80017de:	480c      	ldr	r0, [pc, #48]	; (8001810 <Update_Page_2+0x70>)
 80017e0:	f7ff fd82 	bl	80012e8 <NEXTION_SendFloat>
	NEXTION_SendFloat("t1", ReflowParameters.Ki);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <Update_Page_2+0x6c>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4619      	mov	r1, r3
 80017ea:	480a      	ldr	r0, [pc, #40]	; (8001814 <Update_Page_2+0x74>)
 80017ec:	f7ff fd7c 	bl	80012e8 <NEXTION_SendFloat>
	NEXTION_SendFloat("t2", ReflowParameters.KD);
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <Update_Page_2+0x6c>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	4619      	mov	r1, r3
 80017f6:	4808      	ldr	r0, [pc, #32]	; (8001818 <Update_Page_2+0x78>)
 80017f8:	f7ff fd76 	bl	80012e8 <NEXTION_SendFloat>
}
 80017fc:	bf00      	nop
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	0800aef8 	.word	0x0800aef8
 8001808:	20000004 	.word	0x20000004
 800180c:	200012a8 	.word	0x200012a8
 8001810:	0800aec8 	.word	0x0800aec8
 8001814:	0800ae84 	.word	0x0800ae84
 8001818:	0800ae88 	.word	0x0800ae88
 800181c:	00000000 	.word	0x00000000

08001820 <HandleGui>:


void HandleGui(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b0a4      	sub	sp, #144	; 0x90
 8001824:	af00      	add	r7, sp, #0
	//###################Page0##########################

	if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0){
 8001826:	2205      	movs	r2, #5
 8001828:	49bc      	ldr	r1, [pc, #752]	; (8001b1c <HandleGui+0x2fc>)
 800182a:	48bd      	ldr	r0, [pc, #756]	; (8001b20 <HandleGui+0x300>)
 800182c:	f005 fe0e 	bl	800744c <strncmp>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HandleGui+0x1a>
			Update_Page_0();
 8001836:	f7ff ff01 	bl	800163c <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 800183a:	2205      	movs	r2, #5
 800183c:	49b9      	ldr	r1, [pc, #740]	; (8001b24 <HandleGui+0x304>)
 800183e:	48b8      	ldr	r0, [pc, #736]	; (8001b20 <HandleGui+0x300>)
 8001840:	f005 fe04 	bl	800744c <strncmp>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d101      	bne.n	800184e <HandleGui+0x2e>
			Update_Page_3();
 800184a:	f7ff fea1 	bl	8001590 <Update_Page_3>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b00", 5) == 0){
 800184e:	2205      	movs	r2, #5
 8001850:	49b5      	ldr	r1, [pc, #724]	; (8001b28 <HandleGui+0x308>)
 8001852:	48b3      	ldr	r0, [pc, #716]	; (8001b20 <HandleGui+0x300>)
 8001854:	f005 fdfa 	bl	800744c <strncmp>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d103      	bne.n	8001866 <HandleGui+0x46>
			startReflow();
 800185e:	f001 f887 	bl	8002970 <startReflow>
			Update_Page_0();
 8001862:	f7ff feeb 	bl	800163c <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b01", 5) == 0){
 8001866:	2205      	movs	r2, #5
 8001868:	49b0      	ldr	r1, [pc, #704]	; (8001b2c <HandleGui+0x30c>)
 800186a:	48ad      	ldr	r0, [pc, #692]	; (8001b20 <HandleGui+0x300>)
 800186c:	f005 fdee 	bl	800744c <strncmp>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <HandleGui+0x6c>
			stopReflow();
 8001876:	f001 f893 	bl	80029a0 <stopReflow>
			  // buzzer beeps at the FINISHED cycle until STOP button pressed
			  if (BuzzerEnable == 1)	{
 800187a:	4bad      	ldr	r3, [pc, #692]	; (8001b30 <HandleGui+0x310>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <HandleGui+0x68>
				  BuzzerEnable = 0;
 8001882:	4bab      	ldr	r3, [pc, #684]	; (8001b30 <HandleGui+0x310>)
 8001884:	2200      	movs	r2, #0
 8001886:	701a      	strb	r2, [r3, #0]
			  }
			Update_Page_0();
 8001888:	f7ff fed8 	bl	800163c <Update_Page_0>
			}

	if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0){
 800188c:	2205      	movs	r2, #5
 800188e:	49a5      	ldr	r1, [pc, #660]	; (8001b24 <HandleGui+0x304>)
 8001890:	48a3      	ldr	r0, [pc, #652]	; (8001b20 <HandleGui+0x300>)
 8001892:	f005 fddb 	bl	800744c <strncmp>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HandleGui+0x80>
			Update_Page_3();
 800189c:	f7ff fe78 	bl	8001590 <Update_Page_3>
			}

	//###################Page2##########################

	  if(strncmp((char *)UART_Recieved_Data, "p2xxx", 5) == 0){
 80018a0:	2205      	movs	r2, #5
 80018a2:	49a4      	ldr	r1, [pc, #656]	; (8001b34 <HandleGui+0x314>)
 80018a4:	489e      	ldr	r0, [pc, #632]	; (8001b20 <HandleGui+0x300>)
 80018a6:	f005 fdd1 	bl	800744c <strncmp>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HandleGui+0x94>
		Update_Page_2();
 80018b0:	f7ff ff76 	bl	80017a0 <Update_Page_2>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b00", 5) == 0){
 80018b4:	2205      	movs	r2, #5
 80018b6:	49a0      	ldr	r1, [pc, #640]	; (8001b38 <HandleGui+0x318>)
 80018b8:	4899      	ldr	r0, [pc, #612]	; (8001b20 <HandleGui+0x300>)
 80018ba:	f005 fdc7 	bl	800744c <strncmp>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d152      	bne.n	800196a <HandleGui+0x14a>
			  float32_t Output =0;
 80018c4:	f04f 0300 	mov.w	r3, #0
 80018c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  Output = HandleKeyPad();
 80018cc:	f7ff fdf4 	bl	80014b8 <HandleKeyPad>
 80018d0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 80018d4:	e024      	b.n	8001920 <HandleGui+0x100>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 80018d6:	4a99      	ldr	r2, [pc, #612]	; (8001b3c <HandleGui+0x31c>)
 80018d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e0:	6018      	str	r0, [r3, #0]
 80018e2:	3304      	adds	r3, #4
 80018e4:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 80018e6:	2300      	movs	r3, #0
 80018e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80018ec:	e010      	b.n	8001910 <HandleGui+0xf0>
						UART_Recieved_Data[i]=defaultUart[i];
 80018ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80018f6:	4413      	add	r3, r2
 80018f8:	7819      	ldrb	r1, [r3, #0]
 80018fa:	4a89      	ldr	r2, [pc, #548]	; (8001b20 <HandleGui+0x300>)
 80018fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001900:	4413      	add	r3, r2
 8001902:	460a      	mov	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001906:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800190a:	3301      	adds	r3, #1
 800190c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001914:	2b04      	cmp	r3, #4
 8001916:	ddea      	ble.n	80018ee <HandleGui+0xce>
					}
				  Output = HandleKeyPad();
 8001918:	f7ff fdce 	bl	80014b8 <HandleKeyPad>
 800191c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			  while(Output == 9999){
 8001920:	4987      	ldr	r1, [pc, #540]	; (8001b40 <HandleGui+0x320>)
 8001922:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001926:	f7ff fb25 	bl	8000f74 <__aeabi_fcmpeq>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1d2      	bne.n	80018d6 <HandleGui+0xb6>
			  }
			  if(Output == 8888){
 8001930:	4984      	ldr	r1, [pc, #528]	; (8001b44 <HandleGui+0x324>)
 8001932:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001936:	f7ff fb1d 	bl	8000f74 <__aeabi_fcmpeq>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HandleGui+0x128>
				 Output = ReflowParameters.KP;
 8001940:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HandleGui+0x328>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			  }

	    ReflowParameters.KP = Output;
 8001948:	4a7f      	ldr	r2, [pc, #508]	; (8001b48 <HandleGui+0x328>)
 800194a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800194e:	6013      	str	r3, [r2, #0]
	    PID.Kp = ReflowParameters.KP;
 8001950:	4b7d      	ldr	r3, [pc, #500]	; (8001b48 <HandleGui+0x328>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a7d      	ldr	r2, [pc, #500]	; (8001b4c <HandleGui+0x32c>)
 8001956:	6193      	str	r3, [r2, #24]
		arm_pid_init_f32(&PID, 1);
 8001958:	2101      	movs	r1, #1
 800195a:	487c      	ldr	r0, [pc, #496]	; (8001b4c <HandleGui+0x32c>)
 800195c:	f005 f898 	bl	8006a90 <arm_pid_init_f32>
		Update_Page_2();
 8001960:	f7ff ff1e 	bl	80017a0 <Update_Page_2>
		NEXTION_CMD("page 2");
 8001964:	487a      	ldr	r0, [pc, #488]	; (8001b50 <HandleGui+0x330>)
 8001966:	f7ff fd3d 	bl	80013e4 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b01", 5) == 0){
 800196a:	2205      	movs	r2, #5
 800196c:	4979      	ldr	r1, [pc, #484]	; (8001b54 <HandleGui+0x334>)
 800196e:	486c      	ldr	r0, [pc, #432]	; (8001b20 <HandleGui+0x300>)
 8001970:	f005 fd6c 	bl	800744c <strncmp>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d152      	bne.n	8001a20 <HandleGui+0x200>
			  float32_t Output =0;
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  Output = HandleKeyPad();
 8001982:	f7ff fd99 	bl	80014b8 <HandleKeyPad>
 8001986:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 800198a:	e024      	b.n	80019d6 <HandleGui+0x1b6>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 800198c:	4a6b      	ldr	r2, [pc, #428]	; (8001b3c <HandleGui+0x31c>)
 800198e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001996:	6018      	str	r0, [r3, #0]
 8001998:	3304      	adds	r3, #4
 800199a:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019a2:	e010      	b.n	80019c6 <HandleGui+0x1a6>
						UART_Recieved_Data[i]=defaultUart[i];
 80019a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80019a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019ac:	4413      	add	r3, r2
 80019ae:	7819      	ldrb	r1, [r3, #0]
 80019b0:	4a5b      	ldr	r2, [pc, #364]	; (8001b20 <HandleGui+0x300>)
 80019b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019b6:	4413      	add	r3, r2
 80019b8:	460a      	mov	r2, r1
 80019ba:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 80019bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019c0:	3301      	adds	r3, #1
 80019c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80019c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	ddea      	ble.n	80019a4 <HandleGui+0x184>
					}
				  Output = HandleKeyPad();
 80019ce:	f7ff fd73 	bl	80014b8 <HandleKeyPad>
 80019d2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
			  while(Output == 9999){
 80019d6:	495a      	ldr	r1, [pc, #360]	; (8001b40 <HandleGui+0x320>)
 80019d8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019dc:	f7ff faca 	bl	8000f74 <__aeabi_fcmpeq>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1d2      	bne.n	800198c <HandleGui+0x16c>
			  }
			  if(Output == 8888){
 80019e6:	4957      	ldr	r1, [pc, #348]	; (8001b44 <HandleGui+0x324>)
 80019e8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019ec:	f7ff fac2 	bl	8000f74 <__aeabi_fcmpeq>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HandleGui+0x1de>
				 Output = ReflowParameters.Ki;
 80019f6:	4b54      	ldr	r3, [pc, #336]	; (8001b48 <HandleGui+0x328>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			  }
			  ReflowParameters.Ki = Output;
 80019fe:	4a52      	ldr	r2, [pc, #328]	; (8001b48 <HandleGui+0x328>)
 8001a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a04:	6053      	str	r3, [r2, #4]
			  	    PID.Ki = ReflowParameters.Ki;
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HandleGui+0x328>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a50      	ldr	r2, [pc, #320]	; (8001b4c <HandleGui+0x32c>)
 8001a0c:	61d3      	str	r3, [r2, #28]
			arm_pid_init_f32(&PID, 1);
 8001a0e:	2101      	movs	r1, #1
 8001a10:	484e      	ldr	r0, [pc, #312]	; (8001b4c <HandleGui+0x32c>)
 8001a12:	f005 f83d 	bl	8006a90 <arm_pid_init_f32>
			Update_Page_2();
 8001a16:	f7ff fec3 	bl	80017a0 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001a1a:	484d      	ldr	r0, [pc, #308]	; (8001b50 <HandleGui+0x330>)
 8001a1c:	f7ff fce2 	bl	80013e4 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b02", 5) == 0){
 8001a20:	2205      	movs	r2, #5
 8001a22:	494d      	ldr	r1, [pc, #308]	; (8001b58 <HandleGui+0x338>)
 8001a24:	483e      	ldr	r0, [pc, #248]	; (8001b20 <HandleGui+0x300>)
 8001a26:	f005 fd11 	bl	800744c <strncmp>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d145      	bne.n	8001abc <HandleGui+0x29c>
			  float32_t Output =0;
 8001a30:	f04f 0300 	mov.w	r3, #0
 8001a34:	67fb      	str	r3, [r7, #124]	; 0x7c
			  Output = HandleKeyPad();
 8001a36:	f7ff fd3f 	bl	80014b8 <HandleKeyPad>
 8001a3a:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001a3c:	e01d      	b.n	8001a7a <HandleGui+0x25a>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001a3e:	4a3f      	ldr	r2, [pc, #252]	; (8001b3c <HandleGui+0x31c>)
 8001a40:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a48:	6018      	str	r0, [r3, #0]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001a4e:	2300      	movs	r3, #0
 8001a50:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a52:	e00c      	b.n	8001a6e <HandleGui+0x24e>
						UART_Recieved_Data[i]=defaultUart[i];
 8001a54:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a5a:	4413      	add	r3, r2
 8001a5c:	7819      	ldrb	r1, [r3, #0]
 8001a5e:	4a30      	ldr	r2, [pc, #192]	; (8001b20 <HandleGui+0x300>)
 8001a60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a62:	4413      	add	r3, r2
 8001a64:	460a      	mov	r2, r1
 8001a66:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8001a6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001a70:	2b04      	cmp	r3, #4
 8001a72:	ddef      	ble.n	8001a54 <HandleGui+0x234>
					}
				  Output = HandleKeyPad();
 8001a74:	f7ff fd20 	bl	80014b8 <HandleKeyPad>
 8001a78:	67f8      	str	r0, [r7, #124]	; 0x7c
			  while(Output == 9999){
 8001a7a:	4931      	ldr	r1, [pc, #196]	; (8001b40 <HandleGui+0x320>)
 8001a7c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001a7e:	f7ff fa79 	bl	8000f74 <__aeabi_fcmpeq>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1da      	bne.n	8001a3e <HandleGui+0x21e>
			  }
			  if(Output == 8888){
 8001a88:	492e      	ldr	r1, [pc, #184]	; (8001b44 <HandleGui+0x324>)
 8001a8a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001a8c:	f7ff fa72 	bl	8000f74 <__aeabi_fcmpeq>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HandleGui+0x27c>
				 Output = ReflowParameters.KD;
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HandleGui+0x328>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	67fb      	str	r3, [r7, #124]	; 0x7c
			  }
			  ReflowParameters.KD = Output;
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <HandleGui+0x328>)
 8001a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001aa0:	6093      	str	r3, [r2, #8]
			 			  	    PID.Kd = ReflowParameters.KD;
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HandleGui+0x328>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <HandleGui+0x32c>)
 8001aa8:	6213      	str	r3, [r2, #32]
			arm_pid_init_f32(&PID, 1);
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4827      	ldr	r0, [pc, #156]	; (8001b4c <HandleGui+0x32c>)
 8001aae:	f004 ffef 	bl	8006a90 <arm_pid_init_f32>
			Update_Page_2();
 8001ab2:	f7ff fe75 	bl	80017a0 <Update_Page_2>
			NEXTION_CMD("page 2");
 8001ab6:	4826      	ldr	r0, [pc, #152]	; (8001b50 <HandleGui+0x330>)
 8001ab8:	f7ff fc94 	bl	80013e4 <NEXTION_CMD>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p2b03", 5) == 0){
 8001abc:	2205      	movs	r2, #5
 8001abe:	4927      	ldr	r1, [pc, #156]	; (8001b5c <HandleGui+0x33c>)
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <HandleGui+0x300>)
 8001ac2:	f005 fcc3 	bl	800744c <strncmp>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d103      	bne.n	8001ad4 <HandleGui+0x2b4>
			Update_Page_3();
 8001acc:	f7ff fd60 	bl	8001590 <Update_Page_3>
			SaveReflowParameters();
 8001ad0:	f7ff fbc0 	bl	8001254 <SaveReflowParameters>
		}


	//###################Page 3########################

	  if(strncmp((char *)UART_Recieved_Data, "p3xxx", 5) == 0){
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	4922      	ldr	r1, [pc, #136]	; (8001b60 <HandleGui+0x340>)
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <HandleGui+0x300>)
 8001ada:	f005 fcb7 	bl	800744c <strncmp>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <HandleGui+0x2c8>
		Update_Page_3();
 8001ae4:	f7ff fd54 	bl	8001590 <Update_Page_3>
		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b00", 5) == 0){
 8001ae8:	2205      	movs	r2, #5
 8001aea:	491e      	ldr	r1, [pc, #120]	; (8001b64 <HandleGui+0x344>)
 8001aec:	480c      	ldr	r0, [pc, #48]	; (8001b20 <HandleGui+0x300>)
 8001aee:	f005 fcad 	bl	800744c <strncmp>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d17d      	bne.n	8001bf4 <HandleGui+0x3d4>
			  float32_t Output =0;
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	677b      	str	r3, [r7, #116]	; 0x74
			  Output = HandleKeyPad();
 8001afe:	f7ff fcdb 	bl	80014b8 <HandleKeyPad>
 8001b02:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001b04:	e043      	b.n	8001b8e <HandleGui+0x36e>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HandleGui+0x31c>)
 8001b08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b10:	6018      	str	r0, [r3, #0]
 8001b12:	3304      	adds	r3, #4
 8001b14:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001b16:	2300      	movs	r3, #0
 8001b18:	673b      	str	r3, [r7, #112]	; 0x70
 8001b1a:	e032      	b.n	8001b82 <HandleGui+0x362>
 8001b1c:	0800af00 	.word	0x0800af00
 8001b20:	20000004 	.word	0x20000004
 8001b24:	0800af08 	.word	0x0800af08
 8001b28:	0800af10 	.word	0x0800af10
 8001b2c:	0800af18 	.word	0x0800af18
 8001b30:	2000021d 	.word	0x2000021d
 8001b34:	0800af20 	.word	0x0800af20
 8001b38:	0800af28 	.word	0x0800af28
 8001b3c:	0800afe8 	.word	0x0800afe8
 8001b40:	461c3c00 	.word	0x461c3c00
 8001b44:	460ae000 	.word	0x460ae000
 8001b48:	200012a8 	.word	0x200012a8
 8001b4c:	20000288 	.word	0x20000288
 8001b50:	0800af30 	.word	0x0800af30
 8001b54:	0800af38 	.word	0x0800af38
 8001b58:	0800af40 	.word	0x0800af40
 8001b5c:	0800af48 	.word	0x0800af48
 8001b60:	0800af50 	.word	0x0800af50
 8001b64:	0800af58 	.word	0x0800af58
						UART_Recieved_Data[i]=defaultUart[i];
 8001b68:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b6e:	4413      	add	r3, r2
 8001b70:	7819      	ldrb	r1, [r3, #0]
 8001b72:	4a8d      	ldr	r2, [pc, #564]	; (8001da8 <HandleGui+0x588>)
 8001b74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b76:	4413      	add	r3, r2
 8001b78:	460a      	mov	r2, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b7e:	3301      	adds	r3, #1
 8001b80:	673b      	str	r3, [r7, #112]	; 0x70
 8001b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b84:	2b04      	cmp	r3, #4
 8001b86:	ddef      	ble.n	8001b68 <HandleGui+0x348>
					}
				  Output = HandleKeyPad();
 8001b88:	f7ff fc96 	bl	80014b8 <HandleKeyPad>
 8001b8c:	6778      	str	r0, [r7, #116]	; 0x74
			  while(Output == 9999){
 8001b8e:	4987      	ldr	r1, [pc, #540]	; (8001dac <HandleGui+0x58c>)
 8001b90:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001b92:	f7ff f9ef 	bl	8000f74 <__aeabi_fcmpeq>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1b4      	bne.n	8001b06 <HandleGui+0x2e6>
			  }
			  if(Output == 8888){
 8001b9c:	4984      	ldr	r1, [pc, #528]	; (8001db0 <HandleGui+0x590>)
 8001b9e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001ba0:	f7ff f9e8 	bl	8000f74 <__aeabi_fcmpeq>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d002      	beq.n	8001bb0 <HandleGui+0x390>
				 Output = ReflowParameters.firstHeatUpRate;
 8001baa:	4b82      	ldr	r3, [pc, #520]	; (8001db4 <HandleGui+0x594>)
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	677b      	str	r3, [r7, #116]	; 0x74
			  }

			  if (Output < 0.2)
 8001bb0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bb2:	f7fe fced 	bl	8000590 <__aeabi_f2d>
 8001bb6:	a37a      	add	r3, pc, #488	; (adr r3, 8001da0 <HandleGui+0x580>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	f7fe ffb2 	bl	8000b24 <__aeabi_dcmplt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HandleGui+0x3aa>
				  Output = 0.2;
 8001bc6:	4b7c      	ldr	r3, [pc, #496]	; (8001db8 <HandleGui+0x598>)
 8001bc8:	677b      	str	r3, [r7, #116]	; 0x74
			  if (Output > 1.5)
 8001bca:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001bce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001bd0:	f7ff f9f8 	bl	8000fc4 <__aeabi_fcmpgt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d002      	beq.n	8001be0 <HandleGui+0x3c0>
				  Output = 1.5;
 8001bda:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001bde:	677b      	str	r3, [r7, #116]	; 0x74

		ReflowParameters.firstHeatUpRate = Output;
 8001be0:	4a74      	ldr	r2, [pc, #464]	; (8001db4 <HandleGui+0x594>)
 8001be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001be4:	60d3      	str	r3, [r2, #12]
		Update_Page_3();
 8001be6:	f7ff fcd3 	bl	8001590 <Update_Page_3>
		NEXTION_CMD("page 3");
 8001bea:	4874      	ldr	r0, [pc, #464]	; (8001dbc <HandleGui+0x59c>)
 8001bec:	f7ff fbfa 	bl	80013e4 <NEXTION_CMD>
		calculateReflowCurve();
 8001bf0:	f000 fd16 	bl	8002620 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b01", 5) == 0){
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	4972      	ldr	r1, [pc, #456]	; (8001dc0 <HandleGui+0x5a0>)
 8001bf8:	486b      	ldr	r0, [pc, #428]	; (8001da8 <HandleGui+0x588>)
 8001bfa:	f005 fc27 	bl	800744c <strncmp>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d14f      	bne.n	8001ca4 <HandleGui+0x484>
			  float32_t Output =0;
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	66fb      	str	r3, [r7, #108]	; 0x6c
			  Output = HandleKeyPad();
 8001c0a:	f7ff fc55 	bl	80014b8 <HandleKeyPad>
 8001c0e:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001c10:	e01d      	b.n	8001c4e <HandleGui+0x42e>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001c12:	4a6c      	ldr	r2, [pc, #432]	; (8001dc4 <HandleGui+0x5a4>)
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c1c:	6018      	str	r0, [r3, #0]
 8001c1e:	3304      	adds	r3, #4
 8001c20:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001c22:	2300      	movs	r3, #0
 8001c24:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c26:	e00c      	b.n	8001c42 <HandleGui+0x422>
						UART_Recieved_Data[i]=defaultUart[i];
 8001c28:	f107 0220 	add.w	r2, r7, #32
 8001c2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c2e:	4413      	add	r3, r2
 8001c30:	7819      	ldrb	r1, [r3, #0]
 8001c32:	4a5d      	ldr	r2, [pc, #372]	; (8001da8 <HandleGui+0x588>)
 8001c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c36:	4413      	add	r3, r2
 8001c38:	460a      	mov	r2, r1
 8001c3a:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001c3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c3e:	3301      	adds	r3, #1
 8001c40:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	ddef      	ble.n	8001c28 <HandleGui+0x408>
					}
				  Output = HandleKeyPad();
 8001c48:	f7ff fc36 	bl	80014b8 <HandleKeyPad>
 8001c4c:	66f8      	str	r0, [r7, #108]	; 0x6c
			  while(Output == 9999){
 8001c4e:	4957      	ldr	r1, [pc, #348]	; (8001dac <HandleGui+0x58c>)
 8001c50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c52:	f7ff f98f 	bl	8000f74 <__aeabi_fcmpeq>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d1da      	bne.n	8001c12 <HandleGui+0x3f2>
			  }
			  if(Output == 8888){
 8001c5c:	4954      	ldr	r1, [pc, #336]	; (8001db0 <HandleGui+0x590>)
 8001c5e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c60:	f7ff f988 	bl	8000f74 <__aeabi_fcmpeq>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HandleGui+0x458>
				 Output = ReflowParameters.SoakTime;
 8001c6a:	4b52      	ldr	r3, [pc, #328]	; (8001db4 <HandleGui+0x594>)
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f8e4 	bl	8000e3c <__aeabi_ui2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	66fb      	str	r3, [r7, #108]	; 0x6c
			  }

			  if (Output > 300)
 8001c78:	4953      	ldr	r1, [pc, #332]	; (8001dc8 <HandleGui+0x5a8>)
 8001c7a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c7c:	f7ff f9a2 	bl	8000fc4 <__aeabi_fcmpgt>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HandleGui+0x46a>
				  Output = 300;
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HandleGui+0x5a8>)
 8001c88:	66fb      	str	r3, [r7, #108]	; 0x6c

			ReflowParameters.SoakTime = Output;
 8001c8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001c8c:	f7ff f9a4 	bl	8000fd8 <__aeabi_f2uiz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HandleGui+0x594>)
 8001c94:	6153      	str	r3, [r2, #20]
			Update_Page_3();
 8001c96:	f7ff fc7b 	bl	8001590 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001c9a:	4848      	ldr	r0, [pc, #288]	; (8001dbc <HandleGui+0x59c>)
 8001c9c:	f7ff fba2 	bl	80013e4 <NEXTION_CMD>
			calculateReflowCurve();
 8001ca0:	f000 fcbe 	bl	8002620 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b02", 5) == 0){
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	4949      	ldr	r1, [pc, #292]	; (8001dcc <HandleGui+0x5ac>)
 8001ca8:	483f      	ldr	r0, [pc, #252]	; (8001da8 <HandleGui+0x588>)
 8001caa:	f005 fbcf 	bl	800744c <strncmp>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d158      	bne.n	8001d66 <HandleGui+0x546>
			  float32_t Output =0;
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	667b      	str	r3, [r7, #100]	; 0x64
			  Output = HandleKeyPad();
 8001cba:	f7ff fbfd 	bl	80014b8 <HandleKeyPad>
 8001cbe:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001cc0:	e01d      	b.n	8001cfe <HandleGui+0x4de>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001cc2:	4a40      	ldr	r2, [pc, #256]	; (8001dc4 <HandleGui+0x5a4>)
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd6:	e00c      	b.n	8001cf2 <HandleGui+0x4d2>
						UART_Recieved_Data[i]=defaultUart[i];
 8001cd8:	f107 0218 	add.w	r2, r7, #24
 8001cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cde:	4413      	add	r3, r2
 8001ce0:	7819      	ldrb	r1, [r3, #0]
 8001ce2:	4a31      	ldr	r2, [pc, #196]	; (8001da8 <HandleGui+0x588>)
 8001ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ce6:	4413      	add	r3, r2
 8001ce8:	460a      	mov	r2, r1
 8001cea:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cee:	3301      	adds	r3, #1
 8001cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8001cf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	ddef      	ble.n	8001cd8 <HandleGui+0x4b8>
					}
				  Output = HandleKeyPad();
 8001cf8:	f7ff fbde 	bl	80014b8 <HandleKeyPad>
 8001cfc:	6678      	str	r0, [r7, #100]	; 0x64
			  while(Output == 9999){
 8001cfe:	492b      	ldr	r1, [pc, #172]	; (8001dac <HandleGui+0x58c>)
 8001d00:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d02:	f7ff f937 	bl	8000f74 <__aeabi_fcmpeq>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1da      	bne.n	8001cc2 <HandleGui+0x4a2>
			  }
			  if(Output == 8888){
 8001d0c:	4928      	ldr	r1, [pc, #160]	; (8001db0 <HandleGui+0x590>)
 8001d0e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d10:	f7ff f930 	bl	8000f74 <__aeabi_fcmpeq>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d006      	beq.n	8001d28 <HandleGui+0x508>
				 Output = ReflowParameters.SoakTempeture;
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <HandleGui+0x594>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff f88c 	bl	8000e3c <__aeabi_ui2f>
 8001d24:	4603      	mov	r3, r0
 8001d26:	667b      	str	r3, [r7, #100]	; 0x64
			  }

			  if (Output < 30)
 8001d28:	4929      	ldr	r1, [pc, #164]	; (8001dd0 <HandleGui+0x5b0>)
 8001d2a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d2c:	f7ff f92c 	bl	8000f88 <__aeabi_fcmplt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HandleGui+0x51a>
				  Output = 30;
 8001d36:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <HandleGui+0x5b0>)
 8001d38:	667b      	str	r3, [r7, #100]	; 0x64
			  if (Output > 240)
 8001d3a:	4926      	ldr	r1, [pc, #152]	; (8001dd4 <HandleGui+0x5b4>)
 8001d3c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d3e:	f7ff f941 	bl	8000fc4 <__aeabi_fcmpgt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HandleGui+0x52c>
				  Output = 240;
 8001d48:	4b22      	ldr	r3, [pc, #136]	; (8001dd4 <HandleGui+0x5b4>)
 8001d4a:	667b      	str	r3, [r7, #100]	; 0x64

			ReflowParameters.SoakTempeture = Output;
 8001d4c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001d4e:	f7ff f943 	bl	8000fd8 <__aeabi_f2uiz>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a17      	ldr	r2, [pc, #92]	; (8001db4 <HandleGui+0x594>)
 8001d56:	6113      	str	r3, [r2, #16]
			Update_Page_3();
 8001d58:	f7ff fc1a 	bl	8001590 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001d5c:	4817      	ldr	r0, [pc, #92]	; (8001dbc <HandleGui+0x59c>)
 8001d5e:	f7ff fb41 	bl	80013e4 <NEXTION_CMD>
			calculateReflowCurve();
 8001d62:	f000 fc5d 	bl	8002620 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b03", 5) == 0){
 8001d66:	2205      	movs	r2, #5
 8001d68:	491b      	ldr	r1, [pc, #108]	; (8001dd8 <HandleGui+0x5b8>)
 8001d6a:	480f      	ldr	r0, [pc, #60]	; (8001da8 <HandleGui+0x588>)
 8001d6c:	f005 fb6e 	bl	800744c <strncmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d178      	bne.n	8001e68 <HandleGui+0x648>
			  float32_t Output =0;
 8001d76:	f04f 0300 	mov.w	r3, #0
 8001d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
			  Output = HandleKeyPad();
 8001d7c:	f7ff fb9c 	bl	80014b8 <HandleKeyPad>
 8001d80:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001d82:	e03e      	b.n	8001e02 <HandleGui+0x5e2>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <HandleGui+0x5a4>)
 8001d86:	f107 0310 	add.w	r3, r7, #16
 8001d8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d8e:	6018      	str	r0, [r3, #0]
 8001d90:	3304      	adds	r3, #4
 8001d92:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001d94:	2300      	movs	r3, #0
 8001d96:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d98:	e02d      	b.n	8001df6 <HandleGui+0x5d6>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	9999999a 	.word	0x9999999a
 8001da4:	3fc99999 	.word	0x3fc99999
 8001da8:	20000004 	.word	0x20000004
 8001dac:	461c3c00 	.word	0x461c3c00
 8001db0:	460ae000 	.word	0x460ae000
 8001db4:	200012a8 	.word	0x200012a8
 8001db8:	3e4ccccd 	.word	0x3e4ccccd
 8001dbc:	0800af60 	.word	0x0800af60
 8001dc0:	0800af68 	.word	0x0800af68
 8001dc4:	0800afe8 	.word	0x0800afe8
 8001dc8:	43960000 	.word	0x43960000
 8001dcc:	0800af70 	.word	0x0800af70
 8001dd0:	41f00000 	.word	0x41f00000
 8001dd4:	43700000 	.word	0x43700000
 8001dd8:	0800af78 	.word	0x0800af78
						UART_Recieved_Data[i]=defaultUart[i];
 8001ddc:	f107 0210 	add.w	r2, r7, #16
 8001de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de2:	4413      	add	r3, r2
 8001de4:	7819      	ldrb	r1, [r3, #0]
 8001de6:	4a5c      	ldr	r2, [pc, #368]	; (8001f58 <HandleGui+0x738>)
 8001de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dea:	4413      	add	r3, r2
 8001dec:	460a      	mov	r2, r1
 8001dee:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df2:	3301      	adds	r3, #1
 8001df4:	65bb      	str	r3, [r7, #88]	; 0x58
 8001df6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	ddef      	ble.n	8001ddc <HandleGui+0x5bc>
					}
				  Output = HandleKeyPad();
 8001dfc:	f7ff fb5c 	bl	80014b8 <HandleKeyPad>
 8001e00:	65f8      	str	r0, [r7, #92]	; 0x5c
			  while(Output == 9999){
 8001e02:	4956      	ldr	r1, [pc, #344]	; (8001f5c <HandleGui+0x73c>)
 8001e04:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e06:	f7ff f8b5 	bl	8000f74 <__aeabi_fcmpeq>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1b9      	bne.n	8001d84 <HandleGui+0x564>
			  }
			  if(Output == 8888){
 8001e10:	4953      	ldr	r1, [pc, #332]	; (8001f60 <HandleGui+0x740>)
 8001e12:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e14:	f7ff f8ae 	bl	8000f74 <__aeabi_fcmpeq>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HandleGui+0x604>
				 Output = ReflowParameters.secondHeatUpRate;
 8001e1e:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <HandleGui+0x744>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	65fb      	str	r3, [r7, #92]	; 0x5c
			  }

			  if (Output < 0.2)
 8001e24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e26:	f7fe fbb3 	bl	8000590 <__aeabi_f2d>
 8001e2a:	a349      	add	r3, pc, #292	; (adr r3, 8001f50 <HandleGui+0x730>)
 8001e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e30:	f7fe fe78 	bl	8000b24 <__aeabi_dcmplt>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HandleGui+0x61e>
				  Output = 0.2;
 8001e3a:	4b4b      	ldr	r3, [pc, #300]	; (8001f68 <HandleGui+0x748>)
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
			  if (Output > 1.5)
 8001e3e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8001e42:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001e44:	f7ff f8be 	bl	8000fc4 <__aeabi_fcmpgt>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HandleGui+0x634>
				  Output = 1.5;
 8001e4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8001e52:	65fb      	str	r3, [r7, #92]	; 0x5c

			ReflowParameters.secondHeatUpRate = Output;
 8001e54:	4a43      	ldr	r2, [pc, #268]	; (8001f64 <HandleGui+0x744>)
 8001e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e58:	6193      	str	r3, [r2, #24]
			Update_Page_3();
 8001e5a:	f7ff fb99 	bl	8001590 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001e5e:	4843      	ldr	r0, [pc, #268]	; (8001f6c <HandleGui+0x74c>)
 8001e60:	f7ff fac0 	bl	80013e4 <NEXTION_CMD>
			calculateReflowCurve();
 8001e64:	f000 fbdc 	bl	8002620 <calculateReflowCurve>
		}


		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b04", 5) == 0){
 8001e68:	2205      	movs	r2, #5
 8001e6a:	4941      	ldr	r1, [pc, #260]	; (8001f70 <HandleGui+0x750>)
 8001e6c:	483a      	ldr	r0, [pc, #232]	; (8001f58 <HandleGui+0x738>)
 8001e6e:	f005 faed 	bl	800744c <strncmp>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d14f      	bne.n	8001f18 <HandleGui+0x6f8>
			  float32_t Output =0;
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	657b      	str	r3, [r7, #84]	; 0x54
			  Output = HandleKeyPad();
 8001e7e:	f7ff fb1b 	bl	80014b8 <HandleKeyPad>
 8001e82:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001e84:	e01d      	b.n	8001ec2 <HandleGui+0x6a2>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001e86:	4a3b      	ldr	r2, [pc, #236]	; (8001f74 <HandleGui+0x754>)
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e90:	6018      	str	r0, [r3, #0]
 8001e92:	3304      	adds	r3, #4
 8001e94:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001e96:	2300      	movs	r3, #0
 8001e98:	653b      	str	r3, [r7, #80]	; 0x50
 8001e9a:	e00c      	b.n	8001eb6 <HandleGui+0x696>
						UART_Recieved_Data[i]=defaultUart[i];
 8001e9c:	f107 0208 	add.w	r2, r7, #8
 8001ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea2:	4413      	add	r3, r2
 8001ea4:	7819      	ldrb	r1, [r3, #0]
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	; (8001f58 <HandleGui+0x738>)
 8001ea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eaa:	4413      	add	r3, r2
 8001eac:	460a      	mov	r2, r1
 8001eae:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	653b      	str	r3, [r7, #80]	; 0x50
 8001eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	ddef      	ble.n	8001e9c <HandleGui+0x67c>
					}
				  Output = HandleKeyPad();
 8001ebc:	f7ff fafc 	bl	80014b8 <HandleKeyPad>
 8001ec0:	6578      	str	r0, [r7, #84]	; 0x54
			  while(Output == 9999){
 8001ec2:	4926      	ldr	r1, [pc, #152]	; (8001f5c <HandleGui+0x73c>)
 8001ec4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ec6:	f7ff f855 	bl	8000f74 <__aeabi_fcmpeq>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1da      	bne.n	8001e86 <HandleGui+0x666>
			  }
			  if(Output == 8888){
 8001ed0:	4923      	ldr	r1, [pc, #140]	; (8001f60 <HandleGui+0x740>)
 8001ed2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ed4:	f7ff f84e 	bl	8000f74 <__aeabi_fcmpeq>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HandleGui+0x6cc>
				 Output = ReflowParameters.ReflowTime;
 8001ede:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HandleGui+0x744>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe ffaa 	bl	8000e3c <__aeabi_ui2f>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	657b      	str	r3, [r7, #84]	; 0x54
			  }

			  if (Output > 300)
 8001eec:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HandleGui+0x758>)
 8001eee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001ef0:	f7ff f868 	bl	8000fc4 <__aeabi_fcmpgt>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HandleGui+0x6de>
				  Output = 300;
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HandleGui+0x758>)
 8001efc:	657b      	str	r3, [r7, #84]	; 0x54

			ReflowParameters.ReflowTime = Output;
 8001efe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001f00:	f7ff f86a 	bl	8000fd8 <__aeabi_f2uiz>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4a17      	ldr	r2, [pc, #92]	; (8001f64 <HandleGui+0x744>)
 8001f08:	6213      	str	r3, [r2, #32]
			Update_Page_3();
 8001f0a:	f7ff fb41 	bl	8001590 <Update_Page_3>
			NEXTION_CMD("page 3");
 8001f0e:	4817      	ldr	r0, [pc, #92]	; (8001f6c <HandleGui+0x74c>)
 8001f10:	f7ff fa68 	bl	80013e4 <NEXTION_CMD>
			calculateReflowCurve();
 8001f14:	f000 fb84 	bl	8002620 <calculateReflowCurve>

		}
		//NEXTION_SendFloat("t0", ReflowParameters.firstHeatUpRate);

		  if(strncmp((char *)UART_Recieved_Data, "p3b05", 5) == 0){
 8001f18:	2205      	movs	r2, #5
 8001f1a:	4918      	ldr	r1, [pc, #96]	; (8001f7c <HandleGui+0x75c>)
 8001f1c:	480e      	ldr	r0, [pc, #56]	; (8001f58 <HandleGui+0x738>)
 8001f1e:	f005 fa95 	bl	800744c <strncmp>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d171      	bne.n	800200c <HandleGui+0x7ec>
			  float32_t Output =0;
 8001f28:	f04f 0300 	mov.w	r3, #0
 8001f2c:	64fb      	str	r3, [r7, #76]	; 0x4c
			  Output = HandleKeyPad();
 8001f2e:	f7ff fac3 	bl	80014b8 <HandleKeyPad>
 8001f32:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8001f34:	e036      	b.n	8001fa4 <HandleGui+0x784>
					uint8_t defaultUart[5] = {'x','x','x','x','x'};
 8001f36:	4a0f      	ldr	r2, [pc, #60]	; (8001f74 <HandleGui+0x754>)
 8001f38:	463b      	mov	r3, r7
 8001f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f3e:	6018      	str	r0, [r3, #0]
 8001f40:	3304      	adds	r3, #4
 8001f42:	7019      	strb	r1, [r3, #0]
					for(int i=0;i<5;i++){
 8001f44:	2300      	movs	r3, #0
 8001f46:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f48:	e026      	b.n	8001f98 <HandleGui+0x778>
 8001f4a:	bf00      	nop
 8001f4c:	f3af 8000 	nop.w
 8001f50:	9999999a 	.word	0x9999999a
 8001f54:	3fc99999 	.word	0x3fc99999
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	461c3c00 	.word	0x461c3c00
 8001f60:	460ae000 	.word	0x460ae000
 8001f64:	200012a8 	.word	0x200012a8
 8001f68:	3e4ccccd 	.word	0x3e4ccccd
 8001f6c:	0800af60 	.word	0x0800af60
 8001f70:	0800af80 	.word	0x0800af80
 8001f74:	0800afe8 	.word	0x0800afe8
 8001f78:	43960000 	.word	0x43960000
 8001f7c:	0800af88 	.word	0x0800af88
						UART_Recieved_Data[i]=defaultUart[i];
 8001f80:	463a      	mov	r2, r7
 8001f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f84:	4413      	add	r3, r2
 8001f86:	7819      	ldrb	r1, [r3, #0]
 8001f88:	4a99      	ldr	r2, [pc, #612]	; (80021f0 <HandleGui+0x9d0>)
 8001f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f8c:	4413      	add	r3, r2
 8001f8e:	460a      	mov	r2, r1
 8001f90:	701a      	strb	r2, [r3, #0]
					for(int i=0;i<5;i++){
 8001f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f94:	3301      	adds	r3, #1
 8001f96:	64bb      	str	r3, [r7, #72]	; 0x48
 8001f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	ddf0      	ble.n	8001f80 <HandleGui+0x760>
					}
				  Output = HandleKeyPad();
 8001f9e:	f7ff fa8b 	bl	80014b8 <HandleKeyPad>
 8001fa2:	64f8      	str	r0, [r7, #76]	; 0x4c
			  while(Output == 9999){
 8001fa4:	4993      	ldr	r1, [pc, #588]	; (80021f4 <HandleGui+0x9d4>)
 8001fa6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fa8:	f7fe ffe4 	bl	8000f74 <__aeabi_fcmpeq>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1c1      	bne.n	8001f36 <HandleGui+0x716>
			  }
			  if(Output == 8888){
 8001fb2:	4991      	ldr	r1, [pc, #580]	; (80021f8 <HandleGui+0x9d8>)
 8001fb4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fb6:	f7fe ffdd 	bl	8000f74 <__aeabi_fcmpeq>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HandleGui+0x7ae>
				 Output = ReflowParameters.ReflowTempeture;
 8001fc0:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <HandleGui+0x9dc>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ff39 	bl	8000e3c <__aeabi_ui2f>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	64fb      	str	r3, [r7, #76]	; 0x4c
			  }
			  if (Output < 30)
 8001fce:	498c      	ldr	r1, [pc, #560]	; (8002200 <HandleGui+0x9e0>)
 8001fd0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fd2:	f7fe ffd9 	bl	8000f88 <__aeabi_fcmplt>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HandleGui+0x7c0>
				  Output = 30;
 8001fdc:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HandleGui+0x9e0>)
 8001fde:	64fb      	str	r3, [r7, #76]	; 0x4c
			  if (Output > 240)
 8001fe0:	4988      	ldr	r1, [pc, #544]	; (8002204 <HandleGui+0x9e4>)
 8001fe2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001fe4:	f7fe ffee 	bl	8000fc4 <__aeabi_fcmpgt>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HandleGui+0x7d2>
				  Output = 240;
 8001fee:	4b85      	ldr	r3, [pc, #532]	; (8002204 <HandleGui+0x9e4>)
 8001ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
			ReflowParameters.ReflowTempeture = Output;
 8001ff2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ff4:	f7fe fff0 	bl	8000fd8 <__aeabi_f2uiz>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a80      	ldr	r2, [pc, #512]	; (80021fc <HandleGui+0x9dc>)
 8001ffc:	61d3      	str	r3, [r2, #28]
			Update_Page_3();
 8001ffe:	f7ff fac7 	bl	8001590 <Update_Page_3>
			NEXTION_CMD("page 3");
 8002002:	4881      	ldr	r0, [pc, #516]	; (8002208 <HandleGui+0x9e8>)
 8002004:	f7ff f9ee 	bl	80013e4 <NEXTION_CMD>
			calculateReflowCurve();
 8002008:	f000 fb0a 	bl	8002620 <calculateReflowCurve>

		}

		  if(strncmp((char *)UART_Recieved_Data, "p3b06", 5) == 0){
 800200c:	2205      	movs	r2, #5
 800200e:	497f      	ldr	r1, [pc, #508]	; (800220c <HandleGui+0x9ec>)
 8002010:	4877      	ldr	r0, [pc, #476]	; (80021f0 <HandleGui+0x9d0>)
 8002012:	f005 fa1b 	bl	800744c <strncmp>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HandleGui+0x800>
			Update_Page_2();
 800201c:	f7ff fbc0 	bl	80017a0 <Update_Page_2>
		}


		  if(strncmp((char *)UART_Recieved_Data, "p3b07", 5) == 0){
 8002020:	2205      	movs	r2, #5
 8002022:	497b      	ldr	r1, [pc, #492]	; (8002210 <HandleGui+0x9f0>)
 8002024:	4872      	ldr	r0, [pc, #456]	; (80021f0 <HandleGui+0x9d0>)
 8002026:	f005 fa11 	bl	800744c <strncmp>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d105      	bne.n	800203c <HandleGui+0x81c>
			Update_Page_0();
 8002030:	f7ff fb04 	bl	800163c <Update_Page_0>
			Draw_Reflow_Curve();
 8002034:	f000 fc46 	bl	80028c4 <Draw_Reflow_Curve>
			SaveReflowParameters();
 8002038:	f7ff f90c 	bl	8001254 <SaveReflowParameters>

		}


		  	// Save current parameters to Lead 138C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs0", 5) == 0){
 800203c:	2205      	movs	r2, #5
 800203e:	4975      	ldr	r1, [pc, #468]	; (8002214 <HandleGui+0x9f4>)
 8002040:	486b      	ldr	r0, [pc, #428]	; (80021f0 <HandleGui+0x9d0>)
 8002042:	f005 fa03 	bl	800744c <strncmp>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d11e      	bne.n	800208a <HandleGui+0x86a>

			  ReflowParameters.firstHeatUpRate0 = ReflowParameters.firstHeatUpRate;
 800204c:	4b6b      	ldr	r3, [pc, #428]	; (80021fc <HandleGui+0x9dc>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4a6a      	ldr	r2, [pc, #424]	; (80021fc <HandleGui+0x9dc>)
 8002052:	6253      	str	r3, [r2, #36]	; 0x24
			  ReflowParameters.SoakTime0 = ReflowParameters.SoakTime;
 8002054:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HandleGui+0x9dc>)
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	4a68      	ldr	r2, [pc, #416]	; (80021fc <HandleGui+0x9dc>)
 800205a:	62d3      	str	r3, [r2, #44]	; 0x2c
			  ReflowParameters.SoakTempeture0 = ReflowParameters.SoakTempeture;
 800205c:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HandleGui+0x9dc>)
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	4a66      	ldr	r2, [pc, #408]	; (80021fc <HandleGui+0x9dc>)
 8002062:	6293      	str	r3, [r2, #40]	; 0x28
			  ReflowParameters.secondHeatUpRate0 = ReflowParameters.secondHeatUpRate;
 8002064:	4b65      	ldr	r3, [pc, #404]	; (80021fc <HandleGui+0x9dc>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a64      	ldr	r2, [pc, #400]	; (80021fc <HandleGui+0x9dc>)
 800206a:	6313      	str	r3, [r2, #48]	; 0x30
			  ReflowParameters.ReflowTime0 = ReflowParameters.ReflowTime;
 800206c:	4b63      	ldr	r3, [pc, #396]	; (80021fc <HandleGui+0x9dc>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a62      	ldr	r2, [pc, #392]	; (80021fc <HandleGui+0x9dc>)
 8002072:	6393      	str	r3, [r2, #56]	; 0x38
			  ReflowParameters.ReflowTempeture0 = ReflowParameters.ReflowTempeture;
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HandleGui+0x9dc>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	4a60      	ldr	r2, [pc, #384]	; (80021fc <HandleGui+0x9dc>)
 800207a:	6353      	str	r3, [r2, #52]	; 0x34
			  Update_Page_3();
 800207c:	f7ff fa88 	bl	8001590 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 8002080:	4861      	ldr	r0, [pc, #388]	; (8002208 <HandleGui+0x9e8>)
 8002082:	f7ff f9af 	bl	80013e4 <NEXTION_CMD>
			  calculateReflowCurve();
 8002086:	f000 facb 	bl	8002620 <calculateReflowCurve>

		  }

			 // Load Lead 138C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b08", 5) == 0){
 800208a:	2205      	movs	r2, #5
 800208c:	4962      	ldr	r1, [pc, #392]	; (8002218 <HandleGui+0x9f8>)
 800208e:	4858      	ldr	r0, [pc, #352]	; (80021f0 <HandleGui+0x9d0>)
 8002090:	f005 f9dc 	bl	800744c <strncmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11b      	bne.n	80020d2 <HandleGui+0x8b2>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate0;
 800209a:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HandleGui+0x9dc>)
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209e:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HandleGui+0x9dc>)
 80020a0:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime0;
 80020a2:	4b56      	ldr	r3, [pc, #344]	; (80021fc <HandleGui+0x9dc>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	4a55      	ldr	r2, [pc, #340]	; (80021fc <HandleGui+0x9dc>)
 80020a8:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture0;
 80020aa:	4b54      	ldr	r3, [pc, #336]	; (80021fc <HandleGui+0x9dc>)
 80020ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ae:	4a53      	ldr	r2, [pc, #332]	; (80021fc <HandleGui+0x9dc>)
 80020b0:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate0;
 80020b2:	4b52      	ldr	r3, [pc, #328]	; (80021fc <HandleGui+0x9dc>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a51      	ldr	r2, [pc, #324]	; (80021fc <HandleGui+0x9dc>)
 80020b8:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime0;
 80020ba:	4b50      	ldr	r3, [pc, #320]	; (80021fc <HandleGui+0x9dc>)
 80020bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020be:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HandleGui+0x9dc>)
 80020c0:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture0;
 80020c2:	4b4e      	ldr	r3, [pc, #312]	; (80021fc <HandleGui+0x9dc>)
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HandleGui+0x9dc>)
 80020c8:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 80020ca:	f7ff fa61 	bl	8001590 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 80020ce:	f000 faa7 	bl	8002620 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 148C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs1", 5) == 0){
 80020d2:	2205      	movs	r2, #5
 80020d4:	4951      	ldr	r1, [pc, #324]	; (800221c <HandleGui+0x9fc>)
 80020d6:	4846      	ldr	r0, [pc, #280]	; (80021f0 <HandleGui+0x9d0>)
 80020d8:	f005 f9b8 	bl	800744c <strncmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d11e      	bne.n	8002120 <HandleGui+0x900>
			  ReflowParameters.firstHeatUpRate1 = ReflowParameters.firstHeatUpRate;
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HandleGui+0x9dc>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	4a45      	ldr	r2, [pc, #276]	; (80021fc <HandleGui+0x9dc>)
 80020e8:	63d3      	str	r3, [r2, #60]	; 0x3c
			  ReflowParameters.SoakTime1 = ReflowParameters.SoakTime;
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HandleGui+0x9dc>)
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	4a43      	ldr	r2, [pc, #268]	; (80021fc <HandleGui+0x9dc>)
 80020f0:	6453      	str	r3, [r2, #68]	; 0x44
			  ReflowParameters.SoakTempeture1 = ReflowParameters.SoakTempeture;
 80020f2:	4b42      	ldr	r3, [pc, #264]	; (80021fc <HandleGui+0x9dc>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	4a41      	ldr	r2, [pc, #260]	; (80021fc <HandleGui+0x9dc>)
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
			  ReflowParameters.secondHeatUpRate1 = ReflowParameters.secondHeatUpRate;
 80020fa:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HandleGui+0x9dc>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <HandleGui+0x9dc>)
 8002100:	6493      	str	r3, [r2, #72]	; 0x48
			  ReflowParameters.ReflowTime1 = ReflowParameters.ReflowTime;
 8002102:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <HandleGui+0x9dc>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <HandleGui+0x9dc>)
 8002108:	6513      	str	r3, [r2, #80]	; 0x50
			  ReflowParameters.ReflowTempeture1 = ReflowParameters.ReflowTempeture;
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HandleGui+0x9dc>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <HandleGui+0x9dc>)
 8002110:	64d3      	str	r3, [r2, #76]	; 0x4c
			  Update_Page_3();
 8002112:	f7ff fa3d 	bl	8001590 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 8002116:	483c      	ldr	r0, [pc, #240]	; (8002208 <HandleGui+0x9e8>)
 8002118:	f7ff f964 	bl	80013e4 <NEXTION_CMD>
			  calculateReflowCurve();
 800211c:	f000 fa80 	bl	8002620 <calculateReflowCurve>
		  }

			 // Load Lead 148C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b09", 5) == 0){
 8002120:	2205      	movs	r2, #5
 8002122:	493f      	ldr	r1, [pc, #252]	; (8002220 <HandleGui+0xa00>)
 8002124:	4832      	ldr	r0, [pc, #200]	; (80021f0 <HandleGui+0x9d0>)
 8002126:	f005 f991 	bl	800744c <strncmp>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d11b      	bne.n	8002168 <HandleGui+0x948>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate1;
 8002130:	4b32      	ldr	r3, [pc, #200]	; (80021fc <HandleGui+0x9dc>)
 8002132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002134:	4a31      	ldr	r2, [pc, #196]	; (80021fc <HandleGui+0x9dc>)
 8002136:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime1;
 8002138:	4b30      	ldr	r3, [pc, #192]	; (80021fc <HandleGui+0x9dc>)
 800213a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213c:	4a2f      	ldr	r2, [pc, #188]	; (80021fc <HandleGui+0x9dc>)
 800213e:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture1;
 8002140:	4b2e      	ldr	r3, [pc, #184]	; (80021fc <HandleGui+0x9dc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <HandleGui+0x9dc>)
 8002146:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate1;
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HandleGui+0x9dc>)
 800214a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214c:	4a2b      	ldr	r2, [pc, #172]	; (80021fc <HandleGui+0x9dc>)
 800214e:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime1;
 8002150:	4b2a      	ldr	r3, [pc, #168]	; (80021fc <HandleGui+0x9dc>)
 8002152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002154:	4a29      	ldr	r2, [pc, #164]	; (80021fc <HandleGui+0x9dc>)
 8002156:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture1;
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HandleGui+0x9dc>)
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	4a27      	ldr	r2, [pc, #156]	; (80021fc <HandleGui+0x9dc>)
 800215e:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 8002160:	f7ff fa16 	bl	8001590 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 8002164:	f000 fa5c 	bl	8002620 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 183C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs2", 5) == 0){
 8002168:	2205      	movs	r2, #5
 800216a:	492e      	ldr	r1, [pc, #184]	; (8002224 <HandleGui+0xa04>)
 800216c:	4820      	ldr	r0, [pc, #128]	; (80021f0 <HandleGui+0x9d0>)
 800216e:	f005 f96d 	bl	800744c <strncmp>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d11e      	bne.n	80021b6 <HandleGui+0x996>
			  ReflowParameters.firstHeatUpRate2 = ReflowParameters.firstHeatUpRate;
 8002178:	4b20      	ldr	r3, [pc, #128]	; (80021fc <HandleGui+0x9dc>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HandleGui+0x9dc>)
 800217e:	6553      	str	r3, [r2, #84]	; 0x54
			  ReflowParameters.SoakTime2 = ReflowParameters.SoakTime;
 8002180:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <HandleGui+0x9dc>)
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HandleGui+0x9dc>)
 8002186:	65d3      	str	r3, [r2, #92]	; 0x5c
			  ReflowParameters.SoakTempeture2 = ReflowParameters.SoakTempeture;
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <HandleGui+0x9dc>)
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HandleGui+0x9dc>)
 800218e:	6593      	str	r3, [r2, #88]	; 0x58
			  ReflowParameters.secondHeatUpRate2 = ReflowParameters.secondHeatUpRate;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <HandleGui+0x9dc>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HandleGui+0x9dc>)
 8002196:	6613      	str	r3, [r2, #96]	; 0x60
			  ReflowParameters.ReflowTime2 = ReflowParameters.ReflowTime;
 8002198:	4b18      	ldr	r3, [pc, #96]	; (80021fc <HandleGui+0x9dc>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HandleGui+0x9dc>)
 800219e:	6693      	str	r3, [r2, #104]	; 0x68
			  ReflowParameters.ReflowTempeture2 = ReflowParameters.ReflowTempeture;
 80021a0:	4b16      	ldr	r3, [pc, #88]	; (80021fc <HandleGui+0x9dc>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4a15      	ldr	r2, [pc, #84]	; (80021fc <HandleGui+0x9dc>)
 80021a6:	6653      	str	r3, [r2, #100]	; 0x64
			  Update_Page_3();
 80021a8:	f7ff f9f2 	bl	8001590 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 80021ac:	4816      	ldr	r0, [pc, #88]	; (8002208 <HandleGui+0x9e8>)
 80021ae:	f7ff f919 	bl	80013e4 <NEXTION_CMD>
			  calculateReflowCurve();
 80021b2:	f000 fa35 	bl	8002620 <calculateReflowCurve>
		  }

			 // Load Lead 183C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b10", 5) == 0){
 80021b6:	2205      	movs	r2, #5
 80021b8:	491b      	ldr	r1, [pc, #108]	; (8002228 <HandleGui+0xa08>)
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <HandleGui+0x9d0>)
 80021bc:	f005 f946 	bl	800744c <strncmp>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d13a      	bne.n	800223c <HandleGui+0xa1c>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate2;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HandleGui+0x9dc>)
 80021c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ca:	4a0c      	ldr	r2, [pc, #48]	; (80021fc <HandleGui+0x9dc>)
 80021cc:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime2;
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HandleGui+0x9dc>)
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <HandleGui+0x9dc>)
 80021d4:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture2;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <HandleGui+0x9dc>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HandleGui+0x9dc>)
 80021dc:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate2;
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HandleGui+0x9dc>)
 80021e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e2:	4a06      	ldr	r2, [pc, #24]	; (80021fc <HandleGui+0x9dc>)
 80021e4:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime2;
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HandleGui+0x9dc>)
 80021e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HandleGui+0x9dc>)
 80021ec:	6213      	str	r3, [r2, #32]
 80021ee:	e01d      	b.n	800222c <HandleGui+0xa0c>
 80021f0:	20000004 	.word	0x20000004
 80021f4:	461c3c00 	.word	0x461c3c00
 80021f8:	460ae000 	.word	0x460ae000
 80021fc:	200012a8 	.word	0x200012a8
 8002200:	41f00000 	.word	0x41f00000
 8002204:	43700000 	.word	0x43700000
 8002208:	0800af60 	.word	0x0800af60
 800220c:	0800af90 	.word	0x0800af90
 8002210:	0800af98 	.word	0x0800af98
 8002214:	0800afa0 	.word	0x0800afa0
 8002218:	0800afa8 	.word	0x0800afa8
 800221c:	0800afb0 	.word	0x0800afb0
 8002220:	0800afb8 	.word	0x0800afb8
 8002224:	0800afc0 	.word	0x0800afc0
 8002228:	0800afc8 	.word	0x0800afc8
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture2;
 800222c:	4b64      	ldr	r3, [pc, #400]	; (80023c0 <HandleGui+0xba0>)
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	4a63      	ldr	r2, [pc, #396]	; (80023c0 <HandleGui+0xba0>)
 8002232:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 8002234:	f7ff f9ac 	bl	8001590 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 8002238:	f000 f9f2 	bl	8002620 <calculateReflowCurve>
		  }

		  	// Save current parameters to Lead 217C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3bs3", 5) == 0){
 800223c:	2205      	movs	r2, #5
 800223e:	4961      	ldr	r1, [pc, #388]	; (80023c4 <HandleGui+0xba4>)
 8002240:	4861      	ldr	r0, [pc, #388]	; (80023c8 <HandleGui+0xba8>)
 8002242:	f005 f903 	bl	800744c <strncmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d11f      	bne.n	800228c <HandleGui+0xa6c>
			  ReflowParameters.firstHeatUpRate3 = ReflowParameters.firstHeatUpRate;
 800224c:	4b5c      	ldr	r3, [pc, #368]	; (80023c0 <HandleGui+0xba0>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a5b      	ldr	r2, [pc, #364]	; (80023c0 <HandleGui+0xba0>)
 8002252:	66d3      	str	r3, [r2, #108]	; 0x6c
			  ReflowParameters.SoakTime3 = ReflowParameters.SoakTime;
 8002254:	4b5a      	ldr	r3, [pc, #360]	; (80023c0 <HandleGui+0xba0>)
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	4a59      	ldr	r2, [pc, #356]	; (80023c0 <HandleGui+0xba0>)
 800225a:	6753      	str	r3, [r2, #116]	; 0x74
			  ReflowParameters.SoakTempeture3 = ReflowParameters.SoakTempeture;
 800225c:	4b58      	ldr	r3, [pc, #352]	; (80023c0 <HandleGui+0xba0>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	4a57      	ldr	r2, [pc, #348]	; (80023c0 <HandleGui+0xba0>)
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
			  ReflowParameters.secondHeatUpRate3 = ReflowParameters.secondHeatUpRate;
 8002264:	4b56      	ldr	r3, [pc, #344]	; (80023c0 <HandleGui+0xba0>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	4a55      	ldr	r2, [pc, #340]	; (80023c0 <HandleGui+0xba0>)
 800226a:	6793      	str	r3, [r2, #120]	; 0x78
			  ReflowParameters.ReflowTime3 = ReflowParameters.ReflowTime;
 800226c:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HandleGui+0xba0>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a53      	ldr	r2, [pc, #332]	; (80023c0 <HandleGui+0xba0>)
 8002272:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			  ReflowParameters.ReflowTempeture3 = ReflowParameters.ReflowTempeture;
 8002276:	4b52      	ldr	r3, [pc, #328]	; (80023c0 <HandleGui+0xba0>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HandleGui+0xba0>)
 800227c:	67d3      	str	r3, [r2, #124]	; 0x7c
			  Update_Page_3();
 800227e:	f7ff f987 	bl	8001590 <Update_Page_3>
			  // needed page refresh because of strange nextion timers behavior
			  NEXTION_CMD("page 3");
 8002282:	4852      	ldr	r0, [pc, #328]	; (80023cc <HandleGui+0xbac>)
 8002284:	f7ff f8ae 	bl	80013e4 <NEXTION_CMD>
			  calculateReflowCurve();
 8002288:	f000 f9ca 	bl	8002620 <calculateReflowCurve>
		  }

		  	// Load Lead 217C profile
		  if(strncmp((char *)UART_Recieved_Data, "p3b11", 5) == 0){
 800228c:	2205      	movs	r2, #5
 800228e:	4950      	ldr	r1, [pc, #320]	; (80023d0 <HandleGui+0xbb0>)
 8002290:	484d      	ldr	r0, [pc, #308]	; (80023c8 <HandleGui+0xba8>)
 8002292:	f005 f8db 	bl	800744c <strncmp>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11c      	bne.n	80022d6 <HandleGui+0xab6>

			  ReflowParameters.firstHeatUpRate = ReflowParameters.firstHeatUpRate3;
 800229c:	4b48      	ldr	r3, [pc, #288]	; (80023c0 <HandleGui+0xba0>)
 800229e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a0:	4a47      	ldr	r2, [pc, #284]	; (80023c0 <HandleGui+0xba0>)
 80022a2:	60d3      	str	r3, [r2, #12]
			  ReflowParameters.SoakTime = ReflowParameters.SoakTime3;
 80022a4:	4b46      	ldr	r3, [pc, #280]	; (80023c0 <HandleGui+0xba0>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	4a45      	ldr	r2, [pc, #276]	; (80023c0 <HandleGui+0xba0>)
 80022aa:	6153      	str	r3, [r2, #20]
			  ReflowParameters.SoakTempeture = ReflowParameters.SoakTempeture3;
 80022ac:	4b44      	ldr	r3, [pc, #272]	; (80023c0 <HandleGui+0xba0>)
 80022ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b0:	4a43      	ldr	r2, [pc, #268]	; (80023c0 <HandleGui+0xba0>)
 80022b2:	6113      	str	r3, [r2, #16]
			  ReflowParameters.secondHeatUpRate = ReflowParameters.secondHeatUpRate3;
 80022b4:	4b42      	ldr	r3, [pc, #264]	; (80023c0 <HandleGui+0xba0>)
 80022b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022b8:	4a41      	ldr	r2, [pc, #260]	; (80023c0 <HandleGui+0xba0>)
 80022ba:	6193      	str	r3, [r2, #24]
			  ReflowParameters.ReflowTime = ReflowParameters.ReflowTime3;
 80022bc:	4b40      	ldr	r3, [pc, #256]	; (80023c0 <HandleGui+0xba0>)
 80022be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022c2:	4a3f      	ldr	r2, [pc, #252]	; (80023c0 <HandleGui+0xba0>)
 80022c4:	6213      	str	r3, [r2, #32]
			  ReflowParameters.ReflowTempeture = ReflowParameters.ReflowTempeture3;
 80022c6:	4b3e      	ldr	r3, [pc, #248]	; (80023c0 <HandleGui+0xba0>)
 80022c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022ca:	4a3d      	ldr	r2, [pc, #244]	; (80023c0 <HandleGui+0xba0>)
 80022cc:	61d3      	str	r3, [r2, #28]
			  Update_Page_3();
 80022ce:	f7ff f95f 	bl	8001590 <Update_Page_3>
			  //NEXTION_CMD("page 3");
			  calculateReflowCurve();
 80022d2:	f000 f9a5 	bl	8002620 <calculateReflowCurve>
		  }

		  // restore factory default profiles	(not all tested)
		  if(strncmp((char *)UART_Recieved_Data, "p3br7", 5) == 0){
 80022d6:	2205      	movs	r2, #5
 80022d8:	493e      	ldr	r1, [pc, #248]	; (80023d4 <HandleGui+0xbb4>)
 80022da:	483b      	ldr	r0, [pc, #236]	; (80023c8 <HandleGui+0xba8>)
 80022dc:	f005 f8b6 	bl	800744c <strncmp>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d168      	bne.n	80023b8 <HandleGui+0xb98>

			  	// Lead 217C https://www.chipquik.com/datasheets/TS391SNL50.pdf
				ReflowParameters.firstHeatUpRate3 = 0.75;
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HandleGui+0xba0>)
 80022e8:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 80022ec:	66da      	str	r2, [r3, #108]	; 0x6c
				ReflowParameters.SoakTime3 = 100;
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HandleGui+0xba0>)
 80022f0:	2264      	movs	r2, #100	; 0x64
 80022f2:	675a      	str	r2, [r3, #116]	; 0x74
				ReflowParameters.SoakTempeture3 = 175;
 80022f4:	4b32      	ldr	r3, [pc, #200]	; (80023c0 <HandleGui+0xba0>)
 80022f6:	22af      	movs	r2, #175	; 0xaf
 80022f8:	671a      	str	r2, [r3, #112]	; 0x70
				ReflowParameters.secondHeatUpRate3 = 1;
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HandleGui+0xba0>)
 80022fc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002300:	679a      	str	r2, [r3, #120]	; 0x78
				ReflowParameters.ReflowTime3 = 90;
 8002302:	4b2f      	ldr	r3, [pc, #188]	; (80023c0 <HandleGui+0xba0>)
 8002304:	225a      	movs	r2, #90	; 0x5a
 8002306:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				ReflowParameters.ReflowTempeture3 = 240;
 800230a:	4b2d      	ldr	r3, [pc, #180]	; (80023c0 <HandleGui+0xba0>)
 800230c:	22f0      	movs	r2, #240	; 0xf0
 800230e:	67da      	str	r2, [r3, #124]	; 0x7c
				// Lead 183C https://www.chipquik.com/datasheets/TS391AX50.pdf
				ReflowParameters.firstHeatUpRate2 = 0.75;
 8002310:	4b2b      	ldr	r3, [pc, #172]	; (80023c0 <HandleGui+0xba0>)
 8002312:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002316:	655a      	str	r2, [r3, #84]	; 0x54
				ReflowParameters.SoakTime2 = 100;
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <HandleGui+0xba0>)
 800231a:	2264      	movs	r2, #100	; 0x64
 800231c:	65da      	str	r2, [r3, #92]	; 0x5c
				ReflowParameters.SoakTempeture2 = 150;
 800231e:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HandleGui+0xba0>)
 8002320:	2296      	movs	r2, #150	; 0x96
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
				ReflowParameters.secondHeatUpRate2 = 1;
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HandleGui+0xba0>)
 8002326:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800232a:	661a      	str	r2, [r3, #96]	; 0x60
				ReflowParameters.ReflowTime2 = 100;
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HandleGui+0xba0>)
 800232e:	2264      	movs	r2, #100	; 0x64
 8002330:	669a      	str	r2, [r3, #104]	; 0x68
				ReflowParameters.ReflowTempeture2 = 230;
 8002332:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HandleGui+0xba0>)
 8002334:	22e6      	movs	r2, #230	; 0xe6
 8002336:	665a      	str	r2, [r3, #100]	; 0x64
				// Lead 148C
				ReflowParameters.firstHeatUpRate1 = 0.75;
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <HandleGui+0xba0>)
 800233a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800233e:	63da      	str	r2, [r3, #60]	; 0x3c
				ReflowParameters.SoakTime1 = 100;
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HandleGui+0xba0>)
 8002342:	2264      	movs	r2, #100	; 0x64
 8002344:	645a      	str	r2, [r3, #68]	; 0x44
				ReflowParameters.SoakTempeture1 = 140;
 8002346:	4b1e      	ldr	r3, [pc, #120]	; (80023c0 <HandleGui+0xba0>)
 8002348:	228c      	movs	r2, #140	; 0x8c
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
				ReflowParameters.secondHeatUpRate1 = 1;
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <HandleGui+0xba0>)
 800234e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002352:	649a      	str	r2, [r3, #72]	; 0x48
				ReflowParameters.ReflowTime1 = 100;
 8002354:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HandleGui+0xba0>)
 8002356:	2264      	movs	r2, #100	; 0x64
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
				ReflowParameters.ReflowTempeture1 = 175;
 800235a:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <HandleGui+0xba0>)
 800235c:	22af      	movs	r2, #175	; 0xaf
 800235e:	64da      	str	r2, [r3, #76]	; 0x4c
				// Lead 138C http://www.chipquik.com/datasheets/TS391LT50.pdf
				ReflowParameters.firstHeatUpRate0 = 0.75;
 8002360:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HandleGui+0xba0>)
 8002362:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 8002366:	625a      	str	r2, [r3, #36]	; 0x24
				ReflowParameters.SoakTime0 = 100;
 8002368:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <HandleGui+0xba0>)
 800236a:	2264      	movs	r2, #100	; 0x64
 800236c:	62da      	str	r2, [r3, #44]	; 0x2c
				ReflowParameters.SoakTempeture0 = 130;
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HandleGui+0xba0>)
 8002370:	2282      	movs	r2, #130	; 0x82
 8002372:	629a      	str	r2, [r3, #40]	; 0x28
				ReflowParameters.secondHeatUpRate0 = 1;
 8002374:	4b12      	ldr	r3, [pc, #72]	; (80023c0 <HandleGui+0xba0>)
 8002376:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800237a:	631a      	str	r2, [r3, #48]	; 0x30
				ReflowParameters.ReflowTime0 = 100;
 800237c:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <HandleGui+0xba0>)
 800237e:	2264      	movs	r2, #100	; 0x64
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
				ReflowParameters.ReflowTempeture0 = 165;
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HandleGui+0xba0>)
 8002384:	22a5      	movs	r2, #165	; 0xa5
 8002386:	635a      	str	r2, [r3, #52]	; 0x34
				// Lead default (138C)
				ReflowParameters.firstHeatUpRate = 0.75;
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HandleGui+0xba0>)
 800238a:	f04f 527d 	mov.w	r2, #1061158912	; 0x3f400000
 800238e:	60da      	str	r2, [r3, #12]
				ReflowParameters.SoakTime = 100;
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HandleGui+0xba0>)
 8002392:	2264      	movs	r2, #100	; 0x64
 8002394:	615a      	str	r2, [r3, #20]
				ReflowParameters.SoakTempeture = 130;
 8002396:	4b0a      	ldr	r3, [pc, #40]	; (80023c0 <HandleGui+0xba0>)
 8002398:	2282      	movs	r2, #130	; 0x82
 800239a:	611a      	str	r2, [r3, #16]
				ReflowParameters.secondHeatUpRate = 1;
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <HandleGui+0xba0>)
 800239e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80023a2:	619a      	str	r2, [r3, #24]
				ReflowParameters.ReflowTime = 100;
 80023a4:	4b06      	ldr	r3, [pc, #24]	; (80023c0 <HandleGui+0xba0>)
 80023a6:	2264      	movs	r2, #100	; 0x64
 80023a8:	621a      	str	r2, [r3, #32]
				ReflowParameters.ReflowTempeture = 165;
 80023aa:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HandleGui+0xba0>)
 80023ac:	22a5      	movs	r2, #165	; 0xa5
 80023ae:	61da      	str	r2, [r3, #28]

				calculateReflowCurve();
 80023b0:	f000 f936 	bl	8002620 <calculateReflowCurve>
				Update_Page_0();
 80023b4:	f7ff f942 	bl	800163c <Update_Page_0>
//	NEXTION_SenduInt("t1",ReflowParameters.SoakTime );
//	NEXTION_SenduInt("t2",ReflowParameters.SoakTempeture );
//	NEXTION_SendFloat("t3",ReflowParameters.secondHeatUpRate );
//	NEXTION_SenduInt("t4",ReflowParameters.ReflowTime );
//	NEXTION_SenduInt("t5",ReflowParameters.ReflowTempeture );
}
 80023b8:	bf00      	nop
 80023ba:	3790      	adds	r7, #144	; 0x90
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200012a8 	.word	0x200012a8
 80023c4:	0800afd0 	.word	0x0800afd0
 80023c8:	20000004 	.word	0x20000004
 80023cc:	0800af60 	.word	0x0800af60
 80023d0:	0800afd8 	.word	0x0800afd8
 80023d4:	0800afe0 	.word	0x0800afe0

080023d8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
/*	float32_t dx = 0.625/4; //275px / 880s / 500ms
	float32_t dy = 0.8333; //200px / 240 Grad
	uint32_t OffsetX = 35;
	uint32_t OffsetY = 230;
*/
	TempDrawCounter++;
 80023e0:	4b77      	ldr	r3, [pc, #476]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	3301      	adds	r3, #1
 80023e6:	4a76      	ldr	r2, [pc, #472]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80023e8:	6013      	str	r3, [r2, #0]

	if (htim == &htim4) {
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f040 80db 	bne.w	80025aa <HAL_TIM_PeriodElapsedCallback+0x1d2>
		//Thermocouple alle 500ms auslesen:
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	2110      	movs	r1, #16
 80023f8:	4873      	ldr	r0, [pc, #460]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80023fa:	f001 fe08 	bl	800400e <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, data, 2, 100);
 80023fe:	2364      	movs	r3, #100	; 0x64
 8002400:	2202      	movs	r2, #2
 8002402:	4972      	ldr	r1, [pc, #456]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002404:	4872      	ldr	r0, [pc, #456]	; (80025d0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002406:	f002 fab9 	bl	800497c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, 1);
 800240a:	2201      	movs	r2, #1
 800240c:	2110      	movs	r1, #16
 800240e:	486e      	ldr	r0, [pc, #440]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002410:	f001 fdfd 	bl	800400e <HAL_GPIO_WritePin>

		temp = ((((uint16_t) data[1] << 8) | data[2]) >> 3) * 0.249;
 8002414:	4b6d      	ldr	r3, [pc, #436]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002416:	785b      	ldrb	r3, [r3, #1]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	4a6c      	ldr	r2, [pc, #432]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800241c:	7892      	ldrb	r2, [r2, #2]
 800241e:	4313      	orrs	r3, r2
 8002420:	10db      	asrs	r3, r3, #3
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe f8a2 	bl	800056c <__aeabi_i2d>
 8002428:	a363      	add	r3, pc, #396	; (adr r3, 80025b8 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe f907 	bl	8000640 <__aeabi_dmul>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4610      	mov	r0, r2
 8002438:	4619      	mov	r1, r3
 800243a:	f7fe fbf9 	bl	8000c30 <__aeabi_d2f>
 800243e:	4603      	mov	r3, r0
 8002440:	4a64      	ldr	r2, [pc, #400]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002442:	6013      	str	r3, [r2, #0]
		// some basic filter to reduce random and noisy temperature readings
		if ((fabs(temp - lastTemp) > 25) && (HAL_GetTick() > 3000))	{
 8002444:	4b63      	ldr	r3, [pc, #396]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a63      	ldr	r2, [pc, #396]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4611      	mov	r1, r2
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe fc42 	bl	8000cd8 <__aeabi_fsub>
 8002454:	4603      	mov	r3, r0
 8002456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800245a:	4960      	ldr	r1, [pc, #384]	; (80025dc <HAL_TIM_PeriodElapsedCallback+0x204>)
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe fdb1 	bl	8000fc4 <__aeabi_fcmpgt>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8002468:	f001 f840 	bl	80034ec <HAL_GetTick>
 800246c:	4603      	mov	r3, r0
 800246e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002472:	4293      	cmp	r3, r2
 8002474:	d904      	bls.n	8002480 <HAL_TIM_PeriodElapsedCallback+0xa8>
			temp = lastTemp;
 8002476:	4b58      	ldr	r3, [pc, #352]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a56      	ldr	r2, [pc, #344]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e003      	b.n	8002488 <HAL_TIM_PeriodElapsedCallback+0xb0>
		}
		else {
			lastTemp=temp;
 8002480:	4b54      	ldr	r3, [pc, #336]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a54      	ldr	r2, [pc, #336]	; (80025d8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002486:	6013      	str	r3, [r2, #0]
		}

		//Reflow Prozess Einleiten:
		if (ReflowEnable == 1) {
 8002488:	4b55      	ldr	r3, [pc, #340]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	f040 8085 	bne.w	800259c <HAL_TIM_PeriodElapsedCallback+0x1c4>
			//NextionDrawTemp(OffsetX + (uint32_t)((float32_t)(ReflowIndex)*dx), OffsetY - (uint32_t)((float32_t)(temp)*dy));

			if(ReflowIndex == PhaseIndex[0])
 8002492:	4b54      	ldr	r3, [pc, #336]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002494:	881a      	ldrh	r2, [r3, #0]
 8002496:	4b54      	ldr	r3, [pc, #336]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002498:	881b      	ldrh	r3, [r3, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d103      	bne.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0xce>
				sprintf(ConsoleMSG,"PREHEAT");
 800249e:	4953      	ldr	r1, [pc, #332]	; (80025ec <HAL_TIM_PeriodElapsedCallback+0x214>)
 80024a0:	4853      	ldr	r0, [pc, #332]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80024a2:	f004 ffb3 	bl	800740c <siprintf>
			if(ReflowIndex == PhaseIndex[1])
 80024a6:	4b4f      	ldr	r3, [pc, #316]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80024a8:	885a      	ldrh	r2, [r3, #2]
 80024aa:	4b4f      	ldr	r3, [pc, #316]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d103      	bne.n	80024ba <HAL_TIM_PeriodElapsedCallback+0xe2>
				sprintf(ConsoleMSG,"SOAK");
 80024b2:	4950      	ldr	r1, [pc, #320]	; (80025f4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80024b4:	484e      	ldr	r0, [pc, #312]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80024b6:	f004 ffa9 	bl	800740c <siprintf>
			if(ReflowIndex == PhaseIndex[2])
 80024ba:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80024bc:	889a      	ldrh	r2, [r3, #4]
 80024be:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d103      	bne.n	80024ce <HAL_TIM_PeriodElapsedCallback+0xf6>
				sprintf(ConsoleMSG,"HEAT UP");
 80024c6:	494c      	ldr	r1, [pc, #304]	; (80025f8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80024c8:	4849      	ldr	r0, [pc, #292]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80024ca:	f004 ff9f 	bl	800740c <siprintf>
			if(ReflowIndex == PhaseIndex[3])
 80024ce:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80024d0:	88da      	ldrh	r2, [r3, #6]
 80024d2:	4b45      	ldr	r3, [pc, #276]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d103      	bne.n	80024e2 <HAL_TIM_PeriodElapsedCallback+0x10a>
				sprintf(ConsoleMSG,"REFLOW");
 80024da:	4948      	ldr	r1, [pc, #288]	; (80025fc <HAL_TIM_PeriodElapsedCallback+0x224>)
 80024dc:	4844      	ldr	r0, [pc, #272]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80024de:	f004 ff95 	bl	800740c <siprintf>
//			if(ReflowIndex == PhaseIndex[4])
//				sprintf(ConsoleMSG,"COOL DOWN");

			//Regelabweichung
			float pid_error =  ReflowCurve[ReflowIndex] - temp;
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	4b45      	ldr	r3, [pc, #276]	; (8002600 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80024ea:	5c9b      	ldrb	r3, [r3, r2]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fca9 	bl	8000e44 <__aeabi_i2f>
 80024f2:	4602      	mov	r2, r0
 80024f4:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f7fe fbec 	bl	8000cd8 <__aeabi_fsub>
 8002500:	4603      	mov	r3, r0
 8002502:	60fb      	str	r3, [r7, #12]
			//Stellgroesse
			duty =  arm_pid_f32(&PID, pid_error);
 8002504:	68f9      	ldr	r1, [r7, #12]
 8002506:	483f      	ldr	r0, [pc, #252]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002508:	f7fe fe62 	bl	80011d0 <arm_pid_f32>
 800250c:	4603      	mov	r3, r0
 800250e:	4a3e      	ldr	r2, [pc, #248]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002510:	6013      	str	r3, [r2, #0]

			//Stellgrößenbegrenzung und Anti-Wind-UP (update 27.03.2021)
			if (duty > 1000) {
 8002512:	4b3d      	ldr	r3, [pc, #244]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	493d      	ldr	r1, [pc, #244]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002518:	4618      	mov	r0, r3
 800251a:	f7fe fd53 	bl	8000fc4 <__aeabi_fcmpgt>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d007      	beq.n	8002534 <HAL_TIM_PeriodElapsedCallback+0x15c>
				duty = 1000;
 8002524:	4b38      	ldr	r3, [pc, #224]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002526:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002528:	601a      	str	r2, [r3, #0]
				PID.Ki = 0;
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	61da      	str	r2, [r3, #28]
 8002532:	e012      	b.n	800255a <HAL_TIM_PeriodElapsedCallback+0x182>
			} else if (duty < 0) {
 8002534:	4b34      	ldr	r3, [pc, #208]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fd23 	bl	8000f88 <__aeabi_fcmplt>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d004      	beq.n	8002552 <HAL_TIM_PeriodElapsedCallback+0x17a>
				duty = 0;
 8002548:	4b2f      	ldr	r3, [pc, #188]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	e003      	b.n	800255a <HAL_TIM_PeriodElapsedCallback+0x182>
			}
			else{
				PID.Ki = ReflowParameters.Ki;
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a2b      	ldr	r2, [pc, #172]	; (8002604 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002558:	61d3      	str	r3, [r2, #28]
			}

			//Dutycycle Anpassen
			htim1.Instance->CCR1 = (uint16_t)duty;
 800255a:	4b2b      	ldr	r3, [pc, #172]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fd3a 	bl	8000fd8 <__aeabi_f2uiz>
 8002564:	4603      	mov	r3, r0
 8002566:	b29a      	uxth	r2, r3
 8002568:	4b2a      	ldr	r3, [pc, #168]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	635a      	str	r2, [r3, #52]	; 0x34

			ReflowIndex++;
 800256e:	4b1e      	ldr	r3, [pc, #120]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	3301      	adds	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002578:	801a      	strh	r2, [r3, #0]
			//Abbruchbedingung
			if (ReflowIndex == PhaseIndex[4]) {
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800257c:	891a      	ldrh	r2, [r3, #8]
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002580:	881b      	ldrh	r3, [r3, #0]
 8002582:	429a      	cmp	r2, r3
 8002584:	d111      	bne.n	80025aa <HAL_TIM_PeriodElapsedCallback+0x1d2>
				sprintf(ConsoleMSG,"FINISHED, OPEN DOOR");
 8002586:	4924      	ldr	r1, [pc, #144]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002588:	4819      	ldr	r0, [pc, #100]	; (80025f0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800258a:	f004 ff3f 	bl	800740c <siprintf>
					BuzzerEnable = 1;
 800258e:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002590:	2201      	movs	r2, #1
 8002592:	701a      	strb	r2, [r3, #0]
					ReflowEnable = 0;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
		}

	}

}
 800259a:	e006      	b.n	80025aa <HAL_TIM_PeriodElapsedCallback+0x1d2>
			ReflowIndex = 0;
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]
			htim1.Instance->CCR1 = 0;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2200      	movs	r2, #0
 80025a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	f3af 8000 	nop.w
 80025b8:	645a1cac 	.word	0x645a1cac
 80025bc:	3fcfdf3b 	.word	0x3fcfdf3b
 80025c0:	20000230 	.word	0x20000230
 80025c4:	20000240 	.word	0x20000240
 80025c8:	40010800 	.word	0x40010800
 80025cc:	20001330 	.word	0x20001330
 80025d0:	2000137c 	.word	0x2000137c
 80025d4:	200002c0 	.word	0x200002c0
 80025d8:	2000132c 	.word	0x2000132c
 80025dc:	41c80000 	.word	0x41c80000
 80025e0:	2000021c 	.word	0x2000021c
 80025e4:	20000224 	.word	0x20000224
 80025e8:	2000021e 	.word	0x2000021e
 80025ec:	0800aff0 	.word	0x0800aff0
 80025f0:	200013d8 	.word	0x200013d8
 80025f4:	0800aff8 	.word	0x0800aff8
 80025f8:	0800b000 	.word	0x0800b000
 80025fc:	0800b008 	.word	0x0800b008
 8002600:	20000308 	.word	0x20000308
 8002604:	20000288 	.word	0x20000288
 8002608:	200013f4 	.word	0x200013f4
 800260c:	447a0000 	.word	0x447a0000
 8002610:	200012a8 	.word	0x200012a8
 8002614:	20001334 	.word	0x20001334
 8002618:	0800b010 	.word	0x0800b010
 800261c:	2000021d 	.word	0x2000021d

08002620 <calculateReflowCurve>:


void calculateReflowCurve(){
 8002620:	b5b0      	push	{r4, r5, r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af00      	add	r7, sp, #0
	for(int i =0;i<4000;i++){
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
 800262a:	e007      	b.n	800263c <calculateReflowCurve+0x1c>
		ReflowCurve[i]=0;
 800262c:	4aa0      	ldr	r2, [pc, #640]	; (80028b0 <calculateReflowCurve+0x290>)
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	2200      	movs	r2, #0
 8002634:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4000;i++){
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8002642:	dbf3      	blt.n	800262c <calculateReflowCurve+0xc>
	}

	int index = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
	float timestep = 0.5;
 8002648:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800264c:	617b      	str	r3, [r7, #20]
	//First Heat Up:
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 800264e:	e01f      	b.n	8002690 <calculateReflowCurve+0x70>
	ReflowCurve[index] = 24 + timestep * ReflowParameters.firstHeatUpRate;
 8002650:	4b98      	ldr	r3, [pc, #608]	; (80028b4 <calculateReflowCurve+0x294>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	6979      	ldr	r1, [r7, #20]
 8002656:	4618      	mov	r0, r3
 8002658:	f7fd fd82 	bl	8000160 <__aeabi_fmul>
 800265c:	4603      	mov	r3, r0
 800265e:	4996      	ldr	r1, [pc, #600]	; (80028b8 <calculateReflowCurve+0x298>)
 8002660:	4618      	mov	r0, r3
 8002662:	f7fe fb3b 	bl	8000cdc <__addsf3>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fcb5 	bl	8000fd8 <__aeabi_f2uiz>
 800266e:	4603      	mov	r3, r0
 8002670:	b2d9      	uxtb	r1, r3
 8002672:	4a8f      	ldr	r2, [pc, #572]	; (80028b0 <calculateReflowCurve+0x290>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	4413      	add	r3, r2
 8002678:	460a      	mov	r2, r1
 800267a:	701a      	strb	r2, [r3, #0]
	index++;
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	3301      	adds	r3, #1
 8002680:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 8002682:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002686:	6978      	ldr	r0, [r7, #20]
 8002688:	f7fe fb28 	bl	8000cdc <__addsf3>
 800268c:	4603      	mov	r3, r0
 800268e:	617b      	str	r3, [r7, #20]
	while (24 + timestep * ReflowParameters.firstHeatUpRate <= ReflowParameters.SoakTempeture) {
 8002690:	4b88      	ldr	r3, [pc, #544]	; (80028b4 <calculateReflowCurve+0x294>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	6979      	ldr	r1, [r7, #20]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd fd62 	bl	8000160 <__aeabi_fmul>
 800269c:	4603      	mov	r3, r0
 800269e:	4986      	ldr	r1, [pc, #536]	; (80028b8 <calculateReflowCurve+0x298>)
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fe fb1b 	bl	8000cdc <__addsf3>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461c      	mov	r4, r3
 80026aa:	4b82      	ldr	r3, [pc, #520]	; (80028b4 <calculateReflowCurve+0x294>)
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7fe fbc4 	bl	8000e3c <__aeabi_ui2f>
 80026b4:	4603      	mov	r3, r0
 80026b6:	4619      	mov	r1, r3
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7fe fc6f 	bl	8000f9c <__aeabi_fcmple>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1c5      	bne.n	8002650 <calculateReflowCurve+0x30>
	}
	PhaseIndex[1]=index;
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b7c      	ldr	r3, [pc, #496]	; (80028bc <calculateReflowCurve+0x29c>)
 80026ca:	805a      	strh	r2, [r3, #2]

	//Soak
	int Soakduration = 2*ReflowParameters.SoakTime;
 80026cc:	4b79      	ldr	r3, [pc, #484]	; (80028b4 <calculateReflowCurve+0x294>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]

	for(int i=0;i<Soakduration;i++){
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	e00a      	b.n	80026f0 <calculateReflowCurve+0xd0>
		ReflowCurve[index+i]=ReflowParameters.SoakTempeture;
 80026da:	4b76      	ldr	r3, [pc, #472]	; (80028b4 <calculateReflowCurve+0x294>)
 80026dc:	6919      	ldr	r1, [r3, #16]
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4413      	add	r3, r2
 80026e4:	b2c9      	uxtb	r1, r1
 80026e6:	4a72      	ldr	r2, [pc, #456]	; (80028b0 <calculateReflowCurve+0x290>)
 80026e8:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Soakduration;i++){
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	3301      	adds	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	dbf0      	blt.n	80026da <calculateReflowCurve+0xba>
	}

	//Second Heat Up:
	index = index + Soakduration;
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	4413      	add	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
	PhaseIndex[2]=index;
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	b29a      	uxth	r2, r3
 8002704:	4b6d      	ldr	r3, [pc, #436]	; (80028bc <calculateReflowCurve+0x29c>)
 8002706:	809a      	strh	r2, [r3, #4]
	timestep = 0.5;
 8002708:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 800270c:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 800270e:	e02e      	b.n	800276e <calculateReflowCurve+0x14e>
	ReflowCurve[index] = ReflowParameters.SoakTempeture + (uint8_t)timestep * ReflowParameters.secondHeatUpRate;
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <calculateReflowCurve+0x294>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fb91 	bl	8000e3c <__aeabi_ui2f>
 800271a:	4604      	mov	r4, r0
 800271c:	6978      	ldr	r0, [r7, #20]
 800271e:	f7fe fc5b 	bl	8000fd8 <__aeabi_f2uiz>
 8002722:	4603      	mov	r3, r0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb8c 	bl	8000e44 <__aeabi_i2f>
 800272c:	4602      	mov	r2, r0
 800272e:	4b61      	ldr	r3, [pc, #388]	; (80028b4 <calculateReflowCurve+0x294>)
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	4619      	mov	r1, r3
 8002734:	4610      	mov	r0, r2
 8002736:	f7fd fd13 	bl	8000160 <__aeabi_fmul>
 800273a:	4603      	mov	r3, r0
 800273c:	4619      	mov	r1, r3
 800273e:	4620      	mov	r0, r4
 8002740:	f7fe facc 	bl	8000cdc <__addsf3>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fc46 	bl	8000fd8 <__aeabi_f2uiz>
 800274c:	4603      	mov	r3, r0
 800274e:	b2d9      	uxtb	r1, r3
 8002750:	4a57      	ldr	r2, [pc, #348]	; (80028b0 <calculateReflowCurve+0x290>)
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	4413      	add	r3, r2
 8002756:	460a      	mov	r2, r1
 8002758:	701a      	strb	r2, [r3, #0]
	index++;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	3301      	adds	r3, #1
 800275e:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 8002760:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002764:	6978      	ldr	r0, [r7, #20]
 8002766:	f7fe fab9 	bl	8000cdc <__addsf3>
 800276a:	4603      	mov	r3, r0
 800276c:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.SoakTempeture + timestep * ReflowParameters.secondHeatUpRate <= ReflowParameters.ReflowTempeture) {
 800276e:	4b51      	ldr	r3, [pc, #324]	; (80028b4 <calculateReflowCurve+0x294>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fb62 	bl	8000e3c <__aeabi_ui2f>
 8002778:	4604      	mov	r4, r0
 800277a:	4b4e      	ldr	r3, [pc, #312]	; (80028b4 <calculateReflowCurve+0x294>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	6979      	ldr	r1, [r7, #20]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fced 	bl	8000160 <__aeabi_fmul>
 8002786:	4603      	mov	r3, r0
 8002788:	4619      	mov	r1, r3
 800278a:	4620      	mov	r0, r4
 800278c:	f7fe faa6 	bl	8000cdc <__addsf3>
 8002790:	4603      	mov	r3, r0
 8002792:	461c      	mov	r4, r3
 8002794:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <calculateReflowCurve+0x294>)
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fb4f 	bl	8000e3c <__aeabi_ui2f>
 800279e:	4603      	mov	r3, r0
 80027a0:	4619      	mov	r1, r3
 80027a2:	4620      	mov	r0, r4
 80027a4:	f7fe fbfa 	bl	8000f9c <__aeabi_fcmple>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1b0      	bne.n	8002710 <calculateReflowCurve+0xf0>
	}
	PhaseIndex[3]=index;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	4b42      	ldr	r3, [pc, #264]	; (80028bc <calculateReflowCurve+0x29c>)
 80027b4:	80da      	strh	r2, [r3, #6]

	//Reflow
	int Reflowduration = 2*ReflowParameters.ReflowTime;
 80027b6:	4b3f      	ldr	r3, [pc, #252]	; (80028b4 <calculateReflowCurve+0x294>)
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	607b      	str	r3, [r7, #4]

	for(int i=0;i<Reflowduration;i++){
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e00a      	b.n	80027da <calculateReflowCurve+0x1ba>
		ReflowCurve[index+i]=ReflowParameters.ReflowTempeture;
 80027c4:	4b3b      	ldr	r3, [pc, #236]	; (80028b4 <calculateReflowCurve+0x294>)
 80027c6:	69d9      	ldr	r1, [r3, #28]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	b2c9      	uxtb	r1, r1
 80027d0:	4a37      	ldr	r2, [pc, #220]	; (80028b0 <calculateReflowCurve+0x290>)
 80027d2:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<Reflowduration;i++){
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3301      	adds	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	429a      	cmp	r2, r3
 80027e0:	dbf0      	blt.n	80027c4 <calculateReflowCurve+0x1a4>
	}

	index = index + Reflowduration;
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4413      	add	r3, r2
 80027e8:	61bb      	str	r3, [r7, #24]
	ReflowCurve[index]=0;
 80027ea:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <calculateReflowCurve+0x290>)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	4413      	add	r3, r2
 80027f0:	2200      	movs	r2, #0
 80027f2:	701a      	strb	r2, [r3, #0]
	PhaseIndex[4]=index;
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	4b30      	ldr	r3, [pc, #192]	; (80028bc <calculateReflowCurve+0x29c>)
 80027fa:	811a      	strh	r2, [r3, #8]

	//Cooldown
	timestep = 0.5;
 80027fc:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8002800:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 8002802:	e02b      	b.n	800285c <calculateReflowCurve+0x23c>
	ReflowCurve[index] = ReflowParameters.ReflowTempeture - timestep * 1.8;
 8002804:	4b2b      	ldr	r3, [pc, #172]	; (80028b4 <calculateReflowCurve+0x294>)
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	4618      	mov	r0, r3
 800280a:	f7fd fe9f 	bl	800054c <__aeabi_ui2d>
 800280e:	4604      	mov	r4, r0
 8002810:	460d      	mov	r5, r1
 8002812:	6978      	ldr	r0, [r7, #20]
 8002814:	f7fd febc 	bl	8000590 <__aeabi_f2d>
 8002818:	a323      	add	r3, pc, #140	; (adr r3, 80028a8 <calculateReflowCurve+0x288>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd ff0f 	bl	8000640 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4620      	mov	r0, r4
 8002828:	4629      	mov	r1, r5
 800282a:	f7fd fd51 	bl	80002d0 <__aeabi_dsub>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f7fe f9db 	bl	8000bf0 <__aeabi_d2uiz>
 800283a:	4603      	mov	r3, r0
 800283c:	b2d9      	uxtb	r1, r3
 800283e:	4a1c      	ldr	r2, [pc, #112]	; (80028b0 <calculateReflowCurve+0x290>)
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	4413      	add	r3, r2
 8002844:	460a      	mov	r2, r1
 8002846:	701a      	strb	r2, [r3, #0]
	index++;
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	3301      	adds	r3, #1
 800284c:	61bb      	str	r3, [r7, #24]
	timestep = timestep + 0.5;
 800284e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002852:	6978      	ldr	r0, [r7, #20]
 8002854:	f7fe fa42 	bl	8000cdc <__addsf3>
 8002858:	4603      	mov	r3, r0
 800285a:	617b      	str	r3, [r7, #20]
	while (ReflowParameters.ReflowTempeture - timestep * 1.8 >= 24) {
 800285c:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <calculateReflowCurve+0x294>)
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	4618      	mov	r0, r3
 8002862:	f7fd fe73 	bl	800054c <__aeabi_ui2d>
 8002866:	4604      	mov	r4, r0
 8002868:	460d      	mov	r5, r1
 800286a:	6978      	ldr	r0, [r7, #20]
 800286c:	f7fd fe90 	bl	8000590 <__aeabi_f2d>
 8002870:	a30d      	add	r3, pc, #52	; (adr r3, 80028a8 <calculateReflowCurve+0x288>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fee3 	bl	8000640 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4620      	mov	r0, r4
 8002880:	4629      	mov	r1, r5
 8002882:	f7fd fd25 	bl	80002d0 <__aeabi_dsub>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	4610      	mov	r0, r2
 800288c:	4619      	mov	r1, r3
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <calculateReflowCurve+0x2a0>)
 8002894:	f7fe f95a 	bl	8000b4c <__aeabi_dcmpge>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1b2      	bne.n	8002804 <calculateReflowCurve+0x1e4>

	}
}
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bdb0      	pop	{r4, r5, r7, pc}
 80028a8:	cccccccd 	.word	0xcccccccd
 80028ac:	3ffccccc 	.word	0x3ffccccc
 80028b0:	20000308 	.word	0x20000308
 80028b4:	200012a8 	.word	0x200012a8
 80028b8:	41c00000 	.word	0x41c00000
 80028bc:	20000224 	.word	0x20000224
 80028c0:	40380000 	.word	0x40380000

080028c4 <Draw_Reflow_Curve>:


void Draw_Reflow_Curve()	{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
	float32_t dx = 0.20833; //275px / 660s / 500 ms
 80028ca:	4b24      	ldr	r3, [pc, #144]	; (800295c <Draw_Reflow_Curve+0x98>)
 80028cc:	613b      	str	r3, [r7, #16]
		float32_t dy = 0.7143; //175px / 245 Grad
 80028ce:	4b24      	ldr	r3, [pc, #144]	; (8002960 <Draw_Reflow_Curve+0x9c>)
 80028d0:	60fb      	str	r3, [r7, #12]
	uint32_t OffsetX = 35;
 80028d2:	2323      	movs	r3, #35	; 0x23
 80028d4:	60bb      	str	r3, [r7, #8]
	uint32_t OffsetY = 240;
 80028d6:	23f0      	movs	r3, #240	; 0xf0
 80028d8:	607b      	str	r3, [r7, #4]
	uint32_t index = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]

	while(ReflowCurve[index] != 0){
 80028de:	e030      	b.n	8002942 <Draw_Reflow_Curve+0x7e>

		NextionDrawDot(OffsetX + (uint32_t)((float32_t)(index)*dx), OffsetY - (uint32_t)((float32_t)(ReflowCurve[index])*dy));
 80028e0:	6978      	ldr	r0, [r7, #20]
 80028e2:	f7fe faab 	bl	8000e3c <__aeabi_ui2f>
 80028e6:	4603      	mov	r3, r0
 80028e8:	6939      	ldr	r1, [r7, #16]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fd fc38 	bl	8000160 <__aeabi_fmul>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fe fb70 	bl	8000fd8 <__aeabi_f2uiz>
 80028f8:	4602      	mov	r2, r0
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	18d4      	adds	r4, r2, r3
 80028fe:	4a19      	ldr	r2, [pc, #100]	; (8002964 <Draw_Reflow_Curve+0xa0>)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	4413      	add	r3, r2
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe fa98 	bl	8000e3c <__aeabi_ui2f>
 800290c:	4603      	mov	r3, r0
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fc25 	bl	8000160 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fb5d 	bl	8000fd8 <__aeabi_f2uiz>
 800291e:	4602      	mov	r2, r0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	4619      	mov	r1, r3
 8002926:	4620      	mov	r0, r4
 8002928:	f7fe fd7a 	bl	8001420 <NextionDrawDot>
		index= index + 4;
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	3304      	adds	r3, #4
 8002930:	617b      	str	r3, [r7, #20]

		if(strncmp((char *)UART_Recieved_Data, "p0b02", 5) == 0)
 8002932:	2205      	movs	r2, #5
 8002934:	490c      	ldr	r1, [pc, #48]	; (8002968 <Draw_Reflow_Curve+0xa4>)
 8002936:	480d      	ldr	r0, [pc, #52]	; (800296c <Draw_Reflow_Curve+0xa8>)
 8002938:	f004 fd88 	bl	800744c <strncmp>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <Draw_Reflow_Curve+0x8c>
	while(ReflowCurve[index] != 0){
 8002942:	4a08      	ldr	r2, [pc, #32]	; (8002964 <Draw_Reflow_Curve+0xa0>)
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	4413      	add	r3, r2
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1c8      	bne.n	80028e0 <Draw_Reflow_Curve+0x1c>
			break;
	}
}
 800294e:	e000      	b.n	8002952 <Draw_Reflow_Curve+0x8e>
			break;
 8002950:	bf00      	nop
}
 8002952:	bf00      	nop
 8002954:	371c      	adds	r7, #28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd90      	pop	{r4, r7, pc}
 800295a:	bf00      	nop
 800295c:	3e555476 	.word	0x3e555476
 8002960:	3f36dc5d 	.word	0x3f36dc5d
 8002964:	20000308 	.word	0x20000308
 8002968:	0800af08 	.word	0x0800af08
 800296c:	20000004 	.word	0x20000004

08002970 <startReflow>:


void startReflow()	{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
	ReflowEnable = 1;
 8002974:	4b07      	ldr	r3, [pc, #28]	; (8002994 <startReflow+0x24>)
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
	NEXTION_CMD("page 0");
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <startReflow+0x28>)
 800297c:	f7fe fd32 	bl	80013e4 <NEXTION_CMD>
	Draw_Reflow_Curve();
 8002980:	f7ff ffa0 	bl	80028c4 <Draw_Reflow_Curve>
	TempDrawCounter = 0;
 8002984:	4b05      	ldr	r3, [pc, #20]	; (800299c <startReflow+0x2c>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
	Update_Page_0();
 800298a:	f7fe fe57 	bl	800163c <Update_Page_0>
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000021c 	.word	0x2000021c
 8002998:	0800b024 	.word	0x0800b024
 800299c:	20000230 	.word	0x20000230

080029a0 <stopReflow>:


void stopReflow()	{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0

	if ( ReflowEnable == 1 )	{
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <stopReflow+0x28>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d10b      	bne.n	80029c4 <stopReflow+0x24>
		ReflowEnable = 0;
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <stopReflow+0x28>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
		TempDrawEnable = 0;
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <stopReflow+0x2c>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
		sprintf(ConsoleMSG,"STOPPED");
 80029b8:	4905      	ldr	r1, [pc, #20]	; (80029d0 <stopReflow+0x30>)
 80029ba:	4806      	ldr	r0, [pc, #24]	; (80029d4 <stopReflow+0x34>)
 80029bc:	f004 fd26 	bl	800740c <siprintf>
		Update_Page_0();
 80029c0:	f7fe fe3c 	bl	800163c <Update_Page_0>
	}
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	2000021c 	.word	0x2000021c
 80029cc:	2000022e 	.word	0x2000022e
 80029d0:	0800b02c 	.word	0x0800b02c
 80029d4:	200013d8 	.word	0x200013d8

080029d8 <beepBeep>:


void beepBeep()	{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0

	  if (BuzzerEnable == 1)	{
 80029dc:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <beepBeep+0xb0>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d14f      	bne.n	8002a84 <beepBeep+0xac>

		  if (HAL_GPIO_ReadPin(BUZZER_GPIO_Port, BUZZER_Pin) && ((HAL_GetTick() - TimerBUZZER) > 100))	{
 80029e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029e8:	4828      	ldr	r0, [pc, #160]	; (8002a8c <beepBeep+0xb4>)
 80029ea:	f001 faf9 	bl	8003fe0 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d013      	beq.n	8002a1c <beepBeep+0x44>
 80029f4:	f000 fd7a 	bl	80034ec <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b25      	ldr	r3, [pc, #148]	; (8002a90 <beepBeep+0xb8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	2b64      	cmp	r3, #100	; 0x64
 8002a02:	d90b      	bls.n	8002a1c <beepBeep+0x44>
			  TimerBUZZER = HAL_GetTick();
 8002a04:	f000 fd72 	bl	80034ec <HAL_GetTick>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <beepBeep+0xb8>)
 8002a0c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a14:	481d      	ldr	r0, [pc, #116]	; (8002a8c <beepBeep+0xb4>)
 8002a16:	f001 fafa 	bl	800400e <HAL_GPIO_WritePin>
 8002a1a:	e033      	b.n	8002a84 <beepBeep+0xac>
		  	}

		  else if (!(HAL_GPIO_ReadPin(BUZZER_GPIO_Port, BUZZER_Pin)) && ((HAL_GetTick() - TimerBUZZER) > 100) && (beep<2))	{
 8002a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a20:	481a      	ldr	r0, [pc, #104]	; (8002a8c <beepBeep+0xb4>)
 8002a22:	f001 fadd 	bl	8003fe0 <HAL_GPIO_ReadPin>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d11d      	bne.n	8002a68 <beepBeep+0x90>
 8002a2c:	f000 fd5e 	bl	80034ec <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b17      	ldr	r3, [pc, #92]	; (8002a90 <beepBeep+0xb8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b64      	cmp	r3, #100	; 0x64
 8002a3a:	d915      	bls.n	8002a68 <beepBeep+0x90>
 8002a3c:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <beepBeep+0xbc>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d811      	bhi.n	8002a68 <beepBeep+0x90>
			  TimerBUZZER = HAL_GetTick();
 8002a44:	f000 fd52 	bl	80034ec <HAL_GetTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a11      	ldr	r2, [pc, #68]	; (8002a90 <beepBeep+0xb8>)
 8002a4c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 1);
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a54:	480d      	ldr	r0, [pc, #52]	; (8002a8c <beepBeep+0xb4>)
 8002a56:	f001 fada 	bl	800400e <HAL_GPIO_WritePin>
			  beep++;
 8002a5a:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <beepBeep+0xbc>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <beepBeep+0xbc>)
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e00d      	b.n	8002a84 <beepBeep+0xac>
		  	}
		  else	{
			  if ((HAL_GetTick() - TimerBUZZER) > 3000)	{
 8002a68:	f000 fd40 	bl	80034ec <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <beepBeep+0xb8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d903      	bls.n	8002a84 <beepBeep+0xac>
			 		beep=0;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <beepBeep+0xbc>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
			 	}
		  }
	  }

}
 8002a82:	e7ff      	b.n	8002a84 <beepBeep+0xac>
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000021d 	.word	0x2000021d
 8002a8c:	40010800 	.word	0x40010800
 8002a90:	200013d4 	.word	0x200013d4
 8002a94:	200013f1 	.word	0x200013f1

08002a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	Flash_Read_Data(0x0801FC00, (uint32_t *)&ReflowParameters);
 8002a9c:	4938      	ldr	r1, [pc, #224]	; (8002b80 <main+0xe8>)
 8002a9e:	4839      	ldr	r0, [pc, #228]	; (8002b84 <main+0xec>)
 8002aa0:	f7fe fb78 	bl	8001194 <Flash_Read_Data>
	calculateReflowCurve();
 8002aa4:	f7ff fdbc 	bl	8002620 <calculateReflowCurve>

	PID.Kp = ReflowParameters.KP;
 8002aa8:	4b35      	ldr	r3, [pc, #212]	; (8002b80 <main+0xe8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a36      	ldr	r2, [pc, #216]	; (8002b88 <main+0xf0>)
 8002aae:	6193      	str	r3, [r2, #24]
	PID.Ki = ReflowParameters.Ki;
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <main+0xe8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a34      	ldr	r2, [pc, #208]	; (8002b88 <main+0xf0>)
 8002ab6:	61d3      	str	r3, [r2, #28]
	PID.Kd = ReflowParameters.KD;
 8002ab8:	4b31      	ldr	r3, [pc, #196]	; (8002b80 <main+0xe8>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	4a32      	ldr	r2, [pc, #200]	; (8002b88 <main+0xf0>)
 8002abe:	6213      	str	r3, [r2, #32]

	arm_pid_init_f32(&PID, 1);
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4831      	ldr	r0, [pc, #196]	; (8002b88 <main+0xf0>)
 8002ac4:	f003 ffe4 	bl	8006a90 <arm_pid_init_f32>
	 beep=0;
 8002ac8:	4b30      	ldr	r3, [pc, #192]	; (8002b8c <main+0xf4>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ace:	f000 fcb5 	bl	800343c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ad2:	f000 f875 	bl	8002bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ad6:	f000 f9ed 	bl	8002eb4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002ada:	f000 f8b7 	bl	8002c4c <MX_SPI1_Init>
  MX_TIM4_Init();
 8002ade:	f000 f971 	bl	8002dc4 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002ae2:	f000 f8eb 	bl	8002cbc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8002ae6:	f000 f9bb 	bl	8002e60 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  TimerBUZZER = HAL_GetTick();
 8002aea:	f000 fcff 	bl	80034ec <HAL_GetTick>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <main+0xf8>)
 8002af2:	6013      	str	r3, [r2, #0]
  TimerGui = HAL_GetTick();
 8002af4:	f000 fcfa 	bl	80034ec <HAL_GetTick>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <main+0xfc>)
 8002afc:	6013      	str	r3, [r2, #0]

  HAL_TIM_Base_Start_IT(&htim4);
 8002afe:	4826      	ldr	r0, [pc, #152]	; (8002b98 <main+0x100>)
 8002b00:	f002 fb38 	bl	8005174 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002b04:	2100      	movs	r1, #0
 8002b06:	4825      	ldr	r0, [pc, #148]	; (8002b9c <main+0x104>)
 8002b08:	f002 fbd6 	bl	80052b8 <HAL_TIM_PWM_Start>

  htim1.Instance->CCR1 = 10;
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <main+0x104>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	220a      	movs	r2, #10
 8002b12:	635a      	str	r2, [r3, #52]	; 0x34

  //startReflow();
  HAL_Delay(2000);
 8002b14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b18:	f000 fcf2 	bl	8003500 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	4920      	ldr	r1, [pc, #128]	; (8002ba0 <main+0x108>)
 8002b20:	4820      	ldr	r0, [pc, #128]	; (8002ba4 <main+0x10c>)
 8002b22:	f003 fb5d 	bl	80061e0 <HAL_UART_Receive_IT>
  sprintf(ConsoleMSG,"IDLE");
 8002b26:	4920      	ldr	r1, [pc, #128]	; (8002ba8 <main+0x110>)
 8002b28:	4820      	ldr	r0, [pc, #128]	; (8002bac <main+0x114>)
 8002b2a:	f004 fc6f 	bl	800740c <siprintf>
  Update_Page_0();
 8002b2e:	f7fe fd85 	bl	800163c <Update_Page_0>
  Draw_Reflow_Curve();
 8002b32:	f7ff fec7 	bl	80028c4 <Draw_Reflow_Curve>
  HAL_UART_Receive_IT(&huart1, UART_Recieved_Data, 5);
 8002b36:	2205      	movs	r2, #5
 8002b38:	4919      	ldr	r1, [pc, #100]	; (8002ba0 <main+0x108>)
 8002b3a:	481a      	ldr	r0, [pc, #104]	; (8002ba4 <main+0x10c>)
 8002b3c:	f003 fb50 	bl	80061e0 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_GetTick() - TimerGui > 505)	{
 8002b40:	f000 fcd4 	bl	80034ec <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <main+0xfc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 8002b50:	d306      	bcc.n	8002b60 <main+0xc8>
		  TimerGui = HAL_GetTick();
 8002b52:	f000 fccb 	bl	80034ec <HAL_GetTick>
 8002b56:	4603      	mov	r3, r0
 8002b58:	4a0e      	ldr	r2, [pc, #56]	; (8002b94 <main+0xfc>)
 8002b5a:	6013      	str	r3, [r2, #0]
		  HandleGui();
 8002b5c:	f7fe fe60 	bl	8001820 <HandleGui>
		 /* if(strncmp((char *)UART_Recieved_Data, "p0xxx", 5) == 0)	{
			  debug = 5;
		  }
		  */
	  	}
		if ((ReflowEnable == 1) && (ReflowIndex == PhaseIndex[4])) {
 8002b60:	4b13      	ldr	r3, [pc, #76]	; (8002bb0 <main+0x118>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d108      	bne.n	8002b7a <main+0xe2>
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <main+0x11c>)
 8002b6a:	891a      	ldrh	r2, [r3, #8]
 8002b6c:	4b12      	ldr	r3, [pc, #72]	; (8002bb8 <main+0x120>)
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d102      	bne.n	8002b7a <main+0xe2>
			BuzzerEnable = 1;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <main+0x124>)
 8002b76:	2201      	movs	r2, #1
 8002b78:	701a      	strb	r2, [r3, #0]
		}

	  beepBeep();
 8002b7a:	f7ff ff2d 	bl	80029d8 <beepBeep>
	  if (HAL_GetTick() - TimerGui > 505)	{
 8002b7e:	e7df      	b.n	8002b40 <main+0xa8>
 8002b80:	200012a8 	.word	0x200012a8
 8002b84:	0801fc00 	.word	0x0801fc00
 8002b88:	20000288 	.word	0x20000288
 8002b8c:	200013f1 	.word	0x200013f1
 8002b90:	200013d4 	.word	0x200013d4
 8002b94:	200013f8 	.word	0x200013f8
 8002b98:	20000240 	.word	0x20000240
 8002b9c:	20001334 	.word	0x20001334
 8002ba0:	20000004 	.word	0x20000004
 8002ba4:	200002c4 	.word	0x200002c4
 8002ba8:	0800b034 	.word	0x0800b034
 8002bac:	200013d8 	.word	0x200013d8
 8002bb0:	2000021c 	.word	0x2000021c
 8002bb4:	20000224 	.word	0x20000224
 8002bb8:	2000021e 	.word	0x2000021e
 8002bbc:	2000021d 	.word	0x2000021d

08002bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b090      	sub	sp, #64	; 0x40
 8002bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002bc6:	f107 0318 	add.w	r3, r7, #24
 8002bca:	2228      	movs	r2, #40	; 0x28
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f003 ffb4 	bl	8006b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002bd4:	1d3b      	adds	r3, r7, #4
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]
 8002be0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8002bfe:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c04:	f107 0318 	add.w	r3, r7, #24
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f001 fa19 	bl	8004040 <HAL_RCC_OscConfig>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002c14:	f000 f99c 	bl	8002f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c18:	230f      	movs	r3, #15
 8002c1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c2e:	1d3b      	adds	r3, r7, #4
 8002c30:	2102      	movs	r1, #2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f001 fc84 	bl	8004540 <HAL_RCC_ClockConfig>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002c3e:	f000 f987 	bl	8002f50 <Error_Handler>
  }
}
 8002c42:	bf00      	nop
 8002c44:	3740      	adds	r7, #64	; 0x40
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c50:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c52:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <MX_SPI1_Init+0x6c>)
 8002c54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8002c5e:	4b15      	ldr	r3, [pc, #84]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c64:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002c74:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002c82:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c84:	2238      	movs	r2, #56	; 0x38
 8002c86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c88:	4b0a      	ldr	r3, [pc, #40]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c8e:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002c9a:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002c9c:	220a      	movs	r2, #10
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002ca0:	4804      	ldr	r0, [pc, #16]	; (8002cb4 <MX_SPI1_Init+0x68>)
 8002ca2:	f001 fde7 	bl	8004874 <HAL_SPI_Init>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002cac:	f000 f950 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002cb0:	bf00      	nop
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	2000137c 	.word	0x2000137c
 8002cb8:	40013000 	.word	0x40013000

08002cbc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	; 0x48
 8002cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	611a      	str	r2, [r3, #16]
 8002cdc:	615a      	str	r2, [r3, #20]
 8002cde:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ce0:	1d3b      	adds	r3, r7, #4
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 ff28 	bl	8006b3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cec:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002cee:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <MX_TIM1_Init+0x104>)
 8002cf0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32000;
 8002cf2:	4b32      	ldr	r3, [pc, #200]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002cf4:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 8002cf8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b30      	ldr	r3, [pc, #192]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002d00:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d08:	4b2c      	ldr	r3, [pc, #176]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d14:	4b29      	ldr	r3, [pc, #164]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002d1a:	4828      	ldr	r0, [pc, #160]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d1c:	f002 fa7c 	bl	8005218 <HAL_TIM_PWM_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002d26:	f000 f913 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002d36:	4619      	mov	r1, r3
 8002d38:	4820      	ldr	r0, [pc, #128]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d3a:	f003 f8b1 	bl	8005ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002d44:	f000 f904 	bl	8002f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002d48:	2370      	movs	r3, #112	; 0x70
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002d50:	2302      	movs	r3, #2
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002d54:	2300      	movs	r3, #0
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	2200      	movs	r2, #0
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4813      	ldr	r0, [pc, #76]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002d6e:	f002 fc4d 	bl	800560c <HAL_TIM_PWM_ConfigChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002d78:	f000 f8ea 	bl	8002f50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4807      	ldr	r0, [pc, #28]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002da0:	f003 f8dc 	bl	8005f5c <HAL_TIMEx_ConfigBreakDeadTime>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8002daa:	f000 f8d1 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002dae:	4803      	ldr	r0, [pc, #12]	; (8002dbc <MX_TIM1_Init+0x100>)
 8002db0:	f000 f994 	bl	80030dc <HAL_TIM_MspPostInit>

}
 8002db4:	bf00      	nop
 8002db6:	3748      	adds	r7, #72	; 0x48
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20001334 	.word	0x20001334
 8002dc0:	40012c00 	.word	0x40012c00

08002dc4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd8:	463b      	mov	r3, r7
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002de0:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002de2:	4a1e      	ldr	r2, [pc, #120]	; (8002e5c <MX_TIM4_Init+0x98>)
 8002de4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000;
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002de8:	f44f 427a 	mov.w	r2, #64000	; 0xfa00
 8002dec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dee:	4b1a      	ldr	r3, [pc, #104]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002df6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dfa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002e08:	4813      	ldr	r0, [pc, #76]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002e0a:	f002 f963 	bl	80050d4 <HAL_TIM_Base_Init>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d001      	beq.n	8002e18 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002e14:	f000 f89c 	bl	8002f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002e1e:	f107 0308 	add.w	r3, r7, #8
 8002e22:	4619      	mov	r1, r3
 8002e24:	480c      	ldr	r0, [pc, #48]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002e26:	f002 fcaf 	bl	8005788 <HAL_TIM_ConfigClockSource>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002e30:	f000 f88e 	bl	8002f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e34:	2300      	movs	r3, #0
 8002e36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e3c:	463b      	mov	r3, r7
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4805      	ldr	r0, [pc, #20]	; (8002e58 <MX_TIM4_Init+0x94>)
 8002e42:	f003 f82d 	bl	8005ea0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002e4c:	f000 f880 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e50:	bf00      	nop
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000240 	.word	0x20000240
 8002e5c:	40000800 	.word	0x40000800

08002e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e64:	4b11      	ldr	r3, [pc, #68]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e66:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <MX_USART1_UART_Init+0x50>)
 8002e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e6c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8002e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e84:	4b09      	ldr	r3, [pc, #36]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e86:	220c      	movs	r2, #12
 8002e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e96:	4805      	ldr	r0, [pc, #20]	; (8002eac <MX_USART1_UART_Init+0x4c>)
 8002e98:	f003 f8c3 	bl	8006022 <HAL_UART_Init>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ea2:	f000 f855 	bl	8002f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	200002c4 	.word	0x200002c4
 8002eb0:	40013800 	.word	0x40013800

08002eb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eba:	f107 0308 	add.w	r3, r7, #8
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec8:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <MX_GPIO_Init+0x94>)
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	4a1e      	ldr	r2, [pc, #120]	; (8002f48 <MX_GPIO_Init+0x94>)
 8002ece:	f043 0320 	orr.w	r3, r3, #32
 8002ed2:	6193      	str	r3, [r2, #24]
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <MX_GPIO_Init+0x94>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	607b      	str	r3, [r7, #4]
 8002ede:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ee0:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <MX_GPIO_Init+0x94>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	4a18      	ldr	r2, [pc, #96]	; (8002f48 <MX_GPIO_Init+0x94>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	6193      	str	r3, [r2, #24]
 8002eec:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <MX_GPIO_Init+0x94>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f248 0110 	movw	r1, #32784	; 0x8010
 8002efe:	4813      	ldr	r0, [pc, #76]	; (8002f4c <MX_GPIO_Init+0x98>)
 8002f00:	f001 f885 	bl	800400e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8002f04:	2310      	movs	r3, #16
 8002f06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2302      	movs	r3, #2
 8002f12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	4619      	mov	r1, r3
 8002f1a:	480c      	ldr	r0, [pc, #48]	; (8002f4c <MX_GPIO_Init+0x98>)
 8002f1c:	f000 fedc 	bl	8003cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8002f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	2301      	movs	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8002f32:	f107 0308 	add.w	r3, r7, #8
 8002f36:	4619      	mov	r1, r3
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <MX_GPIO_Init+0x98>)
 8002f3a:	f000 fecd 	bl	8003cd8 <HAL_GPIO_Init>

}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40010800 	.word	0x40010800

08002f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f54:	b672      	cpsid	i
}
 8002f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f58:	e7fe      	b.n	8002f58 <Error_Handler+0x8>
	...

08002f5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	4a14      	ldr	r2, [pc, #80]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6193      	str	r3, [r2, #24]
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f7c:	69db      	ldr	r3, [r3, #28]
 8002f7e:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f84:	61d3      	str	r3, [r2, #28]
 8002f86:	4b0c      	ldr	r3, [pc, #48]	; (8002fb8 <HAL_MspInit+0x5c>)
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	607b      	str	r3, [r7, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f92:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <HAL_MspInit+0x60>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <HAL_MspInit+0x60>)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	40010000 	.word	0x40010000

08002fc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0310 	add.w	r3, r7, #16
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a1b      	ldr	r2, [pc, #108]	; (8003048 <HAL_SPI_MspInit+0x88>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d12f      	bne.n	8003040 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe0:	4b1a      	ldr	r3, [pc, #104]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	4a19      	ldr	r2, [pc, #100]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8002fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fea:	6193      	str	r3, [r2, #24]
 8002fec:	4b17      	ldr	r3, [pc, #92]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ff4:	60fb      	str	r3, [r7, #12]
 8002ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8002ffe:	f043 0304 	orr.w	r3, r3, #4
 8003002:	6193      	str	r3, [r2, #24]
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <HAL_SPI_MspInit+0x8c>)
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003010:	2320      	movs	r3, #32
 8003012:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003018:	2303      	movs	r3, #3
 800301a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800301c:	f107 0310 	add.w	r3, r7, #16
 8003020:	4619      	mov	r1, r3
 8003022:	480b      	ldr	r0, [pc, #44]	; (8003050 <HAL_SPI_MspInit+0x90>)
 8003024:	f000 fe58 	bl	8003cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	4619      	mov	r1, r3
 800303a:	4805      	ldr	r0, [pc, #20]	; (8003050 <HAL_SPI_MspInit+0x90>)
 800303c:	f000 fe4c 	bl	8003cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003040:	bf00      	nop
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40013000 	.word	0x40013000
 800304c:	40021000 	.word	0x40021000
 8003050:	40010800 	.word	0x40010800

08003054 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_TIM_PWM_MspInit+0x34>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d10b      	bne.n	800307e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_TIM_PWM_MspInit+0x38>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_TIM_PWM_MspInit+0x38>)
 800306c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003070:	6193      	str	r3, [r2, #24]
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_TIM_PWM_MspInit+0x38>)
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr
 8003088:	40012c00 	.word	0x40012c00
 800308c:	40021000 	.word	0x40021000

08003090 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_TIM_Base_MspInit+0x44>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d113      	bne.n	80030ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030a2:	4b0d      	ldr	r3, [pc, #52]	; (80030d8 <HAL_TIM_Base_MspInit+0x48>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a0c      	ldr	r2, [pc, #48]	; (80030d8 <HAL_TIM_Base_MspInit+0x48>)
 80030a8:	f043 0304 	orr.w	r3, r3, #4
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_TIM_Base_MspInit+0x48>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 0304 	and.w	r3, r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
 80030b8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80030ba:	2200      	movs	r2, #0
 80030bc:	2101      	movs	r1, #1
 80030be:	201e      	movs	r0, #30
 80030c0:	f000 fb19 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030c4:	201e      	movs	r0, #30
 80030c6:	f000 fb32 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80030ca:	bf00      	nop
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40021000 	.word	0x40021000

080030dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b088      	sub	sp, #32
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0310 	add.w	r3, r7, #16
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a10      	ldr	r2, [pc, #64]	; (8003138 <HAL_TIM_MspPostInit+0x5c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d118      	bne.n	800312e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030fc:	4b0f      	ldr	r3, [pc, #60]	; (800313c <HAL_TIM_MspPostInit+0x60>)
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	4a0e      	ldr	r2, [pc, #56]	; (800313c <HAL_TIM_MspPostInit+0x60>)
 8003102:	f043 0304 	orr.w	r3, r3, #4
 8003106:	6193      	str	r3, [r2, #24]
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <HAL_TIM_MspPostInit+0x60>)
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003114:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003118:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2302      	movs	r3, #2
 8003120:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003122:	f107 0310 	add.w	r3, r7, #16
 8003126:	4619      	mov	r1, r3
 8003128:	4805      	ldr	r0, [pc, #20]	; (8003140 <HAL_TIM_MspPostInit+0x64>)
 800312a:	f000 fdd5 	bl	8003cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800312e:	bf00      	nop
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40012c00 	.word	0x40012c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40010800 	.word	0x40010800

08003144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0310 	add.w	r3, r7, #16
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a20      	ldr	r2, [pc, #128]	; (80031e0 <HAL_UART_MspInit+0x9c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d139      	bne.n	80031d8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <HAL_UART_MspInit+0xa0>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <HAL_UART_MspInit+0xa0>)
 800316a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800316e:	6193      	str	r3, [r2, #24]
 8003170:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <HAL_UART_MspInit+0xa0>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_UART_MspInit+0xa0>)
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	4a18      	ldr	r2, [pc, #96]	; (80031e4 <HAL_UART_MspInit+0xa0>)
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	6193      	str	r3, [r2, #24]
 8003188:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_UART_MspInit+0xa0>)
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800319a:	2302      	movs	r3, #2
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800319e:	2303      	movs	r3, #3
 80031a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a2:	f107 0310 	add.w	r3, r7, #16
 80031a6:	4619      	mov	r1, r3
 80031a8:	480f      	ldr	r0, [pc, #60]	; (80031e8 <HAL_UART_MspInit+0xa4>)
 80031aa:	f000 fd95 	bl	8003cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031bc:	f107 0310 	add.w	r3, r7, #16
 80031c0:	4619      	mov	r1, r3
 80031c2:	4809      	ldr	r0, [pc, #36]	; (80031e8 <HAL_UART_MspInit+0xa4>)
 80031c4:	f000 fd88 	bl	8003cd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2100      	movs	r1, #0
 80031cc:	2025      	movs	r0, #37	; 0x25
 80031ce:	f000 fa92 	bl	80036f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80031d2:	2025      	movs	r0, #37	; 0x25
 80031d4:	f000 faab 	bl	800372e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031d8:	bf00      	nop
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40013800 	.word	0x40013800
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40010800 	.word	0x40010800

080031ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f0:	e7fe      	b.n	80031f0 <NMI_Handler+0x4>

080031f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f2:	b480      	push	{r7}
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f6:	e7fe      	b.n	80031f6 <HardFault_Handler+0x4>

080031f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031fc:	e7fe      	b.n	80031fc <MemManage_Handler+0x4>

080031fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fe:	b480      	push	{r7}
 8003200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003202:	e7fe      	b.n	8003202 <BusFault_Handler+0x4>

08003204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003208:	e7fe      	b.n	8003208 <UsageFault_Handler+0x4>

0800320a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr

08003216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003216:	b480      	push	{r7}
 8003218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003222:	b480      	push	{r7}
 8003224:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003226:	bf00      	nop
 8003228:	46bd      	mov	sp, r7
 800322a:	bc80      	pop	{r7}
 800322c:	4770      	bx	lr

0800322e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003232:	f000 f949 	bl	80034c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <TIM4_IRQHandler+0x10>)
 8003242:	f002 f8db 	bl	80053fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000240 	.word	0x20000240

08003250 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <USART1_IRQHandler+0x10>)
 8003256:	f002 fff3 	bl	8006240 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	200002c4 	.word	0x200002c4

08003264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
	return 1;
 8003268:	2301      	movs	r3, #1
}
 800326a:	4618      	mov	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <_kill>:

int _kill(int pid, int sig)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800327c:	f003 fc34 	bl	8006ae8 <__errno>
 8003280:	4603      	mov	r3, r0
 8003282:	2216      	movs	r2, #22
 8003284:	601a      	str	r2, [r3, #0]
	return -1;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800328a:	4618      	mov	r0, r3
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}

08003292 <_exit>:

void _exit (int status)
{
 8003292:	b580      	push	{r7, lr}
 8003294:	b082      	sub	sp, #8
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800329a:	f04f 31ff 	mov.w	r1, #4294967295
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7ff ffe7 	bl	8003272 <_kill>
	while (1) {}		/* Make sure we hang here */
 80032a4:	e7fe      	b.n	80032a4 <_exit+0x12>

080032a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	e00a      	b.n	80032ce <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80032b8:	f3af 8000 	nop.w
 80032bc:	4601      	mov	r1, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	60ba      	str	r2, [r7, #8]
 80032c4:	b2ca      	uxtb	r2, r1
 80032c6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	3301      	adds	r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	dbf0      	blt.n	80032b8 <_read+0x12>
	}

return len;
 80032d6:	687b      	ldr	r3, [r7, #4]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b086      	sub	sp, #24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e009      	b.n	8003306 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1c5a      	adds	r2, r3, #1
 80032f6:	60ba      	str	r2, [r7, #8]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3301      	adds	r3, #1
 8003304:	617b      	str	r3, [r7, #20]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	429a      	cmp	r2, r3
 800330c:	dbf1      	blt.n	80032f2 <_write+0x12>
	}
	return len;
 800330e:	687b      	ldr	r3, [r7, #4]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <_close>:

int _close(int file)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
	return -1;
 8003320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800333e:	605a      	str	r2, [r3, #4]
	return 0;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr

0800334c <_isatty>:

int _isatty(int file)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
	return 1;
 8003354:	2301      	movs	r3, #1
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	bc80      	pop	{r7}
 800335e:	4770      	bx	lr

08003360 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
	return 0;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003380:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <_sbrk+0x5c>)
 8003382:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <_sbrk+0x60>)
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800338c:	4b13      	ldr	r3, [pc, #76]	; (80033dc <_sbrk+0x64>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d102      	bne.n	800339a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003394:	4b11      	ldr	r3, [pc, #68]	; (80033dc <_sbrk+0x64>)
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <_sbrk+0x68>)
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <_sbrk+0x64>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d207      	bcs.n	80033b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80033a8:	f003 fb9e 	bl	8006ae8 <__errno>
 80033ac:	4603      	mov	r3, r0
 80033ae:	220c      	movs	r2, #12
 80033b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	e009      	b.n	80033cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <_sbrk+0x64>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80033be:	4b07      	ldr	r3, [pc, #28]	; (80033dc <_sbrk+0x64>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	4a05      	ldr	r2, [pc, #20]	; (80033dc <_sbrk+0x64>)
 80033c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033ca:	68fb      	ldr	r3, [r7, #12]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3718      	adds	r7, #24
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20005000 	.word	0x20005000
 80033d8:	00000400 	.word	0x00000400
 80033dc:	20000234 	.word	0x20000234
 80033e0:	20001430 	.word	0x20001430

080033e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033e8:	bf00      	nop
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033f0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033f2:	e003      	b.n	80033fc <LoopCopyDataInit>

080033f4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80033f6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033f8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033fa:	3104      	adds	r1, #4

080033fc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033fc:	480a      	ldr	r0, [pc, #40]	; (8003428 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80033fe:	4b0b      	ldr	r3, [pc, #44]	; (800342c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003400:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003402:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003404:	d3f6      	bcc.n	80033f4 <CopyDataInit>
  ldr r2, =_sbss
 8003406:	4a0a      	ldr	r2, [pc, #40]	; (8003430 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003408:	e002      	b.n	8003410 <LoopFillZerobss>

0800340a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800340a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800340c:	f842 3b04 	str.w	r3, [r2], #4

08003410 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003412:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003414:	d3f9      	bcc.n	800340a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003416:	f7ff ffe5 	bl	80033e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800341a:	f003 fb6b 	bl	8006af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800341e:	f7ff fb3b 	bl	8002a98 <main>
  bx lr
 8003422:	4770      	bx	lr
  ldr r3, =_sidata
 8003424:	0800b51c 	.word	0x0800b51c
  ldr r0, =_sdata
 8003428:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800342c:	200001ec 	.word	0x200001ec
  ldr r2, =_sbss
 8003430:	200001f0 	.word	0x200001f0
  ldr r3, = _ebss
 8003434:	20001430 	.word	0x20001430

08003438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003438:	e7fe      	b.n	8003438 <ADC1_2_IRQHandler>
	...

0800343c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003440:	4b08      	ldr	r3, [pc, #32]	; (8003464 <HAL_Init+0x28>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a07      	ldr	r2, [pc, #28]	; (8003464 <HAL_Init+0x28>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344c:	2003      	movs	r0, #3
 800344e:	f000 f947 	bl	80036e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003452:	2000      	movs	r0, #0
 8003454:	f000 f808 	bl	8003468 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003458:	f7ff fd80 	bl	8002f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40022000 	.word	0x40022000

08003468 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003470:	4b12      	ldr	r3, [pc, #72]	; (80034bc <HAL_InitTick+0x54>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	4b12      	ldr	r3, [pc, #72]	; (80034c0 <HAL_InitTick+0x58>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	4619      	mov	r1, r3
 800347a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800347e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003482:	fbb2 f3f3 	udiv	r3, r2, r3
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f95f 	bl	800374a <HAL_SYSTICK_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e00e      	b.n	80034b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d80a      	bhi.n	80034b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800349c:	2200      	movs	r2, #0
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	f04f 30ff 	mov.w	r0, #4294967295
 80034a4:	f000 f927 	bl	80036f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a8:	4a06      	ldr	r2, [pc, #24]	; (80034c4 <HAL_InitTick+0x5c>)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000000c 	.word	0x2000000c
 80034c0:	20000014 	.word	0x20000014
 80034c4:	20000010 	.word	0x20000010

080034c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_IncTick+0x1c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <HAL_IncTick+0x20>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4413      	add	r3, r2
 80034d8:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <HAL_IncTick+0x20>)
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	bc80      	pop	{r7}
 80034e2:	4770      	bx	lr
 80034e4:	20000014 	.word	0x20000014
 80034e8:	200013fc 	.word	0x200013fc

080034ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return uwTick;
 80034f0:	4b02      	ldr	r3, [pc, #8]	; (80034fc <HAL_GetTick+0x10>)
 80034f2:	681b      	ldr	r3, [r3, #0]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bc80      	pop	{r7}
 80034fa:	4770      	bx	lr
 80034fc:	200013fc 	.word	0x200013fc

08003500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff fff0 	bl	80034ec <HAL_GetTick>
 800350c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d005      	beq.n	8003526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_Delay+0x44>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003526:	bf00      	nop
 8003528:	f7ff ffe0 	bl	80034ec <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	429a      	cmp	r2, r3
 8003536:	d8f7      	bhi.n	8003528 <HAL_Delay+0x28>
  {
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000014 	.word	0x20000014

08003548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003564:	4013      	ands	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800357a:	4a04      	ldr	r2, [pc, #16]	; (800358c <__NVIC_SetPriorityGrouping+0x44>)
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	60d3      	str	r3, [r2, #12]
}
 8003580:	bf00      	nop
 8003582:	3714      	adds	r7, #20
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003594:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	0a1b      	lsrs	r3, r3, #8
 800359a:	f003 0307 	and.w	r3, r3, #7
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	db0b      	blt.n	80035d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	f003 021f 	and.w	r2, r3, #31
 80035c4:	4906      	ldr	r1, [pc, #24]	; (80035e0 <__NVIC_EnableIRQ+0x34>)
 80035c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ca:	095b      	lsrs	r3, r3, #5
 80035cc:	2001      	movs	r0, #1
 80035ce:	fa00 f202 	lsl.w	r2, r0, r2
 80035d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	e000e100 	.word	0xe000e100

080035e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	4603      	mov	r3, r0
 80035ec:	6039      	str	r1, [r7, #0]
 80035ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	db0a      	blt.n	800360e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	490c      	ldr	r1, [pc, #48]	; (8003630 <__NVIC_SetPriority+0x4c>)
 80035fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003602:	0112      	lsls	r2, r2, #4
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	440b      	add	r3, r1
 8003608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800360c:	e00a      	b.n	8003624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	4908      	ldr	r1, [pc, #32]	; (8003634 <__NVIC_SetPriority+0x50>)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	3b04      	subs	r3, #4
 800361c:	0112      	lsls	r2, r2, #4
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	440b      	add	r3, r1
 8003622:	761a      	strb	r2, [r3, #24]
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	bc80      	pop	{r7}
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000e100 	.word	0xe000e100
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	f1c3 0307 	rsb	r3, r3, #7
 8003652:	2b04      	cmp	r3, #4
 8003654:	bf28      	it	cs
 8003656:	2304      	movcs	r3, #4
 8003658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	3304      	adds	r3, #4
 800365e:	2b06      	cmp	r3, #6
 8003660:	d902      	bls.n	8003668 <NVIC_EncodePriority+0x30>
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	3b03      	subs	r3, #3
 8003666:	e000      	b.n	800366a <NVIC_EncodePriority+0x32>
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800366c:	f04f 32ff 	mov.w	r2, #4294967295
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	fa02 f303 	lsl.w	r3, r2, r3
 8003676:	43da      	mvns	r2, r3
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	401a      	ands	r2, r3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003680:	f04f 31ff 	mov.w	r1, #4294967295
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	fa01 f303 	lsl.w	r3, r1, r3
 800368a:	43d9      	mvns	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	4313      	orrs	r3, r2
         );
}
 8003692:	4618      	mov	r0, r3
 8003694:	3724      	adds	r7, #36	; 0x24
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ac:	d301      	bcc.n	80036b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00f      	b.n	80036d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036b2:	4a0a      	ldr	r2, [pc, #40]	; (80036dc <SysTick_Config+0x40>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3b01      	subs	r3, #1
 80036b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036ba:	210f      	movs	r1, #15
 80036bc:	f04f 30ff 	mov.w	r0, #4294967295
 80036c0:	f7ff ff90 	bl	80035e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036c4:	4b05      	ldr	r3, [pc, #20]	; (80036dc <SysTick_Config+0x40>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ca:	4b04      	ldr	r3, [pc, #16]	; (80036dc <SysTick_Config+0x40>)
 80036cc:	2207      	movs	r2, #7
 80036ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000e010 	.word	0xe000e010

080036e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff ff2d 	bl	8003548 <__NVIC_SetPriorityGrouping>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b086      	sub	sp, #24
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	60b9      	str	r1, [r7, #8]
 8003700:	607a      	str	r2, [r7, #4]
 8003702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003704:	2300      	movs	r3, #0
 8003706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003708:	f7ff ff42 	bl	8003590 <__NVIC_GetPriorityGrouping>
 800370c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800370e:	687a      	ldr	r2, [r7, #4]
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	6978      	ldr	r0, [r7, #20]
 8003714:	f7ff ff90 	bl	8003638 <NVIC_EncodePriority>
 8003718:	4602      	mov	r2, r0
 800371a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff5f 	bl	80035e4 <__NVIC_SetPriority>
}
 8003726:	bf00      	nop
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	4603      	mov	r3, r0
 8003736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff35 	bl	80035ac <__NVIC_EnableIRQ>
}
 8003742:	bf00      	nop
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff ffa2 	bl	800369c <SysTick_Config>
 8003758:	4603      	mov	r3, r0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003762:	b480      	push	{r7}
 8003764:	b085      	sub	sp, #20
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003774:	2b02      	cmp	r3, #2
 8003776:	d008      	beq.n	800378a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2204      	movs	r2, #4
 800377c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e020      	b.n	80037cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 020e 	bic.w	r2, r2, #14
 8003798:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b2:	2101      	movs	r1, #1
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3714      	adds	r7, #20
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bc80      	pop	{r7}
 80037d4:	4770      	bx	lr
	...

080037d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d005      	beq.n	80037fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e051      	b.n	800389e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020e 	bic.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a22      	ldr	r2, [pc, #136]	; (80038a8 <HAL_DMA_Abort_IT+0xd0>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d029      	beq.n	8003878 <HAL_DMA_Abort_IT+0xa0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a20      	ldr	r2, [pc, #128]	; (80038ac <HAL_DMA_Abort_IT+0xd4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_Abort_IT+0x9c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <HAL_DMA_Abort_IT+0xd8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01a      	beq.n	800386e <HAL_DMA_Abort_IT+0x96>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <HAL_DMA_Abort_IT+0xdc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d012      	beq.n	8003868 <HAL_DMA_Abort_IT+0x90>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1c      	ldr	r2, [pc, #112]	; (80038b8 <HAL_DMA_Abort_IT+0xe0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00a      	beq.n	8003862 <HAL_DMA_Abort_IT+0x8a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <HAL_DMA_Abort_IT+0xe4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d102      	bne.n	800385c <HAL_DMA_Abort_IT+0x84>
 8003856:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800385a:	e00e      	b.n	800387a <HAL_DMA_Abort_IT+0xa2>
 800385c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003860:	e00b      	b.n	800387a <HAL_DMA_Abort_IT+0xa2>
 8003862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003866:	e008      	b.n	800387a <HAL_DMA_Abort_IT+0xa2>
 8003868:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800386c:	e005      	b.n	800387a <HAL_DMA_Abort_IT+0xa2>
 800386e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003872:	e002      	b.n	800387a <HAL_DMA_Abort_IT+0xa2>
 8003874:	2310      	movs	r3, #16
 8003876:	e000      	b.n	800387a <HAL_DMA_Abort_IT+0xa2>
 8003878:	2301      	movs	r3, #1
 800387a:	4a11      	ldr	r2, [pc, #68]	; (80038c0 <HAL_DMA_Abort_IT+0xe8>)
 800387c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2201      	movs	r2, #1
 8003882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	4798      	blx	r3
    } 
  }
  return status;
 800389e:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	40020008 	.word	0x40020008
 80038ac:	4002001c 	.word	0x4002001c
 80038b0:	40020030 	.word	0x40020030
 80038b4:	40020044 	.word	0x40020044
 80038b8:	40020058 	.word	0x40020058
 80038bc:	4002006c 	.word	0x4002006c
 80038c0:	40020000 	.word	0x40020000

080038c4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038de:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_FLASH_Program+0xd8>)
 80038e0:	7e1b      	ldrb	r3, [r3, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_FLASH_Program+0x26>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e054      	b.n	8003994 <HAL_FLASH_Program+0xd0>
 80038ea:	4b2c      	ldr	r3, [pc, #176]	; (800399c <HAL_FLASH_Program+0xd8>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80038f0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038f4:	f000 f8b2 	bl	8003a5c <FLASH_WaitForLastOperation>
 80038f8:	4603      	mov	r3, r0
 80038fa:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80038fc:	7dfb      	ldrb	r3, [r7, #23]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d144      	bne.n	800398c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d102      	bne.n	800390e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003908:	2301      	movs	r3, #1
 800390a:	757b      	strb	r3, [r7, #21]
 800390c:	e007      	b.n	800391e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d102      	bne.n	800391a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003914:	2302      	movs	r3, #2
 8003916:	757b      	strb	r3, [r7, #21]
 8003918:	e001      	b.n	800391e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800391a:	2304      	movs	r3, #4
 800391c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800391e:	2300      	movs	r3, #0
 8003920:	75bb      	strb	r3, [r7, #22]
 8003922:	e02d      	b.n	8003980 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003924:	7dbb      	ldrb	r3, [r7, #22]
 8003926:	005a      	lsls	r2, r3, #1
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	eb02 0c03 	add.w	ip, r2, r3
 800392e:	7dbb      	ldrb	r3, [r7, #22]
 8003930:	0119      	lsls	r1, r3, #4
 8003932:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003936:	f1c1 0620 	rsb	r6, r1, #32
 800393a:	f1a1 0020 	sub.w	r0, r1, #32
 800393e:	fa22 f401 	lsr.w	r4, r2, r1
 8003942:	fa03 f606 	lsl.w	r6, r3, r6
 8003946:	4334      	orrs	r4, r6
 8003948:	fa23 f000 	lsr.w	r0, r3, r0
 800394c:	4304      	orrs	r4, r0
 800394e:	fa23 f501 	lsr.w	r5, r3, r1
 8003952:	b2a3      	uxth	r3, r4
 8003954:	4619      	mov	r1, r3
 8003956:	4660      	mov	r0, ip
 8003958:	f000 f864 	bl	8003a24 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800395c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003960:	f000 f87c 	bl	8003a5c <FLASH_WaitForLastOperation>
 8003964:	4603      	mov	r3, r0
 8003966:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003968:	4b0d      	ldr	r3, [pc, #52]	; (80039a0 <HAL_FLASH_Program+0xdc>)
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	4a0c      	ldr	r2, [pc, #48]	; (80039a0 <HAL_FLASH_Program+0xdc>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800397a:	7dbb      	ldrb	r3, [r7, #22]
 800397c:	3301      	adds	r3, #1
 800397e:	75bb      	strb	r3, [r7, #22]
 8003980:	7dba      	ldrb	r2, [r7, #22]
 8003982:	7d7b      	ldrb	r3, [r7, #21]
 8003984:	429a      	cmp	r2, r3
 8003986:	d3cd      	bcc.n	8003924 <HAL_FLASH_Program+0x60>
 8003988:	e000      	b.n	800398c <HAL_FLASH_Program+0xc8>
      {
        break;
 800398a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <HAL_FLASH_Program+0xd8>)
 800398e:	2200      	movs	r2, #0
 8003990:	761a      	strb	r2, [r3, #24]

  return status;
 8003992:	7dfb      	ldrb	r3, [r7, #23]
}
 8003994:	4618      	mov	r0, r3
 8003996:	371c      	adds	r7, #28
 8003998:	46bd      	mov	sp, r7
 800399a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399c:	20001400 	.word	0x20001400
 80039a0:	40022000 	.word	0x40022000

080039a4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039aa:	2300      	movs	r3, #0
 80039ac:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ae:	4b0d      	ldr	r3, [pc, #52]	; (80039e4 <HAL_FLASH_Unlock+0x40>)
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00d      	beq.n	80039d6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039ba:	4b0a      	ldr	r3, [pc, #40]	; (80039e4 <HAL_FLASH_Unlock+0x40>)
 80039bc:	4a0a      	ldr	r2, [pc, #40]	; (80039e8 <HAL_FLASH_Unlock+0x44>)
 80039be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039c0:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_FLASH_Unlock+0x40>)
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <HAL_FLASH_Unlock+0x48>)
 80039c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039c6:	4b07      	ldr	r3, [pc, #28]	; (80039e4 <HAL_FLASH_Unlock+0x40>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80039d6:	79fb      	ldrb	r3, [r7, #7]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	bc80      	pop	{r7}
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40022000 	.word	0x40022000
 80039e8:	45670123 	.word	0x45670123
 80039ec:	cdef89ab 	.word	0xcdef89ab

080039f0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <HAL_FLASH_Lock+0x1c>)
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	4a04      	ldr	r2, [pc, #16]	; (8003a0c <HAL_FLASH_Lock+0x1c>)
 80039fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fe:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bc80      	pop	{r7}
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40022000 	.word	0x40022000

08003a10 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003a14:	4b02      	ldr	r3, [pc, #8]	; (8003a20 <HAL_FLASH_GetError+0x10>)
 8003a16:	69db      	ldr	r3, [r3, #28]
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	20001400 	.word	0x20001400

08003a24 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <FLASH_Program_HalfWord+0x30>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003a36:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <FLASH_Program_HalfWord+0x34>)
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	4a07      	ldr	r2, [pc, #28]	; (8003a58 <FLASH_Program_HalfWord+0x34>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	801a      	strh	r2, [r3, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bc80      	pop	{r7}
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	20001400 	.word	0x20001400
 8003a58:	40022000 	.word	0x40022000

08003a5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003a64:	f7ff fd42 	bl	80034ec <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a6a:	e010      	b.n	8003a8e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a72:	d00c      	beq.n	8003a8e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d007      	beq.n	8003a8a <FLASH_WaitForLastOperation+0x2e>
 8003a7a:	f7ff fd37 	bl	80034ec <HAL_GetTick>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	1ad3      	subs	r3, r2, r3
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d201      	bcs.n	8003a8e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e025      	b.n	8003ada <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003a8e:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <FLASH_WaitForLastOperation+0x88>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e8      	bne.n	8003a6c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <FLASH_WaitForLastOperation+0x88>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <FLASH_WaitForLastOperation+0x88>)
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003aac:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <FLASH_WaitForLastOperation+0x88>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d10b      	bne.n	8003ad0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	; (8003ae4 <FLASH_WaitForLastOperation+0x88>)
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <FLASH_WaitForLastOperation+0x88>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003ad0:	f000 f80a 	bl	8003ae8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3710      	adds	r7, #16
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40022000 	.word	0x40022000

08003ae8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003af2:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0310 	and.w	r3, r3, #16
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d009      	beq.n	8003b12 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003afe:	4b21      	ldr	r3, [pc, #132]	; (8003b84 <FLASH_SetErrorCode+0x9c>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f043 0302 	orr.w	r3, r3, #2
 8003b06:	4a1f      	ldr	r2, [pc, #124]	; (8003b84 <FLASH_SetErrorCode+0x9c>)
 8003b08:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f043 0310 	orr.w	r3, r3, #16
 8003b10:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003b12:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003b1e:	4b19      	ldr	r3, [pc, #100]	; (8003b84 <FLASH_SetErrorCode+0x9c>)
 8003b20:	69db      	ldr	r3, [r3, #28]
 8003b22:	f043 0301 	orr.w	r3, r3, #1
 8003b26:	4a17      	ldr	r2, [pc, #92]	; (8003b84 <FLASH_SetErrorCode+0x9c>)
 8003b28:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003b32:	4b13      	ldr	r3, [pc, #76]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00b      	beq.n	8003b56 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003b3e:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <FLASH_SetErrorCode+0x9c>)
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f043 0304 	orr.w	r3, r3, #4
 8003b46:	4a0f      	ldr	r2, [pc, #60]	; (8003b84 <FLASH_SetErrorCode+0x9c>)
 8003b48:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a0c      	ldr	r2, [pc, #48]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f240 1201 	movw	r2, #257	; 0x101
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d106      	bne.n	8003b6e <FLASH_SetErrorCode+0x86>
 8003b60:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	4a06      	ldr	r2, [pc, #24]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	61d3      	str	r3, [r2, #28]
}  
 8003b6c:	e002      	b.n	8003b74 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003b6e:	4a04      	ldr	r2, [pc, #16]	; (8003b80 <FLASH_SetErrorCode+0x98>)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60d3      	str	r3, [r2, #12]
}  
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bc80      	pop	{r7}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40022000 	.word	0x40022000
 8003b84:	20001400 	.word	0x20001400

08003b88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003b9a:	4b2f      	ldr	r3, [pc, #188]	; (8003c58 <HAL_FLASHEx_Erase+0xd0>)
 8003b9c:	7e1b      	ldrb	r3, [r3, #24]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_FLASHEx_Erase+0x1e>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e053      	b.n	8003c4e <HAL_FLASHEx_Erase+0xc6>
 8003ba6:	4b2c      	ldr	r3, [pc, #176]	; (8003c58 <HAL_FLASHEx_Erase+0xd0>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d116      	bne.n	8003be2 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003bb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bb8:	f7ff ff50 	bl	8003a5c <FLASH_WaitForLastOperation>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d141      	bne.n	8003c46 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8003bc2:	2001      	movs	r0, #1
 8003bc4:	f000 f84c 	bl	8003c60 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003bc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003bcc:	f7ff ff46 	bl	8003a5c <FLASH_WaitForLastOperation>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003bd4:	4b21      	ldr	r3, [pc, #132]	; (8003c5c <HAL_FLASHEx_Erase+0xd4>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	4a20      	ldr	r2, [pc, #128]	; (8003c5c <HAL_FLASHEx_Erase+0xd4>)
 8003bda:	f023 0304 	bic.w	r3, r3, #4
 8003bde:	6113      	str	r3, [r2, #16]
 8003be0:	e031      	b.n	8003c46 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003be2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003be6:	f7ff ff39 	bl	8003a5c <FLASH_WaitForLastOperation>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d12a      	bne.n	8003c46 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8003bf6:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	e019      	b.n	8003c34 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8003c00:	68b8      	ldr	r0, [r7, #8]
 8003c02:	f000 f849 	bl	8003c98 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003c06:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003c0a:	f7ff ff27 	bl	8003a5c <FLASH_WaitForLastOperation>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_FLASHEx_Erase+0xd4>)
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	4a11      	ldr	r2, [pc, #68]	; (8003c5c <HAL_FLASHEx_Erase+0xd4>)
 8003c18:	f023 0302 	bic.w	r3, r3, #2
 8003c1c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8003c1e:	7bfb      	ldrb	r3, [r7, #15]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d003      	beq.n	8003c2c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	601a      	str	r2, [r3, #0]
            break;
 8003c2a:	e00c      	b.n	8003c46 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c32:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	029a      	lsls	r2, r3, #10
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d3dc      	bcc.n	8003c00 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_FLASHEx_Erase+0xd0>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	761a      	strb	r2, [r3, #24]

  return status;
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20001400 	.word	0x20001400
 8003c5c:	40022000 	.word	0x40022000

08003c60 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <FLASH_MassErase+0x30>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003c6e:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <FLASH_MassErase+0x34>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <FLASH_MassErase+0x34>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <FLASH_MassErase+0x34>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4a05      	ldr	r2, [pc, #20]	; (8003c94 <FLASH_MassErase+0x34>)
 8003c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c84:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	20001400 	.word	0x20001400
 8003c94:	40022000 	.word	0x40022000

08003c98 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	; (8003cd0 <FLASH_PageErase+0x38>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003ca6:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <FLASH_PageErase+0x3c>)
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <FLASH_PageErase+0x3c>)
 8003cac:	f043 0302 	orr.w	r3, r3, #2
 8003cb0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003cb2:	4a08      	ldr	r2, [pc, #32]	; (8003cd4 <FLASH_PageErase+0x3c>)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003cb8:	4b06      	ldr	r3, [pc, #24]	; (8003cd4 <FLASH_PageErase+0x3c>)
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	4a05      	ldr	r2, [pc, #20]	; (8003cd4 <FLASH_PageErase+0x3c>)
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc2:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20001400 	.word	0x20001400
 8003cd4:	40022000 	.word	0x40022000

08003cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b08b      	sub	sp, #44	; 0x2c
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cea:	e169      	b.n	8003fc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cec:	2201      	movs	r2, #1
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	f040 8158 	bne.w	8003fba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4a9a      	ldr	r2, [pc, #616]	; (8003f78 <HAL_GPIO_Init+0x2a0>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d05e      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d14:	4a98      	ldr	r2, [pc, #608]	; (8003f78 <HAL_GPIO_Init+0x2a0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d875      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d1a:	4a98      	ldr	r2, [pc, #608]	; (8003f7c <HAL_GPIO_Init+0x2a4>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d058      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d20:	4a96      	ldr	r2, [pc, #600]	; (8003f7c <HAL_GPIO_Init+0x2a4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d86f      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d26:	4a96      	ldr	r2, [pc, #600]	; (8003f80 <HAL_GPIO_Init+0x2a8>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d052      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d2c:	4a94      	ldr	r2, [pc, #592]	; (8003f80 <HAL_GPIO_Init+0x2a8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d869      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d32:	4a94      	ldr	r2, [pc, #592]	; (8003f84 <HAL_GPIO_Init+0x2ac>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d04c      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d38:	4a92      	ldr	r2, [pc, #584]	; (8003f84 <HAL_GPIO_Init+0x2ac>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d863      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d3e:	4a92      	ldr	r2, [pc, #584]	; (8003f88 <HAL_GPIO_Init+0x2b0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d046      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
 8003d44:	4a90      	ldr	r2, [pc, #576]	; (8003f88 <HAL_GPIO_Init+0x2b0>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d85d      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d4a:	2b12      	cmp	r3, #18
 8003d4c:	d82a      	bhi.n	8003da4 <HAL_GPIO_Init+0xcc>
 8003d4e:	2b12      	cmp	r3, #18
 8003d50:	d859      	bhi.n	8003e06 <HAL_GPIO_Init+0x12e>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <HAL_GPIO_Init+0x80>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003dd3 	.word	0x08003dd3
 8003d5c:	08003dad 	.word	0x08003dad
 8003d60:	08003dbf 	.word	0x08003dbf
 8003d64:	08003e01 	.word	0x08003e01
 8003d68:	08003e07 	.word	0x08003e07
 8003d6c:	08003e07 	.word	0x08003e07
 8003d70:	08003e07 	.word	0x08003e07
 8003d74:	08003e07 	.word	0x08003e07
 8003d78:	08003e07 	.word	0x08003e07
 8003d7c:	08003e07 	.word	0x08003e07
 8003d80:	08003e07 	.word	0x08003e07
 8003d84:	08003e07 	.word	0x08003e07
 8003d88:	08003e07 	.word	0x08003e07
 8003d8c:	08003e07 	.word	0x08003e07
 8003d90:	08003e07 	.word	0x08003e07
 8003d94:	08003e07 	.word	0x08003e07
 8003d98:	08003e07 	.word	0x08003e07
 8003d9c:	08003db5 	.word	0x08003db5
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <HAL_GPIO_Init+0x2b4>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003daa:	e02c      	b.n	8003e06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	623b      	str	r3, [r7, #32]
          break;
 8003db2:	e029      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	3304      	adds	r3, #4
 8003dba:	623b      	str	r3, [r7, #32]
          break;
 8003dbc:	e024      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	623b      	str	r3, [r7, #32]
          break;
 8003dc6:	e01f      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	623b      	str	r3, [r7, #32]
          break;
 8003dd0:	e01a      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	623b      	str	r3, [r7, #32]
          break;
 8003dde:	e013      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d105      	bne.n	8003df4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003de8:	2308      	movs	r3, #8
 8003dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69fa      	ldr	r2, [r7, #28]
 8003df0:	611a      	str	r2, [r3, #16]
          break;
 8003df2:	e009      	b.n	8003e08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003df4:	2308      	movs	r3, #8
 8003df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	615a      	str	r2, [r3, #20]
          break;
 8003dfe:	e003      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003e00:	2300      	movs	r3, #0
 8003e02:	623b      	str	r3, [r7, #32]
          break;
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_Init+0x130>
          break;
 8003e06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2bff      	cmp	r3, #255	; 0xff
 8003e0c:	d801      	bhi.n	8003e12 <HAL_GPIO_Init+0x13a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	e001      	b.n	8003e16 <HAL_GPIO_Init+0x13e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3304      	adds	r3, #4
 8003e16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	2bff      	cmp	r3, #255	; 0xff
 8003e1c:	d802      	bhi.n	8003e24 <HAL_GPIO_Init+0x14c>
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	e002      	b.n	8003e2a <HAL_GPIO_Init+0x152>
 8003e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e26:	3b08      	subs	r3, #8
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	210f      	movs	r1, #15
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	fa01 f303 	lsl.w	r3, r1, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80b1 	beq.w	8003fba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e58:	4b4d      	ldr	r3, [pc, #308]	; (8003f90 <HAL_GPIO_Init+0x2b8>)
 8003e5a:	699b      	ldr	r3, [r3, #24]
 8003e5c:	4a4c      	ldr	r2, [pc, #304]	; (8003f90 <HAL_GPIO_Init+0x2b8>)
 8003e5e:	f043 0301 	orr.w	r3, r3, #1
 8003e62:	6193      	str	r3, [r2, #24]
 8003e64:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <HAL_GPIO_Init+0x2b8>)
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e70:	4a48      	ldr	r2, [pc, #288]	; (8003f94 <HAL_GPIO_Init+0x2bc>)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	3302      	adds	r3, #2
 8003e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	f003 0303 	and.w	r3, r3, #3
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	220f      	movs	r2, #15
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	; (8003f98 <HAL_GPIO_Init+0x2c0>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d013      	beq.n	8003ec4 <HAL_GPIO_Init+0x1ec>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3f      	ldr	r2, [pc, #252]	; (8003f9c <HAL_GPIO_Init+0x2c4>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_GPIO_Init+0x1e8>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	; (8003fa0 <HAL_GPIO_Init+0x2c8>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d007      	beq.n	8003ebc <HAL_GPIO_Init+0x1e4>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	; (8003fa4 <HAL_GPIO_Init+0x2cc>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d101      	bne.n	8003eb8 <HAL_GPIO_Init+0x1e0>
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e006      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e004      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e002      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <HAL_GPIO_Init+0x1ee>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec8:	f002 0203 	and.w	r2, r2, #3
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	4093      	lsls	r3, r2
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003ed6:	492f      	ldr	r1, [pc, #188]	; (8003f94 <HAL_GPIO_Init+0x2bc>)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	089b      	lsrs	r3, r3, #2
 8003edc:	3302      	adds	r3, #2
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d006      	beq.n	8003efe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	492c      	ldr	r1, [pc, #176]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	600b      	str	r3, [r1, #0]
 8003efc:	e006      	b.n	8003f0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	4928      	ldr	r1, [pc, #160]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d006      	beq.n	8003f26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003f18:	4b23      	ldr	r3, [pc, #140]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	4922      	ldr	r1, [pc, #136]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	e006      	b.n	8003f34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f26:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f28:	685a      	ldr	r2, [r3, #4]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	491e      	ldr	r1, [pc, #120]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f40:	4b19      	ldr	r3, [pc, #100]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	4918      	ldr	r1, [pc, #96]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	608b      	str	r3, [r1, #8]
 8003f4c:	e006      	b.n	8003f5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f4e:	4b16      	ldr	r3, [pc, #88]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	43db      	mvns	r3, r3
 8003f56:	4914      	ldr	r1, [pc, #80]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f58:	4013      	ands	r3, r2
 8003f5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d021      	beq.n	8003fac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f68:	4b0f      	ldr	r3, [pc, #60]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	490e      	ldr	r1, [pc, #56]	; (8003fa8 <HAL_GPIO_Init+0x2d0>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60cb      	str	r3, [r1, #12]
 8003f74:	e021      	b.n	8003fba <HAL_GPIO_Init+0x2e2>
 8003f76:	bf00      	nop
 8003f78:	10320000 	.word	0x10320000
 8003f7c:	10310000 	.word	0x10310000
 8003f80:	10220000 	.word	0x10220000
 8003f84:	10210000 	.word	0x10210000
 8003f88:	10120000 	.word	0x10120000
 8003f8c:	10110000 	.word	0x10110000
 8003f90:	40021000 	.word	0x40021000
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40010800 	.word	0x40010800
 8003f9c:	40010c00 	.word	0x40010c00
 8003fa0:	40011000 	.word	0x40011000
 8003fa4:	40011400 	.word	0x40011400
 8003fa8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_GPIO_Init+0x304>)
 8003fae:	68da      	ldr	r2, [r3, #12]
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	4909      	ldr	r1, [pc, #36]	; (8003fdc <HAL_GPIO_Init+0x304>)
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f47f ae8e 	bne.w	8003cec <HAL_GPIO_Init+0x14>
  }
}
 8003fd0:	bf00      	nop
 8003fd2:	bf00      	nop
 8003fd4:	372c      	adds	r7, #44	; 0x2c
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr
 8003fdc:	40010400 	.word	0x40010400

08003fe0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	887b      	ldrh	r3, [r7, #2]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	73fb      	strb	r3, [r7, #15]
 8003ffc:	e001      	b.n	8004002 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004002:	7bfb      	ldrb	r3, [r7, #15]
}
 8004004:	4618      	mov	r0, r3
 8004006:	3714      	adds	r7, #20
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr

0800400e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	807b      	strh	r3, [r7, #2]
 800401a:	4613      	mov	r3, r2
 800401c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800401e:	787b      	ldrb	r3, [r7, #1]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004024:	887a      	ldrh	r2, [r7, #2]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800402a:	e003      	b.n	8004034 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800402c:	887b      	ldrh	r3, [r7, #2]
 800402e:	041a      	lsls	r2, r3, #16
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	611a      	str	r2, [r3, #16]
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	bc80      	pop	{r7}
 800403c:	4770      	bx	lr
	...

08004040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e26c      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 8087 	beq.w	800416e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004060:	4b92      	ldr	r3, [pc, #584]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b04      	cmp	r3, #4
 800406a:	d00c      	beq.n	8004086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800406c:	4b8f      	ldr	r3, [pc, #572]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f003 030c 	and.w	r3, r3, #12
 8004074:	2b08      	cmp	r3, #8
 8004076:	d112      	bne.n	800409e <HAL_RCC_OscConfig+0x5e>
 8004078:	4b8c      	ldr	r3, [pc, #560]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d10b      	bne.n	800409e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004086:	4b89      	ldr	r3, [pc, #548]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d06c      	beq.n	800416c <HAL_RCC_OscConfig+0x12c>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d168      	bne.n	800416c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e246      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a6:	d106      	bne.n	80040b6 <HAL_RCC_OscConfig+0x76>
 80040a8:	4b80      	ldr	r3, [pc, #512]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a7f      	ldr	r2, [pc, #508]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	e02e      	b.n	8004114 <HAL_RCC_OscConfig+0xd4>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10c      	bne.n	80040d8 <HAL_RCC_OscConfig+0x98>
 80040be:	4b7b      	ldr	r3, [pc, #492]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a7a      	ldr	r2, [pc, #488]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	4b78      	ldr	r3, [pc, #480]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a77      	ldr	r2, [pc, #476]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	e01d      	b.n	8004114 <HAL_RCC_OscConfig+0xd4>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e0:	d10c      	bne.n	80040fc <HAL_RCC_OscConfig+0xbc>
 80040e2:	4b72      	ldr	r3, [pc, #456]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a71      	ldr	r2, [pc, #452]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4b6f      	ldr	r3, [pc, #444]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a6e      	ldr	r2, [pc, #440]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	e00b      	b.n	8004114 <HAL_RCC_OscConfig+0xd4>
 80040fc:	4b6b      	ldr	r3, [pc, #428]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a6a      	ldr	r2, [pc, #424]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4b68      	ldr	r3, [pc, #416]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a67      	ldr	r2, [pc, #412]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800410e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d013      	beq.n	8004144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7ff f9e6 	bl	80034ec <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004124:	f7ff f9e2 	bl	80034ec <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	; 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1fa      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004136:	4b5d      	ldr	r3, [pc, #372]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0xe4>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004144:	f7ff f9d2 	bl	80034ec <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7ff f9ce 	bl	80034ec <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b64      	cmp	r3, #100	; 0x64
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1e6      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f0      	bne.n	800414c <HAL_RCC_OscConfig+0x10c>
 800416a:	e000      	b.n	800416e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800416c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d063      	beq.n	8004242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417a:	4b4c      	ldr	r3, [pc, #304]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00b      	beq.n	800419e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004186:	4b49      	ldr	r3, [pc, #292]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f003 030c 	and.w	r3, r3, #12
 800418e:	2b08      	cmp	r3, #8
 8004190:	d11c      	bne.n	80041cc <HAL_RCC_OscConfig+0x18c>
 8004192:	4b46      	ldr	r3, [pc, #280]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d116      	bne.n	80041cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800419e:	4b43      	ldr	r3, [pc, #268]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_RCC_OscConfig+0x176>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e1ba      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b6:	4b3d      	ldr	r3, [pc, #244]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4939      	ldr	r1, [pc, #228]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ca:	e03a      	b.n	8004242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d4:	4b36      	ldr	r3, [pc, #216]	; (80042b0 <HAL_RCC_OscConfig+0x270>)
 80041d6:	2201      	movs	r2, #1
 80041d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7ff f987 	bl	80034ec <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e2:	f7ff f983 	bl	80034ec <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e19b      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041f4:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004200:	4b2a      	ldr	r3, [pc, #168]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4927      	ldr	r1, [pc, #156]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	600b      	str	r3, [r1, #0]
 8004214:	e015      	b.n	8004242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <HAL_RCC_OscConfig+0x270>)
 8004218:	2200      	movs	r2, #0
 800421a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7ff f966 	bl	80034ec <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004224:	f7ff f962 	bl	80034ec <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e17a      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004236:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0308 	and.w	r3, r3, #8
 800424a:	2b00      	cmp	r3, #0
 800424c:	d03a      	beq.n	80042c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d019      	beq.n	800428a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004256:	4b17      	ldr	r3, [pc, #92]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425c:	f7ff f946 	bl	80034ec <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004264:	f7ff f942 	bl	80034ec <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e15a      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004276:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <HAL_RCC_OscConfig+0x26c>)
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004282:	2001      	movs	r0, #1
 8004284:	f000 fad8 	bl	8004838 <RCC_Delay>
 8004288:	e01c      	b.n	80042c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_RCC_OscConfig+0x274>)
 800428c:	2200      	movs	r2, #0
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004290:	f7ff f92c 	bl	80034ec <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004296:	e00f      	b.n	80042b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004298:	f7ff f928 	bl	80034ec <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d908      	bls.n	80042b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e140      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
 80042aa:	bf00      	nop
 80042ac:	40021000 	.word	0x40021000
 80042b0:	42420000 	.word	0x42420000
 80042b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042b8:	4b9e      	ldr	r3, [pc, #632]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e9      	bne.n	8004298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0304 	and.w	r3, r3, #4
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a6 	beq.w	800441e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d2:	2300      	movs	r3, #0
 80042d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042d6:	4b97      	ldr	r3, [pc, #604]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d10d      	bne.n	80042fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e2:	4b94      	ldr	r3, [pc, #592]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4a93      	ldr	r2, [pc, #588]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ec:	61d3      	str	r3, [r2, #28]
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fe:	4b8e      	ldr	r3, [pc, #568]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004306:	2b00      	cmp	r3, #0
 8004308:	d118      	bne.n	800433c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800430a:	4b8b      	ldr	r3, [pc, #556]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a8a      	ldr	r2, [pc, #552]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004316:	f7ff f8e9 	bl	80034ec <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800431e:	f7ff f8e5 	bl	80034ec <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b64      	cmp	r3, #100	; 0x64
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e0fd      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004330:	4b81      	ldr	r3, [pc, #516]	; (8004538 <HAL_RCC_OscConfig+0x4f8>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d106      	bne.n	8004352 <HAL_RCC_OscConfig+0x312>
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004346:	6a1b      	ldr	r3, [r3, #32]
 8004348:	4a7a      	ldr	r2, [pc, #488]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800434a:	f043 0301 	orr.w	r3, r3, #1
 800434e:	6213      	str	r3, [r2, #32]
 8004350:	e02d      	b.n	80043ae <HAL_RCC_OscConfig+0x36e>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10c      	bne.n	8004374 <HAL_RCC_OscConfig+0x334>
 800435a:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4a75      	ldr	r2, [pc, #468]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	6213      	str	r3, [r2, #32]
 8004366:	4b73      	ldr	r3, [pc, #460]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	4a72      	ldr	r2, [pc, #456]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800436c:	f023 0304 	bic.w	r3, r3, #4
 8004370:	6213      	str	r3, [r2, #32]
 8004372:	e01c      	b.n	80043ae <HAL_RCC_OscConfig+0x36e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b05      	cmp	r3, #5
 800437a:	d10c      	bne.n	8004396 <HAL_RCC_OscConfig+0x356>
 800437c:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800437e:	6a1b      	ldr	r3, [r3, #32]
 8004380:	4a6c      	ldr	r2, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004382:	f043 0304 	orr.w	r3, r3, #4
 8004386:	6213      	str	r3, [r2, #32]
 8004388:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	4a69      	ldr	r2, [pc, #420]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800438e:	f043 0301 	orr.w	r3, r3, #1
 8004392:	6213      	str	r3, [r2, #32]
 8004394:	e00b      	b.n	80043ae <HAL_RCC_OscConfig+0x36e>
 8004396:	4b67      	ldr	r3, [pc, #412]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	4a66      	ldr	r2, [pc, #408]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800439c:	f023 0301 	bic.w	r3, r3, #1
 80043a0:	6213      	str	r3, [r2, #32]
 80043a2:	4b64      	ldr	r3, [pc, #400]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	f023 0304 	bic.w	r3, r3, #4
 80043ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d015      	beq.n	80043e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b6:	f7ff f899 	bl	80034ec <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043bc:	e00a      	b.n	80043d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043be:	f7ff f895 	bl	80034ec <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0ab      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d4:	4b57      	ldr	r3, [pc, #348]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0ee      	beq.n	80043be <HAL_RCC_OscConfig+0x37e>
 80043e0:	e014      	b.n	800440c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e2:	f7ff f883 	bl	80034ec <HAL_GetTick>
 80043e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e8:	e00a      	b.n	8004400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043ea:	f7ff f87f 	bl	80034ec <HAL_GetTick>
 80043ee:	4602      	mov	r2, r0
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e095      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004400:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1ee      	bne.n	80043ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800440c:	7dfb      	ldrb	r3, [r7, #23]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d105      	bne.n	800441e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004412:	4b48      	ldr	r3, [pc, #288]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	4a47      	ldr	r2, [pc, #284]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8081 	beq.w	800452a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004428:	4b42      	ldr	r3, [pc, #264]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f003 030c 	and.w	r3, r3, #12
 8004430:	2b08      	cmp	r3, #8
 8004432:	d061      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	2b02      	cmp	r3, #2
 800443a:	d146      	bne.n	80044ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800443c:	4b3f      	ldr	r3, [pc, #252]	; (800453c <HAL_RCC_OscConfig+0x4fc>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7ff f853 	bl	80034ec <HAL_GetTick>
 8004446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004448:	e008      	b.n	800445c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444a:	f7ff f84f 	bl	80034ec <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	2b02      	cmp	r3, #2
 8004456:	d901      	bls.n	800445c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e067      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800445c:	4b35      	ldr	r3, [pc, #212]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1f0      	bne.n	800444a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d108      	bne.n	8004484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004472:	4b30      	ldr	r3, [pc, #192]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	492d      	ldr	r1, [pc, #180]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004480:	4313      	orrs	r3, r2
 8004482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a19      	ldr	r1, [r3, #32]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004494:	430b      	orrs	r3, r1
 8004496:	4927      	ldr	r1, [pc, #156]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004498:	4313      	orrs	r3, r2
 800449a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800449c:	4b27      	ldr	r3, [pc, #156]	; (800453c <HAL_RCC_OscConfig+0x4fc>)
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a2:	f7ff f823 	bl	80034ec <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044aa:	f7ff f81f 	bl	80034ec <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e037      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044bc:	4b1d      	ldr	r3, [pc, #116]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x46a>
 80044c8:	e02f      	b.n	800452a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b1c      	ldr	r3, [pc, #112]	; (800453c <HAL_RCC_OscConfig+0x4fc>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7ff f80c 	bl	80034ec <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044d8:	f7ff f808 	bl	80034ec <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e020      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x498>
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e013      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_OscConfig+0x4f4>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	429a      	cmp	r2, r3
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	40007000 	.word	0x40007000
 800453c:	42420060 	.word	0x42420060

08004540 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0d0      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004554:	4b6a      	ldr	r3, [pc, #424]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d910      	bls.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004562:	4b67      	ldr	r3, [pc, #412]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f023 0207 	bic.w	r2, r3, #7
 800456a:	4965      	ldr	r1, [pc, #404]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4313      	orrs	r3, r2
 8004570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004572:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0b8      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d020      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800459c:	4b59      	ldr	r3, [pc, #356]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	4a58      	ldr	r2, [pc, #352]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80045a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045b4:	4b53      	ldr	r3, [pc, #332]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	4a52      	ldr	r2, [pc, #328]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80045be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045c0:	4b50      	ldr	r3, [pc, #320]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	494d      	ldr	r1, [pc, #308]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d040      	beq.n	8004660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d107      	bne.n	80045f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	4b47      	ldr	r3, [pc, #284]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d115      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e07f      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d107      	bne.n	800460e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045fe:	4b41      	ldr	r3, [pc, #260]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d109      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e073      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800460e:	4b3d      	ldr	r3, [pc, #244]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d101      	bne.n	800461e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e06b      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461e:	4b39      	ldr	r3, [pc, #228]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f023 0203 	bic.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	4936      	ldr	r1, [pc, #216]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004630:	f7fe ff5c 	bl	80034ec <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004636:	e00a      	b.n	800464e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004638:	f7fe ff58 	bl	80034ec <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e053      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800464e:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 020c 	and.w	r2, r3, #12
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	429a      	cmp	r2, r3
 800465e:	d1eb      	bne.n	8004638 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d210      	bcs.n	8004690 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b24      	ldr	r3, [pc, #144]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4922      	ldr	r1, [pc, #136]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b20      	ldr	r3, [pc, #128]	; (8004700 <HAL_RCC_ClockConfig+0x1c0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e032      	b.n	80046f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0304 	and.w	r3, r3, #4
 8004698:	2b00      	cmp	r3, #0
 800469a:	d008      	beq.n	80046ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800469c:	4b19      	ldr	r3, [pc, #100]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	4916      	ldr	r1, [pc, #88]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046aa:	4313      	orrs	r3, r2
 80046ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0308 	and.w	r3, r3, #8
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	490e      	ldr	r1, [pc, #56]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046ca:	4313      	orrs	r3, r2
 80046cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046ce:	f000 f821 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1c4>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	091b      	lsrs	r3, r3, #4
 80046da:	f003 030f 	and.w	r3, r3, #15
 80046de:	490a      	ldr	r1, [pc, #40]	; (8004708 <HAL_RCC_ClockConfig+0x1c8>)
 80046e0:	5ccb      	ldrb	r3, [r1, r3]
 80046e2:	fa22 f303 	lsr.w	r3, r2, r3
 80046e6:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1cc>)
 80046e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_ClockConfig+0x1d0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fe feba 	bl	8003468 <HAL_InitTick>

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	40022000 	.word	0x40022000
 8004704:	40021000 	.word	0x40021000
 8004708:	0800b04c 	.word	0x0800b04c
 800470c:	2000000c 	.word	0x2000000c
 8004710:	20000010 	.word	0x20000010

08004714 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b490      	push	{r4, r7}
 8004716:	b08a      	sub	sp, #40	; 0x28
 8004718:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800471a:	4b2a      	ldr	r3, [pc, #168]	; (80047c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800471c:	1d3c      	adds	r4, r7, #4
 800471e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004720:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004724:	f240 2301 	movw	r3, #513	; 0x201
 8004728:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	2300      	movs	r3, #0
 8004734:	627b      	str	r3, [r7, #36]	; 0x24
 8004736:	2300      	movs	r3, #0
 8004738:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800473e:	4b22      	ldr	r3, [pc, #136]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b04      	cmp	r3, #4
 800474c:	d002      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0x40>
 800474e:	2b08      	cmp	r3, #8
 8004750:	d003      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x46>
 8004752:	e02d      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004754:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004756:	623b      	str	r3, [r7, #32]
      break;
 8004758:	e02d      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	0c9b      	lsrs	r3, r3, #18
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004766:	4413      	add	r3, r2
 8004768:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800476c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d013      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	0c5b      	lsrs	r3, r3, #17
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004786:	4413      	add	r3, r2
 8004788:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800478c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	4a0e      	ldr	r2, [pc, #56]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004792:	fb02 f203 	mul.w	r2, r2, r3
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	fbb2 f3f3 	udiv	r3, r2, r3
 800479c:	627b      	str	r3, [r7, #36]	; 0x24
 800479e:	e004      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	4a0b      	ldr	r2, [pc, #44]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047a4:	fb02 f303 	mul.w	r3, r2, r3
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	623b      	str	r3, [r7, #32]
      break;
 80047ae:	e002      	b.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80047b0:	4b06      	ldr	r3, [pc, #24]	; (80047cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80047b2:	623b      	str	r3, [r7, #32]
      break;
 80047b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3728      	adds	r7, #40	; 0x28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc90      	pop	{r4, r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	0800b03c 	.word	0x0800b03c
 80047c8:	40021000 	.word	0x40021000
 80047cc:	007a1200 	.word	0x007a1200
 80047d0:	003d0900 	.word	0x003d0900

080047d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d8:	4b02      	ldr	r3, [pc, #8]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80047da:	681b      	ldr	r3, [r3, #0]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	2000000c 	.word	0x2000000c

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047ec:	f7ff fff2 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4903      	ldr	r1, [pc, #12]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004804:	4618      	mov	r0, r3
 8004806:	bd80      	pop	{r7, pc}
 8004808:	40021000 	.word	0x40021000
 800480c:	0800b05c 	.word	0x0800b05c

08004810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004814:	f7ff ffde 	bl	80047d4 <HAL_RCC_GetHCLKFreq>
 8004818:	4602      	mov	r2, r0
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	0adb      	lsrs	r3, r3, #11
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	4903      	ldr	r1, [pc, #12]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004826:	5ccb      	ldrb	r3, [r1, r3]
 8004828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800482c:	4618      	mov	r0, r3
 800482e:	bd80      	pop	{r7, pc}
 8004830:	40021000 	.word	0x40021000
 8004834:	0800b05c 	.word	0x0800b05c

08004838 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <RCC_Delay+0x34>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a0a      	ldr	r2, [pc, #40]	; (8004870 <RCC_Delay+0x38>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	0a5b      	lsrs	r3, r3, #9
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	fb02 f303 	mul.w	r3, r2, r3
 8004852:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004854:	bf00      	nop
  }
  while (Delay --);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f9      	bne.n	8004854 <RCC_Delay+0x1c>
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	2000000c 	.word	0x2000000c
 8004870:	10624dd3 	.word	0x10624dd3

08004874 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e076      	b.n	8004974 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d108      	bne.n	80048a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004896:	d009      	beq.n	80048ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	61da      	str	r2, [r3, #28]
 800489e:	e005      	b.n	80048ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe fb7a 	bl	8002fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048f4:	431a      	orrs	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	431a      	orrs	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800491c:	431a      	orrs	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004926:	431a      	orrs	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	ea42 0103 	orr.w	r1, r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004938:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	0c1a      	lsrs	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f002 0204 	and.w	r2, r2, #4
 8004952:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69da      	ldr	r2, [r3, #28]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004962:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af02      	add	r7, sp, #8
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	60b9      	str	r1, [r7, #8]
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004998:	d112      	bne.n	80049c0 <HAL_SPI_Receive+0x44>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10e      	bne.n	80049c0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2204      	movs	r2, #4
 80049a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049aa:	88fa      	ldrh	r2, [r7, #6]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	4613      	mov	r3, r2
 80049b2:	68ba      	ldr	r2, [r7, #8]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 f8f1 	bl	8004b9e <HAL_SPI_TransmitReceive>
 80049bc:	4603      	mov	r3, r0
 80049be:	e0ea      	b.n	8004b96 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Receive+0x52>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0e3      	b.n	8004b96 <HAL_SPI_Receive+0x21a>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049d6:	f7fe fd89 	bl	80034ec <HAL_GetTick>
 80049da:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d002      	beq.n	80049ee <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80049e8:	2302      	movs	r3, #2
 80049ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049ec:	e0ca      	b.n	8004b84 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d002      	beq.n	80049fa <HAL_SPI_Receive+0x7e>
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d102      	bne.n	8004a00 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049fe:	e0c1      	b.n	8004b84 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2204      	movs	r2, #4
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	88fa      	ldrh	r2, [r7, #6]
 8004a18:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	88fa      	ldrh	r2, [r7, #6]
 8004a1e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2200      	movs	r2, #0
 8004a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d10f      	bne.n	8004a68 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a66:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b40      	cmp	r3, #64	; 0x40
 8004a74:	d007      	beq.n	8004a86 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a84:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d162      	bne.n	8004b54 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a8e:	e02e      	b.n	8004aee <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d115      	bne.n	8004aca <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f103 020c 	add.w	r2, r3, #12
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	7812      	ldrb	r2, [r2, #0]
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ac8:	e011      	b.n	8004aee <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aca:	f7fe fd0f 	bl	80034ec <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d803      	bhi.n	8004ae2 <HAL_SPI_Receive+0x166>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d102      	bne.n	8004ae8 <HAL_SPI_Receive+0x16c>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004aec:	e04a      	b.n	8004b84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1cb      	bne.n	8004a90 <HAL_SPI_Receive+0x114>
 8004af8:	e031      	b.n	8004b5e <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d113      	bne.n	8004b30 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	b292      	uxth	r2, r2
 8004b14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	1c9a      	adds	r2, r3, #2
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b2e:	e011      	b.n	8004b54 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b30:	f7fe fcdc 	bl	80034ec <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d803      	bhi.n	8004b48 <HAL_SPI_Receive+0x1cc>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b46:	d102      	bne.n	8004b4e <HAL_SPI_Receive+0x1d2>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d102      	bne.n	8004b54 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b52:	e017      	b.n	8004b84 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1cd      	bne.n	8004afa <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b5e:	693a      	ldr	r2, [r7, #16]
 8004b60:	6839      	ldr	r1, [r7, #0]
 8004b62:	68f8      	ldr	r0, [r7, #12]
 8004b64:	f000 fa46 	bl	8004ff4 <SPI_EndRxTransaction>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	75fb      	strb	r3, [r7, #23]
 8004b80:	e000      	b.n	8004b84 <HAL_SPI_Receive+0x208>
  }

error :
 8004b82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b08c      	sub	sp, #48	; 0x30
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bac:	2301      	movs	r3, #1
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_SPI_TransmitReceive+0x26>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e18a      	b.n	8004eda <HAL_SPI_TransmitReceive+0x33c>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bcc:	f7fe fc8e 	bl	80034ec <HAL_GetTick>
 8004bd0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004be2:	887b      	ldrh	r3, [r7, #2]
 8004be4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004be6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d00f      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x70>
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf4:	d107      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_SPI_TransmitReceive+0x68>
 8004bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d003      	beq.n	8004c0e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c06:	2302      	movs	r3, #2
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c0c:	e15b      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d005      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x82>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_TransmitReceive+0x82>
 8004c1a:	887b      	ldrh	r3, [r7, #2]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c26:	e14e      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b04      	cmp	r3, #4
 8004c32:	d003      	beq.n	8004c3c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2205      	movs	r2, #5
 8004c38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	887a      	ldrh	r2, [r7, #2]
 8004c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	887a      	ldrh	r2, [r7, #2]
 8004c52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	887a      	ldrh	r2, [r7, #2]
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	887a      	ldrh	r2, [r7, #2]
 8004c64:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d007      	beq.n	8004c90 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c98:	d178      	bne.n	8004d8c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x10a>
 8004ca2:	8b7b      	ldrh	r3, [r7, #26]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d166      	bne.n	8004d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	881a      	ldrh	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb8:	1c9a      	adds	r2, r3, #2
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ccc:	e053      	b.n	8004d76 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d11b      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x176>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d016      	beq.n	8004d14 <HAL_SPI_TransmitReceive+0x176>
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d113      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	881a      	ldrh	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfc:	1c9a      	adds	r2, r3, #2
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d119      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x1b8>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d014      	beq.n	8004d56 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68da      	ldr	r2, [r3, #12]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	b292      	uxth	r2, r2
 8004d38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d52:	2301      	movs	r3, #1
 8004d54:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d56:	f7fe fbc9 	bl	80034ec <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d807      	bhi.n	8004d76 <HAL_SPI_TransmitReceive+0x1d8>
 8004d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d6c:	d003      	beq.n	8004d76 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d74:	e0a7      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1a6      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x130>
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1a1      	bne.n	8004cce <HAL_SPI_TransmitReceive+0x130>
 8004d8a:	e07c      	b.n	8004e86 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x1fc>
 8004d94:	8b7b      	ldrh	r3, [r7, #26]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d16b      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	330c      	adds	r3, #12
 8004da4:	7812      	ldrb	r2, [r2, #0]
 8004da6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dac:	1c5a      	adds	r2, r3, #1
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	3b01      	subs	r3, #1
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc0:	e057      	b.n	8004e72 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d11c      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x26c>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d017      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x26c>
 8004dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d114      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	7812      	ldrb	r2, [r2, #0]
 8004dec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d119      	bne.n	8004e4c <HAL_SPI_TransmitReceive+0x2ae>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d014      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	b2d2      	uxtb	r2, r2
 8004e2e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	1c5a      	adds	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e4c:	f7fe fb4e 	bl	80034ec <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d803      	bhi.n	8004e64 <HAL_SPI_TransmitReceive+0x2c6>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d102      	bne.n	8004e6a <HAL_SPI_TransmitReceive+0x2cc>
 8004e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d103      	bne.n	8004e72 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e70:	e029      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1a2      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x224>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d19d      	bne.n	8004dc2 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f000 f904 	bl	8005098 <SPI_EndRxTxTransaction>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d006      	beq.n	8004ea4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2220      	movs	r2, #32
 8004ea0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ea2:	e010      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	e000      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ec4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3730      	adds	r7, #48	; 0x30
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ef4:	f7fe fafa 	bl	80034ec <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004f04:	f7fe faf2 	bl	80034ec <HAL_GetTick>
 8004f08:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004f0a:	4b39      	ldr	r3, [pc, #228]	; (8004ff0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	015b      	lsls	r3, r3, #5
 8004f10:	0d1b      	lsrs	r3, r3, #20
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f1a:	e054      	b.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f22:	d050      	beq.n	8004fc6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f24:	f7fe fae2 	bl	80034ec <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d902      	bls.n	8004f3a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d13d      	bne.n	8004fb6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f52:	d111      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5c:	d004      	beq.n	8004f68 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f66:	d107      	bne.n	8004f78 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d10f      	bne.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004fa0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e017      	b.n	8004fe6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	79fb      	ldrb	r3, [r7, #7]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d19b      	bne.n	8004f1c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	2000000c 	.word	0x2000000c

08004ff4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005008:	d111      	bne.n	800502e <SPI_EndRxTransaction+0x3a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005012:	d004      	beq.n	800501e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800501c:	d107      	bne.n	800502e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800502c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005036:	d117      	bne.n	8005068 <SPI_EndRxTransaction+0x74>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005040:	d112      	bne.n	8005068 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2200      	movs	r2, #0
 800504a:	2101      	movs	r1, #1
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff ff49 	bl	8004ee4 <SPI_WaitFlagStateUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d01a      	beq.n	800508e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505c:	f043 0220 	orr.w	r2, r3, #32
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e013      	b.n	8005090 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2200      	movs	r2, #0
 8005070:	2180      	movs	r1, #128	; 0x80
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f7ff ff36 	bl	8004ee4 <SPI_WaitFlagStateUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005082:	f043 0220 	orr.w	r2, r3, #32
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e000      	b.n	8005090 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3710      	adds	r7, #16
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2200      	movs	r2, #0
 80050ac:	2180      	movs	r1, #128	; 0x80
 80050ae:	68f8      	ldr	r0, [r7, #12]
 80050b0:	f7ff ff18 	bl	8004ee4 <SPI_WaitFlagStateUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	f043 0220 	orr.w	r2, r3, #32
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e000      	b.n	80050cc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e041      	b.n	800516a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ec:	b2db      	uxtb	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7fd ffc8 	bl	8003090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	3304      	adds	r3, #4
 8005110:	4619      	mov	r1, r3
 8005112:	4610      	mov	r0, r2
 8005114:	f000 fc20 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
	...

08005174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e03a      	b.n	8005202 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <HAL_TIM_Base_Start_IT+0x98>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x58>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051b6:	d009      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x58>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a14      	ldr	r2, [pc, #80]	; (8005210 <HAL_TIM_Base_Start_IT+0x9c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x58>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a13      	ldr	r2, [pc, #76]	; (8005214 <HAL_TIM_Base_Start_IT+0xa0>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d111      	bne.n	80051f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b06      	cmp	r3, #6
 80051dc:	d010      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0201 	orr.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ee:	e007      	b.n	8005200 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800

08005218 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e041      	b.n	80052ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f7fd ff08 	bl	8003054 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2202      	movs	r2, #2
 8005248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	3304      	adds	r3, #4
 8005254:	4619      	mov	r1, r3
 8005256:	4610      	mov	r0, r2
 8005258:	f000 fb7e 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
	...

080052b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <HAL_TIM_PWM_Start+0x24>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	bf14      	ite	ne
 80052d4:	2301      	movne	r3, #1
 80052d6:	2300      	moveq	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	e022      	b.n	8005322 <HAL_TIM_PWM_Start+0x6a>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	2b04      	cmp	r3, #4
 80052e0:	d109      	bne.n	80052f6 <HAL_TIM_PWM_Start+0x3e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	bf14      	ite	ne
 80052ee:	2301      	movne	r3, #1
 80052f0:	2300      	moveq	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	e015      	b.n	8005322 <HAL_TIM_PWM_Start+0x6a>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d109      	bne.n	8005310 <HAL_TIM_PWM_Start+0x58>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b01      	cmp	r3, #1
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e008      	b.n	8005322 <HAL_TIM_PWM_Start+0x6a>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	bf14      	ite	ne
 800531c:	2301      	movne	r3, #1
 800531e:	2300      	moveq	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e05e      	b.n	80053e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <HAL_TIM_PWM_Start+0x82>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005338:	e013      	b.n	8005362 <HAL_TIM_PWM_Start+0xaa>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d104      	bne.n	800534a <HAL_TIM_PWM_Start+0x92>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005348:	e00b      	b.n	8005362 <HAL_TIM_PWM_Start+0xaa>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d104      	bne.n	800535a <HAL_TIM_PWM_Start+0xa2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005358:	e003      	b.n	8005362 <HAL_TIM_PWM_Start+0xaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2201      	movs	r2, #1
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	4618      	mov	r0, r3
 800536c:	f000 fd74 	bl	8005e58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <HAL_TIM_PWM_Start+0x138>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d107      	bne.n	800538a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005388:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a18      	ldr	r2, [pc, #96]	; (80053f0 <HAL_TIM_PWM_Start+0x138>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00e      	beq.n	80053b2 <HAL_TIM_PWM_Start+0xfa>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800539c:	d009      	beq.n	80053b2 <HAL_TIM_PWM_Start+0xfa>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a14      	ldr	r2, [pc, #80]	; (80053f4 <HAL_TIM_PWM_Start+0x13c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d004      	beq.n	80053b2 <HAL_TIM_PWM_Start+0xfa>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a12      	ldr	r2, [pc, #72]	; (80053f8 <HAL_TIM_PWM_Start+0x140>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d111      	bne.n	80053d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d010      	beq.n	80053e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0201 	orr.w	r2, r2, #1
 80053d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053d4:	e007      	b.n	80053e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f042 0201 	orr.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800

080053fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b02      	cmp	r3, #2
 8005410:	d122      	bne.n	8005458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b02      	cmp	r3, #2
 800541e:	d11b      	bne.n	8005458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0202 	mvn.w	r2, #2
 8005428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	f003 0303 	and.w	r3, r3, #3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d003      	beq.n	8005446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 fa6f 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 8005444:	e005      	b.n	8005452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fa62 	bl	8005910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fa71 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	f003 0304 	and.w	r3, r3, #4
 8005462:	2b04      	cmp	r3, #4
 8005464:	d122      	bne.n	80054ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b04      	cmp	r3, #4
 8005472:	d11b      	bne.n	80054ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f06f 0204 	mvn.w	r2, #4
 800547c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2202      	movs	r2, #2
 8005482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800548e:	2b00      	cmp	r3, #0
 8005490:	d003      	beq.n	800549a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa45 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 8005498:	e005      	b.n	80054a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa38 	bl	8005910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fa47 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2200      	movs	r2, #0
 80054aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0308 	and.w	r3, r3, #8
 80054b6:	2b08      	cmp	r3, #8
 80054b8:	d122      	bne.n	8005500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d11b      	bne.n	8005500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0208 	mvn.w	r2, #8
 80054d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2204      	movs	r2, #4
 80054d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	f003 0303 	and.w	r3, r3, #3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa1b 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 80054ec:	e005      	b.n	80054fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa0e 	bl	8005910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa1d 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0310 	and.w	r3, r3, #16
 800550a:	2b10      	cmp	r3, #16
 800550c:	d122      	bne.n	8005554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f003 0310 	and.w	r3, r3, #16
 8005518:	2b10      	cmp	r3, #16
 800551a:	d11b      	bne.n	8005554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0210 	mvn.w	r2, #16
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2208      	movs	r2, #8
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	69db      	ldr	r3, [r3, #28]
 8005532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f9f1 	bl	8005922 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9e4 	bl	8005910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f9f3 	bl	8005934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f003 0301 	and.w	r3, r3, #1
 800555e:	2b01      	cmp	r3, #1
 8005560:	d10e      	bne.n	8005580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b01      	cmp	r3, #1
 800556e:	d107      	bne.n	8005580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0201 	mvn.w	r2, #1
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc ff2c 	bl	80023d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	691b      	ldr	r3, [r3, #16]
 8005586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558a:	2b80      	cmp	r3, #128	; 0x80
 800558c:	d10e      	bne.n	80055ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005598:	2b80      	cmp	r3, #128	; 0x80
 800559a:	d107      	bne.n	80055ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80055a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fd32 	bl	8006010 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b40      	cmp	r3, #64	; 0x40
 80055b8:	d10e      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d107      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9b7 	bl	8005946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d10e      	bne.n	8005604 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d107      	bne.n	8005604 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0220 	mvn.w	r2, #32
 80055fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 fcfd 	bl	8005ffe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005622:	2302      	movs	r3, #2
 8005624:	e0ac      	b.n	8005780 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2b0c      	cmp	r3, #12
 8005632:	f200 809f 	bhi.w	8005774 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005636:	a201      	add	r2, pc, #4	; (adr r2, 800563c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563c:	08005671 	.word	0x08005671
 8005640:	08005775 	.word	0x08005775
 8005644:	08005775 	.word	0x08005775
 8005648:	08005775 	.word	0x08005775
 800564c:	080056b1 	.word	0x080056b1
 8005650:	08005775 	.word	0x08005775
 8005654:	08005775 	.word	0x08005775
 8005658:	08005775 	.word	0x08005775
 800565c:	080056f3 	.word	0x080056f3
 8005660:	08005775 	.word	0x08005775
 8005664:	08005775 	.word	0x08005775
 8005668:	08005775 	.word	0x08005775
 800566c:	08005733 	.word	0x08005733
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68b9      	ldr	r1, [r7, #8]
 8005676:	4618      	mov	r0, r3
 8005678:	f000 f9d0 	bl	8005a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699a      	ldr	r2, [r3, #24]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f042 0208 	orr.w	r2, r2, #8
 800568a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	699a      	ldr	r2, [r3, #24]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 0204 	bic.w	r2, r2, #4
 800569a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6999      	ldr	r1, [r3, #24]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	619a      	str	r2, [r3, #24]
      break;
 80056ae:	e062      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68b9      	ldr	r1, [r7, #8]
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fa16 	bl	8005ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	699a      	ldr	r2, [r3, #24]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	699a      	ldr	r2, [r3, #24]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6999      	ldr	r1, [r3, #24]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	021a      	lsls	r2, r3, #8
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	430a      	orrs	r2, r1
 80056ee:	619a      	str	r2, [r3, #24]
      break;
 80056f0:	e041      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68b9      	ldr	r1, [r7, #8]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 fa5f 	bl	8005bbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0208 	orr.w	r2, r2, #8
 800570c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	69da      	ldr	r2, [r3, #28]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0204 	bic.w	r2, r2, #4
 800571c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	61da      	str	r2, [r3, #28]
      break;
 8005730:	e021      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68b9      	ldr	r1, [r7, #8]
 8005738:	4618      	mov	r0, r3
 800573a:	f000 faa9 	bl	8005c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	69da      	ldr	r2, [r3, #28]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	69da      	ldr	r2, [r3, #28]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	69d9      	ldr	r1, [r3, #28]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	691b      	ldr	r3, [r3, #16]
 8005768:	021a      	lsls	r2, r3, #8
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	430a      	orrs	r2, r1
 8005770:	61da      	str	r2, [r3, #28]
      break;
 8005772:	e000      	b.n	8005776 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005774:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_ConfigClockSource+0x18>
 800579c:	2302      	movs	r3, #2
 800579e:	e0b3      	b.n	8005908 <HAL_TIM_ConfigClockSource+0x180>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2202      	movs	r2, #2
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057d8:	d03e      	beq.n	8005858 <HAL_TIM_ConfigClockSource+0xd0>
 80057da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057de:	f200 8087 	bhi.w	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 80057e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057e6:	f000 8085 	beq.w	80058f4 <HAL_TIM_ConfigClockSource+0x16c>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	d87f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 80057f0:	2b70      	cmp	r3, #112	; 0x70
 80057f2:	d01a      	beq.n	800582a <HAL_TIM_ConfigClockSource+0xa2>
 80057f4:	2b70      	cmp	r3, #112	; 0x70
 80057f6:	d87b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 80057f8:	2b60      	cmp	r3, #96	; 0x60
 80057fa:	d050      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x116>
 80057fc:	2b60      	cmp	r3, #96	; 0x60
 80057fe:	d877      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005800:	2b50      	cmp	r3, #80	; 0x50
 8005802:	d03c      	beq.n	800587e <HAL_TIM_ConfigClockSource+0xf6>
 8005804:	2b50      	cmp	r3, #80	; 0x50
 8005806:	d873      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d058      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x136>
 800580c:	2b40      	cmp	r3, #64	; 0x40
 800580e:	d86f      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005810:	2b30      	cmp	r3, #48	; 0x30
 8005812:	d064      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
 8005814:	2b30      	cmp	r3, #48	; 0x30
 8005816:	d86b      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005818:	2b20      	cmp	r3, #32
 800581a:	d060      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
 800581c:	2b20      	cmp	r3, #32
 800581e:	d867      	bhi.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
 8005820:	2b00      	cmp	r3, #0
 8005822:	d05c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
 8005824:	2b10      	cmp	r3, #16
 8005826:	d05a      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005828:	e062      	b.n	80058f0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6818      	ldr	r0, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	6899      	ldr	r1, [r3, #8]
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f000 faee 	bl	8005e1a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800584c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	609a      	str	r2, [r3, #8]
      break;
 8005856:	e04e      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	6899      	ldr	r1, [r3, #8]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f000 fad7 	bl	8005e1a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800587a:	609a      	str	r2, [r3, #8]
      break;
 800587c:	e03b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 fa4e 	bl	8005d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2150      	movs	r1, #80	; 0x50
 8005896:	4618      	mov	r0, r3
 8005898:	f000 faa5 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 800589c:	e02b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 fa6c 	bl	8005d88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2160      	movs	r1, #96	; 0x60
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fa95 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 80058bc:	e01b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	6859      	ldr	r1, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	461a      	mov	r2, r3
 80058cc:	f000 fa2e 	bl	8005d2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fa85 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 80058dc:	e00b      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4619      	mov	r1, r3
 80058e8:	4610      	mov	r0, r2
 80058ea:	f000 fa7c 	bl	8005de6 <TIM_ITRx_SetConfig>
        break;
 80058ee:	e002      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594e:	bf00      	nop
 8005950:	370c      	adds	r7, #12
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a29      	ldr	r2, [pc, #164]	; (8005a10 <TIM_Base_SetConfig+0xb8>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d00b      	beq.n	8005988 <TIM_Base_SetConfig+0x30>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d007      	beq.n	8005988 <TIM_Base_SetConfig+0x30>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a26      	ldr	r2, [pc, #152]	; (8005a14 <TIM_Base_SetConfig+0xbc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0x30>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a25      	ldr	r2, [pc, #148]	; (8005a18 <TIM_Base_SetConfig+0xc0>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d108      	bne.n	800599a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800598e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	4313      	orrs	r3, r2
 8005998:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <TIM_Base_SetConfig+0xb8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00b      	beq.n	80059ba <TIM_Base_SetConfig+0x62>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a8:	d007      	beq.n	80059ba <TIM_Base_SetConfig+0x62>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <TIM_Base_SetConfig+0xbc>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d003      	beq.n	80059ba <TIM_Base_SetConfig+0x62>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <TIM_Base_SetConfig+0xc0>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d108      	bne.n	80059cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a07      	ldr	r2, [pc, #28]	; (8005a10 <TIM_Base_SetConfig+0xb8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d103      	bne.n	8005a00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	615a      	str	r2, [r3, #20]
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40000400 	.word	0x40000400
 8005a18:	40000800 	.word	0x40000800

08005a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f023 0201 	bic.w	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 0303 	bic.w	r3, r3, #3
 8005a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f023 0302 	bic.w	r3, r3, #2
 8005a64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a1c      	ldr	r2, [pc, #112]	; (8005ae4 <TIM_OC1_SetConfig+0xc8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d10c      	bne.n	8005a92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f023 0308 	bic.w	r3, r3, #8
 8005a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	697a      	ldr	r2, [r7, #20]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f023 0304 	bic.w	r3, r3, #4
 8005a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a13      	ldr	r2, [pc, #76]	; (8005ae4 <TIM_OC1_SetConfig+0xc8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d111      	bne.n	8005abe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	621a      	str	r2, [r3, #32]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bc80      	pop	{r7}
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00

08005ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	f023 0210 	bic.w	r2, r3, #16
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a1b      	ldr	r3, [r3, #32]
 8005b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0320 	bic.w	r3, r3, #32
 8005b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	011b      	lsls	r3, r3, #4
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a1d      	ldr	r2, [pc, #116]	; (8005bb8 <TIM_OC2_SetConfig+0xd0>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10d      	bne.n	8005b64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	011b      	lsls	r3, r3, #4
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <TIM_OC2_SetConfig+0xd0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d113      	bne.n	8005b94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	693a      	ldr	r2, [r7, #16]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	697a      	ldr	r2, [r7, #20]
 8005bac:	621a      	str	r2, [r3, #32]
}
 8005bae:	bf00      	nop
 8005bb0:	371c      	adds	r7, #28
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bc80      	pop	{r7}
 8005bb6:	4770      	bx	lr
 8005bb8:	40012c00 	.word	0x40012c00

08005bbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	021b      	lsls	r3, r3, #8
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4a1d      	ldr	r2, [pc, #116]	; (8005c8c <TIM_OC3_SetConfig+0xd0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d10d      	bne.n	8005c36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	021b      	lsls	r3, r3, #8
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a14      	ldr	r2, [pc, #80]	; (8005c8c <TIM_OC3_SetConfig+0xd0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d113      	bne.n	8005c66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	011b      	lsls	r3, r3, #4
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	011b      	lsls	r3, r3, #4
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	697a      	ldr	r2, [r7, #20]
 8005c7e:	621a      	str	r2, [r3, #32]
}
 8005c80:	bf00      	nop
 8005c82:	371c      	adds	r7, #28
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	40012c00 	.word	0x40012c00

08005c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	021b      	lsls	r3, r3, #8
 8005cce:	68fa      	ldr	r2, [r7, #12]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	031b      	lsls	r3, r3, #12
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a0f      	ldr	r2, [pc, #60]	; (8005d28 <TIM_OC4_SetConfig+0x98>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d109      	bne.n	8005d04 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	019b      	lsls	r3, r3, #6
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bc80      	pop	{r7}
 8005d26:	4770      	bx	lr
 8005d28:	40012c00 	.word	0x40012c00

08005d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f023 030a 	bic.w	r3, r3, #10
 8005d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	693a      	ldr	r2, [r7, #16]
 8005d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	621a      	str	r2, [r3, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	371c      	adds	r7, #28
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bc80      	pop	{r7}
 8005d86:	4770      	bx	lr

08005d88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f023 0210 	bic.w	r2, r3, #16
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	031b      	lsls	r3, r3, #12
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	621a      	str	r2, [r3, #32]
}
 8005ddc:	bf00      	nop
 8005dde:	371c      	adds	r7, #28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr

08005de6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	f043 0307 	orr.w	r3, r3, #7
 8005e08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68fa      	ldr	r2, [r7, #12]
 8005e0e:	609a      	str	r2, [r3, #8]
}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr

08005e1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e1a:	b480      	push	{r7}
 8005e1c:	b087      	sub	sp, #28
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
 8005e26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	021a      	lsls	r2, r3, #8
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	609a      	str	r2, [r3, #8]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bc80      	pop	{r7}
 8005e56:	4770      	bx	lr

08005e58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f003 031f 	and.w	r3, r3, #31
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6a1a      	ldr	r2, [r3, #32]
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6a1a      	ldr	r2, [r3, #32]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	6879      	ldr	r1, [r7, #4]
 8005e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e90:	431a      	orrs	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	621a      	str	r2, [r3, #32]
}
 8005e96:	bf00      	nop
 8005e98:	371c      	adds	r7, #28
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e046      	b.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ede:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d00e      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f04:	d009      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d004      	beq.n	8005f1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a10      	ldr	r2, [pc, #64]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d10c      	bne.n	8005f34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40000400 	.word	0x40000400
 8005f58:	40000800 	.word	0x40000800

08005f5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e03d      	b.n	8005ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	695b      	ldr	r3, [r3, #20]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006006:	bf00      	nop
 8006008:	370c      	adds	r7, #12
 800600a:	46bd      	mov	sp, r7
 800600c:	bc80      	pop	{r7}
 800600e:	4770      	bx	lr

08006010 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006018:	bf00      	nop
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	bc80      	pop	{r7}
 8006020:	4770      	bx	lr

08006022 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b082      	sub	sp, #8
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e03f      	b.n	80060b4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f7fd f87b 	bl	8003144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2224      	movs	r2, #36	; 0x24
 8006052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68da      	ldr	r2, [r3, #12]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006064:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fc84 	bl	8006974 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800607a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	695a      	ldr	r2, [r3, #20]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800608a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800609a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2220      	movs	r2, #32
 80060a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060b2:	2300      	movs	r3, #0
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af02      	add	r7, sp, #8
 80060c2:	60f8      	str	r0, [r7, #12]
 80060c4:	60b9      	str	r1, [r7, #8]
 80060c6:	603b      	str	r3, [r7, #0]
 80060c8:	4613      	mov	r3, r2
 80060ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b20      	cmp	r3, #32
 80060da:	d17c      	bne.n	80061d6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <HAL_UART_Transmit+0x2c>
 80060e2:	88fb      	ldrh	r3, [r7, #6]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	e075      	b.n	80061d8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_UART_Transmit+0x3e>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e06e      	b.n	80061d8 <HAL_UART_Transmit+0x11c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2221      	movs	r2, #33	; 0x21
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006110:	f7fd f9ec 	bl	80034ec <HAL_GetTick>
 8006114:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	88fa      	ldrh	r2, [r7, #6]
 800611a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612a:	d108      	bne.n	800613e <HAL_UART_Transmit+0x82>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006134:	2300      	movs	r3, #0
 8006136:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	61bb      	str	r3, [r7, #24]
 800613c:	e003      	b.n	8006146 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006142:	2300      	movs	r3, #0
 8006144:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800614e:	e02a      	b.n	80061a6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2200      	movs	r2, #0
 8006158:	2180      	movs	r1, #128	; 0x80
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fa37 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d001      	beq.n	800616a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e036      	b.n	80061d8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10b      	bne.n	8006188 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800617e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	3302      	adds	r3, #2
 8006184:	61bb      	str	r3, [r7, #24]
 8006186:	e007      	b.n	8006198 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006188:	69fb      	ldr	r3, [r7, #28]
 800618a:	781a      	ldrb	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	3301      	adds	r3, #1
 8006196:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1cf      	bne.n	8006150 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2200      	movs	r2, #0
 80061b8:	2140      	movs	r1, #64	; 0x40
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 fa07 	bl	80065ce <UART_WaitOnFlagUntilTimeout>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e006      	b.n	80061d8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2220      	movs	r2, #32
 80061ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061d2:	2300      	movs	r3, #0
 80061d4:	e000      	b.n	80061d8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061d6:	2302      	movs	r3, #2
  }
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d11d      	bne.n	8006236 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Receive_IT+0x26>
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e016      	b.n	8006238 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_UART_Receive_IT+0x38>
 8006214:	2302      	movs	r3, #2
 8006216:	e00f      	b.n	8006238 <HAL_UART_Receive_IT+0x58>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8006226:	88fb      	ldrh	r3, [r7, #6]
 8006228:	461a      	mov	r2, r3
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 fa18 	bl	8006662 <UART_Start_Receive_IT>
 8006232:	4603      	mov	r3, r0
 8006234:	e000      	b.n	8006238 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006236:	2302      	movs	r3, #2
  }
}
 8006238:	4618      	mov	r0, r3
 800623a:	3710      	adds	r7, #16
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b08a      	sub	sp, #40	; 0x28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68db      	ldr	r3, [r3, #12]
 8006256:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006260:	2300      	movs	r3, #0
 8006262:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006264:	2300      	movs	r3, #0
 8006266:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10d      	bne.n	8006292 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <HAL_UART_IRQHandler+0x52>
 8006280:	6a3b      	ldr	r3, [r7, #32]
 8006282:	f003 0320 	and.w	r3, r3, #32
 8006286:	2b00      	cmp	r3, #0
 8006288:	d003      	beq.n	8006292 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 fac9 	bl	8006822 <UART_Receive_IT>
      return;
 8006290:	e17b      	b.n	800658a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 80b1 	beq.w	80063fc <HAL_UART_IRQHandler+0x1bc>
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_UART_IRQHandler+0x70>
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f000 80a6 	beq.w	80063fc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	f003 0301 	and.w	r3, r3, #1
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00a      	beq.n	80062d0 <HAL_UART_IRQHandler+0x90>
 80062ba:	6a3b      	ldr	r3, [r7, #32]
 80062bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d005      	beq.n	80062d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c8:	f043 0201 	orr.w	r2, r3, #1
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <HAL_UART_IRQHandler+0xb0>
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f003 0301 	and.w	r3, r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	f043 0202 	orr.w	r2, r3, #2
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <HAL_UART_IRQHandler+0xd0>
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	f003 0301 	and.w	r3, r3, #1
 8006300:	2b00      	cmp	r3, #0
 8006302:	d005      	beq.n	8006310 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006308:	f043 0204 	orr.w	r2, r3, #4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	f003 0308 	and.w	r3, r3, #8
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00f      	beq.n	800633a <HAL_UART_IRQHandler+0xfa>
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f003 0320 	and.w	r3, r3, #32
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <HAL_UART_IRQHandler+0xee>
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	2b00      	cmp	r3, #0
 800632c:	d005      	beq.n	800633a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	f043 0208 	orr.w	r2, r3, #8
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 811e 	beq.w	8006580 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_UART_IRQHandler+0x11e>
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f003 0320 	and.w	r3, r3, #32
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 fa62 	bl	8006822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695b      	ldr	r3, [r3, #20]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006368:	2b00      	cmp	r3, #0
 800636a:	bf14      	ite	ne
 800636c:	2301      	movne	r3, #1
 800636e:	2300      	moveq	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006378:	f003 0308 	and.w	r3, r3, #8
 800637c:	2b00      	cmp	r3, #0
 800637e:	d102      	bne.n	8006386 <HAL_UART_IRQHandler+0x146>
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d031      	beq.n	80063ea <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9a4 	bl	80066d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d023      	beq.n	80063e2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d013      	beq.n	80063da <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	4a76      	ldr	r2, [pc, #472]	; (8006590 <HAL_UART_IRQHandler+0x350>)
 80063b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fd fa0a 	bl	80037d8 <HAL_DMA_Abort_IT>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d016      	beq.n	80063f8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063d4:	4610      	mov	r0, r2
 80063d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d8:	e00e      	b.n	80063f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f8e3 	bl	80065a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e0:	e00a      	b.n	80063f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f8df 	bl	80065a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063e8:	e006      	b.n	80063f8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8db 	bl	80065a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80063f6:	e0c3      	b.n	8006580 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	bf00      	nop
    return;
 80063fa:	e0c1      	b.n	8006580 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	2b01      	cmp	r3, #1
 8006402:	f040 80a1 	bne.w	8006548 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	f003 0310 	and.w	r3, r3, #16
 800640c:	2b00      	cmp	r3, #0
 800640e:	f000 809b 	beq.w	8006548 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	f003 0310 	and.w	r3, r3, #16
 8006418:	2b00      	cmp	r3, #0
 800641a:	f000 8095 	beq.w	8006548 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800641e:	2300      	movs	r3, #0
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60fb      	str	r3, [r7, #12]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	60fb      	str	r3, [r7, #12]
 8006432:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d04e      	beq.n	80064e0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800644c:	8a3b      	ldrh	r3, [r7, #16]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 8098 	beq.w	8006584 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006458:	8a3a      	ldrh	r2, [r7, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	f080 8092 	bcs.w	8006584 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8a3a      	ldrh	r2, [r7, #16]
 8006464:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	2b20      	cmp	r3, #32
 800646e:	d02b      	beq.n	80064c8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800647e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0201 	bic.w	r2, r2, #1
 800648e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800649e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0210 	bic.w	r2, r2, #16
 80064bc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fd f94d 	bl	8003762 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	4619      	mov	r1, r3
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f86d 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80064de:	e051      	b.n	8006584 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d047      	beq.n	8006588 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80064f8:	8a7b      	ldrh	r3, [r7, #18]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d044      	beq.n	8006588 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68da      	ldr	r2, [r3, #12]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800650c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2220      	movs	r2, #32
 8006522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0210 	bic.w	r2, r2, #16
 800653a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800653c:	8a7b      	ldrh	r3, [r7, #18]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 f839 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006546:	e01f      	b.n	8006588 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_UART_IRQHandler+0x324>
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8f9 	bl	8006754 <UART_Transmit_IT>
    return;
 8006562:	e012      	b.n	800658a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00d      	beq.n	800658a <HAL_UART_IRQHandler+0x34a>
 800656e:	6a3b      	ldr	r3, [r7, #32]
 8006570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006574:	2b00      	cmp	r3, #0
 8006576:	d008      	beq.n	800658a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f93a 	bl	80067f2 <UART_EndTransmit_IT>
    return;
 800657e:	e004      	b.n	800658a <HAL_UART_IRQHandler+0x34a>
    return;
 8006580:	bf00      	nop
 8006582:	e002      	b.n	800658a <HAL_UART_IRQHandler+0x34a>
      return;
 8006584:	bf00      	nop
 8006586:	e000      	b.n	800658a <HAL_UART_IRQHandler+0x34a>
      return;
 8006588:	bf00      	nop
  }
}
 800658a:	3728      	adds	r7, #40	; 0x28
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	0800672d 	.word	0x0800672d

08006594 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800659c:	bf00      	nop
 800659e:	370c      	adds	r7, #12
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bc80      	pop	{r7}
 80065a4:	4770      	bx	lr

080065a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bc80      	pop	{r7}
 80065b6:	4770      	bx	lr

080065b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	460b      	mov	r3, r1
 80065c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065c4:	bf00      	nop
 80065c6:	370c      	adds	r7, #12
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr

080065ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b084      	sub	sp, #16
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	60f8      	str	r0, [r7, #12]
 80065d6:	60b9      	str	r1, [r7, #8]
 80065d8:	603b      	str	r3, [r7, #0]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065de:	e02c      	b.n	800663a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d028      	beq.n	800663a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <UART_WaitOnFlagUntilTimeout+0x30>
 80065ee:	f7fc ff7d 	bl	80034ec <HAL_GetTick>
 80065f2:	4602      	mov	r2, r0
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	1ad3      	subs	r3, r2, r3
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d21d      	bcs.n	800663a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	68da      	ldr	r2, [r3, #12]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800660c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	695a      	ldr	r2, [r3, #20]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2220      	movs	r2, #32
 800662a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e00f      	b.n	800665a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4013      	ands	r3, r2
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	bf0c      	ite	eq
 800664a:	2301      	moveq	r3, #1
 800664c:	2300      	movne	r3, #0
 800664e:	b2db      	uxtb	r3, r3
 8006650:	461a      	mov	r2, r3
 8006652:	79fb      	ldrb	r3, [r7, #7]
 8006654:	429a      	cmp	r2, r3
 8006656:	d0c3      	beq.n	80065e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3710      	adds	r7, #16
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}

08006662 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006662:	b480      	push	{r7}
 8006664:	b085      	sub	sp, #20
 8006666:	af00      	add	r7, sp, #0
 8006668:	60f8      	str	r0, [r7, #12]
 800666a:	60b9      	str	r1, [r7, #8]
 800666c:	4613      	mov	r3, r2
 800666e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	88fa      	ldrh	r2, [r7, #6]
 8006680:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2222      	movs	r2, #34	; 0x22
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	68da      	ldr	r2, [r3, #12]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066a6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695a      	ldr	r2, [r3, #20]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0201 	orr.w	r2, r2, #1
 80066b6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68da      	ldr	r2, [r3, #12]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0220 	orr.w	r2, r2, #32
 80066c6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bc80      	pop	{r7}
 80066d2:	4770      	bx	lr

080066d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80066ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	2b01      	cmp	r3, #1
 8006702:	d107      	bne.n	8006714 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0210 	bic.w	r2, r2, #16
 8006712:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2220      	movs	r2, #32
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006722:	bf00      	nop
 8006724:	370c      	adds	r7, #12
 8006726:	46bd      	mov	sp, r7
 8006728:	bc80      	pop	{r7}
 800672a:	4770      	bx	lr

0800672c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff ff2d 	bl	80065a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800674c:	bf00      	nop
 800674e:	3710      	adds	r7, #16
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b21      	cmp	r3, #33	; 0x21
 8006766:	d13e      	bne.n	80067e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006770:	d114      	bne.n	800679c <UART_Transmit_IT+0x48>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d110      	bne.n	800679c <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800678e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	1c9a      	adds	r2, r3, #2
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	621a      	str	r2, [r3, #32]
 800679a:	e008      	b.n	80067ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	1c59      	adds	r1, r3, #1
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6211      	str	r1, [r2, #32]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	3b01      	subs	r3, #1
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	4619      	mov	r1, r3
 80067bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10f      	bne.n	80067e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68da      	ldr	r2, [r3, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68da      	ldr	r2, [r3, #12]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	e000      	b.n	80067e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067e6:	2302      	movs	r3, #2
  }
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68da      	ldr	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2220      	movs	r2, #32
 800680e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f7ff febe 	bl	8006594 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b22      	cmp	r3, #34	; 0x22
 8006834:	f040 8099 	bne.w	800696a <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006840:	d117      	bne.n	8006872 <UART_Receive_IT+0x50>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d113      	bne.n	8006872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006852:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	b29b      	uxth	r3, r3
 800685c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006860:	b29a      	uxth	r2, r3
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	1c9a      	adds	r2, r3, #2
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	629a      	str	r2, [r3, #40]	; 0x28
 8006870:	e026      	b.n	80068c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006876:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006878:	2300      	movs	r3, #0
 800687a:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006884:	d007      	beq.n	8006896 <UART_Receive_IT+0x74>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <UART_Receive_IT+0x82>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d106      	bne.n	80068a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	701a      	strb	r2, [r3, #0]
 80068a2:	e008      	b.n	80068b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	4619      	mov	r1, r3
 80068ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d148      	bne.n	8006966 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68da      	ldr	r2, [r3, #12]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f022 0220 	bic.w	r2, r2, #32
 80068e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695a      	ldr	r2, [r3, #20]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0201 	bic.w	r2, r2, #1
 8006902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006910:	2b01      	cmp	r3, #1
 8006912:	d123      	bne.n	800695c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f022 0210 	bic.w	r2, r2, #16
 8006928:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b10      	cmp	r3, #16
 8006936:	d10a      	bne.n	800694e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006938:	2300      	movs	r3, #0
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	60fb      	str	r3, [r7, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff fe2f 	bl	80065b8 <HAL_UARTEx_RxEventCallback>
 800695a:	e002      	b.n	8006962 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7fa fc87 	bl	8001270 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	e002      	b.n	800696c <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	e000      	b.n	800696c <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800696a:	2302      	movs	r3, #2
  }
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689a      	ldr	r2, [r3, #8]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80069ae:	f023 030c 	bic.w	r3, r3, #12
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6812      	ldr	r2, [r2, #0]
 80069b6:	68b9      	ldr	r1, [r7, #8]
 80069b8:	430b      	orrs	r3, r1
 80069ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	430a      	orrs	r2, r1
 80069d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a2c      	ldr	r2, [pc, #176]	; (8006a88 <UART_SetConfig+0x114>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d103      	bne.n	80069e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80069dc:	f7fd ff18 	bl	8004810 <HAL_RCC_GetPCLK2Freq>
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	e002      	b.n	80069ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80069e4:	f7fd ff00 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 80069e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	4613      	mov	r3, r2
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4413      	add	r3, r2
 80069f2:	009a      	lsls	r2, r3, #2
 80069f4:	441a      	add	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a00:	4a22      	ldr	r2, [pc, #136]	; (8006a8c <UART_SetConfig+0x118>)
 8006a02:	fba2 2303 	umull	r2, r3, r2, r3
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	0119      	lsls	r1, r3, #4
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	009a      	lsls	r2, r3, #2
 8006a14:	441a      	add	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a20:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <UART_SetConfig+0x118>)
 8006a22:	fba3 0302 	umull	r0, r3, r3, r2
 8006a26:	095b      	lsrs	r3, r3, #5
 8006a28:	2064      	movs	r0, #100	; 0x64
 8006a2a:	fb00 f303 	mul.w	r3, r0, r3
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	3332      	adds	r3, #50	; 0x32
 8006a34:	4a15      	ldr	r2, [pc, #84]	; (8006a8c <UART_SetConfig+0x118>)
 8006a36:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3a:	095b      	lsrs	r3, r3, #5
 8006a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a40:	4419      	add	r1, r3
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009a      	lsls	r2, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a58:	4b0c      	ldr	r3, [pc, #48]	; (8006a8c <UART_SetConfig+0x118>)
 8006a5a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	2064      	movs	r0, #100	; 0x64
 8006a62:	fb00 f303 	mul.w	r3, r0, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	3332      	adds	r3, #50	; 0x32
 8006a6c:	4a07      	ldr	r2, [pc, #28]	; (8006a8c <UART_SetConfig+0x118>)
 8006a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a72:	095b      	lsrs	r3, r3, #5
 8006a74:	f003 020f 	and.w	r2, r3, #15
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006a80:	bf00      	nop
 8006a82:	3710      	adds	r7, #16
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40013800 	.word	0x40013800
 8006a8c:	51eb851f 	.word	0x51eb851f

08006a90 <arm_pid_init_f32>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	4604      	mov	r4, r0
 8006a94:	6986      	ldr	r6, [r0, #24]
 8006a96:	6a25      	ldr	r5, [r4, #32]
 8006a98:	4630      	mov	r0, r6
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	69e1      	ldr	r1, [r4, #28]
 8006a9e:	f7fa f91d 	bl	8000cdc <__addsf3>
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7fa f91a 	bl	8000cdc <__addsf3>
 8006aa8:	4629      	mov	r1, r5
 8006aaa:	6020      	str	r0, [r4, #0]
 8006aac:	4628      	mov	r0, r5
 8006aae:	f7fa f915 	bl	8000cdc <__addsf3>
 8006ab2:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006ab6:	4601      	mov	r1, r0
 8006ab8:	4630      	mov	r0, r6
 8006aba:	f7fa f90d 	bl	8000cd8 <__aeabi_fsub>
 8006abe:	60a5      	str	r5, [r4, #8]
 8006ac0:	6060      	str	r0, [r4, #4]
 8006ac2:	b167      	cbz	r7, 8006ade <arm_pid_init_f32+0x4e>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	7323      	strb	r3, [r4, #12]
 8006ac8:	7363      	strb	r3, [r4, #13]
 8006aca:	73a3      	strb	r3, [r4, #14]
 8006acc:	73e3      	strb	r3, [r4, #15]
 8006ace:	7423      	strb	r3, [r4, #16]
 8006ad0:	7463      	strb	r3, [r4, #17]
 8006ad2:	74a3      	strb	r3, [r4, #18]
 8006ad4:	74e3      	strb	r3, [r4, #19]
 8006ad6:	7523      	strb	r3, [r4, #20]
 8006ad8:	7563      	strb	r3, [r4, #21]
 8006ada:	75a3      	strb	r3, [r4, #22]
 8006adc:	75e3      	strb	r3, [r4, #23]
 8006ade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ae0 <atof>:
 8006ae0:	2100      	movs	r1, #0
 8006ae2:	f001 badd 	b.w	80080a0 <strtod>
	...

08006ae8 <__errno>:
 8006ae8:	4b01      	ldr	r3, [pc, #4]	; (8006af0 <__errno+0x8>)
 8006aea:	6818      	ldr	r0, [r3, #0]
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop
 8006af0:	20000018 	.word	0x20000018

08006af4 <__libc_init_array>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	2600      	movs	r6, #0
 8006af8:	4d0c      	ldr	r5, [pc, #48]	; (8006b2c <__libc_init_array+0x38>)
 8006afa:	4c0d      	ldr	r4, [pc, #52]	; (8006b30 <__libc_init_array+0x3c>)
 8006afc:	1b64      	subs	r4, r4, r5
 8006afe:	10a4      	asrs	r4, r4, #2
 8006b00:	42a6      	cmp	r6, r4
 8006b02:	d109      	bne.n	8006b18 <__libc_init_array+0x24>
 8006b04:	f004 f994 	bl	800ae30 <_init>
 8006b08:	2600      	movs	r6, #0
 8006b0a:	4d0a      	ldr	r5, [pc, #40]	; (8006b34 <__libc_init_array+0x40>)
 8006b0c:	4c0a      	ldr	r4, [pc, #40]	; (8006b38 <__libc_init_array+0x44>)
 8006b0e:	1b64      	subs	r4, r4, r5
 8006b10:	10a4      	asrs	r4, r4, #2
 8006b12:	42a6      	cmp	r6, r4
 8006b14:	d105      	bne.n	8006b22 <__libc_init_array+0x2e>
 8006b16:	bd70      	pop	{r4, r5, r6, pc}
 8006b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b1c:	4798      	blx	r3
 8006b1e:	3601      	adds	r6, #1
 8006b20:	e7ee      	b.n	8006b00 <__libc_init_array+0xc>
 8006b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b26:	4798      	blx	r3
 8006b28:	3601      	adds	r6, #1
 8006b2a:	e7f2      	b.n	8006b12 <__libc_init_array+0x1e>
 8006b2c:	0800b514 	.word	0x0800b514
 8006b30:	0800b514 	.word	0x0800b514
 8006b34:	0800b514 	.word	0x0800b514
 8006b38:	0800b518 	.word	0x0800b518

08006b3c <memset>:
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4402      	add	r2, r0
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d100      	bne.n	8006b46 <memset+0xa>
 8006b44:	4770      	bx	lr
 8006b46:	f803 1b01 	strb.w	r1, [r3], #1
 8006b4a:	e7f9      	b.n	8006b40 <memset+0x4>

08006b4c <__cvt>:
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b52:	461f      	mov	r7, r3
 8006b54:	bfbb      	ittet	lt
 8006b56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006b5a:	461f      	movlt	r7, r3
 8006b5c:	2300      	movge	r3, #0
 8006b5e:	232d      	movlt	r3, #45	; 0x2d
 8006b60:	b088      	sub	sp, #32
 8006b62:	4614      	mov	r4, r2
 8006b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006b68:	7013      	strb	r3, [r2, #0]
 8006b6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006b70:	f023 0820 	bic.w	r8, r3, #32
 8006b74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b78:	d005      	beq.n	8006b86 <__cvt+0x3a>
 8006b7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b7e:	d100      	bne.n	8006b82 <__cvt+0x36>
 8006b80:	3501      	adds	r5, #1
 8006b82:	2302      	movs	r3, #2
 8006b84:	e000      	b.n	8006b88 <__cvt+0x3c>
 8006b86:	2303      	movs	r3, #3
 8006b88:	aa07      	add	r2, sp, #28
 8006b8a:	9204      	str	r2, [sp, #16]
 8006b8c:	aa06      	add	r2, sp, #24
 8006b8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b92:	e9cd 3500 	strd	r3, r5, [sp]
 8006b96:	4622      	mov	r2, r4
 8006b98:	463b      	mov	r3, r7
 8006b9a:	f001 fb1d 	bl	80081d8 <_dtoa_r>
 8006b9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	d102      	bne.n	8006bac <__cvt+0x60>
 8006ba6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ba8:	07db      	lsls	r3, r3, #31
 8006baa:	d522      	bpl.n	8006bf2 <__cvt+0xa6>
 8006bac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bb0:	eb06 0905 	add.w	r9, r6, r5
 8006bb4:	d110      	bne.n	8006bd8 <__cvt+0x8c>
 8006bb6:	7833      	ldrb	r3, [r6, #0]
 8006bb8:	2b30      	cmp	r3, #48	; 0x30
 8006bba:	d10a      	bne.n	8006bd2 <__cvt+0x86>
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	4639      	mov	r1, r7
 8006bc4:	f7f9 ffa4 	bl	8000b10 <__aeabi_dcmpeq>
 8006bc8:	b918      	cbnz	r0, 8006bd2 <__cvt+0x86>
 8006bca:	f1c5 0501 	rsb	r5, r5, #1
 8006bce:	f8ca 5000 	str.w	r5, [sl]
 8006bd2:	f8da 3000 	ldr.w	r3, [sl]
 8006bd6:	4499      	add	r9, r3
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4620      	mov	r0, r4
 8006bde:	4639      	mov	r1, r7
 8006be0:	f7f9 ff96 	bl	8000b10 <__aeabi_dcmpeq>
 8006be4:	b108      	cbz	r0, 8006bea <__cvt+0x9e>
 8006be6:	f8cd 901c 	str.w	r9, [sp, #28]
 8006bea:	2230      	movs	r2, #48	; 0x30
 8006bec:	9b07      	ldr	r3, [sp, #28]
 8006bee:	454b      	cmp	r3, r9
 8006bf0:	d307      	bcc.n	8006c02 <__cvt+0xb6>
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	9b07      	ldr	r3, [sp, #28]
 8006bf6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006bf8:	1b9b      	subs	r3, r3, r6
 8006bfa:	6013      	str	r3, [r2, #0]
 8006bfc:	b008      	add	sp, #32
 8006bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c02:	1c59      	adds	r1, r3, #1
 8006c04:	9107      	str	r1, [sp, #28]
 8006c06:	701a      	strb	r2, [r3, #0]
 8006c08:	e7f0      	b.n	8006bec <__cvt+0xa0>

08006c0a <__exponent>:
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	f803 2b02 	strb.w	r2, [r3], #2
 8006c14:	bfb6      	itet	lt
 8006c16:	222d      	movlt	r2, #45	; 0x2d
 8006c18:	222b      	movge	r2, #43	; 0x2b
 8006c1a:	4249      	neglt	r1, r1
 8006c1c:	2909      	cmp	r1, #9
 8006c1e:	7042      	strb	r2, [r0, #1]
 8006c20:	dd2b      	ble.n	8006c7a <__exponent+0x70>
 8006c22:	f10d 0407 	add.w	r4, sp, #7
 8006c26:	46a4      	mov	ip, r4
 8006c28:	270a      	movs	r7, #10
 8006c2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c2e:	460a      	mov	r2, r1
 8006c30:	46a6      	mov	lr, r4
 8006c32:	fb07 1516 	mls	r5, r7, r6, r1
 8006c36:	2a63      	cmp	r2, #99	; 0x63
 8006c38:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c46:	dcf0      	bgt.n	8006c2a <__exponent+0x20>
 8006c48:	3130      	adds	r1, #48	; 0x30
 8006c4a:	f1ae 0502 	sub.w	r5, lr, #2
 8006c4e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c52:	4629      	mov	r1, r5
 8006c54:	1c44      	adds	r4, r0, #1
 8006c56:	4561      	cmp	r1, ip
 8006c58:	d30a      	bcc.n	8006c70 <__exponent+0x66>
 8006c5a:	f10d 0209 	add.w	r2, sp, #9
 8006c5e:	eba2 020e 	sub.w	r2, r2, lr
 8006c62:	4565      	cmp	r5, ip
 8006c64:	bf88      	it	hi
 8006c66:	2200      	movhi	r2, #0
 8006c68:	4413      	add	r3, r2
 8006c6a:	1a18      	subs	r0, r3, r0
 8006c6c:	b003      	add	sp, #12
 8006c6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c70:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c74:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c78:	e7ed      	b.n	8006c56 <__exponent+0x4c>
 8006c7a:	2330      	movs	r3, #48	; 0x30
 8006c7c:	3130      	adds	r1, #48	; 0x30
 8006c7e:	7083      	strb	r3, [r0, #2]
 8006c80:	70c1      	strb	r1, [r0, #3]
 8006c82:	1d03      	adds	r3, r0, #4
 8006c84:	e7f1      	b.n	8006c6a <__exponent+0x60>
	...

08006c88 <_printf_float>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	b091      	sub	sp, #68	; 0x44
 8006c8e:	460c      	mov	r4, r1
 8006c90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006c94:	4616      	mov	r6, r2
 8006c96:	461f      	mov	r7, r3
 8006c98:	4605      	mov	r5, r0
 8006c9a:	f002 fbf1 	bl	8009480 <_localeconv_r>
 8006c9e:	6803      	ldr	r3, [r0, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca4:	f7f9 fa54 	bl	8000150 <strlen>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	930e      	str	r3, [sp, #56]	; 0x38
 8006cac:	f8d8 3000 	ldr.w	r3, [r8]
 8006cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8006cb2:	3307      	adds	r3, #7
 8006cb4:	f023 0307 	bic.w	r3, r3, #7
 8006cb8:	f103 0208 	add.w	r2, r3, #8
 8006cbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8006cc0:	f8d4 b000 	ldr.w	fp, [r4]
 8006cc4:	f8c8 2000 	str.w	r2, [r8]
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006cd0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8006cd4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8006cd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cda:	f04f 32ff 	mov.w	r2, #4294967295
 8006cde:	4640      	mov	r0, r8
 8006ce0:	4b9c      	ldr	r3, [pc, #624]	; (8006f54 <_printf_float+0x2cc>)
 8006ce2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ce4:	f7f9 ff46 	bl	8000b74 <__aeabi_dcmpun>
 8006ce8:	bb70      	cbnz	r0, 8006d48 <_printf_float+0xc0>
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4b98      	ldr	r3, [pc, #608]	; (8006f54 <_printf_float+0x2cc>)
 8006cf2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006cf4:	f7f9 ff20 	bl	8000b38 <__aeabi_dcmple>
 8006cf8:	bb30      	cbnz	r0, 8006d48 <_printf_float+0xc0>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	4640      	mov	r0, r8
 8006d00:	4651      	mov	r1, sl
 8006d02:	f7f9 ff0f 	bl	8000b24 <__aeabi_dcmplt>
 8006d06:	b110      	cbz	r0, 8006d0e <_printf_float+0x86>
 8006d08:	232d      	movs	r3, #45	; 0x2d
 8006d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d0e:	4b92      	ldr	r3, [pc, #584]	; (8006f58 <_printf_float+0x2d0>)
 8006d10:	4892      	ldr	r0, [pc, #584]	; (8006f5c <_printf_float+0x2d4>)
 8006d12:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006d16:	bf94      	ite	ls
 8006d18:	4698      	movls	r8, r3
 8006d1a:	4680      	movhi	r8, r0
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	f04f 0a00 	mov.w	sl, #0
 8006d22:	6123      	str	r3, [r4, #16]
 8006d24:	f02b 0304 	bic.w	r3, fp, #4
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	4633      	mov	r3, r6
 8006d2c:	4621      	mov	r1, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	9700      	str	r7, [sp, #0]
 8006d32:	aa0f      	add	r2, sp, #60	; 0x3c
 8006d34:	f000 f9d4 	bl	80070e0 <_printf_common>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	f040 8090 	bne.w	8006e5e <_printf_float+0x1d6>
 8006d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d42:	b011      	add	sp, #68	; 0x44
 8006d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d48:	4642      	mov	r2, r8
 8006d4a:	4653      	mov	r3, sl
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	4651      	mov	r1, sl
 8006d50:	f7f9 ff10 	bl	8000b74 <__aeabi_dcmpun>
 8006d54:	b148      	cbz	r0, 8006d6a <_printf_float+0xe2>
 8006d56:	f1ba 0f00 	cmp.w	sl, #0
 8006d5a:	bfb8      	it	lt
 8006d5c:	232d      	movlt	r3, #45	; 0x2d
 8006d5e:	4880      	ldr	r0, [pc, #512]	; (8006f60 <_printf_float+0x2d8>)
 8006d60:	bfb8      	it	lt
 8006d62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d66:	4b7f      	ldr	r3, [pc, #508]	; (8006f64 <_printf_float+0x2dc>)
 8006d68:	e7d3      	b.n	8006d12 <_printf_float+0x8a>
 8006d6a:	6863      	ldr	r3, [r4, #4]
 8006d6c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	d142      	bne.n	8006dfa <_printf_float+0x172>
 8006d74:	2306      	movs	r3, #6
 8006d76:	6063      	str	r3, [r4, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	9206      	str	r2, [sp, #24]
 8006d7c:	aa0e      	add	r2, sp, #56	; 0x38
 8006d7e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006d82:	aa0d      	add	r2, sp, #52	; 0x34
 8006d84:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006d88:	9203      	str	r2, [sp, #12]
 8006d8a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006d8e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	6863      	ldr	r3, [r4, #4]
 8006d96:	4642      	mov	r2, r8
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	4653      	mov	r3, sl
 8006d9e:	910b      	str	r1, [sp, #44]	; 0x2c
 8006da0:	f7ff fed4 	bl	8006b4c <__cvt>
 8006da4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006da6:	4680      	mov	r8, r0
 8006da8:	2947      	cmp	r1, #71	; 0x47
 8006daa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006dac:	d108      	bne.n	8006dc0 <_printf_float+0x138>
 8006dae:	1cc8      	adds	r0, r1, #3
 8006db0:	db02      	blt.n	8006db8 <_printf_float+0x130>
 8006db2:	6863      	ldr	r3, [r4, #4]
 8006db4:	4299      	cmp	r1, r3
 8006db6:	dd40      	ble.n	8006e3a <_printf_float+0x1b2>
 8006db8:	f1a9 0902 	sub.w	r9, r9, #2
 8006dbc:	fa5f f989 	uxtb.w	r9, r9
 8006dc0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006dc4:	d81f      	bhi.n	8006e06 <_printf_float+0x17e>
 8006dc6:	464a      	mov	r2, r9
 8006dc8:	3901      	subs	r1, #1
 8006dca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006dce:	910d      	str	r1, [sp, #52]	; 0x34
 8006dd0:	f7ff ff1b 	bl	8006c0a <__exponent>
 8006dd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006dd6:	4682      	mov	sl, r0
 8006dd8:	1813      	adds	r3, r2, r0
 8006dda:	2a01      	cmp	r2, #1
 8006ddc:	6123      	str	r3, [r4, #16]
 8006dde:	dc02      	bgt.n	8006de6 <_printf_float+0x15e>
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	07d2      	lsls	r2, r2, #31
 8006de4:	d501      	bpl.n	8006dea <_printf_float+0x162>
 8006de6:	3301      	adds	r3, #1
 8006de8:	6123      	str	r3, [r4, #16]
 8006dea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d09b      	beq.n	8006d2a <_printf_float+0xa2>
 8006df2:	232d      	movs	r3, #45	; 0x2d
 8006df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006df8:	e797      	b.n	8006d2a <_printf_float+0xa2>
 8006dfa:	2947      	cmp	r1, #71	; 0x47
 8006dfc:	d1bc      	bne.n	8006d78 <_printf_float+0xf0>
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1ba      	bne.n	8006d78 <_printf_float+0xf0>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7b7      	b.n	8006d76 <_printf_float+0xee>
 8006e06:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8006e0a:	d118      	bne.n	8006e3e <_printf_float+0x1b6>
 8006e0c:	2900      	cmp	r1, #0
 8006e0e:	6863      	ldr	r3, [r4, #4]
 8006e10:	dd0b      	ble.n	8006e2a <_printf_float+0x1a2>
 8006e12:	6121      	str	r1, [r4, #16]
 8006e14:	b913      	cbnz	r3, 8006e1c <_printf_float+0x194>
 8006e16:	6822      	ldr	r2, [r4, #0]
 8006e18:	07d0      	lsls	r0, r2, #31
 8006e1a:	d502      	bpl.n	8006e22 <_printf_float+0x19a>
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	440b      	add	r3, r1
 8006e20:	6123      	str	r3, [r4, #16]
 8006e22:	f04f 0a00 	mov.w	sl, #0
 8006e26:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e28:	e7df      	b.n	8006dea <_printf_float+0x162>
 8006e2a:	b913      	cbnz	r3, 8006e32 <_printf_float+0x1aa>
 8006e2c:	6822      	ldr	r2, [r4, #0]
 8006e2e:	07d2      	lsls	r2, r2, #31
 8006e30:	d501      	bpl.n	8006e36 <_printf_float+0x1ae>
 8006e32:	3302      	adds	r3, #2
 8006e34:	e7f4      	b.n	8006e20 <_printf_float+0x198>
 8006e36:	2301      	movs	r3, #1
 8006e38:	e7f2      	b.n	8006e20 <_printf_float+0x198>
 8006e3a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006e3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e40:	4299      	cmp	r1, r3
 8006e42:	db05      	blt.n	8006e50 <_printf_float+0x1c8>
 8006e44:	6823      	ldr	r3, [r4, #0]
 8006e46:	6121      	str	r1, [r4, #16]
 8006e48:	07d8      	lsls	r0, r3, #31
 8006e4a:	d5ea      	bpl.n	8006e22 <_printf_float+0x19a>
 8006e4c:	1c4b      	adds	r3, r1, #1
 8006e4e:	e7e7      	b.n	8006e20 <_printf_float+0x198>
 8006e50:	2900      	cmp	r1, #0
 8006e52:	bfcc      	ite	gt
 8006e54:	2201      	movgt	r2, #1
 8006e56:	f1c1 0202 	rsble	r2, r1, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	e7e0      	b.n	8006e20 <_printf_float+0x198>
 8006e5e:	6823      	ldr	r3, [r4, #0]
 8006e60:	055a      	lsls	r2, r3, #21
 8006e62:	d407      	bmi.n	8006e74 <_printf_float+0x1ec>
 8006e64:	6923      	ldr	r3, [r4, #16]
 8006e66:	4642      	mov	r2, r8
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	d12b      	bne.n	8006eca <_printf_float+0x242>
 8006e72:	e764      	b.n	8006d3e <_printf_float+0xb6>
 8006e74:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006e78:	f240 80dd 	bls.w	8007036 <_printf_float+0x3ae>
 8006e7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e80:	2200      	movs	r2, #0
 8006e82:	2300      	movs	r3, #0
 8006e84:	f7f9 fe44 	bl	8000b10 <__aeabi_dcmpeq>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d033      	beq.n	8006ef4 <_printf_float+0x26c>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	4a35      	ldr	r2, [pc, #212]	; (8006f68 <_printf_float+0x2e0>)
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f af51 	beq.w	8006d3e <_printf_float+0xb6>
 8006e9c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	db02      	blt.n	8006eaa <_printf_float+0x222>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	07d8      	lsls	r0, r3, #31
 8006ea8:	d50f      	bpl.n	8006eca <_printf_float+0x242>
 8006eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f af42 	beq.w	8006d3e <_printf_float+0xb6>
 8006eba:	f04f 0800 	mov.w	r8, #0
 8006ebe:	f104 091a 	add.w	r9, r4, #26
 8006ec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	4543      	cmp	r3, r8
 8006ec8:	dc09      	bgt.n	8006ede <_printf_float+0x256>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	079b      	lsls	r3, r3, #30
 8006ece:	f100 8102 	bmi.w	80070d6 <_printf_float+0x44e>
 8006ed2:	68e0      	ldr	r0, [r4, #12]
 8006ed4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ed6:	4298      	cmp	r0, r3
 8006ed8:	bfb8      	it	lt
 8006eda:	4618      	movlt	r0, r3
 8006edc:	e731      	b.n	8006d42 <_printf_float+0xba>
 8006ede:	2301      	movs	r3, #1
 8006ee0:	464a      	mov	r2, r9
 8006ee2:	4631      	mov	r1, r6
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	47b8      	blx	r7
 8006ee8:	3001      	adds	r0, #1
 8006eea:	f43f af28 	beq.w	8006d3e <_printf_float+0xb6>
 8006eee:	f108 0801 	add.w	r8, r8, #1
 8006ef2:	e7e6      	b.n	8006ec2 <_printf_float+0x23a>
 8006ef4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	dc38      	bgt.n	8006f6c <_printf_float+0x2e4>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4631      	mov	r1, r6
 8006efe:	4628      	mov	r0, r5
 8006f00:	4a19      	ldr	r2, [pc, #100]	; (8006f68 <_printf_float+0x2e0>)
 8006f02:	47b8      	blx	r7
 8006f04:	3001      	adds	r0, #1
 8006f06:	f43f af1a 	beq.w	8006d3e <_printf_float+0xb6>
 8006f0a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	d102      	bne.n	8006f18 <_printf_float+0x290>
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	07d9      	lsls	r1, r3, #31
 8006f16:	d5d8      	bpl.n	8006eca <_printf_float+0x242>
 8006f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f1c:	4631      	mov	r1, r6
 8006f1e:	4628      	mov	r0, r5
 8006f20:	47b8      	blx	r7
 8006f22:	3001      	adds	r0, #1
 8006f24:	f43f af0b 	beq.w	8006d3e <_printf_float+0xb6>
 8006f28:	f04f 0900 	mov.w	r9, #0
 8006f2c:	f104 0a1a 	add.w	sl, r4, #26
 8006f30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f32:	425b      	negs	r3, r3
 8006f34:	454b      	cmp	r3, r9
 8006f36:	dc01      	bgt.n	8006f3c <_printf_float+0x2b4>
 8006f38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006f3a:	e794      	b.n	8006e66 <_printf_float+0x1de>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	4652      	mov	r2, sl
 8006f40:	4631      	mov	r1, r6
 8006f42:	4628      	mov	r0, r5
 8006f44:	47b8      	blx	r7
 8006f46:	3001      	adds	r0, #1
 8006f48:	f43f aef9 	beq.w	8006d3e <_printf_float+0xb6>
 8006f4c:	f109 0901 	add.w	r9, r9, #1
 8006f50:	e7ee      	b.n	8006f30 <_printf_float+0x2a8>
 8006f52:	bf00      	nop
 8006f54:	7fefffff 	.word	0x7fefffff
 8006f58:	0800b068 	.word	0x0800b068
 8006f5c:	0800b06c 	.word	0x0800b06c
 8006f60:	0800b074 	.word	0x0800b074
 8006f64:	0800b070 	.word	0x0800b070
 8006f68:	0800b078 	.word	0x0800b078
 8006f6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f70:	429a      	cmp	r2, r3
 8006f72:	bfa8      	it	ge
 8006f74:	461a      	movge	r2, r3
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	4691      	mov	r9, r2
 8006f7a:	dc37      	bgt.n	8006fec <_printf_float+0x364>
 8006f7c:	f04f 0b00 	mov.w	fp, #0
 8006f80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f84:	f104 021a 	add.w	r2, r4, #26
 8006f88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006f8c:	ebaa 0309 	sub.w	r3, sl, r9
 8006f90:	455b      	cmp	r3, fp
 8006f92:	dc33      	bgt.n	8006ffc <_printf_float+0x374>
 8006f94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	db3b      	blt.n	8007014 <_printf_float+0x38c>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	07da      	lsls	r2, r3, #31
 8006fa0:	d438      	bmi.n	8007014 <_printf_float+0x38c>
 8006fa2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006fa4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006fa6:	eba2 030a 	sub.w	r3, r2, sl
 8006faa:	eba2 0901 	sub.w	r9, r2, r1
 8006fae:	4599      	cmp	r9, r3
 8006fb0:	bfa8      	it	ge
 8006fb2:	4699      	movge	r9, r3
 8006fb4:	f1b9 0f00 	cmp.w	r9, #0
 8006fb8:	dc34      	bgt.n	8007024 <_printf_float+0x39c>
 8006fba:	f04f 0800 	mov.w	r8, #0
 8006fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fc2:	f104 0a1a 	add.w	sl, r4, #26
 8006fc6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006fca:	1a9b      	subs	r3, r3, r2
 8006fcc:	eba3 0309 	sub.w	r3, r3, r9
 8006fd0:	4543      	cmp	r3, r8
 8006fd2:	f77f af7a 	ble.w	8006eca <_printf_float+0x242>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4631      	mov	r1, r6
 8006fdc:	4628      	mov	r0, r5
 8006fde:	47b8      	blx	r7
 8006fe0:	3001      	adds	r0, #1
 8006fe2:	f43f aeac 	beq.w	8006d3e <_printf_float+0xb6>
 8006fe6:	f108 0801 	add.w	r8, r8, #1
 8006fea:	e7ec      	b.n	8006fc6 <_printf_float+0x33e>
 8006fec:	4613      	mov	r3, r2
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	47b8      	blx	r7
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	d1c0      	bne.n	8006f7c <_printf_float+0x2f4>
 8006ffa:	e6a0      	b.n	8006d3e <_printf_float+0xb6>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	920b      	str	r2, [sp, #44]	; 0x2c
 8007004:	47b8      	blx	r7
 8007006:	3001      	adds	r0, #1
 8007008:	f43f ae99 	beq.w	8006d3e <_printf_float+0xb6>
 800700c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800700e:	f10b 0b01 	add.w	fp, fp, #1
 8007012:	e7b9      	b.n	8006f88 <_printf_float+0x300>
 8007014:	4631      	mov	r1, r6
 8007016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	d1bf      	bne.n	8006fa2 <_printf_float+0x31a>
 8007022:	e68c      	b.n	8006d3e <_printf_float+0xb6>
 8007024:	464b      	mov	r3, r9
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	eb08 020a 	add.w	r2, r8, sl
 800702e:	47b8      	blx	r7
 8007030:	3001      	adds	r0, #1
 8007032:	d1c2      	bne.n	8006fba <_printf_float+0x332>
 8007034:	e683      	b.n	8006d3e <_printf_float+0xb6>
 8007036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007038:	2a01      	cmp	r2, #1
 800703a:	dc01      	bgt.n	8007040 <_printf_float+0x3b8>
 800703c:	07db      	lsls	r3, r3, #31
 800703e:	d537      	bpl.n	80070b0 <_printf_float+0x428>
 8007040:	2301      	movs	r3, #1
 8007042:	4642      	mov	r2, r8
 8007044:	4631      	mov	r1, r6
 8007046:	4628      	mov	r0, r5
 8007048:	47b8      	blx	r7
 800704a:	3001      	adds	r0, #1
 800704c:	f43f ae77 	beq.w	8006d3e <_printf_float+0xb6>
 8007050:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007054:	4631      	mov	r1, r6
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	f43f ae6f 	beq.w	8006d3e <_printf_float+0xb6>
 8007060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007064:	2200      	movs	r2, #0
 8007066:	2300      	movs	r3, #0
 8007068:	f7f9 fd52 	bl	8000b10 <__aeabi_dcmpeq>
 800706c:	b9d8      	cbnz	r0, 80070a6 <_printf_float+0x41e>
 800706e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007070:	f108 0201 	add.w	r2, r8, #1
 8007074:	3b01      	subs	r3, #1
 8007076:	4631      	mov	r1, r6
 8007078:	4628      	mov	r0, r5
 800707a:	47b8      	blx	r7
 800707c:	3001      	adds	r0, #1
 800707e:	d10e      	bne.n	800709e <_printf_float+0x416>
 8007080:	e65d      	b.n	8006d3e <_printf_float+0xb6>
 8007082:	2301      	movs	r3, #1
 8007084:	464a      	mov	r2, r9
 8007086:	4631      	mov	r1, r6
 8007088:	4628      	mov	r0, r5
 800708a:	47b8      	blx	r7
 800708c:	3001      	adds	r0, #1
 800708e:	f43f ae56 	beq.w	8006d3e <_printf_float+0xb6>
 8007092:	f108 0801 	add.w	r8, r8, #1
 8007096:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007098:	3b01      	subs	r3, #1
 800709a:	4543      	cmp	r3, r8
 800709c:	dcf1      	bgt.n	8007082 <_printf_float+0x3fa>
 800709e:	4653      	mov	r3, sl
 80070a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80070a4:	e6e0      	b.n	8006e68 <_printf_float+0x1e0>
 80070a6:	f04f 0800 	mov.w	r8, #0
 80070aa:	f104 091a 	add.w	r9, r4, #26
 80070ae:	e7f2      	b.n	8007096 <_printf_float+0x40e>
 80070b0:	2301      	movs	r3, #1
 80070b2:	4642      	mov	r2, r8
 80070b4:	e7df      	b.n	8007076 <_printf_float+0x3ee>
 80070b6:	2301      	movs	r3, #1
 80070b8:	464a      	mov	r2, r9
 80070ba:	4631      	mov	r1, r6
 80070bc:	4628      	mov	r0, r5
 80070be:	47b8      	blx	r7
 80070c0:	3001      	adds	r0, #1
 80070c2:	f43f ae3c 	beq.w	8006d3e <_printf_float+0xb6>
 80070c6:	f108 0801 	add.w	r8, r8, #1
 80070ca:	68e3      	ldr	r3, [r4, #12]
 80070cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070ce:	1a5b      	subs	r3, r3, r1
 80070d0:	4543      	cmp	r3, r8
 80070d2:	dcf0      	bgt.n	80070b6 <_printf_float+0x42e>
 80070d4:	e6fd      	b.n	8006ed2 <_printf_float+0x24a>
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	f104 0919 	add.w	r9, r4, #25
 80070de:	e7f4      	b.n	80070ca <_printf_float+0x442>

080070e0 <_printf_common>:
 80070e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070e4:	4616      	mov	r6, r2
 80070e6:	4699      	mov	r9, r3
 80070e8:	688a      	ldr	r2, [r1, #8]
 80070ea:	690b      	ldr	r3, [r1, #16]
 80070ec:	4607      	mov	r7, r0
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bfb8      	it	lt
 80070f2:	4613      	movlt	r3, r2
 80070f4:	6033      	str	r3, [r6, #0]
 80070f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070fa:	460c      	mov	r4, r1
 80070fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007100:	b10a      	cbz	r2, 8007106 <_printf_common+0x26>
 8007102:	3301      	adds	r3, #1
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	0699      	lsls	r1, r3, #26
 800710a:	bf42      	ittt	mi
 800710c:	6833      	ldrmi	r3, [r6, #0]
 800710e:	3302      	addmi	r3, #2
 8007110:	6033      	strmi	r3, [r6, #0]
 8007112:	6825      	ldr	r5, [r4, #0]
 8007114:	f015 0506 	ands.w	r5, r5, #6
 8007118:	d106      	bne.n	8007128 <_printf_common+0x48>
 800711a:	f104 0a19 	add.w	sl, r4, #25
 800711e:	68e3      	ldr	r3, [r4, #12]
 8007120:	6832      	ldr	r2, [r6, #0]
 8007122:	1a9b      	subs	r3, r3, r2
 8007124:	42ab      	cmp	r3, r5
 8007126:	dc28      	bgt.n	800717a <_printf_common+0x9a>
 8007128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800712c:	1e13      	subs	r3, r2, #0
 800712e:	6822      	ldr	r2, [r4, #0]
 8007130:	bf18      	it	ne
 8007132:	2301      	movne	r3, #1
 8007134:	0692      	lsls	r2, r2, #26
 8007136:	d42d      	bmi.n	8007194 <_printf_common+0xb4>
 8007138:	4649      	mov	r1, r9
 800713a:	4638      	mov	r0, r7
 800713c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007140:	47c0      	blx	r8
 8007142:	3001      	adds	r0, #1
 8007144:	d020      	beq.n	8007188 <_printf_common+0xa8>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	68e5      	ldr	r5, [r4, #12]
 800714a:	f003 0306 	and.w	r3, r3, #6
 800714e:	2b04      	cmp	r3, #4
 8007150:	bf18      	it	ne
 8007152:	2500      	movne	r5, #0
 8007154:	6832      	ldr	r2, [r6, #0]
 8007156:	f04f 0600 	mov.w	r6, #0
 800715a:	68a3      	ldr	r3, [r4, #8]
 800715c:	bf08      	it	eq
 800715e:	1aad      	subeq	r5, r5, r2
 8007160:	6922      	ldr	r2, [r4, #16]
 8007162:	bf08      	it	eq
 8007164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007168:	4293      	cmp	r3, r2
 800716a:	bfc4      	itt	gt
 800716c:	1a9b      	subgt	r3, r3, r2
 800716e:	18ed      	addgt	r5, r5, r3
 8007170:	341a      	adds	r4, #26
 8007172:	42b5      	cmp	r5, r6
 8007174:	d11a      	bne.n	80071ac <_printf_common+0xcc>
 8007176:	2000      	movs	r0, #0
 8007178:	e008      	b.n	800718c <_printf_common+0xac>
 800717a:	2301      	movs	r3, #1
 800717c:	4652      	mov	r2, sl
 800717e:	4649      	mov	r1, r9
 8007180:	4638      	mov	r0, r7
 8007182:	47c0      	blx	r8
 8007184:	3001      	adds	r0, #1
 8007186:	d103      	bne.n	8007190 <_printf_common+0xb0>
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	3501      	adds	r5, #1
 8007192:	e7c4      	b.n	800711e <_printf_common+0x3e>
 8007194:	2030      	movs	r0, #48	; 0x30
 8007196:	18e1      	adds	r1, r4, r3
 8007198:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800719c:	1c5a      	adds	r2, r3, #1
 800719e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80071a2:	4422      	add	r2, r4
 80071a4:	3302      	adds	r3, #2
 80071a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80071aa:	e7c5      	b.n	8007138 <_printf_common+0x58>
 80071ac:	2301      	movs	r3, #1
 80071ae:	4622      	mov	r2, r4
 80071b0:	4649      	mov	r1, r9
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	3001      	adds	r0, #1
 80071b8:	d0e6      	beq.n	8007188 <_printf_common+0xa8>
 80071ba:	3601      	adds	r6, #1
 80071bc:	e7d9      	b.n	8007172 <_printf_common+0x92>
	...

080071c0 <_printf_i>:
 80071c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	460c      	mov	r4, r1
 80071c6:	7e27      	ldrb	r7, [r4, #24]
 80071c8:	4691      	mov	r9, r2
 80071ca:	2f78      	cmp	r7, #120	; 0x78
 80071cc:	4680      	mov	r8, r0
 80071ce:	469a      	mov	sl, r3
 80071d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80071d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071d6:	d807      	bhi.n	80071e8 <_printf_i+0x28>
 80071d8:	2f62      	cmp	r7, #98	; 0x62
 80071da:	d80a      	bhi.n	80071f2 <_printf_i+0x32>
 80071dc:	2f00      	cmp	r7, #0
 80071de:	f000 80d9 	beq.w	8007394 <_printf_i+0x1d4>
 80071e2:	2f58      	cmp	r7, #88	; 0x58
 80071e4:	f000 80a4 	beq.w	8007330 <_printf_i+0x170>
 80071e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071f0:	e03a      	b.n	8007268 <_printf_i+0xa8>
 80071f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071f6:	2b15      	cmp	r3, #21
 80071f8:	d8f6      	bhi.n	80071e8 <_printf_i+0x28>
 80071fa:	a001      	add	r0, pc, #4	; (adr r0, 8007200 <_printf_i+0x40>)
 80071fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007200:	08007259 	.word	0x08007259
 8007204:	0800726d 	.word	0x0800726d
 8007208:	080071e9 	.word	0x080071e9
 800720c:	080071e9 	.word	0x080071e9
 8007210:	080071e9 	.word	0x080071e9
 8007214:	080071e9 	.word	0x080071e9
 8007218:	0800726d 	.word	0x0800726d
 800721c:	080071e9 	.word	0x080071e9
 8007220:	080071e9 	.word	0x080071e9
 8007224:	080071e9 	.word	0x080071e9
 8007228:	080071e9 	.word	0x080071e9
 800722c:	0800737b 	.word	0x0800737b
 8007230:	0800729d 	.word	0x0800729d
 8007234:	0800735d 	.word	0x0800735d
 8007238:	080071e9 	.word	0x080071e9
 800723c:	080071e9 	.word	0x080071e9
 8007240:	0800739d 	.word	0x0800739d
 8007244:	080071e9 	.word	0x080071e9
 8007248:	0800729d 	.word	0x0800729d
 800724c:	080071e9 	.word	0x080071e9
 8007250:	080071e9 	.word	0x080071e9
 8007254:	08007365 	.word	0x08007365
 8007258:	680b      	ldr	r3, [r1, #0]
 800725a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800725e:	1d1a      	adds	r2, r3, #4
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	600a      	str	r2, [r1, #0]
 8007264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007268:	2301      	movs	r3, #1
 800726a:	e0a4      	b.n	80073b6 <_printf_i+0x1f6>
 800726c:	6825      	ldr	r5, [r4, #0]
 800726e:	6808      	ldr	r0, [r1, #0]
 8007270:	062e      	lsls	r6, r5, #24
 8007272:	f100 0304 	add.w	r3, r0, #4
 8007276:	d50a      	bpl.n	800728e <_printf_i+0xce>
 8007278:	6805      	ldr	r5, [r0, #0]
 800727a:	600b      	str	r3, [r1, #0]
 800727c:	2d00      	cmp	r5, #0
 800727e:	da03      	bge.n	8007288 <_printf_i+0xc8>
 8007280:	232d      	movs	r3, #45	; 0x2d
 8007282:	426d      	negs	r5, r5
 8007284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007288:	230a      	movs	r3, #10
 800728a:	485e      	ldr	r0, [pc, #376]	; (8007404 <_printf_i+0x244>)
 800728c:	e019      	b.n	80072c2 <_printf_i+0x102>
 800728e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007292:	6805      	ldr	r5, [r0, #0]
 8007294:	600b      	str	r3, [r1, #0]
 8007296:	bf18      	it	ne
 8007298:	b22d      	sxthne	r5, r5
 800729a:	e7ef      	b.n	800727c <_printf_i+0xbc>
 800729c:	680b      	ldr	r3, [r1, #0]
 800729e:	6825      	ldr	r5, [r4, #0]
 80072a0:	1d18      	adds	r0, r3, #4
 80072a2:	6008      	str	r0, [r1, #0]
 80072a4:	0628      	lsls	r0, r5, #24
 80072a6:	d501      	bpl.n	80072ac <_printf_i+0xec>
 80072a8:	681d      	ldr	r5, [r3, #0]
 80072aa:	e002      	b.n	80072b2 <_printf_i+0xf2>
 80072ac:	0669      	lsls	r1, r5, #25
 80072ae:	d5fb      	bpl.n	80072a8 <_printf_i+0xe8>
 80072b0:	881d      	ldrh	r5, [r3, #0]
 80072b2:	2f6f      	cmp	r7, #111	; 0x6f
 80072b4:	bf0c      	ite	eq
 80072b6:	2308      	moveq	r3, #8
 80072b8:	230a      	movne	r3, #10
 80072ba:	4852      	ldr	r0, [pc, #328]	; (8007404 <_printf_i+0x244>)
 80072bc:	2100      	movs	r1, #0
 80072be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80072c2:	6866      	ldr	r6, [r4, #4]
 80072c4:	2e00      	cmp	r6, #0
 80072c6:	bfa8      	it	ge
 80072c8:	6821      	ldrge	r1, [r4, #0]
 80072ca:	60a6      	str	r6, [r4, #8]
 80072cc:	bfa4      	itt	ge
 80072ce:	f021 0104 	bicge.w	r1, r1, #4
 80072d2:	6021      	strge	r1, [r4, #0]
 80072d4:	b90d      	cbnz	r5, 80072da <_printf_i+0x11a>
 80072d6:	2e00      	cmp	r6, #0
 80072d8:	d04d      	beq.n	8007376 <_printf_i+0x1b6>
 80072da:	4616      	mov	r6, r2
 80072dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80072e0:	fb03 5711 	mls	r7, r3, r1, r5
 80072e4:	5dc7      	ldrb	r7, [r0, r7]
 80072e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80072ea:	462f      	mov	r7, r5
 80072ec:	42bb      	cmp	r3, r7
 80072ee:	460d      	mov	r5, r1
 80072f0:	d9f4      	bls.n	80072dc <_printf_i+0x11c>
 80072f2:	2b08      	cmp	r3, #8
 80072f4:	d10b      	bne.n	800730e <_printf_i+0x14e>
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	07df      	lsls	r7, r3, #31
 80072fa:	d508      	bpl.n	800730e <_printf_i+0x14e>
 80072fc:	6923      	ldr	r3, [r4, #16]
 80072fe:	6861      	ldr	r1, [r4, #4]
 8007300:	4299      	cmp	r1, r3
 8007302:	bfde      	ittt	le
 8007304:	2330      	movle	r3, #48	; 0x30
 8007306:	f806 3c01 	strble.w	r3, [r6, #-1]
 800730a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800730e:	1b92      	subs	r2, r2, r6
 8007310:	6122      	str	r2, [r4, #16]
 8007312:	464b      	mov	r3, r9
 8007314:	4621      	mov	r1, r4
 8007316:	4640      	mov	r0, r8
 8007318:	f8cd a000 	str.w	sl, [sp]
 800731c:	aa03      	add	r2, sp, #12
 800731e:	f7ff fedf 	bl	80070e0 <_printf_common>
 8007322:	3001      	adds	r0, #1
 8007324:	d14c      	bne.n	80073c0 <_printf_i+0x200>
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	b004      	add	sp, #16
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	4834      	ldr	r0, [pc, #208]	; (8007404 <_printf_i+0x244>)
 8007332:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007336:	680e      	ldr	r6, [r1, #0]
 8007338:	6823      	ldr	r3, [r4, #0]
 800733a:	f856 5b04 	ldr.w	r5, [r6], #4
 800733e:	061f      	lsls	r7, r3, #24
 8007340:	600e      	str	r6, [r1, #0]
 8007342:	d514      	bpl.n	800736e <_printf_i+0x1ae>
 8007344:	07d9      	lsls	r1, r3, #31
 8007346:	bf44      	itt	mi
 8007348:	f043 0320 	orrmi.w	r3, r3, #32
 800734c:	6023      	strmi	r3, [r4, #0]
 800734e:	b91d      	cbnz	r5, 8007358 <_printf_i+0x198>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	f023 0320 	bic.w	r3, r3, #32
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	2310      	movs	r3, #16
 800735a:	e7af      	b.n	80072bc <_printf_i+0xfc>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	f043 0320 	orr.w	r3, r3, #32
 8007362:	6023      	str	r3, [r4, #0]
 8007364:	2378      	movs	r3, #120	; 0x78
 8007366:	4828      	ldr	r0, [pc, #160]	; (8007408 <_printf_i+0x248>)
 8007368:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800736c:	e7e3      	b.n	8007336 <_printf_i+0x176>
 800736e:	065e      	lsls	r6, r3, #25
 8007370:	bf48      	it	mi
 8007372:	b2ad      	uxthmi	r5, r5
 8007374:	e7e6      	b.n	8007344 <_printf_i+0x184>
 8007376:	4616      	mov	r6, r2
 8007378:	e7bb      	b.n	80072f2 <_printf_i+0x132>
 800737a:	680b      	ldr	r3, [r1, #0]
 800737c:	6826      	ldr	r6, [r4, #0]
 800737e:	1d1d      	adds	r5, r3, #4
 8007380:	6960      	ldr	r0, [r4, #20]
 8007382:	600d      	str	r5, [r1, #0]
 8007384:	0635      	lsls	r5, r6, #24
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	d501      	bpl.n	800738e <_printf_i+0x1ce>
 800738a:	6018      	str	r0, [r3, #0]
 800738c:	e002      	b.n	8007394 <_printf_i+0x1d4>
 800738e:	0671      	lsls	r1, r6, #25
 8007390:	d5fb      	bpl.n	800738a <_printf_i+0x1ca>
 8007392:	8018      	strh	r0, [r3, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	4616      	mov	r6, r2
 8007398:	6123      	str	r3, [r4, #16]
 800739a:	e7ba      	b.n	8007312 <_printf_i+0x152>
 800739c:	680b      	ldr	r3, [r1, #0]
 800739e:	1d1a      	adds	r2, r3, #4
 80073a0:	600a      	str	r2, [r1, #0]
 80073a2:	681e      	ldr	r6, [r3, #0]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4630      	mov	r0, r6
 80073a8:	6862      	ldr	r2, [r4, #4]
 80073aa:	f002 f887 	bl	80094bc <memchr>
 80073ae:	b108      	cbz	r0, 80073b4 <_printf_i+0x1f4>
 80073b0:	1b80      	subs	r0, r0, r6
 80073b2:	6060      	str	r0, [r4, #4]
 80073b4:	6863      	ldr	r3, [r4, #4]
 80073b6:	6123      	str	r3, [r4, #16]
 80073b8:	2300      	movs	r3, #0
 80073ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073be:	e7a8      	b.n	8007312 <_printf_i+0x152>
 80073c0:	4632      	mov	r2, r6
 80073c2:	4649      	mov	r1, r9
 80073c4:	4640      	mov	r0, r8
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	47d0      	blx	sl
 80073ca:	3001      	adds	r0, #1
 80073cc:	d0ab      	beq.n	8007326 <_printf_i+0x166>
 80073ce:	6823      	ldr	r3, [r4, #0]
 80073d0:	079b      	lsls	r3, r3, #30
 80073d2:	d413      	bmi.n	80073fc <_printf_i+0x23c>
 80073d4:	68e0      	ldr	r0, [r4, #12]
 80073d6:	9b03      	ldr	r3, [sp, #12]
 80073d8:	4298      	cmp	r0, r3
 80073da:	bfb8      	it	lt
 80073dc:	4618      	movlt	r0, r3
 80073de:	e7a4      	b.n	800732a <_printf_i+0x16a>
 80073e0:	2301      	movs	r3, #1
 80073e2:	4632      	mov	r2, r6
 80073e4:	4649      	mov	r1, r9
 80073e6:	4640      	mov	r0, r8
 80073e8:	47d0      	blx	sl
 80073ea:	3001      	adds	r0, #1
 80073ec:	d09b      	beq.n	8007326 <_printf_i+0x166>
 80073ee:	3501      	adds	r5, #1
 80073f0:	68e3      	ldr	r3, [r4, #12]
 80073f2:	9903      	ldr	r1, [sp, #12]
 80073f4:	1a5b      	subs	r3, r3, r1
 80073f6:	42ab      	cmp	r3, r5
 80073f8:	dcf2      	bgt.n	80073e0 <_printf_i+0x220>
 80073fa:	e7eb      	b.n	80073d4 <_printf_i+0x214>
 80073fc:	2500      	movs	r5, #0
 80073fe:	f104 0619 	add.w	r6, r4, #25
 8007402:	e7f5      	b.n	80073f0 <_printf_i+0x230>
 8007404:	0800b07a 	.word	0x0800b07a
 8007408:	0800b08b 	.word	0x0800b08b

0800740c <siprintf>:
 800740c:	b40e      	push	{r1, r2, r3}
 800740e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007412:	b500      	push	{lr}
 8007414:	b09c      	sub	sp, #112	; 0x70
 8007416:	ab1d      	add	r3, sp, #116	; 0x74
 8007418:	9002      	str	r0, [sp, #8]
 800741a:	9006      	str	r0, [sp, #24]
 800741c:	9107      	str	r1, [sp, #28]
 800741e:	9104      	str	r1, [sp, #16]
 8007420:	4808      	ldr	r0, [pc, #32]	; (8007444 <siprintf+0x38>)
 8007422:	4909      	ldr	r1, [pc, #36]	; (8007448 <siprintf+0x3c>)
 8007424:	f853 2b04 	ldr.w	r2, [r3], #4
 8007428:	9105      	str	r1, [sp, #20]
 800742a:	6800      	ldr	r0, [r0, #0]
 800742c:	a902      	add	r1, sp, #8
 800742e:	9301      	str	r3, [sp, #4]
 8007430:	f002 fe28 	bl	800a084 <_svfiprintf_r>
 8007434:	2200      	movs	r2, #0
 8007436:	9b02      	ldr	r3, [sp, #8]
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	b01c      	add	sp, #112	; 0x70
 800743c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007440:	b003      	add	sp, #12
 8007442:	4770      	bx	lr
 8007444:	20000018 	.word	0x20000018
 8007448:	ffff0208 	.word	0xffff0208

0800744c <strncmp>:
 800744c:	b510      	push	{r4, lr}
 800744e:	b16a      	cbz	r2, 800746c <strncmp+0x20>
 8007450:	3901      	subs	r1, #1
 8007452:	1884      	adds	r4, r0, r2
 8007454:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007458:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800745c:	4293      	cmp	r3, r2
 800745e:	d103      	bne.n	8007468 <strncmp+0x1c>
 8007460:	42a0      	cmp	r0, r4
 8007462:	d001      	beq.n	8007468 <strncmp+0x1c>
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1f5      	bne.n	8007454 <strncmp+0x8>
 8007468:	1a98      	subs	r0, r3, r2
 800746a:	bd10      	pop	{r4, pc}
 800746c:	4610      	mov	r0, r2
 800746e:	e7fc      	b.n	800746a <strncmp+0x1e>

08007470 <sulp>:
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	460f      	mov	r7, r1
 8007476:	4690      	mov	r8, r2
 8007478:	f002 fbac 	bl	8009bd4 <__ulp>
 800747c:	4604      	mov	r4, r0
 800747e:	460d      	mov	r5, r1
 8007480:	f1b8 0f00 	cmp.w	r8, #0
 8007484:	d011      	beq.n	80074aa <sulp+0x3a>
 8007486:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800748a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800748e:	2b00      	cmp	r3, #0
 8007490:	dd0b      	ble.n	80074aa <sulp+0x3a>
 8007492:	2400      	movs	r4, #0
 8007494:	051b      	lsls	r3, r3, #20
 8007496:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800749a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	f7f9 f8cd 	bl	8000640 <__aeabi_dmul>
 80074a6:	4604      	mov	r4, r0
 80074a8:	460d      	mov	r5, r1
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b2:	0000      	movs	r0, r0
 80074b4:	0000      	movs	r0, r0
	...

080074b8 <_strtod_l>:
 80074b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	469b      	mov	fp, r3
 80074be:	2300      	movs	r3, #0
 80074c0:	b0a1      	sub	sp, #132	; 0x84
 80074c2:	931c      	str	r3, [sp, #112]	; 0x70
 80074c4:	4ba1      	ldr	r3, [pc, #644]	; (800774c <_strtod_l+0x294>)
 80074c6:	4682      	mov	sl, r0
 80074c8:	681f      	ldr	r7, [r3, #0]
 80074ca:	460e      	mov	r6, r1
 80074cc:	4638      	mov	r0, r7
 80074ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80074d0:	f7f8 fe3e 	bl	8000150 <strlen>
 80074d4:	f04f 0800 	mov.w	r8, #0
 80074d8:	4604      	mov	r4, r0
 80074da:	f04f 0900 	mov.w	r9, #0
 80074de:	961b      	str	r6, [sp, #108]	; 0x6c
 80074e0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80074e2:	781a      	ldrb	r2, [r3, #0]
 80074e4:	2a2b      	cmp	r2, #43	; 0x2b
 80074e6:	d04c      	beq.n	8007582 <_strtod_l+0xca>
 80074e8:	d83a      	bhi.n	8007560 <_strtod_l+0xa8>
 80074ea:	2a0d      	cmp	r2, #13
 80074ec:	d833      	bhi.n	8007556 <_strtod_l+0x9e>
 80074ee:	2a08      	cmp	r2, #8
 80074f0:	d833      	bhi.n	800755a <_strtod_l+0xa2>
 80074f2:	2a00      	cmp	r2, #0
 80074f4:	d03d      	beq.n	8007572 <_strtod_l+0xba>
 80074f6:	2300      	movs	r3, #0
 80074f8:	930c      	str	r3, [sp, #48]	; 0x30
 80074fa:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80074fc:	782b      	ldrb	r3, [r5, #0]
 80074fe:	2b30      	cmp	r3, #48	; 0x30
 8007500:	f040 80af 	bne.w	8007662 <_strtod_l+0x1aa>
 8007504:	786b      	ldrb	r3, [r5, #1]
 8007506:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800750a:	2b58      	cmp	r3, #88	; 0x58
 800750c:	d16c      	bne.n	80075e8 <_strtod_l+0x130>
 800750e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007510:	4650      	mov	r0, sl
 8007512:	9301      	str	r3, [sp, #4]
 8007514:	ab1c      	add	r3, sp, #112	; 0x70
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	4a8d      	ldr	r2, [pc, #564]	; (8007750 <_strtod_l+0x298>)
 800751a:	f8cd b008 	str.w	fp, [sp, #8]
 800751e:	ab1d      	add	r3, sp, #116	; 0x74
 8007520:	a91b      	add	r1, sp, #108	; 0x6c
 8007522:	f001 fcaf 	bl	8008e84 <__gethex>
 8007526:	f010 0607 	ands.w	r6, r0, #7
 800752a:	4604      	mov	r4, r0
 800752c:	d005      	beq.n	800753a <_strtod_l+0x82>
 800752e:	2e06      	cmp	r6, #6
 8007530:	d129      	bne.n	8007586 <_strtod_l+0xce>
 8007532:	2300      	movs	r3, #0
 8007534:	3501      	adds	r5, #1
 8007536:	951b      	str	r5, [sp, #108]	; 0x6c
 8007538:	930c      	str	r3, [sp, #48]	; 0x30
 800753a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 8596 	bne.w	800806e <_strtod_l+0xbb6>
 8007542:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007544:	b1d3      	cbz	r3, 800757c <_strtod_l+0xc4>
 8007546:	4642      	mov	r2, r8
 8007548:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800754c:	4610      	mov	r0, r2
 800754e:	4619      	mov	r1, r3
 8007550:	b021      	add	sp, #132	; 0x84
 8007552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007556:	2a20      	cmp	r2, #32
 8007558:	d1cd      	bne.n	80074f6 <_strtod_l+0x3e>
 800755a:	3301      	adds	r3, #1
 800755c:	931b      	str	r3, [sp, #108]	; 0x6c
 800755e:	e7bf      	b.n	80074e0 <_strtod_l+0x28>
 8007560:	2a2d      	cmp	r2, #45	; 0x2d
 8007562:	d1c8      	bne.n	80074f6 <_strtod_l+0x3e>
 8007564:	2201      	movs	r2, #1
 8007566:	920c      	str	r2, [sp, #48]	; 0x30
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	921b      	str	r2, [sp, #108]	; 0x6c
 800756c:	785b      	ldrb	r3, [r3, #1]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1c3      	bne.n	80074fa <_strtod_l+0x42>
 8007572:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007574:	961b      	str	r6, [sp, #108]	; 0x6c
 8007576:	2b00      	cmp	r3, #0
 8007578:	f040 8577 	bne.w	800806a <_strtod_l+0xbb2>
 800757c:	4642      	mov	r2, r8
 800757e:	464b      	mov	r3, r9
 8007580:	e7e4      	b.n	800754c <_strtod_l+0x94>
 8007582:	2200      	movs	r2, #0
 8007584:	e7ef      	b.n	8007566 <_strtod_l+0xae>
 8007586:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007588:	b13a      	cbz	r2, 800759a <_strtod_l+0xe2>
 800758a:	2135      	movs	r1, #53	; 0x35
 800758c:	a81e      	add	r0, sp, #120	; 0x78
 800758e:	f002 fc25 	bl	8009ddc <__copybits>
 8007592:	4650      	mov	r0, sl
 8007594:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007596:	f001 ffed 	bl	8009574 <_Bfree>
 800759a:	3e01      	subs	r6, #1
 800759c:	2e05      	cmp	r6, #5
 800759e:	d807      	bhi.n	80075b0 <_strtod_l+0xf8>
 80075a0:	e8df f006 	tbb	[pc, r6]
 80075a4:	1d180b0e 	.word	0x1d180b0e
 80075a8:	030e      	.short	0x030e
 80075aa:	f04f 0900 	mov.w	r9, #0
 80075ae:	46c8      	mov	r8, r9
 80075b0:	0721      	lsls	r1, r4, #28
 80075b2:	d5c2      	bpl.n	800753a <_strtod_l+0x82>
 80075b4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80075b8:	e7bf      	b.n	800753a <_strtod_l+0x82>
 80075ba:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 80075be:	e7f7      	b.n	80075b0 <_strtod_l+0xf8>
 80075c0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80075c2:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 80075c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80075ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80075ce:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80075d2:	e7ed      	b.n	80075b0 <_strtod_l+0xf8>
 80075d4:	f04f 0800 	mov.w	r8, #0
 80075d8:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007754 <_strtod_l+0x29c>
 80075dc:	e7e8      	b.n	80075b0 <_strtod_l+0xf8>
 80075de:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80075e2:	f04f 38ff 	mov.w	r8, #4294967295
 80075e6:	e7e3      	b.n	80075b0 <_strtod_l+0xf8>
 80075e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	921b      	str	r2, [sp, #108]	; 0x6c
 80075ee:	785b      	ldrb	r3, [r3, #1]
 80075f0:	2b30      	cmp	r3, #48	; 0x30
 80075f2:	d0f9      	beq.n	80075e8 <_strtod_l+0x130>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0a0      	beq.n	800753a <_strtod_l+0x82>
 80075f8:	2301      	movs	r3, #1
 80075fa:	9307      	str	r3, [sp, #28]
 80075fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075fe:	220a      	movs	r2, #10
 8007600:	9308      	str	r3, [sp, #32]
 8007602:	2300      	movs	r3, #0
 8007604:	469b      	mov	fp, r3
 8007606:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800760a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800760c:	7805      	ldrb	r5, [r0, #0]
 800760e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007612:	b2d9      	uxtb	r1, r3
 8007614:	2909      	cmp	r1, #9
 8007616:	d926      	bls.n	8007666 <_strtod_l+0x1ae>
 8007618:	4622      	mov	r2, r4
 800761a:	4639      	mov	r1, r7
 800761c:	f7ff ff16 	bl	800744c <strncmp>
 8007620:	2800      	cmp	r0, #0
 8007622:	d032      	beq.n	800768a <_strtod_l+0x1d2>
 8007624:	2000      	movs	r0, #0
 8007626:	462b      	mov	r3, r5
 8007628:	465c      	mov	r4, fp
 800762a:	4602      	mov	r2, r0
 800762c:	9004      	str	r0, [sp, #16]
 800762e:	2b65      	cmp	r3, #101	; 0x65
 8007630:	d001      	beq.n	8007636 <_strtod_l+0x17e>
 8007632:	2b45      	cmp	r3, #69	; 0x45
 8007634:	d113      	bne.n	800765e <_strtod_l+0x1a6>
 8007636:	b91c      	cbnz	r4, 8007640 <_strtod_l+0x188>
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	4303      	orrs	r3, r0
 800763c:	d099      	beq.n	8007572 <_strtod_l+0xba>
 800763e:	2400      	movs	r4, #0
 8007640:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007642:	1c73      	adds	r3, r6, #1
 8007644:	931b      	str	r3, [sp, #108]	; 0x6c
 8007646:	7873      	ldrb	r3, [r6, #1]
 8007648:	2b2b      	cmp	r3, #43	; 0x2b
 800764a:	d078      	beq.n	800773e <_strtod_l+0x286>
 800764c:	2b2d      	cmp	r3, #45	; 0x2d
 800764e:	d07b      	beq.n	8007748 <_strtod_l+0x290>
 8007650:	2700      	movs	r7, #0
 8007652:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007656:	2909      	cmp	r1, #9
 8007658:	f240 8082 	bls.w	8007760 <_strtod_l+0x2a8>
 800765c:	961b      	str	r6, [sp, #108]	; 0x6c
 800765e:	2500      	movs	r5, #0
 8007660:	e09e      	b.n	80077a0 <_strtod_l+0x2e8>
 8007662:	2300      	movs	r3, #0
 8007664:	e7c9      	b.n	80075fa <_strtod_l+0x142>
 8007666:	f1bb 0f08 	cmp.w	fp, #8
 800766a:	bfd5      	itete	le
 800766c:	9906      	ldrle	r1, [sp, #24]
 800766e:	9905      	ldrgt	r1, [sp, #20]
 8007670:	fb02 3301 	mlale	r3, r2, r1, r3
 8007674:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007678:	f100 0001 	add.w	r0, r0, #1
 800767c:	bfd4      	ite	le
 800767e:	9306      	strle	r3, [sp, #24]
 8007680:	9305      	strgt	r3, [sp, #20]
 8007682:	f10b 0b01 	add.w	fp, fp, #1
 8007686:	901b      	str	r0, [sp, #108]	; 0x6c
 8007688:	e7bf      	b.n	800760a <_strtod_l+0x152>
 800768a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800768c:	191a      	adds	r2, r3, r4
 800768e:	921b      	str	r2, [sp, #108]	; 0x6c
 8007690:	5d1b      	ldrb	r3, [r3, r4]
 8007692:	f1bb 0f00 	cmp.w	fp, #0
 8007696:	d036      	beq.n	8007706 <_strtod_l+0x24e>
 8007698:	465c      	mov	r4, fp
 800769a:	9004      	str	r0, [sp, #16]
 800769c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80076a0:	2a09      	cmp	r2, #9
 80076a2:	d912      	bls.n	80076ca <_strtod_l+0x212>
 80076a4:	2201      	movs	r2, #1
 80076a6:	e7c2      	b.n	800762e <_strtod_l+0x176>
 80076a8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076aa:	3001      	adds	r0, #1
 80076ac:	1c5a      	adds	r2, r3, #1
 80076ae:	921b      	str	r2, [sp, #108]	; 0x6c
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	2b30      	cmp	r3, #48	; 0x30
 80076b4:	d0f8      	beq.n	80076a8 <_strtod_l+0x1f0>
 80076b6:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80076ba:	2a08      	cmp	r2, #8
 80076bc:	f200 84dc 	bhi.w	8008078 <_strtod_l+0xbc0>
 80076c0:	9004      	str	r0, [sp, #16]
 80076c2:	2000      	movs	r0, #0
 80076c4:	4604      	mov	r4, r0
 80076c6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80076c8:	9208      	str	r2, [sp, #32]
 80076ca:	3b30      	subs	r3, #48	; 0x30
 80076cc:	f100 0201 	add.w	r2, r0, #1
 80076d0:	d013      	beq.n	80076fa <_strtod_l+0x242>
 80076d2:	9904      	ldr	r1, [sp, #16]
 80076d4:	1905      	adds	r5, r0, r4
 80076d6:	4411      	add	r1, r2
 80076d8:	9104      	str	r1, [sp, #16]
 80076da:	4622      	mov	r2, r4
 80076dc:	210a      	movs	r1, #10
 80076de:	42aa      	cmp	r2, r5
 80076e0:	d113      	bne.n	800770a <_strtod_l+0x252>
 80076e2:	1822      	adds	r2, r4, r0
 80076e4:	2a08      	cmp	r2, #8
 80076e6:	f104 0401 	add.w	r4, r4, #1
 80076ea:	4404      	add	r4, r0
 80076ec:	dc1b      	bgt.n	8007726 <_strtod_l+0x26e>
 80076ee:	220a      	movs	r2, #10
 80076f0:	9906      	ldr	r1, [sp, #24]
 80076f2:	fb02 3301 	mla	r3, r2, r1, r3
 80076f6:	9306      	str	r3, [sp, #24]
 80076f8:	2200      	movs	r2, #0
 80076fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076fc:	4610      	mov	r0, r2
 80076fe:	1c59      	adds	r1, r3, #1
 8007700:	911b      	str	r1, [sp, #108]	; 0x6c
 8007702:	785b      	ldrb	r3, [r3, #1]
 8007704:	e7ca      	b.n	800769c <_strtod_l+0x1e4>
 8007706:	4658      	mov	r0, fp
 8007708:	e7d3      	b.n	80076b2 <_strtod_l+0x1fa>
 800770a:	2a08      	cmp	r2, #8
 800770c:	dc04      	bgt.n	8007718 <_strtod_l+0x260>
 800770e:	9f06      	ldr	r7, [sp, #24]
 8007710:	434f      	muls	r7, r1
 8007712:	9706      	str	r7, [sp, #24]
 8007714:	3201      	adds	r2, #1
 8007716:	e7e2      	b.n	80076de <_strtod_l+0x226>
 8007718:	1c57      	adds	r7, r2, #1
 800771a:	2f10      	cmp	r7, #16
 800771c:	bfde      	ittt	le
 800771e:	9f05      	ldrle	r7, [sp, #20]
 8007720:	434f      	mulle	r7, r1
 8007722:	9705      	strle	r7, [sp, #20]
 8007724:	e7f6      	b.n	8007714 <_strtod_l+0x25c>
 8007726:	2c10      	cmp	r4, #16
 8007728:	bfdf      	itttt	le
 800772a:	220a      	movle	r2, #10
 800772c:	9905      	ldrle	r1, [sp, #20]
 800772e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007732:	9305      	strle	r3, [sp, #20]
 8007734:	e7e0      	b.n	80076f8 <_strtod_l+0x240>
 8007736:	2300      	movs	r3, #0
 8007738:	2201      	movs	r2, #1
 800773a:	9304      	str	r3, [sp, #16]
 800773c:	e77c      	b.n	8007638 <_strtod_l+0x180>
 800773e:	2700      	movs	r7, #0
 8007740:	1cb3      	adds	r3, r6, #2
 8007742:	931b      	str	r3, [sp, #108]	; 0x6c
 8007744:	78b3      	ldrb	r3, [r6, #2]
 8007746:	e784      	b.n	8007652 <_strtod_l+0x19a>
 8007748:	2701      	movs	r7, #1
 800774a:	e7f9      	b.n	8007740 <_strtod_l+0x288>
 800774c:	0800b1f0 	.word	0x0800b1f0
 8007750:	0800b09c 	.word	0x0800b09c
 8007754:	7ff00000 	.word	0x7ff00000
 8007758:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800775a:	1c59      	adds	r1, r3, #1
 800775c:	911b      	str	r1, [sp, #108]	; 0x6c
 800775e:	785b      	ldrb	r3, [r3, #1]
 8007760:	2b30      	cmp	r3, #48	; 0x30
 8007762:	d0f9      	beq.n	8007758 <_strtod_l+0x2a0>
 8007764:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007768:	2908      	cmp	r1, #8
 800776a:	f63f af78 	bhi.w	800765e <_strtod_l+0x1a6>
 800776e:	f04f 0e0a 	mov.w	lr, #10
 8007772:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 8007776:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007778:	9309      	str	r3, [sp, #36]	; 0x24
 800777a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800777c:	1c59      	adds	r1, r3, #1
 800777e:	911b      	str	r1, [sp, #108]	; 0x6c
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8007786:	2d09      	cmp	r5, #9
 8007788:	d935      	bls.n	80077f6 <_strtod_l+0x33e>
 800778a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800778c:	1b49      	subs	r1, r1, r5
 800778e:	2908      	cmp	r1, #8
 8007790:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007794:	dc02      	bgt.n	800779c <_strtod_l+0x2e4>
 8007796:	4565      	cmp	r5, ip
 8007798:	bfa8      	it	ge
 800779a:	4665      	movge	r5, ip
 800779c:	b107      	cbz	r7, 80077a0 <_strtod_l+0x2e8>
 800779e:	426d      	negs	r5, r5
 80077a0:	2c00      	cmp	r4, #0
 80077a2:	d14c      	bne.n	800783e <_strtod_l+0x386>
 80077a4:	9907      	ldr	r1, [sp, #28]
 80077a6:	4301      	orrs	r1, r0
 80077a8:	f47f aec7 	bne.w	800753a <_strtod_l+0x82>
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	f47f aee0 	bne.w	8007572 <_strtod_l+0xba>
 80077b2:	2b69      	cmp	r3, #105	; 0x69
 80077b4:	d026      	beq.n	8007804 <_strtod_l+0x34c>
 80077b6:	dc23      	bgt.n	8007800 <_strtod_l+0x348>
 80077b8:	2b49      	cmp	r3, #73	; 0x49
 80077ba:	d023      	beq.n	8007804 <_strtod_l+0x34c>
 80077bc:	2b4e      	cmp	r3, #78	; 0x4e
 80077be:	f47f aed8 	bne.w	8007572 <_strtod_l+0xba>
 80077c2:	499c      	ldr	r1, [pc, #624]	; (8007a34 <_strtod_l+0x57c>)
 80077c4:	a81b      	add	r0, sp, #108	; 0x6c
 80077c6:	f001 fdab 	bl	8009320 <__match>
 80077ca:	2800      	cmp	r0, #0
 80077cc:	f43f aed1 	beq.w	8007572 <_strtod_l+0xba>
 80077d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	2b28      	cmp	r3, #40	; 0x28
 80077d6:	d12c      	bne.n	8007832 <_strtod_l+0x37a>
 80077d8:	4997      	ldr	r1, [pc, #604]	; (8007a38 <_strtod_l+0x580>)
 80077da:	aa1e      	add	r2, sp, #120	; 0x78
 80077dc:	a81b      	add	r0, sp, #108	; 0x6c
 80077de:	f001 fdb3 	bl	8009348 <__hexnan>
 80077e2:	2805      	cmp	r0, #5
 80077e4:	d125      	bne.n	8007832 <_strtod_l+0x37a>
 80077e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80077e8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80077ec:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80077f0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80077f4:	e6a1      	b.n	800753a <_strtod_l+0x82>
 80077f6:	fb0e 3c0c 	mla	ip, lr, ip, r3
 80077fa:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80077fe:	e7bc      	b.n	800777a <_strtod_l+0x2c2>
 8007800:	2b6e      	cmp	r3, #110	; 0x6e
 8007802:	e7dc      	b.n	80077be <_strtod_l+0x306>
 8007804:	498d      	ldr	r1, [pc, #564]	; (8007a3c <_strtod_l+0x584>)
 8007806:	a81b      	add	r0, sp, #108	; 0x6c
 8007808:	f001 fd8a 	bl	8009320 <__match>
 800780c:	2800      	cmp	r0, #0
 800780e:	f43f aeb0 	beq.w	8007572 <_strtod_l+0xba>
 8007812:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007814:	498a      	ldr	r1, [pc, #552]	; (8007a40 <_strtod_l+0x588>)
 8007816:	3b01      	subs	r3, #1
 8007818:	a81b      	add	r0, sp, #108	; 0x6c
 800781a:	931b      	str	r3, [sp, #108]	; 0x6c
 800781c:	f001 fd80 	bl	8009320 <__match>
 8007820:	b910      	cbnz	r0, 8007828 <_strtod_l+0x370>
 8007822:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007824:	3301      	adds	r3, #1
 8007826:	931b      	str	r3, [sp, #108]	; 0x6c
 8007828:	f04f 0800 	mov.w	r8, #0
 800782c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8007a50 <_strtod_l+0x598>
 8007830:	e683      	b.n	800753a <_strtod_l+0x82>
 8007832:	4884      	ldr	r0, [pc, #528]	; (8007a44 <_strtod_l+0x58c>)
 8007834:	f002 fd26 	bl	800a284 <nan>
 8007838:	4680      	mov	r8, r0
 800783a:	4689      	mov	r9, r1
 800783c:	e67d      	b.n	800753a <_strtod_l+0x82>
 800783e:	9b04      	ldr	r3, [sp, #16]
 8007840:	f1bb 0f00 	cmp.w	fp, #0
 8007844:	bf08      	it	eq
 8007846:	46a3      	moveq	fp, r4
 8007848:	1aeb      	subs	r3, r5, r3
 800784a:	2c10      	cmp	r4, #16
 800784c:	9806      	ldr	r0, [sp, #24]
 800784e:	4626      	mov	r6, r4
 8007850:	9307      	str	r3, [sp, #28]
 8007852:	bfa8      	it	ge
 8007854:	2610      	movge	r6, #16
 8007856:	f7f8 fe79 	bl	800054c <__aeabi_ui2d>
 800785a:	2c09      	cmp	r4, #9
 800785c:	4680      	mov	r8, r0
 800785e:	4689      	mov	r9, r1
 8007860:	dd13      	ble.n	800788a <_strtod_l+0x3d2>
 8007862:	4b79      	ldr	r3, [pc, #484]	; (8007a48 <_strtod_l+0x590>)
 8007864:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007868:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800786c:	f7f8 fee8 	bl	8000640 <__aeabi_dmul>
 8007870:	4680      	mov	r8, r0
 8007872:	9805      	ldr	r0, [sp, #20]
 8007874:	4689      	mov	r9, r1
 8007876:	f7f8 fe69 	bl	800054c <__aeabi_ui2d>
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7f8 fd27 	bl	80002d4 <__adddf3>
 8007886:	4680      	mov	r8, r0
 8007888:	4689      	mov	r9, r1
 800788a:	2c0f      	cmp	r4, #15
 800788c:	dc36      	bgt.n	80078fc <_strtod_l+0x444>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f43f ae52 	beq.w	800753a <_strtod_l+0x82>
 8007896:	dd22      	ble.n	80078de <_strtod_l+0x426>
 8007898:	2b16      	cmp	r3, #22
 800789a:	dc09      	bgt.n	80078b0 <_strtod_l+0x3f8>
 800789c:	4c6a      	ldr	r4, [pc, #424]	; (8007a48 <_strtod_l+0x590>)
 800789e:	4642      	mov	r2, r8
 80078a0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 80078a4:	464b      	mov	r3, r9
 80078a6:	e9d4 0100 	ldrd	r0, r1, [r4]
 80078aa:	f7f8 fec9 	bl	8000640 <__aeabi_dmul>
 80078ae:	e7c3      	b.n	8007838 <_strtod_l+0x380>
 80078b0:	9a07      	ldr	r2, [sp, #28]
 80078b2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80078b6:	4293      	cmp	r3, r2
 80078b8:	db20      	blt.n	80078fc <_strtod_l+0x444>
 80078ba:	4d63      	ldr	r5, [pc, #396]	; (8007a48 <_strtod_l+0x590>)
 80078bc:	f1c4 040f 	rsb	r4, r4, #15
 80078c0:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80078c4:	4642      	mov	r2, r8
 80078c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078ca:	464b      	mov	r3, r9
 80078cc:	f7f8 feb8 	bl	8000640 <__aeabi_dmul>
 80078d0:	9b07      	ldr	r3, [sp, #28]
 80078d2:	1b1c      	subs	r4, r3, r4
 80078d4:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80078d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078dc:	e7e5      	b.n	80078aa <_strtod_l+0x3f2>
 80078de:	9b07      	ldr	r3, [sp, #28]
 80078e0:	3316      	adds	r3, #22
 80078e2:	db0b      	blt.n	80078fc <_strtod_l+0x444>
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	4a58      	ldr	r2, [pc, #352]	; (8007a48 <_strtod_l+0x590>)
 80078e8:	1b5d      	subs	r5, r3, r5
 80078ea:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80078ee:	4640      	mov	r0, r8
 80078f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078f4:	4649      	mov	r1, r9
 80078f6:	f7f8 ffcd 	bl	8000894 <__aeabi_ddiv>
 80078fa:	e79d      	b.n	8007838 <_strtod_l+0x380>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	1ba6      	subs	r6, r4, r6
 8007900:	441e      	add	r6, r3
 8007902:	2e00      	cmp	r6, #0
 8007904:	dd71      	ble.n	80079ea <_strtod_l+0x532>
 8007906:	f016 030f 	ands.w	r3, r6, #15
 800790a:	d00a      	beq.n	8007922 <_strtod_l+0x46a>
 800790c:	494e      	ldr	r1, [pc, #312]	; (8007a48 <_strtod_l+0x590>)
 800790e:	4642      	mov	r2, r8
 8007910:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007914:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007918:	464b      	mov	r3, r9
 800791a:	f7f8 fe91 	bl	8000640 <__aeabi_dmul>
 800791e:	4680      	mov	r8, r0
 8007920:	4689      	mov	r9, r1
 8007922:	f036 060f 	bics.w	r6, r6, #15
 8007926:	d050      	beq.n	80079ca <_strtod_l+0x512>
 8007928:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800792c:	dd27      	ble.n	800797e <_strtod_l+0x4c6>
 800792e:	f04f 0b00 	mov.w	fp, #0
 8007932:	f8cd b010 	str.w	fp, [sp, #16]
 8007936:	f8cd b020 	str.w	fp, [sp, #32]
 800793a:	f8cd b018 	str.w	fp, [sp, #24]
 800793e:	2322      	movs	r3, #34	; 0x22
 8007940:	f04f 0800 	mov.w	r8, #0
 8007944:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007a50 <_strtod_l+0x598>
 8007948:	f8ca 3000 	str.w	r3, [sl]
 800794c:	9b08      	ldr	r3, [sp, #32]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f43f adf3 	beq.w	800753a <_strtod_l+0x82>
 8007954:	4650      	mov	r0, sl
 8007956:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007958:	f001 fe0c 	bl	8009574 <_Bfree>
 800795c:	4650      	mov	r0, sl
 800795e:	9906      	ldr	r1, [sp, #24]
 8007960:	f001 fe08 	bl	8009574 <_Bfree>
 8007964:	4650      	mov	r0, sl
 8007966:	9904      	ldr	r1, [sp, #16]
 8007968:	f001 fe04 	bl	8009574 <_Bfree>
 800796c:	4650      	mov	r0, sl
 800796e:	9908      	ldr	r1, [sp, #32]
 8007970:	f001 fe00 	bl	8009574 <_Bfree>
 8007974:	4659      	mov	r1, fp
 8007976:	4650      	mov	r0, sl
 8007978:	f001 fdfc 	bl	8009574 <_Bfree>
 800797c:	e5dd      	b.n	800753a <_strtod_l+0x82>
 800797e:	2300      	movs	r3, #0
 8007980:	4640      	mov	r0, r8
 8007982:	4649      	mov	r1, r9
 8007984:	461f      	mov	r7, r3
 8007986:	1136      	asrs	r6, r6, #4
 8007988:	2e01      	cmp	r6, #1
 800798a:	dc21      	bgt.n	80079d0 <_strtod_l+0x518>
 800798c:	b10b      	cbz	r3, 8007992 <_strtod_l+0x4da>
 800798e:	4680      	mov	r8, r0
 8007990:	4689      	mov	r9, r1
 8007992:	4b2e      	ldr	r3, [pc, #184]	; (8007a4c <_strtod_l+0x594>)
 8007994:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007998:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800799c:	4642      	mov	r2, r8
 800799e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a2:	464b      	mov	r3, r9
 80079a4:	f7f8 fe4c 	bl	8000640 <__aeabi_dmul>
 80079a8:	4b29      	ldr	r3, [pc, #164]	; (8007a50 <_strtod_l+0x598>)
 80079aa:	460a      	mov	r2, r1
 80079ac:	400b      	ands	r3, r1
 80079ae:	4929      	ldr	r1, [pc, #164]	; (8007a54 <_strtod_l+0x59c>)
 80079b0:	4680      	mov	r8, r0
 80079b2:	428b      	cmp	r3, r1
 80079b4:	d8bb      	bhi.n	800792e <_strtod_l+0x476>
 80079b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80079ba:	428b      	cmp	r3, r1
 80079bc:	bf86      	itte	hi
 80079be:	f04f 38ff 	movhi.w	r8, #4294967295
 80079c2:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007a58 <_strtod_l+0x5a0>
 80079c6:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80079ca:	2300      	movs	r3, #0
 80079cc:	9305      	str	r3, [sp, #20]
 80079ce:	e07e      	b.n	8007ace <_strtod_l+0x616>
 80079d0:	07f2      	lsls	r2, r6, #31
 80079d2:	d507      	bpl.n	80079e4 <_strtod_l+0x52c>
 80079d4:	4b1d      	ldr	r3, [pc, #116]	; (8007a4c <_strtod_l+0x594>)
 80079d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079de:	f7f8 fe2f 	bl	8000640 <__aeabi_dmul>
 80079e2:	2301      	movs	r3, #1
 80079e4:	3701      	adds	r7, #1
 80079e6:	1076      	asrs	r6, r6, #1
 80079e8:	e7ce      	b.n	8007988 <_strtod_l+0x4d0>
 80079ea:	d0ee      	beq.n	80079ca <_strtod_l+0x512>
 80079ec:	4276      	negs	r6, r6
 80079ee:	f016 020f 	ands.w	r2, r6, #15
 80079f2:	d00a      	beq.n	8007a0a <_strtod_l+0x552>
 80079f4:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <_strtod_l+0x590>)
 80079f6:	4640      	mov	r0, r8
 80079f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079fc:	4649      	mov	r1, r9
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 ff47 	bl	8000894 <__aeabi_ddiv>
 8007a06:	4680      	mov	r8, r0
 8007a08:	4689      	mov	r9, r1
 8007a0a:	1136      	asrs	r6, r6, #4
 8007a0c:	d0dd      	beq.n	80079ca <_strtod_l+0x512>
 8007a0e:	2e1f      	cmp	r6, #31
 8007a10:	dd24      	ble.n	8007a5c <_strtod_l+0x5a4>
 8007a12:	f04f 0b00 	mov.w	fp, #0
 8007a16:	f8cd b010 	str.w	fp, [sp, #16]
 8007a1a:	f8cd b020 	str.w	fp, [sp, #32]
 8007a1e:	f8cd b018 	str.w	fp, [sp, #24]
 8007a22:	2322      	movs	r3, #34	; 0x22
 8007a24:	f04f 0800 	mov.w	r8, #0
 8007a28:	f04f 0900 	mov.w	r9, #0
 8007a2c:	f8ca 3000 	str.w	r3, [sl]
 8007a30:	e78c      	b.n	800794c <_strtod_l+0x494>
 8007a32:	bf00      	nop
 8007a34:	0800b075 	.word	0x0800b075
 8007a38:	0800b0b0 	.word	0x0800b0b0
 8007a3c:	0800b06d 	.word	0x0800b06d
 8007a40:	0800b0f3 	.word	0x0800b0f3
 8007a44:	0800b3b0 	.word	0x0800b3b0
 8007a48:	0800b290 	.word	0x0800b290
 8007a4c:	0800b268 	.word	0x0800b268
 8007a50:	7ff00000 	.word	0x7ff00000
 8007a54:	7ca00000 	.word	0x7ca00000
 8007a58:	7fefffff 	.word	0x7fefffff
 8007a5c:	f016 0310 	ands.w	r3, r6, #16
 8007a60:	bf18      	it	ne
 8007a62:	236a      	movne	r3, #106	; 0x6a
 8007a64:	4640      	mov	r0, r8
 8007a66:	9305      	str	r3, [sp, #20]
 8007a68:	4649      	mov	r1, r9
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4fb2      	ldr	r7, [pc, #712]	; (8007d38 <_strtod_l+0x880>)
 8007a6e:	07f2      	lsls	r2, r6, #31
 8007a70:	d504      	bpl.n	8007a7c <_strtod_l+0x5c4>
 8007a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a76:	f7f8 fde3 	bl	8000640 <__aeabi_dmul>
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	1076      	asrs	r6, r6, #1
 8007a7e:	f107 0708 	add.w	r7, r7, #8
 8007a82:	d1f4      	bne.n	8007a6e <_strtod_l+0x5b6>
 8007a84:	b10b      	cbz	r3, 8007a8a <_strtod_l+0x5d2>
 8007a86:	4680      	mov	r8, r0
 8007a88:	4689      	mov	r9, r1
 8007a8a:	9b05      	ldr	r3, [sp, #20]
 8007a8c:	b1bb      	cbz	r3, 8007abe <_strtod_l+0x606>
 8007a8e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8007a92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	4649      	mov	r1, r9
 8007a9a:	dd10      	ble.n	8007abe <_strtod_l+0x606>
 8007a9c:	2b1f      	cmp	r3, #31
 8007a9e:	f340 812b 	ble.w	8007cf8 <_strtod_l+0x840>
 8007aa2:	2b34      	cmp	r3, #52	; 0x34
 8007aa4:	bfd8      	it	le
 8007aa6:	f04f 32ff 	movle.w	r2, #4294967295
 8007aaa:	f04f 0800 	mov.w	r8, #0
 8007aae:	bfcf      	iteee	gt
 8007ab0:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007ab4:	3b20      	suble	r3, #32
 8007ab6:	fa02 f303 	lslle.w	r3, r2, r3
 8007aba:	ea03 0901 	andle.w	r9, r3, r1
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	4649      	mov	r1, r9
 8007ac6:	f7f9 f823 	bl	8000b10 <__aeabi_dcmpeq>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d1a1      	bne.n	8007a12 <_strtod_l+0x55a>
 8007ace:	9b06      	ldr	r3, [sp, #24]
 8007ad0:	465a      	mov	r2, fp
 8007ad2:	9300      	str	r3, [sp, #0]
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	4623      	mov	r3, r4
 8007ad8:	9908      	ldr	r1, [sp, #32]
 8007ada:	f001 fdb7 	bl	800964c <__s2b>
 8007ade:	9008      	str	r0, [sp, #32]
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	f43f af24 	beq.w	800792e <_strtod_l+0x476>
 8007ae6:	9b04      	ldr	r3, [sp, #16]
 8007ae8:	f04f 0b00 	mov.w	fp, #0
 8007aec:	1b5d      	subs	r5, r3, r5
 8007aee:	9b07      	ldr	r3, [sp, #28]
 8007af0:	f8cd b010 	str.w	fp, [sp, #16]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	bfb4      	ite	lt
 8007af8:	462b      	movlt	r3, r5
 8007afa:	2300      	movge	r3, #0
 8007afc:	930e      	str	r3, [sp, #56]	; 0x38
 8007afe:	9b07      	ldr	r3, [sp, #28]
 8007b00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b04:	9316      	str	r3, [sp, #88]	; 0x58
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	4650      	mov	r0, sl
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	f001 fcf2 	bl	80094f4 <_Balloc>
 8007b10:	9006      	str	r0, [sp, #24]
 8007b12:	2800      	cmp	r0, #0
 8007b14:	f43f af13 	beq.w	800793e <_strtod_l+0x486>
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	300c      	adds	r0, #12
 8007b1c:	691a      	ldr	r2, [r3, #16]
 8007b1e:	f103 010c 	add.w	r1, r3, #12
 8007b22:	3202      	adds	r2, #2
 8007b24:	0092      	lsls	r2, r2, #2
 8007b26:	f001 fcd7 	bl	80094d8 <memcpy>
 8007b2a:	ab1e      	add	r3, sp, #120	; 0x78
 8007b2c:	9301      	str	r3, [sp, #4]
 8007b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	4642      	mov	r2, r8
 8007b34:	464b      	mov	r3, r9
 8007b36:	4650      	mov	r0, sl
 8007b38:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8007b3c:	f002 f8c4 	bl	8009cc8 <__d2b>
 8007b40:	901c      	str	r0, [sp, #112]	; 0x70
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f43f aefb 	beq.w	800793e <_strtod_l+0x486>
 8007b48:	2101      	movs	r1, #1
 8007b4a:	4650      	mov	r0, sl
 8007b4c:	f001 fe16 	bl	800977c <__i2b>
 8007b50:	4603      	mov	r3, r0
 8007b52:	9004      	str	r0, [sp, #16]
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f43f aef2 	beq.w	800793e <_strtod_l+0x486>
 8007b5a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8007b5c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	bfab      	itete	ge
 8007b62:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007b64:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007b66:	18ee      	addge	r6, r5, r3
 8007b68:	1b5c      	sublt	r4, r3, r5
 8007b6a:	9b05      	ldr	r3, [sp, #20]
 8007b6c:	bfa8      	it	ge
 8007b6e:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8007b70:	eba5 0503 	sub.w	r5, r5, r3
 8007b74:	4415      	add	r5, r2
 8007b76:	4b71      	ldr	r3, [pc, #452]	; (8007d3c <_strtod_l+0x884>)
 8007b78:	f105 35ff 	add.w	r5, r5, #4294967295
 8007b7c:	bfb8      	it	lt
 8007b7e:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8007b80:	429d      	cmp	r5, r3
 8007b82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007b86:	f280 80c9 	bge.w	8007d1c <_strtod_l+0x864>
 8007b8a:	1b5b      	subs	r3, r3, r5
 8007b8c:	2b1f      	cmp	r3, #31
 8007b8e:	f04f 0701 	mov.w	r7, #1
 8007b92:	eba2 0203 	sub.w	r2, r2, r3
 8007b96:	f300 80b6 	bgt.w	8007d06 <_strtod_l+0x84e>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	fa07 f303 	lsl.w	r3, r7, r3
 8007ba0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ba2:	18b7      	adds	r7, r6, r2
 8007ba4:	9b05      	ldr	r3, [sp, #20]
 8007ba6:	42be      	cmp	r6, r7
 8007ba8:	4414      	add	r4, r2
 8007baa:	441c      	add	r4, r3
 8007bac:	4633      	mov	r3, r6
 8007bae:	bfa8      	it	ge
 8007bb0:	463b      	movge	r3, r7
 8007bb2:	42a3      	cmp	r3, r4
 8007bb4:	bfa8      	it	ge
 8007bb6:	4623      	movge	r3, r4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfc2      	ittt	gt
 8007bbc:	1aff      	subgt	r7, r7, r3
 8007bbe:	1ae4      	subgt	r4, r4, r3
 8007bc0:	1af6      	subgt	r6, r6, r3
 8007bc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dd17      	ble.n	8007bf8 <_strtod_l+0x740>
 8007bc8:	461a      	mov	r2, r3
 8007bca:	4650      	mov	r0, sl
 8007bcc:	9904      	ldr	r1, [sp, #16]
 8007bce:	f001 fe8f 	bl	80098f0 <__pow5mult>
 8007bd2:	9004      	str	r0, [sp, #16]
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f43f aeb2 	beq.w	800793e <_strtod_l+0x486>
 8007bda:	4601      	mov	r1, r0
 8007bdc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007bde:	4650      	mov	r0, sl
 8007be0:	f001 fde2 	bl	80097a8 <__multiply>
 8007be4:	9009      	str	r0, [sp, #36]	; 0x24
 8007be6:	2800      	cmp	r0, #0
 8007be8:	f43f aea9 	beq.w	800793e <_strtod_l+0x486>
 8007bec:	4650      	mov	r0, sl
 8007bee:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007bf0:	f001 fcc0 	bl	8009574 <_Bfree>
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	931c      	str	r3, [sp, #112]	; 0x70
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	f300 8093 	bgt.w	8007d24 <_strtod_l+0x86c>
 8007bfe:	9b07      	ldr	r3, [sp, #28]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	dd08      	ble.n	8007c16 <_strtod_l+0x75e>
 8007c04:	4650      	mov	r0, sl
 8007c06:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c08:	9906      	ldr	r1, [sp, #24]
 8007c0a:	f001 fe71 	bl	80098f0 <__pow5mult>
 8007c0e:	9006      	str	r0, [sp, #24]
 8007c10:	2800      	cmp	r0, #0
 8007c12:	f43f ae94 	beq.w	800793e <_strtod_l+0x486>
 8007c16:	2c00      	cmp	r4, #0
 8007c18:	dd08      	ble.n	8007c2c <_strtod_l+0x774>
 8007c1a:	4622      	mov	r2, r4
 8007c1c:	4650      	mov	r0, sl
 8007c1e:	9906      	ldr	r1, [sp, #24]
 8007c20:	f001 fec0 	bl	80099a4 <__lshift>
 8007c24:	9006      	str	r0, [sp, #24]
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f ae89 	beq.w	800793e <_strtod_l+0x486>
 8007c2c:	2e00      	cmp	r6, #0
 8007c2e:	dd08      	ble.n	8007c42 <_strtod_l+0x78a>
 8007c30:	4632      	mov	r2, r6
 8007c32:	4650      	mov	r0, sl
 8007c34:	9904      	ldr	r1, [sp, #16]
 8007c36:	f001 feb5 	bl	80099a4 <__lshift>
 8007c3a:	9004      	str	r0, [sp, #16]
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	f43f ae7e 	beq.w	800793e <_strtod_l+0x486>
 8007c42:	4650      	mov	r0, sl
 8007c44:	9a06      	ldr	r2, [sp, #24]
 8007c46:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c48:	f001 ff34 	bl	8009ab4 <__mdiff>
 8007c4c:	4683      	mov	fp, r0
 8007c4e:	2800      	cmp	r0, #0
 8007c50:	f43f ae75 	beq.w	800793e <_strtod_l+0x486>
 8007c54:	2400      	movs	r4, #0
 8007c56:	68c3      	ldr	r3, [r0, #12]
 8007c58:	9904      	ldr	r1, [sp, #16]
 8007c5a:	60c4      	str	r4, [r0, #12]
 8007c5c:	930d      	str	r3, [sp, #52]	; 0x34
 8007c5e:	f001 ff0d 	bl	8009a7c <__mcmp>
 8007c62:	42a0      	cmp	r0, r4
 8007c64:	da70      	bge.n	8007d48 <_strtod_l+0x890>
 8007c66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c68:	ea53 0308 	orrs.w	r3, r3, r8
 8007c6c:	f040 8096 	bne.w	8007d9c <_strtod_l+0x8e4>
 8007c70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	f040 8091 	bne.w	8007d9c <_strtod_l+0x8e4>
 8007c7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c7e:	0d1b      	lsrs	r3, r3, #20
 8007c80:	051b      	lsls	r3, r3, #20
 8007c82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007c86:	f240 8089 	bls.w	8007d9c <_strtod_l+0x8e4>
 8007c8a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007c8e:	b923      	cbnz	r3, 8007c9a <_strtod_l+0x7e2>
 8007c90:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	f340 8081 	ble.w	8007d9c <_strtod_l+0x8e4>
 8007c9a:	4659      	mov	r1, fp
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	4650      	mov	r0, sl
 8007ca0:	f001 fe80 	bl	80099a4 <__lshift>
 8007ca4:	9904      	ldr	r1, [sp, #16]
 8007ca6:	4683      	mov	fp, r0
 8007ca8:	f001 fee8 	bl	8009a7c <__mcmp>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	dd75      	ble.n	8007d9c <_strtod_l+0x8e4>
 8007cb0:	9905      	ldr	r1, [sp, #20]
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	4a22      	ldr	r2, [pc, #136]	; (8007d40 <_strtod_l+0x888>)
 8007cb6:	2900      	cmp	r1, #0
 8007cb8:	f000 8091 	beq.w	8007dde <_strtod_l+0x926>
 8007cbc:	ea02 0109 	and.w	r1, r2, r9
 8007cc0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007cc4:	f300 808b 	bgt.w	8007dde <_strtod_l+0x926>
 8007cc8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ccc:	f77f aea9 	ble.w	8007a22 <_strtod_l+0x56a>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4a1c      	ldr	r2, [pc, #112]	; (8007d44 <_strtod_l+0x88c>)
 8007cd4:	4640      	mov	r0, r8
 8007cd6:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007cda:	4649      	mov	r1, r9
 8007cdc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007ce0:	f7f8 fcae 	bl	8000640 <__aeabi_dmul>
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	4303      	orrs	r3, r0
 8007ce8:	bf08      	it	eq
 8007cea:	2322      	moveq	r3, #34	; 0x22
 8007cec:	4680      	mov	r8, r0
 8007cee:	4689      	mov	r9, r1
 8007cf0:	bf08      	it	eq
 8007cf2:	f8ca 3000 	streq.w	r3, [sl]
 8007cf6:	e62d      	b.n	8007954 <_strtod_l+0x49c>
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	ea03 0808 	and.w	r8, r3, r8
 8007d04:	e6db      	b.n	8007abe <_strtod_l+0x606>
 8007d06:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8007d0a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007d0e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007d12:	35e2      	adds	r5, #226	; 0xe2
 8007d14:	fa07 f505 	lsl.w	r5, r7, r5
 8007d18:	970f      	str	r7, [sp, #60]	; 0x3c
 8007d1a:	e742      	b.n	8007ba2 <_strtod_l+0x6ea>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	2500      	movs	r5, #0
 8007d20:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d22:	e73e      	b.n	8007ba2 <_strtod_l+0x6ea>
 8007d24:	463a      	mov	r2, r7
 8007d26:	4650      	mov	r0, sl
 8007d28:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007d2a:	f001 fe3b 	bl	80099a4 <__lshift>
 8007d2e:	901c      	str	r0, [sp, #112]	; 0x70
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f47f af64 	bne.w	8007bfe <_strtod_l+0x746>
 8007d36:	e602      	b.n	800793e <_strtod_l+0x486>
 8007d38:	0800b0c8 	.word	0x0800b0c8
 8007d3c:	fffffc02 	.word	0xfffffc02
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	39500000 	.word	0x39500000
 8007d48:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d4c:	d166      	bne.n	8007e1c <_strtod_l+0x964>
 8007d4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d54:	b35a      	cbz	r2, 8007dae <_strtod_l+0x8f6>
 8007d56:	4a9c      	ldr	r2, [pc, #624]	; (8007fc8 <_strtod_l+0xb10>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d12c      	bne.n	8007db6 <_strtod_l+0x8fe>
 8007d5c:	9b05      	ldr	r3, [sp, #20]
 8007d5e:	4640      	mov	r0, r8
 8007d60:	b303      	cbz	r3, 8007da4 <_strtod_l+0x8ec>
 8007d62:	464b      	mov	r3, r9
 8007d64:	4a99      	ldr	r2, [pc, #612]	; (8007fcc <_strtod_l+0xb14>)
 8007d66:	f04f 31ff 	mov.w	r1, #4294967295
 8007d6a:	401a      	ands	r2, r3
 8007d6c:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007d70:	d81b      	bhi.n	8007daa <_strtod_l+0x8f2>
 8007d72:	0d12      	lsrs	r2, r2, #20
 8007d74:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007d78:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7c:	4298      	cmp	r0, r3
 8007d7e:	d11a      	bne.n	8007db6 <_strtod_l+0x8fe>
 8007d80:	4b93      	ldr	r3, [pc, #588]	; (8007fd0 <_strtod_l+0xb18>)
 8007d82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d102      	bne.n	8007d8e <_strtod_l+0x8d6>
 8007d88:	3001      	adds	r0, #1
 8007d8a:	f43f add8 	beq.w	800793e <_strtod_l+0x486>
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	4b8e      	ldr	r3, [pc, #568]	; (8007fcc <_strtod_l+0xb14>)
 8007d94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d96:	401a      	ands	r2, r3
 8007d98:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007d9c:	9b05      	ldr	r3, [sp, #20]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d196      	bne.n	8007cd0 <_strtod_l+0x818>
 8007da2:	e5d7      	b.n	8007954 <_strtod_l+0x49c>
 8007da4:	f04f 33ff 	mov.w	r3, #4294967295
 8007da8:	e7e8      	b.n	8007d7c <_strtod_l+0x8c4>
 8007daa:	460b      	mov	r3, r1
 8007dac:	e7e6      	b.n	8007d7c <_strtod_l+0x8c4>
 8007dae:	ea53 0308 	orrs.w	r3, r3, r8
 8007db2:	f43f af7d 	beq.w	8007cb0 <_strtod_l+0x7f8>
 8007db6:	b1e5      	cbz	r5, 8007df2 <_strtod_l+0x93a>
 8007db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dba:	421d      	tst	r5, r3
 8007dbc:	d0ee      	beq.n	8007d9c <_strtod_l+0x8e4>
 8007dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dc0:	4640      	mov	r0, r8
 8007dc2:	4649      	mov	r1, r9
 8007dc4:	9a05      	ldr	r2, [sp, #20]
 8007dc6:	b1c3      	cbz	r3, 8007dfa <_strtod_l+0x942>
 8007dc8:	f7ff fb52 	bl	8007470 <sulp>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007dd4:	f7f8 fa7e 	bl	80002d4 <__adddf3>
 8007dd8:	4680      	mov	r8, r0
 8007dda:	4689      	mov	r9, r1
 8007ddc:	e7de      	b.n	8007d9c <_strtod_l+0x8e4>
 8007dde:	4013      	ands	r3, r2
 8007de0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007de4:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007de8:	f04f 38ff 	mov.w	r8, #4294967295
 8007dec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007df0:	e7d4      	b.n	8007d9c <_strtod_l+0x8e4>
 8007df2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007df4:	ea13 0f08 	tst.w	r3, r8
 8007df8:	e7e0      	b.n	8007dbc <_strtod_l+0x904>
 8007dfa:	f7ff fb39 	bl	8007470 <sulp>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e06:	f7f8 fa63 	bl	80002d0 <__aeabi_dsub>
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	4680      	mov	r8, r0
 8007e10:	4689      	mov	r9, r1
 8007e12:	f7f8 fe7d 	bl	8000b10 <__aeabi_dcmpeq>
 8007e16:	2800      	cmp	r0, #0
 8007e18:	d0c0      	beq.n	8007d9c <_strtod_l+0x8e4>
 8007e1a:	e602      	b.n	8007a22 <_strtod_l+0x56a>
 8007e1c:	4658      	mov	r0, fp
 8007e1e:	9904      	ldr	r1, [sp, #16]
 8007e20:	f001 ffae 	bl	8009d80 <__ratio>
 8007e24:	2200      	movs	r2, #0
 8007e26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	460f      	mov	r7, r1
 8007e2e:	f7f8 fe83 	bl	8000b38 <__aeabi_dcmple>
 8007e32:	2800      	cmp	r0, #0
 8007e34:	d075      	beq.n	8007f22 <_strtod_l+0xa6a>
 8007e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d047      	beq.n	8007ecc <_strtod_l+0xa14>
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	4f65      	ldr	r7, [pc, #404]	; (8007fd4 <_strtod_l+0xb1c>)
 8007e40:	4d64      	ldr	r5, [pc, #400]	; (8007fd4 <_strtod_l+0xb1c>)
 8007e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e48:	0d1b      	lsrs	r3, r3, #20
 8007e4a:	051b      	lsls	r3, r3, #20
 8007e4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e50:	4b61      	ldr	r3, [pc, #388]	; (8007fd8 <_strtod_l+0xb20>)
 8007e52:	429a      	cmp	r2, r3
 8007e54:	f040 80c8 	bne.w	8007fe8 <_strtod_l+0xb30>
 8007e58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e5c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e62:	4640      	mov	r0, r8
 8007e64:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f001 feb3 	bl	8009bd4 <__ulp>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	f7f8 fbe3 	bl	8000640 <__aeabi_dmul>
 8007e7a:	4642      	mov	r2, r8
 8007e7c:	464b      	mov	r3, r9
 8007e7e:	f7f8 fa29 	bl	80002d4 <__adddf3>
 8007e82:	460b      	mov	r3, r1
 8007e84:	4951      	ldr	r1, [pc, #324]	; (8007fcc <_strtod_l+0xb14>)
 8007e86:	4a55      	ldr	r2, [pc, #340]	; (8007fdc <_strtod_l+0xb24>)
 8007e88:	4019      	ands	r1, r3
 8007e8a:	4291      	cmp	r1, r2
 8007e8c:	4680      	mov	r8, r0
 8007e8e:	d95e      	bls.n	8007f4e <_strtod_l+0xa96>
 8007e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e92:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d103      	bne.n	8007ea2 <_strtod_l+0x9ea>
 8007e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	f43f ad4e 	beq.w	800793e <_strtod_l+0x486>
 8007ea2:	f04f 38ff 	mov.w	r8, #4294967295
 8007ea6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007fd0 <_strtod_l+0xb18>
 8007eaa:	4650      	mov	r0, sl
 8007eac:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007eae:	f001 fb61 	bl	8009574 <_Bfree>
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	9906      	ldr	r1, [sp, #24]
 8007eb6:	f001 fb5d 	bl	8009574 <_Bfree>
 8007eba:	4650      	mov	r0, sl
 8007ebc:	9904      	ldr	r1, [sp, #16]
 8007ebe:	f001 fb59 	bl	8009574 <_Bfree>
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	f001 fb55 	bl	8009574 <_Bfree>
 8007eca:	e61c      	b.n	8007b06 <_strtod_l+0x64e>
 8007ecc:	f1b8 0f00 	cmp.w	r8, #0
 8007ed0:	d119      	bne.n	8007f06 <_strtod_l+0xa4e>
 8007ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ed4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ed8:	b9e3      	cbnz	r3, 8007f14 <_strtod_l+0xa5c>
 8007eda:	2200      	movs	r2, #0
 8007edc:	4630      	mov	r0, r6
 8007ede:	4639      	mov	r1, r7
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <_strtod_l+0xb1c>)
 8007ee2:	f7f8 fe1f 	bl	8000b24 <__aeabi_dcmplt>
 8007ee6:	b9c8      	cbnz	r0, 8007f1c <_strtod_l+0xa64>
 8007ee8:	2200      	movs	r2, #0
 8007eea:	4630      	mov	r0, r6
 8007eec:	4639      	mov	r1, r7
 8007eee:	4b3c      	ldr	r3, [pc, #240]	; (8007fe0 <_strtod_l+0xb28>)
 8007ef0:	f7f8 fba6 	bl	8000640 <__aeabi_dmul>
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	460d      	mov	r5, r1
 8007ef8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007efc:	9418      	str	r4, [sp, #96]	; 0x60
 8007efe:	9319      	str	r3, [sp, #100]	; 0x64
 8007f00:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8007f04:	e79d      	b.n	8007e42 <_strtod_l+0x98a>
 8007f06:	f1b8 0f01 	cmp.w	r8, #1
 8007f0a:	d103      	bne.n	8007f14 <_strtod_l+0xa5c>
 8007f0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f43f ad87 	beq.w	8007a22 <_strtod_l+0x56a>
 8007f14:	2600      	movs	r6, #0
 8007f16:	2400      	movs	r4, #0
 8007f18:	4f32      	ldr	r7, [pc, #200]	; (8007fe4 <_strtod_l+0xb2c>)
 8007f1a:	e791      	b.n	8007e40 <_strtod_l+0x988>
 8007f1c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007f1e:	4d30      	ldr	r5, [pc, #192]	; (8007fe0 <_strtod_l+0xb28>)
 8007f20:	e7ea      	b.n	8007ef8 <_strtod_l+0xa40>
 8007f22:	4b2f      	ldr	r3, [pc, #188]	; (8007fe0 <_strtod_l+0xb28>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4630      	mov	r0, r6
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 fb89 	bl	8000640 <__aeabi_dmul>
 8007f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f30:	4604      	mov	r4, r0
 8007f32:	460d      	mov	r5, r1
 8007f34:	b933      	cbnz	r3, 8007f44 <_strtod_l+0xa8c>
 8007f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007f3a:	9010      	str	r0, [sp, #64]	; 0x40
 8007f3c:	9311      	str	r3, [sp, #68]	; 0x44
 8007f3e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007f42:	e77e      	b.n	8007e42 <_strtod_l+0x98a>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007f4c:	e7f7      	b.n	8007f3e <_strtod_l+0xa86>
 8007f4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1a8      	bne.n	8007eaa <_strtod_l+0x9f2>
 8007f58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007f5c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007f5e:	0d1b      	lsrs	r3, r3, #20
 8007f60:	051b      	lsls	r3, r3, #20
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d1a1      	bne.n	8007eaa <_strtod_l+0x9f2>
 8007f66:	4620      	mov	r0, r4
 8007f68:	4629      	mov	r1, r5
 8007f6a:	f7f9 f855 	bl	8001018 <__aeabi_d2lz>
 8007f6e:	f7f8 fb39 	bl	80005e4 <__aeabi_l2d>
 8007f72:	4602      	mov	r2, r0
 8007f74:	460b      	mov	r3, r1
 8007f76:	4620      	mov	r0, r4
 8007f78:	4629      	mov	r1, r5
 8007f7a:	f7f8 f9a9 	bl	80002d0 <__aeabi_dsub>
 8007f7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f84:	ea43 0308 	orr.w	r3, r3, r8
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	460d      	mov	r5, r1
 8007f8e:	d066      	beq.n	800805e <_strtod_l+0xba6>
 8007f90:	a309      	add	r3, pc, #36	; (adr r3, 8007fb8 <_strtod_l+0xb00>)
 8007f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f96:	f7f8 fdc5 	bl	8000b24 <__aeabi_dcmplt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	f47f acda 	bne.w	8007954 <_strtod_l+0x49c>
 8007fa0:	a307      	add	r3, pc, #28	; (adr r3, 8007fc0 <_strtod_l+0xb08>)
 8007fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f7f8 fdd9 	bl	8000b60 <__aeabi_dcmpgt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f af7b 	beq.w	8007eaa <_strtod_l+0x9f2>
 8007fb4:	e4ce      	b.n	8007954 <_strtod_l+0x49c>
 8007fb6:	bf00      	nop
 8007fb8:	94a03595 	.word	0x94a03595
 8007fbc:	3fdfffff 	.word	0x3fdfffff
 8007fc0:	35afe535 	.word	0x35afe535
 8007fc4:	3fe00000 	.word	0x3fe00000
 8007fc8:	000fffff 	.word	0x000fffff
 8007fcc:	7ff00000 	.word	0x7ff00000
 8007fd0:	7fefffff 	.word	0x7fefffff
 8007fd4:	3ff00000 	.word	0x3ff00000
 8007fd8:	7fe00000 	.word	0x7fe00000
 8007fdc:	7c9fffff 	.word	0x7c9fffff
 8007fe0:	3fe00000 	.word	0x3fe00000
 8007fe4:	bff00000 	.word	0xbff00000
 8007fe8:	9b05      	ldr	r3, [sp, #20]
 8007fea:	b313      	cbz	r3, 8008032 <_strtod_l+0xb7a>
 8007fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007ff2:	d81e      	bhi.n	8008032 <_strtod_l+0xb7a>
 8007ff4:	a326      	add	r3, pc, #152	; (adr r3, 8008090 <_strtod_l+0xbd8>)
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7f8 fd9b 	bl	8000b38 <__aeabi_dcmple>
 8008002:	b190      	cbz	r0, 800802a <_strtod_l+0xb72>
 8008004:	4629      	mov	r1, r5
 8008006:	4620      	mov	r0, r4
 8008008:	f7f8 fdf2 	bl	8000bf0 <__aeabi_d2uiz>
 800800c:	2801      	cmp	r0, #1
 800800e:	bf38      	it	cc
 8008010:	2001      	movcc	r0, #1
 8008012:	f7f8 fa9b 	bl	800054c <__aeabi_ui2d>
 8008016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008018:	4604      	mov	r4, r0
 800801a:	460d      	mov	r5, r1
 800801c:	b9d3      	cbnz	r3, 8008054 <_strtod_l+0xb9c>
 800801e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008022:	9012      	str	r0, [sp, #72]	; 0x48
 8008024:	9313      	str	r3, [sp, #76]	; 0x4c
 8008026:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800802a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800802c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8008030:	1a9f      	subs	r7, r3, r2
 8008032:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008036:	f001 fdcd 	bl	8009bd4 <__ulp>
 800803a:	4602      	mov	r2, r0
 800803c:	460b      	mov	r3, r1
 800803e:	4630      	mov	r0, r6
 8008040:	4639      	mov	r1, r7
 8008042:	f7f8 fafd 	bl	8000640 <__aeabi_dmul>
 8008046:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800804a:	f7f8 f943 	bl	80002d4 <__adddf3>
 800804e:	4680      	mov	r8, r0
 8008050:	4689      	mov	r9, r1
 8008052:	e77e      	b.n	8007f52 <_strtod_l+0xa9a>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800805c:	e7e3      	b.n	8008026 <_strtod_l+0xb6e>
 800805e:	a30e      	add	r3, pc, #56	; (adr r3, 8008098 <_strtod_l+0xbe0>)
 8008060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008064:	f7f8 fd5e 	bl	8000b24 <__aeabi_dcmplt>
 8008068:	e7a1      	b.n	8007fae <_strtod_l+0xaf6>
 800806a:	2300      	movs	r3, #0
 800806c:	930c      	str	r3, [sp, #48]	; 0x30
 800806e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008070:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008072:	6013      	str	r3, [r2, #0]
 8008074:	f7ff ba65 	b.w	8007542 <_strtod_l+0x8a>
 8008078:	2b65      	cmp	r3, #101	; 0x65
 800807a:	f43f ab5c 	beq.w	8007736 <_strtod_l+0x27e>
 800807e:	2b45      	cmp	r3, #69	; 0x45
 8008080:	f43f ab59 	beq.w	8007736 <_strtod_l+0x27e>
 8008084:	2201      	movs	r2, #1
 8008086:	f7ff bb8d 	b.w	80077a4 <_strtod_l+0x2ec>
 800808a:	bf00      	nop
 800808c:	f3af 8000 	nop.w
 8008090:	ffc00000 	.word	0xffc00000
 8008094:	41dfffff 	.word	0x41dfffff
 8008098:	94a03595 	.word	0x94a03595
 800809c:	3fcfffff 	.word	0x3fcfffff

080080a0 <strtod>:
 80080a0:	460a      	mov	r2, r1
 80080a2:	4601      	mov	r1, r0
 80080a4:	4802      	ldr	r0, [pc, #8]	; (80080b0 <strtod+0x10>)
 80080a6:	4b03      	ldr	r3, [pc, #12]	; (80080b4 <strtod+0x14>)
 80080a8:	6800      	ldr	r0, [r0, #0]
 80080aa:	f7ff ba05 	b.w	80074b8 <_strtod_l>
 80080ae:	bf00      	nop
 80080b0:	20000018 	.word	0x20000018
 80080b4:	20000080 	.word	0x20000080

080080b8 <quorem>:
 80080b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	6903      	ldr	r3, [r0, #16]
 80080be:	690c      	ldr	r4, [r1, #16]
 80080c0:	4607      	mov	r7, r0
 80080c2:	42a3      	cmp	r3, r4
 80080c4:	f2c0 8083 	blt.w	80081ce <quorem+0x116>
 80080c8:	3c01      	subs	r4, #1
 80080ca:	f100 0514 	add.w	r5, r0, #20
 80080ce:	f101 0814 	add.w	r8, r1, #20
 80080d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e0:	3301      	adds	r3, #1
 80080e2:	429a      	cmp	r2, r3
 80080e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80080e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080f0:	d332      	bcc.n	8008158 <quorem+0xa0>
 80080f2:	f04f 0e00 	mov.w	lr, #0
 80080f6:	4640      	mov	r0, r8
 80080f8:	46ac      	mov	ip, r5
 80080fa:	46f2      	mov	sl, lr
 80080fc:	f850 2b04 	ldr.w	r2, [r0], #4
 8008100:	b293      	uxth	r3, r2
 8008102:	fb06 e303 	mla	r3, r6, r3, lr
 8008106:	0c12      	lsrs	r2, r2, #16
 8008108:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800810c:	fb06 e202 	mla	r2, r6, r2, lr
 8008110:	b29b      	uxth	r3, r3
 8008112:	ebaa 0303 	sub.w	r3, sl, r3
 8008116:	f8dc a000 	ldr.w	sl, [ip]
 800811a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800811e:	fa1f fa8a 	uxth.w	sl, sl
 8008122:	4453      	add	r3, sl
 8008124:	fa1f fa82 	uxth.w	sl, r2
 8008128:	f8dc 2000 	ldr.w	r2, [ip]
 800812c:	4581      	cmp	r9, r0
 800812e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008132:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008136:	b29b      	uxth	r3, r3
 8008138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800813c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008140:	f84c 3b04 	str.w	r3, [ip], #4
 8008144:	d2da      	bcs.n	80080fc <quorem+0x44>
 8008146:	f855 300b 	ldr.w	r3, [r5, fp]
 800814a:	b92b      	cbnz	r3, 8008158 <quorem+0xa0>
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	3b04      	subs	r3, #4
 8008150:	429d      	cmp	r5, r3
 8008152:	461a      	mov	r2, r3
 8008154:	d32f      	bcc.n	80081b6 <quorem+0xfe>
 8008156:	613c      	str	r4, [r7, #16]
 8008158:	4638      	mov	r0, r7
 800815a:	f001 fc8f 	bl	8009a7c <__mcmp>
 800815e:	2800      	cmp	r0, #0
 8008160:	db25      	blt.n	80081ae <quorem+0xf6>
 8008162:	4628      	mov	r0, r5
 8008164:	f04f 0c00 	mov.w	ip, #0
 8008168:	3601      	adds	r6, #1
 800816a:	f858 1b04 	ldr.w	r1, [r8], #4
 800816e:	f8d0 e000 	ldr.w	lr, [r0]
 8008172:	b28b      	uxth	r3, r1
 8008174:	ebac 0303 	sub.w	r3, ip, r3
 8008178:	fa1f f28e 	uxth.w	r2, lr
 800817c:	4413      	add	r3, r2
 800817e:	0c0a      	lsrs	r2, r1, #16
 8008180:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008188:	b29b      	uxth	r3, r3
 800818a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800818e:	45c1      	cmp	r9, r8
 8008190:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008194:	f840 3b04 	str.w	r3, [r0], #4
 8008198:	d2e7      	bcs.n	800816a <quorem+0xb2>
 800819a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800819e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081a2:	b922      	cbnz	r2, 80081ae <quorem+0xf6>
 80081a4:	3b04      	subs	r3, #4
 80081a6:	429d      	cmp	r5, r3
 80081a8:	461a      	mov	r2, r3
 80081aa:	d30a      	bcc.n	80081c2 <quorem+0x10a>
 80081ac:	613c      	str	r4, [r7, #16]
 80081ae:	4630      	mov	r0, r6
 80081b0:	b003      	add	sp, #12
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	6812      	ldr	r2, [r2, #0]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	2a00      	cmp	r2, #0
 80081bc:	d1cb      	bne.n	8008156 <quorem+0x9e>
 80081be:	3c01      	subs	r4, #1
 80081c0:	e7c6      	b.n	8008150 <quorem+0x98>
 80081c2:	6812      	ldr	r2, [r2, #0]
 80081c4:	3b04      	subs	r3, #4
 80081c6:	2a00      	cmp	r2, #0
 80081c8:	d1f0      	bne.n	80081ac <quorem+0xf4>
 80081ca:	3c01      	subs	r4, #1
 80081cc:	e7eb      	b.n	80081a6 <quorem+0xee>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e7ee      	b.n	80081b0 <quorem+0xf8>
 80081d2:	0000      	movs	r0, r0
 80081d4:	0000      	movs	r0, r0
	...

080081d8 <_dtoa_r>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	4616      	mov	r6, r2
 80081de:	461f      	mov	r7, r3
 80081e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081e2:	b099      	sub	sp, #100	; 0x64
 80081e4:	4605      	mov	r5, r0
 80081e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80081ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80081ee:	b974      	cbnz	r4, 800820e <_dtoa_r+0x36>
 80081f0:	2010      	movs	r0, #16
 80081f2:	f001 f949 	bl	8009488 <malloc>
 80081f6:	4602      	mov	r2, r0
 80081f8:	6268      	str	r0, [r5, #36]	; 0x24
 80081fa:	b920      	cbnz	r0, 8008206 <_dtoa_r+0x2e>
 80081fc:	21ea      	movs	r1, #234	; 0xea
 80081fe:	4bae      	ldr	r3, [pc, #696]	; (80084b8 <_dtoa_r+0x2e0>)
 8008200:	48ae      	ldr	r0, [pc, #696]	; (80084bc <_dtoa_r+0x2e4>)
 8008202:	f002 f863 	bl	800a2cc <__assert_func>
 8008206:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800820a:	6004      	str	r4, [r0, #0]
 800820c:	60c4      	str	r4, [r0, #12]
 800820e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008210:	6819      	ldr	r1, [r3, #0]
 8008212:	b151      	cbz	r1, 800822a <_dtoa_r+0x52>
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	2301      	movs	r3, #1
 8008218:	4093      	lsls	r3, r2
 800821a:	604a      	str	r2, [r1, #4]
 800821c:	608b      	str	r3, [r1, #8]
 800821e:	4628      	mov	r0, r5
 8008220:	f001 f9a8 	bl	8009574 <_Bfree>
 8008224:	2200      	movs	r2, #0
 8008226:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	1e3b      	subs	r3, r7, #0
 800822c:	bfaf      	iteee	ge
 800822e:	2300      	movge	r3, #0
 8008230:	2201      	movlt	r2, #1
 8008232:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008236:	9305      	strlt	r3, [sp, #20]
 8008238:	bfa8      	it	ge
 800823a:	f8c8 3000 	strge.w	r3, [r8]
 800823e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008242:	4b9f      	ldr	r3, [pc, #636]	; (80084c0 <_dtoa_r+0x2e8>)
 8008244:	bfb8      	it	lt
 8008246:	f8c8 2000 	strlt.w	r2, [r8]
 800824a:	ea33 0309 	bics.w	r3, r3, r9
 800824e:	d119      	bne.n	8008284 <_dtoa_r+0xac>
 8008250:	f242 730f 	movw	r3, #9999	; 0x270f
 8008254:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008256:	6013      	str	r3, [r2, #0]
 8008258:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800825c:	4333      	orrs	r3, r6
 800825e:	f000 8580 	beq.w	8008d62 <_dtoa_r+0xb8a>
 8008262:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008264:	b953      	cbnz	r3, 800827c <_dtoa_r+0xa4>
 8008266:	4b97      	ldr	r3, [pc, #604]	; (80084c4 <_dtoa_r+0x2ec>)
 8008268:	e022      	b.n	80082b0 <_dtoa_r+0xd8>
 800826a:	4b97      	ldr	r3, [pc, #604]	; (80084c8 <_dtoa_r+0x2f0>)
 800826c:	9308      	str	r3, [sp, #32]
 800826e:	3308      	adds	r3, #8
 8008270:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008272:	6013      	str	r3, [r2, #0]
 8008274:	9808      	ldr	r0, [sp, #32]
 8008276:	b019      	add	sp, #100	; 0x64
 8008278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827c:	4b91      	ldr	r3, [pc, #580]	; (80084c4 <_dtoa_r+0x2ec>)
 800827e:	9308      	str	r3, [sp, #32]
 8008280:	3303      	adds	r3, #3
 8008282:	e7f5      	b.n	8008270 <_dtoa_r+0x98>
 8008284:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008288:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800828c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008290:	2200      	movs	r2, #0
 8008292:	2300      	movs	r3, #0
 8008294:	f7f8 fc3c 	bl	8000b10 <__aeabi_dcmpeq>
 8008298:	4680      	mov	r8, r0
 800829a:	b158      	cbz	r0, 80082b4 <_dtoa_r+0xdc>
 800829c:	2301      	movs	r3, #1
 800829e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8559 	beq.w	8008d5c <_dtoa_r+0xb84>
 80082aa:	4888      	ldr	r0, [pc, #544]	; (80084cc <_dtoa_r+0x2f4>)
 80082ac:	6018      	str	r0, [r3, #0]
 80082ae:	1e43      	subs	r3, r0, #1
 80082b0:	9308      	str	r3, [sp, #32]
 80082b2:	e7df      	b.n	8008274 <_dtoa_r+0x9c>
 80082b4:	ab16      	add	r3, sp, #88	; 0x58
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	ab17      	add	r3, sp, #92	; 0x5c
 80082ba:	9300      	str	r3, [sp, #0]
 80082bc:	4628      	mov	r0, r5
 80082be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80082c2:	f001 fd01 	bl	8009cc8 <__d2b>
 80082c6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80082ca:	4682      	mov	sl, r0
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	d07e      	beq.n	80083ce <_dtoa_r+0x1f6>
 80082d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80082d6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80082da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082de:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80082e2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80082e6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b78      	ldr	r3, [pc, #480]	; (80084d0 <_dtoa_r+0x2f8>)
 80082ee:	f7f7 ffef 	bl	80002d0 <__aeabi_dsub>
 80082f2:	a36b      	add	r3, pc, #428	; (adr r3, 80084a0 <_dtoa_r+0x2c8>)
 80082f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f8:	f7f8 f9a2 	bl	8000640 <__aeabi_dmul>
 80082fc:	a36a      	add	r3, pc, #424	; (adr r3, 80084a8 <_dtoa_r+0x2d0>)
 80082fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008302:	f7f7 ffe7 	bl	80002d4 <__adddf3>
 8008306:	4606      	mov	r6, r0
 8008308:	4620      	mov	r0, r4
 800830a:	460f      	mov	r7, r1
 800830c:	f7f8 f92e 	bl	800056c <__aeabi_i2d>
 8008310:	a367      	add	r3, pc, #412	; (adr r3, 80084b0 <_dtoa_r+0x2d8>)
 8008312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008316:	f7f8 f993 	bl	8000640 <__aeabi_dmul>
 800831a:	4602      	mov	r2, r0
 800831c:	460b      	mov	r3, r1
 800831e:	4630      	mov	r0, r6
 8008320:	4639      	mov	r1, r7
 8008322:	f7f7 ffd7 	bl	80002d4 <__adddf3>
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	f7f8 fc39 	bl	8000ba0 <__aeabi_d2iz>
 800832e:	2200      	movs	r2, #0
 8008330:	4681      	mov	r9, r0
 8008332:	2300      	movs	r3, #0
 8008334:	4630      	mov	r0, r6
 8008336:	4639      	mov	r1, r7
 8008338:	f7f8 fbf4 	bl	8000b24 <__aeabi_dcmplt>
 800833c:	b148      	cbz	r0, 8008352 <_dtoa_r+0x17a>
 800833e:	4648      	mov	r0, r9
 8008340:	f7f8 f914 	bl	800056c <__aeabi_i2d>
 8008344:	4632      	mov	r2, r6
 8008346:	463b      	mov	r3, r7
 8008348:	f7f8 fbe2 	bl	8000b10 <__aeabi_dcmpeq>
 800834c:	b908      	cbnz	r0, 8008352 <_dtoa_r+0x17a>
 800834e:	f109 39ff 	add.w	r9, r9, #4294967295
 8008352:	f1b9 0f16 	cmp.w	r9, #22
 8008356:	d857      	bhi.n	8008408 <_dtoa_r+0x230>
 8008358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800835c:	4b5d      	ldr	r3, [pc, #372]	; (80084d4 <_dtoa_r+0x2fc>)
 800835e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008366:	f7f8 fbdd 	bl	8000b24 <__aeabi_dcmplt>
 800836a:	2800      	cmp	r0, #0
 800836c:	d04e      	beq.n	800840c <_dtoa_r+0x234>
 800836e:	2300      	movs	r3, #0
 8008370:	f109 39ff 	add.w	r9, r9, #4294967295
 8008374:	930f      	str	r3, [sp, #60]	; 0x3c
 8008376:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008378:	1b1c      	subs	r4, r3, r4
 800837a:	1e63      	subs	r3, r4, #1
 800837c:	9309      	str	r3, [sp, #36]	; 0x24
 800837e:	bf49      	itett	mi
 8008380:	f1c4 0301 	rsbmi	r3, r4, #1
 8008384:	2300      	movpl	r3, #0
 8008386:	9306      	strmi	r3, [sp, #24]
 8008388:	2300      	movmi	r3, #0
 800838a:	bf54      	ite	pl
 800838c:	9306      	strpl	r3, [sp, #24]
 800838e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008390:	f1b9 0f00 	cmp.w	r9, #0
 8008394:	db3c      	blt.n	8008410 <_dtoa_r+0x238>
 8008396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008398:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800839c:	444b      	add	r3, r9
 800839e:	9309      	str	r3, [sp, #36]	; 0x24
 80083a0:	2300      	movs	r3, #0
 80083a2:	930a      	str	r3, [sp, #40]	; 0x28
 80083a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083a6:	2b09      	cmp	r3, #9
 80083a8:	d86c      	bhi.n	8008484 <_dtoa_r+0x2ac>
 80083aa:	2b05      	cmp	r3, #5
 80083ac:	bfc4      	itt	gt
 80083ae:	3b04      	subgt	r3, #4
 80083b0:	9322      	strgt	r3, [sp, #136]	; 0x88
 80083b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80083b4:	bfc8      	it	gt
 80083b6:	2400      	movgt	r4, #0
 80083b8:	f1a3 0302 	sub.w	r3, r3, #2
 80083bc:	bfd8      	it	le
 80083be:	2401      	movle	r4, #1
 80083c0:	2b03      	cmp	r3, #3
 80083c2:	f200 808b 	bhi.w	80084dc <_dtoa_r+0x304>
 80083c6:	e8df f003 	tbb	[pc, r3]
 80083ca:	4f2d      	.short	0x4f2d
 80083cc:	5b4d      	.short	0x5b4d
 80083ce:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80083d2:	441c      	add	r4, r3
 80083d4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80083d8:	2b20      	cmp	r3, #32
 80083da:	bfc3      	ittte	gt
 80083dc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083e0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80083e4:	fa09 f303 	lslgt.w	r3, r9, r3
 80083e8:	f1c3 0320 	rsble	r3, r3, #32
 80083ec:	bfc6      	itte	gt
 80083ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083f2:	4318      	orrgt	r0, r3
 80083f4:	fa06 f003 	lslle.w	r0, r6, r3
 80083f8:	f7f8 f8a8 	bl	800054c <__aeabi_ui2d>
 80083fc:	2301      	movs	r3, #1
 80083fe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8008402:	3c01      	subs	r4, #1
 8008404:	9313      	str	r3, [sp, #76]	; 0x4c
 8008406:	e770      	b.n	80082ea <_dtoa_r+0x112>
 8008408:	2301      	movs	r3, #1
 800840a:	e7b3      	b.n	8008374 <_dtoa_r+0x19c>
 800840c:	900f      	str	r0, [sp, #60]	; 0x3c
 800840e:	e7b2      	b.n	8008376 <_dtoa_r+0x19e>
 8008410:	9b06      	ldr	r3, [sp, #24]
 8008412:	eba3 0309 	sub.w	r3, r3, r9
 8008416:	9306      	str	r3, [sp, #24]
 8008418:	f1c9 0300 	rsb	r3, r9, #0
 800841c:	930a      	str	r3, [sp, #40]	; 0x28
 800841e:	2300      	movs	r3, #0
 8008420:	930e      	str	r3, [sp, #56]	; 0x38
 8008422:	e7bf      	b.n	80083a4 <_dtoa_r+0x1cc>
 8008424:	2300      	movs	r3, #0
 8008426:	930b      	str	r3, [sp, #44]	; 0x2c
 8008428:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800842a:	2b00      	cmp	r3, #0
 800842c:	dc59      	bgt.n	80084e2 <_dtoa_r+0x30a>
 800842e:	f04f 0b01 	mov.w	fp, #1
 8008432:	465b      	mov	r3, fp
 8008434:	f8cd b008 	str.w	fp, [sp, #8]
 8008438:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800843c:	2200      	movs	r2, #0
 800843e:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8008440:	6042      	str	r2, [r0, #4]
 8008442:	2204      	movs	r2, #4
 8008444:	f102 0614 	add.w	r6, r2, #20
 8008448:	429e      	cmp	r6, r3
 800844a:	6841      	ldr	r1, [r0, #4]
 800844c:	d94f      	bls.n	80084ee <_dtoa_r+0x316>
 800844e:	4628      	mov	r0, r5
 8008450:	f001 f850 	bl	80094f4 <_Balloc>
 8008454:	9008      	str	r0, [sp, #32]
 8008456:	2800      	cmp	r0, #0
 8008458:	d14d      	bne.n	80084f6 <_dtoa_r+0x31e>
 800845a:	4602      	mov	r2, r0
 800845c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008460:	4b1d      	ldr	r3, [pc, #116]	; (80084d8 <_dtoa_r+0x300>)
 8008462:	e6cd      	b.n	8008200 <_dtoa_r+0x28>
 8008464:	2301      	movs	r3, #1
 8008466:	e7de      	b.n	8008426 <_dtoa_r+0x24e>
 8008468:	2300      	movs	r3, #0
 800846a:	930b      	str	r3, [sp, #44]	; 0x2c
 800846c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800846e:	eb09 0b03 	add.w	fp, r9, r3
 8008472:	f10b 0301 	add.w	r3, fp, #1
 8008476:	2b01      	cmp	r3, #1
 8008478:	9302      	str	r3, [sp, #8]
 800847a:	bfb8      	it	lt
 800847c:	2301      	movlt	r3, #1
 800847e:	e7dd      	b.n	800843c <_dtoa_r+0x264>
 8008480:	2301      	movs	r3, #1
 8008482:	e7f2      	b.n	800846a <_dtoa_r+0x292>
 8008484:	2401      	movs	r4, #1
 8008486:	2300      	movs	r3, #0
 8008488:	940b      	str	r4, [sp, #44]	; 0x2c
 800848a:	9322      	str	r3, [sp, #136]	; 0x88
 800848c:	f04f 3bff 	mov.w	fp, #4294967295
 8008490:	2200      	movs	r2, #0
 8008492:	2312      	movs	r3, #18
 8008494:	f8cd b008 	str.w	fp, [sp, #8]
 8008498:	9223      	str	r2, [sp, #140]	; 0x8c
 800849a:	e7cf      	b.n	800843c <_dtoa_r+0x264>
 800849c:	f3af 8000 	nop.w
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800b0fd 	.word	0x0800b0fd
 80084bc:	0800b114 	.word	0x0800b114
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800b0f9 	.word	0x0800b0f9
 80084c8:	0800b0f0 	.word	0x0800b0f0
 80084cc:	0800b079 	.word	0x0800b079
 80084d0:	3ff80000 	.word	0x3ff80000
 80084d4:	0800b290 	.word	0x0800b290
 80084d8:	0800b173 	.word	0x0800b173
 80084dc:	2301      	movs	r3, #1
 80084de:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e0:	e7d4      	b.n	800848c <_dtoa_r+0x2b4>
 80084e2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80084e6:	465b      	mov	r3, fp
 80084e8:	f8cd b008 	str.w	fp, [sp, #8]
 80084ec:	e7a6      	b.n	800843c <_dtoa_r+0x264>
 80084ee:	3101      	adds	r1, #1
 80084f0:	6041      	str	r1, [r0, #4]
 80084f2:	0052      	lsls	r2, r2, #1
 80084f4:	e7a6      	b.n	8008444 <_dtoa_r+0x26c>
 80084f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80084f8:	9a08      	ldr	r2, [sp, #32]
 80084fa:	601a      	str	r2, [r3, #0]
 80084fc:	9b02      	ldr	r3, [sp, #8]
 80084fe:	2b0e      	cmp	r3, #14
 8008500:	f200 80a8 	bhi.w	8008654 <_dtoa_r+0x47c>
 8008504:	2c00      	cmp	r4, #0
 8008506:	f000 80a5 	beq.w	8008654 <_dtoa_r+0x47c>
 800850a:	f1b9 0f00 	cmp.w	r9, #0
 800850e:	dd34      	ble.n	800857a <_dtoa_r+0x3a2>
 8008510:	4a9a      	ldr	r2, [pc, #616]	; (800877c <_dtoa_r+0x5a4>)
 8008512:	f009 030f 	and.w	r3, r9, #15
 8008516:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800851a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800851e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008522:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008526:	ea4f 1429 	mov.w	r4, r9, asr #4
 800852a:	d016      	beq.n	800855a <_dtoa_r+0x382>
 800852c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008530:	4b93      	ldr	r3, [pc, #588]	; (8008780 <_dtoa_r+0x5a8>)
 8008532:	2703      	movs	r7, #3
 8008534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008538:	f7f8 f9ac 	bl	8000894 <__aeabi_ddiv>
 800853c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008540:	f004 040f 	and.w	r4, r4, #15
 8008544:	4e8e      	ldr	r6, [pc, #568]	; (8008780 <_dtoa_r+0x5a8>)
 8008546:	b954      	cbnz	r4, 800855e <_dtoa_r+0x386>
 8008548:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800854c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008550:	f7f8 f9a0 	bl	8000894 <__aeabi_ddiv>
 8008554:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008558:	e029      	b.n	80085ae <_dtoa_r+0x3d6>
 800855a:	2702      	movs	r7, #2
 800855c:	e7f2      	b.n	8008544 <_dtoa_r+0x36c>
 800855e:	07e1      	lsls	r1, r4, #31
 8008560:	d508      	bpl.n	8008574 <_dtoa_r+0x39c>
 8008562:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008566:	e9d6 2300 	ldrd	r2, r3, [r6]
 800856a:	f7f8 f869 	bl	8000640 <__aeabi_dmul>
 800856e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008572:	3701      	adds	r7, #1
 8008574:	1064      	asrs	r4, r4, #1
 8008576:	3608      	adds	r6, #8
 8008578:	e7e5      	b.n	8008546 <_dtoa_r+0x36e>
 800857a:	f000 80a5 	beq.w	80086c8 <_dtoa_r+0x4f0>
 800857e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008582:	f1c9 0400 	rsb	r4, r9, #0
 8008586:	4b7d      	ldr	r3, [pc, #500]	; (800877c <_dtoa_r+0x5a4>)
 8008588:	f004 020f 	and.w	r2, r4, #15
 800858c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	f7f8 f854 	bl	8000640 <__aeabi_dmul>
 8008598:	2702      	movs	r7, #2
 800859a:	2300      	movs	r3, #0
 800859c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085a0:	4e77      	ldr	r6, [pc, #476]	; (8008780 <_dtoa_r+0x5a8>)
 80085a2:	1124      	asrs	r4, r4, #4
 80085a4:	2c00      	cmp	r4, #0
 80085a6:	f040 8084 	bne.w	80086b2 <_dtoa_r+0x4da>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1d2      	bne.n	8008554 <_dtoa_r+0x37c>
 80085ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f000 808b 	beq.w	80086cc <_dtoa_r+0x4f4>
 80085b6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80085ba:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80085be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085c2:	2200      	movs	r2, #0
 80085c4:	4b6f      	ldr	r3, [pc, #444]	; (8008784 <_dtoa_r+0x5ac>)
 80085c6:	f7f8 faad 	bl	8000b24 <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d07e      	beq.n	80086cc <_dtoa_r+0x4f4>
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d07b      	beq.n	80086cc <_dtoa_r+0x4f4>
 80085d4:	f1bb 0f00 	cmp.w	fp, #0
 80085d8:	dd38      	ble.n	800864c <_dtoa_r+0x474>
 80085da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80085de:	2200      	movs	r2, #0
 80085e0:	4b69      	ldr	r3, [pc, #420]	; (8008788 <_dtoa_r+0x5b0>)
 80085e2:	f7f8 f82d 	bl	8000640 <__aeabi_dmul>
 80085e6:	465c      	mov	r4, fp
 80085e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085ec:	f109 38ff 	add.w	r8, r9, #4294967295
 80085f0:	3701      	adds	r7, #1
 80085f2:	4638      	mov	r0, r7
 80085f4:	f7f7 ffba 	bl	800056c <__aeabi_i2d>
 80085f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085fc:	f7f8 f820 	bl	8000640 <__aeabi_dmul>
 8008600:	2200      	movs	r2, #0
 8008602:	4b62      	ldr	r3, [pc, #392]	; (800878c <_dtoa_r+0x5b4>)
 8008604:	f7f7 fe66 	bl	80002d4 <__adddf3>
 8008608:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800860c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008610:	9611      	str	r6, [sp, #68]	; 0x44
 8008612:	2c00      	cmp	r4, #0
 8008614:	d15d      	bne.n	80086d2 <_dtoa_r+0x4fa>
 8008616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800861a:	2200      	movs	r2, #0
 800861c:	4b5c      	ldr	r3, [pc, #368]	; (8008790 <_dtoa_r+0x5b8>)
 800861e:	f7f7 fe57 	bl	80002d0 <__aeabi_dsub>
 8008622:	4602      	mov	r2, r0
 8008624:	460b      	mov	r3, r1
 8008626:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800862a:	4633      	mov	r3, r6
 800862c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800862e:	f7f8 fa97 	bl	8000b60 <__aeabi_dcmpgt>
 8008632:	2800      	cmp	r0, #0
 8008634:	f040 829e 	bne.w	8008b74 <_dtoa_r+0x99c>
 8008638:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800863c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800863e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008642:	f7f8 fa6f 	bl	8000b24 <__aeabi_dcmplt>
 8008646:	2800      	cmp	r0, #0
 8008648:	f040 8292 	bne.w	8008b70 <_dtoa_r+0x998>
 800864c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008650:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008654:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008656:	2b00      	cmp	r3, #0
 8008658:	f2c0 8153 	blt.w	8008902 <_dtoa_r+0x72a>
 800865c:	f1b9 0f0e 	cmp.w	r9, #14
 8008660:	f300 814f 	bgt.w	8008902 <_dtoa_r+0x72a>
 8008664:	4b45      	ldr	r3, [pc, #276]	; (800877c <_dtoa_r+0x5a4>)
 8008666:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800866a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800866e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008672:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008674:	2b00      	cmp	r3, #0
 8008676:	f280 80db 	bge.w	8008830 <_dtoa_r+0x658>
 800867a:	9b02      	ldr	r3, [sp, #8]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f300 80d7 	bgt.w	8008830 <_dtoa_r+0x658>
 8008682:	f040 8274 	bne.w	8008b6e <_dtoa_r+0x996>
 8008686:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800868a:	2200      	movs	r2, #0
 800868c:	4b40      	ldr	r3, [pc, #256]	; (8008790 <_dtoa_r+0x5b8>)
 800868e:	f7f7 ffd7 	bl	8000640 <__aeabi_dmul>
 8008692:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008696:	f7f8 fa59 	bl	8000b4c <__aeabi_dcmpge>
 800869a:	9c02      	ldr	r4, [sp, #8]
 800869c:	4626      	mov	r6, r4
 800869e:	2800      	cmp	r0, #0
 80086a0:	f040 824a 	bne.w	8008b38 <_dtoa_r+0x960>
 80086a4:	2331      	movs	r3, #49	; 0x31
 80086a6:	9f08      	ldr	r7, [sp, #32]
 80086a8:	f109 0901 	add.w	r9, r9, #1
 80086ac:	f807 3b01 	strb.w	r3, [r7], #1
 80086b0:	e246      	b.n	8008b40 <_dtoa_r+0x968>
 80086b2:	07e2      	lsls	r2, r4, #31
 80086b4:	d505      	bpl.n	80086c2 <_dtoa_r+0x4ea>
 80086b6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086ba:	f7f7 ffc1 	bl	8000640 <__aeabi_dmul>
 80086be:	2301      	movs	r3, #1
 80086c0:	3701      	adds	r7, #1
 80086c2:	1064      	asrs	r4, r4, #1
 80086c4:	3608      	adds	r6, #8
 80086c6:	e76d      	b.n	80085a4 <_dtoa_r+0x3cc>
 80086c8:	2702      	movs	r7, #2
 80086ca:	e770      	b.n	80085ae <_dtoa_r+0x3d6>
 80086cc:	46c8      	mov	r8, r9
 80086ce:	9c02      	ldr	r4, [sp, #8]
 80086d0:	e78f      	b.n	80085f2 <_dtoa_r+0x41a>
 80086d2:	9908      	ldr	r1, [sp, #32]
 80086d4:	4b29      	ldr	r3, [pc, #164]	; (800877c <_dtoa_r+0x5a4>)
 80086d6:	4421      	add	r1, r4
 80086d8:	9112      	str	r1, [sp, #72]	; 0x48
 80086da:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80086dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086e0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80086e4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086e8:	2900      	cmp	r1, #0
 80086ea:	d055      	beq.n	8008798 <_dtoa_r+0x5c0>
 80086ec:	2000      	movs	r0, #0
 80086ee:	4929      	ldr	r1, [pc, #164]	; (8008794 <_dtoa_r+0x5bc>)
 80086f0:	f7f8 f8d0 	bl	8000894 <__aeabi_ddiv>
 80086f4:	463b      	mov	r3, r7
 80086f6:	4632      	mov	r2, r6
 80086f8:	f7f7 fdea 	bl	80002d0 <__aeabi_dsub>
 80086fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008700:	9f08      	ldr	r7, [sp, #32]
 8008702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008706:	f7f8 fa4b 	bl	8000ba0 <__aeabi_d2iz>
 800870a:	4604      	mov	r4, r0
 800870c:	f7f7 ff2e 	bl	800056c <__aeabi_i2d>
 8008710:	4602      	mov	r2, r0
 8008712:	460b      	mov	r3, r1
 8008714:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008718:	f7f7 fdda 	bl	80002d0 <__aeabi_dsub>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	3430      	adds	r4, #48	; 0x30
 8008722:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800872a:	f807 4b01 	strb.w	r4, [r7], #1
 800872e:	f7f8 f9f9 	bl	8000b24 <__aeabi_dcmplt>
 8008732:	2800      	cmp	r0, #0
 8008734:	d174      	bne.n	8008820 <_dtoa_r+0x648>
 8008736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873a:	2000      	movs	r0, #0
 800873c:	4911      	ldr	r1, [pc, #68]	; (8008784 <_dtoa_r+0x5ac>)
 800873e:	f7f7 fdc7 	bl	80002d0 <__aeabi_dsub>
 8008742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008746:	f7f8 f9ed 	bl	8000b24 <__aeabi_dcmplt>
 800874a:	2800      	cmp	r0, #0
 800874c:	f040 80b6 	bne.w	80088bc <_dtoa_r+0x6e4>
 8008750:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008752:	429f      	cmp	r7, r3
 8008754:	f43f af7a 	beq.w	800864c <_dtoa_r+0x474>
 8008758:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800875c:	2200      	movs	r2, #0
 800875e:	4b0a      	ldr	r3, [pc, #40]	; (8008788 <_dtoa_r+0x5b0>)
 8008760:	f7f7 ff6e 	bl	8000640 <__aeabi_dmul>
 8008764:	2200      	movs	r2, #0
 8008766:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800876a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800876e:	4b06      	ldr	r3, [pc, #24]	; (8008788 <_dtoa_r+0x5b0>)
 8008770:	f7f7 ff66 	bl	8000640 <__aeabi_dmul>
 8008774:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008778:	e7c3      	b.n	8008702 <_dtoa_r+0x52a>
 800877a:	bf00      	nop
 800877c:	0800b290 	.word	0x0800b290
 8008780:	0800b268 	.word	0x0800b268
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	40240000 	.word	0x40240000
 800878c:	401c0000 	.word	0x401c0000
 8008790:	40140000 	.word	0x40140000
 8008794:	3fe00000 	.word	0x3fe00000
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f7 ff50 	bl	8000640 <__aeabi_dmul>
 80087a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087a2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087a6:	9c08      	ldr	r4, [sp, #32]
 80087a8:	9314      	str	r3, [sp, #80]	; 0x50
 80087aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ae:	f7f8 f9f7 	bl	8000ba0 <__aeabi_d2iz>
 80087b2:	9015      	str	r0, [sp, #84]	; 0x54
 80087b4:	f7f7 feda 	bl	800056c <__aeabi_i2d>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087c0:	f7f7 fd86 	bl	80002d0 <__aeabi_dsub>
 80087c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80087c6:	4606      	mov	r6, r0
 80087c8:	3330      	adds	r3, #48	; 0x30
 80087ca:	f804 3b01 	strb.w	r3, [r4], #1
 80087ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087d0:	460f      	mov	r7, r1
 80087d2:	429c      	cmp	r4, r3
 80087d4:	f04f 0200 	mov.w	r2, #0
 80087d8:	d124      	bne.n	8008824 <_dtoa_r+0x64c>
 80087da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80087de:	4bb3      	ldr	r3, [pc, #716]	; (8008aac <_dtoa_r+0x8d4>)
 80087e0:	f7f7 fd78 	bl	80002d4 <__adddf3>
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4630      	mov	r0, r6
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f8 f9b8 	bl	8000b60 <__aeabi_dcmpgt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d162      	bne.n	80088ba <_dtoa_r+0x6e2>
 80087f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087f8:	2000      	movs	r0, #0
 80087fa:	49ac      	ldr	r1, [pc, #688]	; (8008aac <_dtoa_r+0x8d4>)
 80087fc:	f7f7 fd68 	bl	80002d0 <__aeabi_dsub>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4630      	mov	r0, r6
 8008806:	4639      	mov	r1, r7
 8008808:	f7f8 f98c 	bl	8000b24 <__aeabi_dcmplt>
 800880c:	2800      	cmp	r0, #0
 800880e:	f43f af1d 	beq.w	800864c <_dtoa_r+0x474>
 8008812:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008814:	1e7b      	subs	r3, r7, #1
 8008816:	9314      	str	r3, [sp, #80]	; 0x50
 8008818:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800881c:	2b30      	cmp	r3, #48	; 0x30
 800881e:	d0f8      	beq.n	8008812 <_dtoa_r+0x63a>
 8008820:	46c1      	mov	r9, r8
 8008822:	e03a      	b.n	800889a <_dtoa_r+0x6c2>
 8008824:	4ba2      	ldr	r3, [pc, #648]	; (8008ab0 <_dtoa_r+0x8d8>)
 8008826:	f7f7 ff0b 	bl	8000640 <__aeabi_dmul>
 800882a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800882e:	e7bc      	b.n	80087aa <_dtoa_r+0x5d2>
 8008830:	9f08      	ldr	r7, [sp, #32]
 8008832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800883a:	f7f8 f82b 	bl	8000894 <__aeabi_ddiv>
 800883e:	f7f8 f9af 	bl	8000ba0 <__aeabi_d2iz>
 8008842:	4604      	mov	r4, r0
 8008844:	f7f7 fe92 	bl	800056c <__aeabi_i2d>
 8008848:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800884c:	f7f7 fef8 	bl	8000640 <__aeabi_dmul>
 8008850:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008854:	460b      	mov	r3, r1
 8008856:	4602      	mov	r2, r0
 8008858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800885c:	f7f7 fd38 	bl	80002d0 <__aeabi_dsub>
 8008860:	f807 6b01 	strb.w	r6, [r7], #1
 8008864:	9e08      	ldr	r6, [sp, #32]
 8008866:	9b02      	ldr	r3, [sp, #8]
 8008868:	1bbe      	subs	r6, r7, r6
 800886a:	42b3      	cmp	r3, r6
 800886c:	d13a      	bne.n	80088e4 <_dtoa_r+0x70c>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	f7f7 fd2f 	bl	80002d4 <__adddf3>
 8008876:	4602      	mov	r2, r0
 8008878:	460b      	mov	r3, r1
 800887a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800887e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008882:	f7f8 f96d 	bl	8000b60 <__aeabi_dcmpgt>
 8008886:	bb58      	cbnz	r0, 80088e0 <_dtoa_r+0x708>
 8008888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800888c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008890:	f7f8 f93e 	bl	8000b10 <__aeabi_dcmpeq>
 8008894:	b108      	cbz	r0, 800889a <_dtoa_r+0x6c2>
 8008896:	07e1      	lsls	r1, r4, #31
 8008898:	d422      	bmi.n	80088e0 <_dtoa_r+0x708>
 800889a:	4628      	mov	r0, r5
 800889c:	4651      	mov	r1, sl
 800889e:	f000 fe69 	bl	8009574 <_Bfree>
 80088a2:	2300      	movs	r3, #0
 80088a4:	703b      	strb	r3, [r7, #0]
 80088a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80088a8:	f109 0001 	add.w	r0, r9, #1
 80088ac:	6018      	str	r0, [r3, #0]
 80088ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f43f acdf 	beq.w	8008274 <_dtoa_r+0x9c>
 80088b6:	601f      	str	r7, [r3, #0]
 80088b8:	e4dc      	b.n	8008274 <_dtoa_r+0x9c>
 80088ba:	4627      	mov	r7, r4
 80088bc:	463b      	mov	r3, r7
 80088be:	461f      	mov	r7, r3
 80088c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c4:	2a39      	cmp	r2, #57	; 0x39
 80088c6:	d107      	bne.n	80088d8 <_dtoa_r+0x700>
 80088c8:	9a08      	ldr	r2, [sp, #32]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d1f7      	bne.n	80088be <_dtoa_r+0x6e6>
 80088ce:	2230      	movs	r2, #48	; 0x30
 80088d0:	9908      	ldr	r1, [sp, #32]
 80088d2:	f108 0801 	add.w	r8, r8, #1
 80088d6:	700a      	strb	r2, [r1, #0]
 80088d8:	781a      	ldrb	r2, [r3, #0]
 80088da:	3201      	adds	r2, #1
 80088dc:	701a      	strb	r2, [r3, #0]
 80088de:	e79f      	b.n	8008820 <_dtoa_r+0x648>
 80088e0:	46c8      	mov	r8, r9
 80088e2:	e7eb      	b.n	80088bc <_dtoa_r+0x6e4>
 80088e4:	2200      	movs	r2, #0
 80088e6:	4b72      	ldr	r3, [pc, #456]	; (8008ab0 <_dtoa_r+0x8d8>)
 80088e8:	f7f7 feaa 	bl	8000640 <__aeabi_dmul>
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088f4:	2200      	movs	r2, #0
 80088f6:	2300      	movs	r3, #0
 80088f8:	f7f8 f90a 	bl	8000b10 <__aeabi_dcmpeq>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d098      	beq.n	8008832 <_dtoa_r+0x65a>
 8008900:	e7cb      	b.n	800889a <_dtoa_r+0x6c2>
 8008902:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008904:	2a00      	cmp	r2, #0
 8008906:	f000 80cd 	beq.w	8008aa4 <_dtoa_r+0x8cc>
 800890a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800890c:	2a01      	cmp	r2, #1
 800890e:	f300 80af 	bgt.w	8008a70 <_dtoa_r+0x898>
 8008912:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008914:	2a00      	cmp	r2, #0
 8008916:	f000 80a7 	beq.w	8008a68 <_dtoa_r+0x890>
 800891a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800891e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008920:	9f06      	ldr	r7, [sp, #24]
 8008922:	9a06      	ldr	r2, [sp, #24]
 8008924:	2101      	movs	r1, #1
 8008926:	441a      	add	r2, r3
 8008928:	9206      	str	r2, [sp, #24]
 800892a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800892c:	4628      	mov	r0, r5
 800892e:	441a      	add	r2, r3
 8008930:	9209      	str	r2, [sp, #36]	; 0x24
 8008932:	f000 ff23 	bl	800977c <__i2b>
 8008936:	4606      	mov	r6, r0
 8008938:	2f00      	cmp	r7, #0
 800893a:	dd0c      	ble.n	8008956 <_dtoa_r+0x77e>
 800893c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893e:	2b00      	cmp	r3, #0
 8008940:	dd09      	ble.n	8008956 <_dtoa_r+0x77e>
 8008942:	42bb      	cmp	r3, r7
 8008944:	bfa8      	it	ge
 8008946:	463b      	movge	r3, r7
 8008948:	9a06      	ldr	r2, [sp, #24]
 800894a:	1aff      	subs	r7, r7, r3
 800894c:	1ad2      	subs	r2, r2, r3
 800894e:	9206      	str	r2, [sp, #24]
 8008950:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008952:	1ad3      	subs	r3, r2, r3
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008958:	b1f3      	cbz	r3, 8008998 <_dtoa_r+0x7c0>
 800895a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800895c:	2b00      	cmp	r3, #0
 800895e:	f000 80a9 	beq.w	8008ab4 <_dtoa_r+0x8dc>
 8008962:	2c00      	cmp	r4, #0
 8008964:	dd10      	ble.n	8008988 <_dtoa_r+0x7b0>
 8008966:	4631      	mov	r1, r6
 8008968:	4622      	mov	r2, r4
 800896a:	4628      	mov	r0, r5
 800896c:	f000 ffc0 	bl	80098f0 <__pow5mult>
 8008970:	4652      	mov	r2, sl
 8008972:	4601      	mov	r1, r0
 8008974:	4606      	mov	r6, r0
 8008976:	4628      	mov	r0, r5
 8008978:	f000 ff16 	bl	80097a8 <__multiply>
 800897c:	4680      	mov	r8, r0
 800897e:	4651      	mov	r1, sl
 8008980:	4628      	mov	r0, r5
 8008982:	f000 fdf7 	bl	8009574 <_Bfree>
 8008986:	46c2      	mov	sl, r8
 8008988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800898a:	1b1a      	subs	r2, r3, r4
 800898c:	d004      	beq.n	8008998 <_dtoa_r+0x7c0>
 800898e:	4651      	mov	r1, sl
 8008990:	4628      	mov	r0, r5
 8008992:	f000 ffad 	bl	80098f0 <__pow5mult>
 8008996:	4682      	mov	sl, r0
 8008998:	2101      	movs	r1, #1
 800899a:	4628      	mov	r0, r5
 800899c:	f000 feee 	bl	800977c <__i2b>
 80089a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80089a2:	4604      	mov	r4, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	f340 8087 	ble.w	8008ab8 <_dtoa_r+0x8e0>
 80089aa:	461a      	mov	r2, r3
 80089ac:	4601      	mov	r1, r0
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 ff9e 	bl	80098f0 <__pow5mult>
 80089b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80089b6:	4604      	mov	r4, r0
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	f340 8080 	ble.w	8008abe <_dtoa_r+0x8e6>
 80089be:	f04f 0800 	mov.w	r8, #0
 80089c2:	6923      	ldr	r3, [r4, #16]
 80089c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089c8:	6918      	ldr	r0, [r3, #16]
 80089ca:	f000 fe89 	bl	80096e0 <__hi0bits>
 80089ce:	f1c0 0020 	rsb	r0, r0, #32
 80089d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d4:	4418      	add	r0, r3
 80089d6:	f010 001f 	ands.w	r0, r0, #31
 80089da:	f000 8092 	beq.w	8008b02 <_dtoa_r+0x92a>
 80089de:	f1c0 0320 	rsb	r3, r0, #32
 80089e2:	2b04      	cmp	r3, #4
 80089e4:	f340 808a 	ble.w	8008afc <_dtoa_r+0x924>
 80089e8:	f1c0 001c 	rsb	r0, r0, #28
 80089ec:	9b06      	ldr	r3, [sp, #24]
 80089ee:	4407      	add	r7, r0
 80089f0:	4403      	add	r3, r0
 80089f2:	9306      	str	r3, [sp, #24]
 80089f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f6:	4403      	add	r3, r0
 80089f8:	9309      	str	r3, [sp, #36]	; 0x24
 80089fa:	9b06      	ldr	r3, [sp, #24]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	dd05      	ble.n	8008a0c <_dtoa_r+0x834>
 8008a00:	4651      	mov	r1, sl
 8008a02:	461a      	mov	r2, r3
 8008a04:	4628      	mov	r0, r5
 8008a06:	f000 ffcd 	bl	80099a4 <__lshift>
 8008a0a:	4682      	mov	sl, r0
 8008a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd05      	ble.n	8008a1e <_dtoa_r+0x846>
 8008a12:	4621      	mov	r1, r4
 8008a14:	461a      	mov	r2, r3
 8008a16:	4628      	mov	r0, r5
 8008a18:	f000 ffc4 	bl	80099a4 <__lshift>
 8008a1c:	4604      	mov	r4, r0
 8008a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d070      	beq.n	8008b06 <_dtoa_r+0x92e>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4650      	mov	r0, sl
 8008a28:	f001 f828 	bl	8009a7c <__mcmp>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	da6a      	bge.n	8008b06 <_dtoa_r+0x92e>
 8008a30:	2300      	movs	r3, #0
 8008a32:	4651      	mov	r1, sl
 8008a34:	220a      	movs	r2, #10
 8008a36:	4628      	mov	r0, r5
 8008a38:	f000 fdbe 	bl	80095b8 <__multadd>
 8008a3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a3e:	4682      	mov	sl, r0
 8008a40:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 8193 	beq.w	8008d70 <_dtoa_r+0xb98>
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	220a      	movs	r2, #10
 8008a50:	4628      	mov	r0, r5
 8008a52:	f000 fdb1 	bl	80095b8 <__multadd>
 8008a56:	f1bb 0f00 	cmp.w	fp, #0
 8008a5a:	4606      	mov	r6, r0
 8008a5c:	f300 8093 	bgt.w	8008b86 <_dtoa_r+0x9ae>
 8008a60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	dc57      	bgt.n	8008b16 <_dtoa_r+0x93e>
 8008a66:	e08e      	b.n	8008b86 <_dtoa_r+0x9ae>
 8008a68:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008a6a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a6e:	e756      	b.n	800891e <_dtoa_r+0x746>
 8008a70:	9b02      	ldr	r3, [sp, #8]
 8008a72:	1e5c      	subs	r4, r3, #1
 8008a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a76:	42a3      	cmp	r3, r4
 8008a78:	bfb7      	itett	lt
 8008a7a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008a7c:	1b1c      	subge	r4, r3, r4
 8008a7e:	1ae2      	sublt	r2, r4, r3
 8008a80:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008a82:	bfbe      	ittt	lt
 8008a84:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008a86:	189b      	addlt	r3, r3, r2
 8008a88:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008a8a:	9b02      	ldr	r3, [sp, #8]
 8008a8c:	bfb8      	it	lt
 8008a8e:	2400      	movlt	r4, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	bfbb      	ittet	lt
 8008a94:	9b06      	ldrlt	r3, [sp, #24]
 8008a96:	9a02      	ldrlt	r2, [sp, #8]
 8008a98:	9f06      	ldrge	r7, [sp, #24]
 8008a9a:	1a9f      	sublt	r7, r3, r2
 8008a9c:	bfac      	ite	ge
 8008a9e:	9b02      	ldrge	r3, [sp, #8]
 8008aa0:	2300      	movlt	r3, #0
 8008aa2:	e73e      	b.n	8008922 <_dtoa_r+0x74a>
 8008aa4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008aa6:	9f06      	ldr	r7, [sp, #24]
 8008aa8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008aaa:	e745      	b.n	8008938 <_dtoa_r+0x760>
 8008aac:	3fe00000 	.word	0x3fe00000
 8008ab0:	40240000 	.word	0x40240000
 8008ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab6:	e76a      	b.n	800898e <_dtoa_r+0x7b6>
 8008ab8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	dc19      	bgt.n	8008af2 <_dtoa_r+0x91a>
 8008abe:	9b04      	ldr	r3, [sp, #16]
 8008ac0:	b9bb      	cbnz	r3, 8008af2 <_dtoa_r+0x91a>
 8008ac2:	9b05      	ldr	r3, [sp, #20]
 8008ac4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ac8:	b99b      	cbnz	r3, 8008af2 <_dtoa_r+0x91a>
 8008aca:	9b05      	ldr	r3, [sp, #20]
 8008acc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ad0:	0d1b      	lsrs	r3, r3, #20
 8008ad2:	051b      	lsls	r3, r3, #20
 8008ad4:	b183      	cbz	r3, 8008af8 <_dtoa_r+0x920>
 8008ad6:	f04f 0801 	mov.w	r8, #1
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	3301      	adds	r3, #1
 8008ade:	9306      	str	r3, [sp, #24]
 8008ae0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ae6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f47f af6a 	bne.w	80089c2 <_dtoa_r+0x7ea>
 8008aee:	2001      	movs	r0, #1
 8008af0:	e76f      	b.n	80089d2 <_dtoa_r+0x7fa>
 8008af2:	f04f 0800 	mov.w	r8, #0
 8008af6:	e7f6      	b.n	8008ae6 <_dtoa_r+0x90e>
 8008af8:	4698      	mov	r8, r3
 8008afa:	e7f4      	b.n	8008ae6 <_dtoa_r+0x90e>
 8008afc:	f43f af7d 	beq.w	80089fa <_dtoa_r+0x822>
 8008b00:	4618      	mov	r0, r3
 8008b02:	301c      	adds	r0, #28
 8008b04:	e772      	b.n	80089ec <_dtoa_r+0x814>
 8008b06:	9b02      	ldr	r3, [sp, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	dc36      	bgt.n	8008b7a <_dtoa_r+0x9a2>
 8008b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	dd33      	ble.n	8008b7a <_dtoa_r+0x9a2>
 8008b12:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008b16:	f1bb 0f00 	cmp.w	fp, #0
 8008b1a:	d10d      	bne.n	8008b38 <_dtoa_r+0x960>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	465b      	mov	r3, fp
 8008b20:	2205      	movs	r2, #5
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 fd48 	bl	80095b8 <__multadd>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	4650      	mov	r0, sl
 8008b2e:	f000 ffa5 	bl	8009a7c <__mcmp>
 8008b32:	2800      	cmp	r0, #0
 8008b34:	f73f adb6 	bgt.w	80086a4 <_dtoa_r+0x4cc>
 8008b38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008b3a:	9f08      	ldr	r7, [sp, #32]
 8008b3c:	ea6f 0903 	mvn.w	r9, r3
 8008b40:	f04f 0800 	mov.w	r8, #0
 8008b44:	4621      	mov	r1, r4
 8008b46:	4628      	mov	r0, r5
 8008b48:	f000 fd14 	bl	8009574 <_Bfree>
 8008b4c:	2e00      	cmp	r6, #0
 8008b4e:	f43f aea4 	beq.w	800889a <_dtoa_r+0x6c2>
 8008b52:	f1b8 0f00 	cmp.w	r8, #0
 8008b56:	d005      	beq.n	8008b64 <_dtoa_r+0x98c>
 8008b58:	45b0      	cmp	r8, r6
 8008b5a:	d003      	beq.n	8008b64 <_dtoa_r+0x98c>
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f000 fd08 	bl	8009574 <_Bfree>
 8008b64:	4631      	mov	r1, r6
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fd04 	bl	8009574 <_Bfree>
 8008b6c:	e695      	b.n	800889a <_dtoa_r+0x6c2>
 8008b6e:	2400      	movs	r4, #0
 8008b70:	4626      	mov	r6, r4
 8008b72:	e7e1      	b.n	8008b38 <_dtoa_r+0x960>
 8008b74:	46c1      	mov	r9, r8
 8008b76:	4626      	mov	r6, r4
 8008b78:	e594      	b.n	80086a4 <_dtoa_r+0x4cc>
 8008b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b7c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 80fc 	beq.w	8008d7e <_dtoa_r+0xba6>
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	dd05      	ble.n	8008b96 <_dtoa_r+0x9be>
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	463a      	mov	r2, r7
 8008b8e:	4628      	mov	r0, r5
 8008b90:	f000 ff08 	bl	80099a4 <__lshift>
 8008b94:	4606      	mov	r6, r0
 8008b96:	f1b8 0f00 	cmp.w	r8, #0
 8008b9a:	d05c      	beq.n	8008c56 <_dtoa_r+0xa7e>
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	6871      	ldr	r1, [r6, #4]
 8008ba0:	f000 fca8 	bl	80094f4 <_Balloc>
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	b928      	cbnz	r0, 8008bb4 <_dtoa_r+0x9dc>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bae:	4b7e      	ldr	r3, [pc, #504]	; (8008da8 <_dtoa_r+0xbd0>)
 8008bb0:	f7ff bb26 	b.w	8008200 <_dtoa_r+0x28>
 8008bb4:	6932      	ldr	r2, [r6, #16]
 8008bb6:	f106 010c 	add.w	r1, r6, #12
 8008bba:	3202      	adds	r2, #2
 8008bbc:	0092      	lsls	r2, r2, #2
 8008bbe:	300c      	adds	r0, #12
 8008bc0:	f000 fc8a 	bl	80094d8 <memcpy>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 feeb 	bl	80099a4 <__lshift>
 8008bce:	46b0      	mov	r8, r6
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	9b08      	ldr	r3, [sp, #32]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	9302      	str	r3, [sp, #8]
 8008bd8:	9b08      	ldr	r3, [sp, #32]
 8008bda:	445b      	add	r3, fp
 8008bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8008bde:	9b04      	ldr	r3, [sp, #16]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	9309      	str	r3, [sp, #36]	; 0x24
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	4621      	mov	r1, r4
 8008bea:	4650      	mov	r0, sl
 8008bec:	f103 3bff 	add.w	fp, r3, #4294967295
 8008bf0:	f7ff fa62 	bl	80080b8 <quorem>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	4641      	mov	r1, r8
 8008bf8:	3330      	adds	r3, #48	; 0x30
 8008bfa:	9004      	str	r0, [sp, #16]
 8008bfc:	4650      	mov	r0, sl
 8008bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c00:	f000 ff3c 	bl	8009a7c <__mcmp>
 8008c04:	4632      	mov	r2, r6
 8008c06:	9006      	str	r0, [sp, #24]
 8008c08:	4621      	mov	r1, r4
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 ff52 	bl	8009ab4 <__mdiff>
 8008c10:	68c2      	ldr	r2, [r0, #12]
 8008c12:	4607      	mov	r7, r0
 8008c14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c16:	bb02      	cbnz	r2, 8008c5a <_dtoa_r+0xa82>
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4650      	mov	r0, sl
 8008c1c:	f000 ff2e 	bl	8009a7c <__mcmp>
 8008c20:	4602      	mov	r2, r0
 8008c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c24:	4639      	mov	r1, r7
 8008c26:	4628      	mov	r0, r5
 8008c28:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008c2c:	f000 fca2 	bl	8009574 <_Bfree>
 8008c30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c34:	9f02      	ldr	r7, [sp, #8]
 8008c36:	ea43 0102 	orr.w	r1, r3, r2
 8008c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c40:	d10d      	bne.n	8008c5e <_dtoa_r+0xa86>
 8008c42:	2b39      	cmp	r3, #57	; 0x39
 8008c44:	d027      	beq.n	8008c96 <_dtoa_r+0xabe>
 8008c46:	9a06      	ldr	r2, [sp, #24]
 8008c48:	2a00      	cmp	r2, #0
 8008c4a:	dd01      	ble.n	8008c50 <_dtoa_r+0xa78>
 8008c4c:	9b04      	ldr	r3, [sp, #16]
 8008c4e:	3331      	adds	r3, #49	; 0x31
 8008c50:	f88b 3000 	strb.w	r3, [fp]
 8008c54:	e776      	b.n	8008b44 <_dtoa_r+0x96c>
 8008c56:	4630      	mov	r0, r6
 8008c58:	e7b9      	b.n	8008bce <_dtoa_r+0x9f6>
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	e7e2      	b.n	8008c24 <_dtoa_r+0xa4c>
 8008c5e:	9906      	ldr	r1, [sp, #24]
 8008c60:	2900      	cmp	r1, #0
 8008c62:	db04      	blt.n	8008c6e <_dtoa_r+0xa96>
 8008c64:	9822      	ldr	r0, [sp, #136]	; 0x88
 8008c66:	4301      	orrs	r1, r0
 8008c68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6a:	4301      	orrs	r1, r0
 8008c6c:	d120      	bne.n	8008cb0 <_dtoa_r+0xad8>
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	ddee      	ble.n	8008c50 <_dtoa_r+0xa78>
 8008c72:	4651      	mov	r1, sl
 8008c74:	2201      	movs	r2, #1
 8008c76:	4628      	mov	r0, r5
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	f000 fe93 	bl	80099a4 <__lshift>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4682      	mov	sl, r0
 8008c82:	f000 fefb 	bl	8009a7c <__mcmp>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	9b02      	ldr	r3, [sp, #8]
 8008c8a:	dc02      	bgt.n	8008c92 <_dtoa_r+0xaba>
 8008c8c:	d1e0      	bne.n	8008c50 <_dtoa_r+0xa78>
 8008c8e:	07da      	lsls	r2, r3, #31
 8008c90:	d5de      	bpl.n	8008c50 <_dtoa_r+0xa78>
 8008c92:	2b39      	cmp	r3, #57	; 0x39
 8008c94:	d1da      	bne.n	8008c4c <_dtoa_r+0xa74>
 8008c96:	2339      	movs	r3, #57	; 0x39
 8008c98:	f88b 3000 	strb.w	r3, [fp]
 8008c9c:	463b      	mov	r3, r7
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008ca4:	3b01      	subs	r3, #1
 8008ca6:	2a39      	cmp	r2, #57	; 0x39
 8008ca8:	d050      	beq.n	8008d4c <_dtoa_r+0xb74>
 8008caa:	3201      	adds	r2, #1
 8008cac:	701a      	strb	r2, [r3, #0]
 8008cae:	e749      	b.n	8008b44 <_dtoa_r+0x96c>
 8008cb0:	2a00      	cmp	r2, #0
 8008cb2:	dd03      	ble.n	8008cbc <_dtoa_r+0xae4>
 8008cb4:	2b39      	cmp	r3, #57	; 0x39
 8008cb6:	d0ee      	beq.n	8008c96 <_dtoa_r+0xabe>
 8008cb8:	3301      	adds	r3, #1
 8008cba:	e7c9      	b.n	8008c50 <_dtoa_r+0xa78>
 8008cbc:	9a02      	ldr	r2, [sp, #8]
 8008cbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008cc0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008cc4:	428a      	cmp	r2, r1
 8008cc6:	d02a      	beq.n	8008d1e <_dtoa_r+0xb46>
 8008cc8:	4651      	mov	r1, sl
 8008cca:	2300      	movs	r3, #0
 8008ccc:	220a      	movs	r2, #10
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f000 fc72 	bl	80095b8 <__multadd>
 8008cd4:	45b0      	cmp	r8, r6
 8008cd6:	4682      	mov	sl, r0
 8008cd8:	f04f 0300 	mov.w	r3, #0
 8008cdc:	f04f 020a 	mov.w	r2, #10
 8008ce0:	4641      	mov	r1, r8
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	d107      	bne.n	8008cf6 <_dtoa_r+0xb1e>
 8008ce6:	f000 fc67 	bl	80095b8 <__multadd>
 8008cea:	4680      	mov	r8, r0
 8008cec:	4606      	mov	r6, r0
 8008cee:	9b02      	ldr	r3, [sp, #8]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	9302      	str	r3, [sp, #8]
 8008cf4:	e777      	b.n	8008be6 <_dtoa_r+0xa0e>
 8008cf6:	f000 fc5f 	bl	80095b8 <__multadd>
 8008cfa:	4631      	mov	r1, r6
 8008cfc:	4680      	mov	r8, r0
 8008cfe:	2300      	movs	r3, #0
 8008d00:	220a      	movs	r2, #10
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 fc58 	bl	80095b8 <__multadd>
 8008d08:	4606      	mov	r6, r0
 8008d0a:	e7f0      	b.n	8008cee <_dtoa_r+0xb16>
 8008d0c:	f1bb 0f00 	cmp.w	fp, #0
 8008d10:	bfcc      	ite	gt
 8008d12:	465f      	movgt	r7, fp
 8008d14:	2701      	movle	r7, #1
 8008d16:	f04f 0800 	mov.w	r8, #0
 8008d1a:	9a08      	ldr	r2, [sp, #32]
 8008d1c:	4417      	add	r7, r2
 8008d1e:	4651      	mov	r1, sl
 8008d20:	2201      	movs	r2, #1
 8008d22:	4628      	mov	r0, r5
 8008d24:	9302      	str	r3, [sp, #8]
 8008d26:	f000 fe3d 	bl	80099a4 <__lshift>
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4682      	mov	sl, r0
 8008d2e:	f000 fea5 	bl	8009a7c <__mcmp>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	dcb2      	bgt.n	8008c9c <_dtoa_r+0xac4>
 8008d36:	d102      	bne.n	8008d3e <_dtoa_r+0xb66>
 8008d38:	9b02      	ldr	r3, [sp, #8]
 8008d3a:	07db      	lsls	r3, r3, #31
 8008d3c:	d4ae      	bmi.n	8008c9c <_dtoa_r+0xac4>
 8008d3e:	463b      	mov	r3, r7
 8008d40:	461f      	mov	r7, r3
 8008d42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d46:	2a30      	cmp	r2, #48	; 0x30
 8008d48:	d0fa      	beq.n	8008d40 <_dtoa_r+0xb68>
 8008d4a:	e6fb      	b.n	8008b44 <_dtoa_r+0x96c>
 8008d4c:	9a08      	ldr	r2, [sp, #32]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d1a5      	bne.n	8008c9e <_dtoa_r+0xac6>
 8008d52:	2331      	movs	r3, #49	; 0x31
 8008d54:	f109 0901 	add.w	r9, r9, #1
 8008d58:	7013      	strb	r3, [r2, #0]
 8008d5a:	e6f3      	b.n	8008b44 <_dtoa_r+0x96c>
 8008d5c:	4b13      	ldr	r3, [pc, #76]	; (8008dac <_dtoa_r+0xbd4>)
 8008d5e:	f7ff baa7 	b.w	80082b0 <_dtoa_r+0xd8>
 8008d62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f47f aa80 	bne.w	800826a <_dtoa_r+0x92>
 8008d6a:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <_dtoa_r+0xbd8>)
 8008d6c:	f7ff baa0 	b.w	80082b0 <_dtoa_r+0xd8>
 8008d70:	f1bb 0f00 	cmp.w	fp, #0
 8008d74:	dc03      	bgt.n	8008d7e <_dtoa_r+0xba6>
 8008d76:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	f73f aecc 	bgt.w	8008b16 <_dtoa_r+0x93e>
 8008d7e:	9f08      	ldr	r7, [sp, #32]
 8008d80:	4621      	mov	r1, r4
 8008d82:	4650      	mov	r0, sl
 8008d84:	f7ff f998 	bl	80080b8 <quorem>
 8008d88:	9a08      	ldr	r2, [sp, #32]
 8008d8a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d8e:	f807 3b01 	strb.w	r3, [r7], #1
 8008d92:	1aba      	subs	r2, r7, r2
 8008d94:	4593      	cmp	fp, r2
 8008d96:	ddb9      	ble.n	8008d0c <_dtoa_r+0xb34>
 8008d98:	4651      	mov	r1, sl
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	220a      	movs	r2, #10
 8008d9e:	4628      	mov	r0, r5
 8008da0:	f000 fc0a 	bl	80095b8 <__multadd>
 8008da4:	4682      	mov	sl, r0
 8008da6:	e7eb      	b.n	8008d80 <_dtoa_r+0xba8>
 8008da8:	0800b173 	.word	0x0800b173
 8008dac:	0800b078 	.word	0x0800b078
 8008db0:	0800b0f0 	.word	0x0800b0f0

08008db4 <rshift>:
 8008db4:	6903      	ldr	r3, [r0, #16]
 8008db6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008dba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dbe:	f100 0414 	add.w	r4, r0, #20
 8008dc2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008dc6:	dd46      	ble.n	8008e56 <rshift+0xa2>
 8008dc8:	f011 011f 	ands.w	r1, r1, #31
 8008dcc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008dd0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dd4:	d10c      	bne.n	8008df0 <rshift+0x3c>
 8008dd6:	4629      	mov	r1, r5
 8008dd8:	f100 0710 	add.w	r7, r0, #16
 8008ddc:	42b1      	cmp	r1, r6
 8008dde:	d335      	bcc.n	8008e4c <rshift+0x98>
 8008de0:	1a9b      	subs	r3, r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	1eea      	subs	r2, r5, #3
 8008de6:	4296      	cmp	r6, r2
 8008de8:	bf38      	it	cc
 8008dea:	2300      	movcc	r3, #0
 8008dec:	4423      	add	r3, r4
 8008dee:	e015      	b.n	8008e1c <rshift+0x68>
 8008df0:	46a1      	mov	r9, r4
 8008df2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008df6:	f1c1 0820 	rsb	r8, r1, #32
 8008dfa:	40cf      	lsrs	r7, r1
 8008dfc:	f105 0e04 	add.w	lr, r5, #4
 8008e00:	4576      	cmp	r6, lr
 8008e02:	46f4      	mov	ip, lr
 8008e04:	d816      	bhi.n	8008e34 <rshift+0x80>
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009a      	lsls	r2, r3, #2
 8008e0a:	3a04      	subs	r2, #4
 8008e0c:	3501      	adds	r5, #1
 8008e0e:	42ae      	cmp	r6, r5
 8008e10:	bf38      	it	cc
 8008e12:	2200      	movcc	r2, #0
 8008e14:	18a3      	adds	r3, r4, r2
 8008e16:	50a7      	str	r7, [r4, r2]
 8008e18:	b107      	cbz	r7, 8008e1c <rshift+0x68>
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	42a3      	cmp	r3, r4
 8008e1e:	eba3 0204 	sub.w	r2, r3, r4
 8008e22:	bf08      	it	eq
 8008e24:	2300      	moveq	r3, #0
 8008e26:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e2a:	6102      	str	r2, [r0, #16]
 8008e2c:	bf08      	it	eq
 8008e2e:	6143      	streq	r3, [r0, #20]
 8008e30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e34:	f8dc c000 	ldr.w	ip, [ip]
 8008e38:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e3c:	ea4c 0707 	orr.w	r7, ip, r7
 8008e40:	f849 7b04 	str.w	r7, [r9], #4
 8008e44:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e48:	40cf      	lsrs	r7, r1
 8008e4a:	e7d9      	b.n	8008e00 <rshift+0x4c>
 8008e4c:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e50:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e54:	e7c2      	b.n	8008ddc <rshift+0x28>
 8008e56:	4623      	mov	r3, r4
 8008e58:	e7e0      	b.n	8008e1c <rshift+0x68>

08008e5a <__hexdig_fun>:
 8008e5a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e5e:	2b09      	cmp	r3, #9
 8008e60:	d802      	bhi.n	8008e68 <__hexdig_fun+0xe>
 8008e62:	3820      	subs	r0, #32
 8008e64:	b2c0      	uxtb	r0, r0
 8008e66:	4770      	bx	lr
 8008e68:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e6c:	2b05      	cmp	r3, #5
 8008e6e:	d801      	bhi.n	8008e74 <__hexdig_fun+0x1a>
 8008e70:	3847      	subs	r0, #71	; 0x47
 8008e72:	e7f7      	b.n	8008e64 <__hexdig_fun+0xa>
 8008e74:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e78:	2b05      	cmp	r3, #5
 8008e7a:	d801      	bhi.n	8008e80 <__hexdig_fun+0x26>
 8008e7c:	3827      	subs	r0, #39	; 0x27
 8008e7e:	e7f1      	b.n	8008e64 <__hexdig_fun+0xa>
 8008e80:	2000      	movs	r0, #0
 8008e82:	4770      	bx	lr

08008e84 <__gethex>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	b08b      	sub	sp, #44	; 0x2c
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	4bb9      	ldr	r3, [pc, #740]	; (8009174 <__gethex+0x2f0>)
 8008e8e:	9002      	str	r0, [sp, #8]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	468b      	mov	fp, r1
 8008e94:	4618      	mov	r0, r3
 8008e96:	4690      	mov	r8, r2
 8008e98:	9303      	str	r3, [sp, #12]
 8008e9a:	f7f7 f959 	bl	8000150 <strlen>
 8008e9e:	4682      	mov	sl, r0
 8008ea0:	9b03      	ldr	r3, [sp, #12]
 8008ea2:	f8db 2000 	ldr.w	r2, [fp]
 8008ea6:	4403      	add	r3, r0
 8008ea8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008eac:	9307      	str	r3, [sp, #28]
 8008eae:	1c93      	adds	r3, r2, #2
 8008eb0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008eb4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008eb8:	32fe      	adds	r2, #254	; 0xfe
 8008eba:	18d1      	adds	r1, r2, r3
 8008ebc:	461f      	mov	r7, r3
 8008ebe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ec2:	9101      	str	r1, [sp, #4]
 8008ec4:	2830      	cmp	r0, #48	; 0x30
 8008ec6:	d0f8      	beq.n	8008eba <__gethex+0x36>
 8008ec8:	f7ff ffc7 	bl	8008e5a <__hexdig_fun>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d13a      	bne.n	8008f48 <__gethex+0xc4>
 8008ed2:	4652      	mov	r2, sl
 8008ed4:	4638      	mov	r0, r7
 8008ed6:	9903      	ldr	r1, [sp, #12]
 8008ed8:	f7fe fab8 	bl	800744c <strncmp>
 8008edc:	4605      	mov	r5, r0
 8008ede:	2800      	cmp	r0, #0
 8008ee0:	d166      	bne.n	8008fb0 <__gethex+0x12c>
 8008ee2:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008ee6:	eb07 060a 	add.w	r6, r7, sl
 8008eea:	f7ff ffb6 	bl	8008e5a <__hexdig_fun>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d060      	beq.n	8008fb4 <__gethex+0x130>
 8008ef2:	4633      	mov	r3, r6
 8008ef4:	7818      	ldrb	r0, [r3, #0]
 8008ef6:	461f      	mov	r7, r3
 8008ef8:	2830      	cmp	r0, #48	; 0x30
 8008efa:	f103 0301 	add.w	r3, r3, #1
 8008efe:	d0f9      	beq.n	8008ef4 <__gethex+0x70>
 8008f00:	f7ff ffab 	bl	8008e5a <__hexdig_fun>
 8008f04:	2301      	movs	r3, #1
 8008f06:	fab0 f480 	clz	r4, r0
 8008f0a:	4635      	mov	r5, r6
 8008f0c:	0964      	lsrs	r4, r4, #5
 8008f0e:	9301      	str	r3, [sp, #4]
 8008f10:	463a      	mov	r2, r7
 8008f12:	4616      	mov	r6, r2
 8008f14:	7830      	ldrb	r0, [r6, #0]
 8008f16:	3201      	adds	r2, #1
 8008f18:	f7ff ff9f 	bl	8008e5a <__hexdig_fun>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	d1f8      	bne.n	8008f12 <__gethex+0x8e>
 8008f20:	4652      	mov	r2, sl
 8008f22:	4630      	mov	r0, r6
 8008f24:	9903      	ldr	r1, [sp, #12]
 8008f26:	f7fe fa91 	bl	800744c <strncmp>
 8008f2a:	b980      	cbnz	r0, 8008f4e <__gethex+0xca>
 8008f2c:	b94d      	cbnz	r5, 8008f42 <__gethex+0xbe>
 8008f2e:	eb06 050a 	add.w	r5, r6, sl
 8008f32:	462a      	mov	r2, r5
 8008f34:	4616      	mov	r6, r2
 8008f36:	7830      	ldrb	r0, [r6, #0]
 8008f38:	3201      	adds	r2, #1
 8008f3a:	f7ff ff8e 	bl	8008e5a <__hexdig_fun>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	d1f8      	bne.n	8008f34 <__gethex+0xb0>
 8008f42:	1bad      	subs	r5, r5, r6
 8008f44:	00ad      	lsls	r5, r5, #2
 8008f46:	e004      	b.n	8008f52 <__gethex+0xce>
 8008f48:	2400      	movs	r4, #0
 8008f4a:	4625      	mov	r5, r4
 8008f4c:	e7e0      	b.n	8008f10 <__gethex+0x8c>
 8008f4e:	2d00      	cmp	r5, #0
 8008f50:	d1f7      	bne.n	8008f42 <__gethex+0xbe>
 8008f52:	7833      	ldrb	r3, [r6, #0]
 8008f54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f58:	2b50      	cmp	r3, #80	; 0x50
 8008f5a:	d139      	bne.n	8008fd0 <__gethex+0x14c>
 8008f5c:	7873      	ldrb	r3, [r6, #1]
 8008f5e:	2b2b      	cmp	r3, #43	; 0x2b
 8008f60:	d02a      	beq.n	8008fb8 <__gethex+0x134>
 8008f62:	2b2d      	cmp	r3, #45	; 0x2d
 8008f64:	d02c      	beq.n	8008fc0 <__gethex+0x13c>
 8008f66:	f04f 0900 	mov.w	r9, #0
 8008f6a:	1c71      	adds	r1, r6, #1
 8008f6c:	7808      	ldrb	r0, [r1, #0]
 8008f6e:	f7ff ff74 	bl	8008e5a <__hexdig_fun>
 8008f72:	1e43      	subs	r3, r0, #1
 8008f74:	b2db      	uxtb	r3, r3
 8008f76:	2b18      	cmp	r3, #24
 8008f78:	d82a      	bhi.n	8008fd0 <__gethex+0x14c>
 8008f7a:	f1a0 0210 	sub.w	r2, r0, #16
 8008f7e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f82:	f7ff ff6a 	bl	8008e5a <__hexdig_fun>
 8008f86:	1e43      	subs	r3, r0, #1
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b18      	cmp	r3, #24
 8008f8c:	d91b      	bls.n	8008fc6 <__gethex+0x142>
 8008f8e:	f1b9 0f00 	cmp.w	r9, #0
 8008f92:	d000      	beq.n	8008f96 <__gethex+0x112>
 8008f94:	4252      	negs	r2, r2
 8008f96:	4415      	add	r5, r2
 8008f98:	f8cb 1000 	str.w	r1, [fp]
 8008f9c:	b1d4      	cbz	r4, 8008fd4 <__gethex+0x150>
 8008f9e:	9b01      	ldr	r3, [sp, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	bf14      	ite	ne
 8008fa4:	2700      	movne	r7, #0
 8008fa6:	2706      	moveq	r7, #6
 8008fa8:	4638      	mov	r0, r7
 8008faa:	b00b      	add	sp, #44	; 0x2c
 8008fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	463e      	mov	r6, r7
 8008fb2:	4625      	mov	r5, r4
 8008fb4:	2401      	movs	r4, #1
 8008fb6:	e7cc      	b.n	8008f52 <__gethex+0xce>
 8008fb8:	f04f 0900 	mov.w	r9, #0
 8008fbc:	1cb1      	adds	r1, r6, #2
 8008fbe:	e7d5      	b.n	8008f6c <__gethex+0xe8>
 8008fc0:	f04f 0901 	mov.w	r9, #1
 8008fc4:	e7fa      	b.n	8008fbc <__gethex+0x138>
 8008fc6:	230a      	movs	r3, #10
 8008fc8:	fb03 0202 	mla	r2, r3, r2, r0
 8008fcc:	3a10      	subs	r2, #16
 8008fce:	e7d6      	b.n	8008f7e <__gethex+0xfa>
 8008fd0:	4631      	mov	r1, r6
 8008fd2:	e7e1      	b.n	8008f98 <__gethex+0x114>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	1bf3      	subs	r3, r6, r7
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	2b07      	cmp	r3, #7
 8008fdc:	dc0a      	bgt.n	8008ff4 <__gethex+0x170>
 8008fde:	9802      	ldr	r0, [sp, #8]
 8008fe0:	f000 fa88 	bl	80094f4 <_Balloc>
 8008fe4:	4604      	mov	r4, r0
 8008fe6:	b940      	cbnz	r0, 8008ffa <__gethex+0x176>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	21de      	movs	r1, #222	; 0xde
 8008fec:	4b62      	ldr	r3, [pc, #392]	; (8009178 <__gethex+0x2f4>)
 8008fee:	4863      	ldr	r0, [pc, #396]	; (800917c <__gethex+0x2f8>)
 8008ff0:	f001 f96c 	bl	800a2cc <__assert_func>
 8008ff4:	3101      	adds	r1, #1
 8008ff6:	105b      	asrs	r3, r3, #1
 8008ff8:	e7ef      	b.n	8008fda <__gethex+0x156>
 8008ffa:	f04f 0b00 	mov.w	fp, #0
 8008ffe:	f100 0914 	add.w	r9, r0, #20
 8009002:	f1ca 0301 	rsb	r3, sl, #1
 8009006:	f8cd 9010 	str.w	r9, [sp, #16]
 800900a:	f8cd b004 	str.w	fp, [sp, #4]
 800900e:	9308      	str	r3, [sp, #32]
 8009010:	42b7      	cmp	r7, r6
 8009012:	d33f      	bcc.n	8009094 <__gethex+0x210>
 8009014:	9f04      	ldr	r7, [sp, #16]
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	f847 3b04 	str.w	r3, [r7], #4
 800901c:	eba7 0709 	sub.w	r7, r7, r9
 8009020:	10bf      	asrs	r7, r7, #2
 8009022:	6127      	str	r7, [r4, #16]
 8009024:	4618      	mov	r0, r3
 8009026:	f000 fb5b 	bl	80096e0 <__hi0bits>
 800902a:	017f      	lsls	r7, r7, #5
 800902c:	f8d8 6000 	ldr.w	r6, [r8]
 8009030:	1a3f      	subs	r7, r7, r0
 8009032:	42b7      	cmp	r7, r6
 8009034:	dd62      	ble.n	80090fc <__gethex+0x278>
 8009036:	1bbf      	subs	r7, r7, r6
 8009038:	4639      	mov	r1, r7
 800903a:	4620      	mov	r0, r4
 800903c:	f000 fef1 	bl	8009e22 <__any_on>
 8009040:	4682      	mov	sl, r0
 8009042:	b1a8      	cbz	r0, 8009070 <__gethex+0x1ec>
 8009044:	f04f 0a01 	mov.w	sl, #1
 8009048:	1e7b      	subs	r3, r7, #1
 800904a:	1159      	asrs	r1, r3, #5
 800904c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009050:	f003 021f 	and.w	r2, r3, #31
 8009054:	fa0a f202 	lsl.w	r2, sl, r2
 8009058:	420a      	tst	r2, r1
 800905a:	d009      	beq.n	8009070 <__gethex+0x1ec>
 800905c:	4553      	cmp	r3, sl
 800905e:	dd05      	ble.n	800906c <__gethex+0x1e8>
 8009060:	4620      	mov	r0, r4
 8009062:	1eb9      	subs	r1, r7, #2
 8009064:	f000 fedd 	bl	8009e22 <__any_on>
 8009068:	2800      	cmp	r0, #0
 800906a:	d144      	bne.n	80090f6 <__gethex+0x272>
 800906c:	f04f 0a02 	mov.w	sl, #2
 8009070:	4639      	mov	r1, r7
 8009072:	4620      	mov	r0, r4
 8009074:	f7ff fe9e 	bl	8008db4 <rshift>
 8009078:	443d      	add	r5, r7
 800907a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800907e:	42ab      	cmp	r3, r5
 8009080:	da4a      	bge.n	8009118 <__gethex+0x294>
 8009082:	4621      	mov	r1, r4
 8009084:	9802      	ldr	r0, [sp, #8]
 8009086:	f000 fa75 	bl	8009574 <_Bfree>
 800908a:	2300      	movs	r3, #0
 800908c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800908e:	27a3      	movs	r7, #163	; 0xa3
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	e789      	b.n	8008fa8 <__gethex+0x124>
 8009094:	1e73      	subs	r3, r6, #1
 8009096:	9a07      	ldr	r2, [sp, #28]
 8009098:	9305      	str	r3, [sp, #20]
 800909a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800909e:	4293      	cmp	r3, r2
 80090a0:	d019      	beq.n	80090d6 <__gethex+0x252>
 80090a2:	f1bb 0f20 	cmp.w	fp, #32
 80090a6:	d107      	bne.n	80090b8 <__gethex+0x234>
 80090a8:	9b04      	ldr	r3, [sp, #16]
 80090aa:	9a01      	ldr	r2, [sp, #4]
 80090ac:	f843 2b04 	str.w	r2, [r3], #4
 80090b0:	9304      	str	r3, [sp, #16]
 80090b2:	2300      	movs	r3, #0
 80090b4:	469b      	mov	fp, r3
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80090bc:	f7ff fecd 	bl	8008e5a <__hexdig_fun>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	f000 000f 	and.w	r0, r0, #15
 80090c6:	fa00 f00b 	lsl.w	r0, r0, fp
 80090ca:	4303      	orrs	r3, r0
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	f10b 0b04 	add.w	fp, fp, #4
 80090d2:	9b05      	ldr	r3, [sp, #20]
 80090d4:	e00d      	b.n	80090f2 <__gethex+0x26e>
 80090d6:	9b05      	ldr	r3, [sp, #20]
 80090d8:	9a08      	ldr	r2, [sp, #32]
 80090da:	4413      	add	r3, r2
 80090dc:	42bb      	cmp	r3, r7
 80090de:	d3e0      	bcc.n	80090a2 <__gethex+0x21e>
 80090e0:	4618      	mov	r0, r3
 80090e2:	4652      	mov	r2, sl
 80090e4:	9903      	ldr	r1, [sp, #12]
 80090e6:	9309      	str	r3, [sp, #36]	; 0x24
 80090e8:	f7fe f9b0 	bl	800744c <strncmp>
 80090ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090ee:	2800      	cmp	r0, #0
 80090f0:	d1d7      	bne.n	80090a2 <__gethex+0x21e>
 80090f2:	461e      	mov	r6, r3
 80090f4:	e78c      	b.n	8009010 <__gethex+0x18c>
 80090f6:	f04f 0a03 	mov.w	sl, #3
 80090fa:	e7b9      	b.n	8009070 <__gethex+0x1ec>
 80090fc:	da09      	bge.n	8009112 <__gethex+0x28e>
 80090fe:	1bf7      	subs	r7, r6, r7
 8009100:	4621      	mov	r1, r4
 8009102:	463a      	mov	r2, r7
 8009104:	9802      	ldr	r0, [sp, #8]
 8009106:	f000 fc4d 	bl	80099a4 <__lshift>
 800910a:	4604      	mov	r4, r0
 800910c:	1bed      	subs	r5, r5, r7
 800910e:	f100 0914 	add.w	r9, r0, #20
 8009112:	f04f 0a00 	mov.w	sl, #0
 8009116:	e7b0      	b.n	800907a <__gethex+0x1f6>
 8009118:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800911c:	42a8      	cmp	r0, r5
 800911e:	dd71      	ble.n	8009204 <__gethex+0x380>
 8009120:	1b45      	subs	r5, r0, r5
 8009122:	42ae      	cmp	r6, r5
 8009124:	dc34      	bgt.n	8009190 <__gethex+0x30c>
 8009126:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d028      	beq.n	8009180 <__gethex+0x2fc>
 800912e:	2b03      	cmp	r3, #3
 8009130:	d02a      	beq.n	8009188 <__gethex+0x304>
 8009132:	2b01      	cmp	r3, #1
 8009134:	d115      	bne.n	8009162 <__gethex+0x2de>
 8009136:	42ae      	cmp	r6, r5
 8009138:	d113      	bne.n	8009162 <__gethex+0x2de>
 800913a:	2e01      	cmp	r6, #1
 800913c:	d10b      	bne.n	8009156 <__gethex+0x2d2>
 800913e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009142:	9a06      	ldr	r2, [sp, #24]
 8009144:	2762      	movs	r7, #98	; 0x62
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	2301      	movs	r3, #1
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	f8c9 3000 	str.w	r3, [r9]
 8009150:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009152:	601c      	str	r4, [r3, #0]
 8009154:	e728      	b.n	8008fa8 <__gethex+0x124>
 8009156:	4620      	mov	r0, r4
 8009158:	1e71      	subs	r1, r6, #1
 800915a:	f000 fe62 	bl	8009e22 <__any_on>
 800915e:	2800      	cmp	r0, #0
 8009160:	d1ed      	bne.n	800913e <__gethex+0x2ba>
 8009162:	4621      	mov	r1, r4
 8009164:	9802      	ldr	r0, [sp, #8]
 8009166:	f000 fa05 	bl	8009574 <_Bfree>
 800916a:	2300      	movs	r3, #0
 800916c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800916e:	2750      	movs	r7, #80	; 0x50
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	e719      	b.n	8008fa8 <__gethex+0x124>
 8009174:	0800b1f0 	.word	0x0800b1f0
 8009178:	0800b173 	.word	0x0800b173
 800917c:	0800b184 	.word	0x0800b184
 8009180:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009182:	2b00      	cmp	r3, #0
 8009184:	d1ed      	bne.n	8009162 <__gethex+0x2de>
 8009186:	e7da      	b.n	800913e <__gethex+0x2ba>
 8009188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1d7      	bne.n	800913e <__gethex+0x2ba>
 800918e:	e7e8      	b.n	8009162 <__gethex+0x2de>
 8009190:	1e6f      	subs	r7, r5, #1
 8009192:	f1ba 0f00 	cmp.w	sl, #0
 8009196:	d132      	bne.n	80091fe <__gethex+0x37a>
 8009198:	b127      	cbz	r7, 80091a4 <__gethex+0x320>
 800919a:	4639      	mov	r1, r7
 800919c:	4620      	mov	r0, r4
 800919e:	f000 fe40 	bl	8009e22 <__any_on>
 80091a2:	4682      	mov	sl, r0
 80091a4:	2101      	movs	r1, #1
 80091a6:	117b      	asrs	r3, r7, #5
 80091a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80091ac:	f007 071f 	and.w	r7, r7, #31
 80091b0:	fa01 f707 	lsl.w	r7, r1, r7
 80091b4:	421f      	tst	r7, r3
 80091b6:	f04f 0702 	mov.w	r7, #2
 80091ba:	4629      	mov	r1, r5
 80091bc:	4620      	mov	r0, r4
 80091be:	bf18      	it	ne
 80091c0:	f04a 0a02 	orrne.w	sl, sl, #2
 80091c4:	1b76      	subs	r6, r6, r5
 80091c6:	f7ff fdf5 	bl	8008db4 <rshift>
 80091ca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80091ce:	f1ba 0f00 	cmp.w	sl, #0
 80091d2:	d048      	beq.n	8009266 <__gethex+0x3e2>
 80091d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d015      	beq.n	8009208 <__gethex+0x384>
 80091dc:	2b03      	cmp	r3, #3
 80091de:	d017      	beq.n	8009210 <__gethex+0x38c>
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d109      	bne.n	80091f8 <__gethex+0x374>
 80091e4:	f01a 0f02 	tst.w	sl, #2
 80091e8:	d006      	beq.n	80091f8 <__gethex+0x374>
 80091ea:	f8d9 0000 	ldr.w	r0, [r9]
 80091ee:	ea4a 0a00 	orr.w	sl, sl, r0
 80091f2:	f01a 0f01 	tst.w	sl, #1
 80091f6:	d10e      	bne.n	8009216 <__gethex+0x392>
 80091f8:	f047 0710 	orr.w	r7, r7, #16
 80091fc:	e033      	b.n	8009266 <__gethex+0x3e2>
 80091fe:	f04f 0a01 	mov.w	sl, #1
 8009202:	e7cf      	b.n	80091a4 <__gethex+0x320>
 8009204:	2701      	movs	r7, #1
 8009206:	e7e2      	b.n	80091ce <__gethex+0x34a>
 8009208:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800920a:	f1c3 0301 	rsb	r3, r3, #1
 800920e:	9315      	str	r3, [sp, #84]	; 0x54
 8009210:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0f0      	beq.n	80091f8 <__gethex+0x374>
 8009216:	f04f 0c00 	mov.w	ip, #0
 800921a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800921e:	f104 0314 	add.w	r3, r4, #20
 8009222:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009226:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800922a:	4618      	mov	r0, r3
 800922c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009230:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009234:	d01c      	beq.n	8009270 <__gethex+0x3ec>
 8009236:	3201      	adds	r2, #1
 8009238:	6002      	str	r2, [r0, #0]
 800923a:	2f02      	cmp	r7, #2
 800923c:	f104 0314 	add.w	r3, r4, #20
 8009240:	d13d      	bne.n	80092be <__gethex+0x43a>
 8009242:	f8d8 2000 	ldr.w	r2, [r8]
 8009246:	3a01      	subs	r2, #1
 8009248:	42b2      	cmp	r2, r6
 800924a:	d10a      	bne.n	8009262 <__gethex+0x3de>
 800924c:	2201      	movs	r2, #1
 800924e:	1171      	asrs	r1, r6, #5
 8009250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009254:	f006 061f 	and.w	r6, r6, #31
 8009258:	fa02 f606 	lsl.w	r6, r2, r6
 800925c:	421e      	tst	r6, r3
 800925e:	bf18      	it	ne
 8009260:	4617      	movne	r7, r2
 8009262:	f047 0720 	orr.w	r7, r7, #32
 8009266:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009268:	601c      	str	r4, [r3, #0]
 800926a:	9b06      	ldr	r3, [sp, #24]
 800926c:	601d      	str	r5, [r3, #0]
 800926e:	e69b      	b.n	8008fa8 <__gethex+0x124>
 8009270:	4299      	cmp	r1, r3
 8009272:	f843 cc04 	str.w	ip, [r3, #-4]
 8009276:	d8d8      	bhi.n	800922a <__gethex+0x3a6>
 8009278:	68a3      	ldr	r3, [r4, #8]
 800927a:	459b      	cmp	fp, r3
 800927c:	db17      	blt.n	80092ae <__gethex+0x42a>
 800927e:	6861      	ldr	r1, [r4, #4]
 8009280:	9802      	ldr	r0, [sp, #8]
 8009282:	3101      	adds	r1, #1
 8009284:	f000 f936 	bl	80094f4 <_Balloc>
 8009288:	4681      	mov	r9, r0
 800928a:	b918      	cbnz	r0, 8009294 <__gethex+0x410>
 800928c:	4602      	mov	r2, r0
 800928e:	2184      	movs	r1, #132	; 0x84
 8009290:	4b19      	ldr	r3, [pc, #100]	; (80092f8 <__gethex+0x474>)
 8009292:	e6ac      	b.n	8008fee <__gethex+0x16a>
 8009294:	6922      	ldr	r2, [r4, #16]
 8009296:	f104 010c 	add.w	r1, r4, #12
 800929a:	3202      	adds	r2, #2
 800929c:	0092      	lsls	r2, r2, #2
 800929e:	300c      	adds	r0, #12
 80092a0:	f000 f91a 	bl	80094d8 <memcpy>
 80092a4:	4621      	mov	r1, r4
 80092a6:	9802      	ldr	r0, [sp, #8]
 80092a8:	f000 f964 	bl	8009574 <_Bfree>
 80092ac:	464c      	mov	r4, r9
 80092ae:	6923      	ldr	r3, [r4, #16]
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	6122      	str	r2, [r4, #16]
 80092b4:	2201      	movs	r2, #1
 80092b6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092ba:	615a      	str	r2, [r3, #20]
 80092bc:	e7bd      	b.n	800923a <__gethex+0x3b6>
 80092be:	6922      	ldr	r2, [r4, #16]
 80092c0:	455a      	cmp	r2, fp
 80092c2:	dd0b      	ble.n	80092dc <__gethex+0x458>
 80092c4:	2101      	movs	r1, #1
 80092c6:	4620      	mov	r0, r4
 80092c8:	f7ff fd74 	bl	8008db4 <rshift>
 80092cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092d0:	3501      	adds	r5, #1
 80092d2:	42ab      	cmp	r3, r5
 80092d4:	f6ff aed5 	blt.w	8009082 <__gethex+0x1fe>
 80092d8:	2701      	movs	r7, #1
 80092da:	e7c2      	b.n	8009262 <__gethex+0x3de>
 80092dc:	f016 061f 	ands.w	r6, r6, #31
 80092e0:	d0fa      	beq.n	80092d8 <__gethex+0x454>
 80092e2:	449a      	add	sl, r3
 80092e4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80092e8:	f000 f9fa 	bl	80096e0 <__hi0bits>
 80092ec:	f1c6 0620 	rsb	r6, r6, #32
 80092f0:	42b0      	cmp	r0, r6
 80092f2:	dbe7      	blt.n	80092c4 <__gethex+0x440>
 80092f4:	e7f0      	b.n	80092d8 <__gethex+0x454>
 80092f6:	bf00      	nop
 80092f8:	0800b173 	.word	0x0800b173

080092fc <L_shift>:
 80092fc:	f1c2 0208 	rsb	r2, r2, #8
 8009300:	0092      	lsls	r2, r2, #2
 8009302:	b570      	push	{r4, r5, r6, lr}
 8009304:	f1c2 0620 	rsb	r6, r2, #32
 8009308:	6843      	ldr	r3, [r0, #4]
 800930a:	6804      	ldr	r4, [r0, #0]
 800930c:	fa03 f506 	lsl.w	r5, r3, r6
 8009310:	432c      	orrs	r4, r5
 8009312:	40d3      	lsrs	r3, r2
 8009314:	6004      	str	r4, [r0, #0]
 8009316:	f840 3f04 	str.w	r3, [r0, #4]!
 800931a:	4288      	cmp	r0, r1
 800931c:	d3f4      	bcc.n	8009308 <L_shift+0xc>
 800931e:	bd70      	pop	{r4, r5, r6, pc}

08009320 <__match>:
 8009320:	b530      	push	{r4, r5, lr}
 8009322:	6803      	ldr	r3, [r0, #0]
 8009324:	3301      	adds	r3, #1
 8009326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800932a:	b914      	cbnz	r4, 8009332 <__match+0x12>
 800932c:	6003      	str	r3, [r0, #0]
 800932e:	2001      	movs	r0, #1
 8009330:	bd30      	pop	{r4, r5, pc}
 8009332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009336:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800933a:	2d19      	cmp	r5, #25
 800933c:	bf98      	it	ls
 800933e:	3220      	addls	r2, #32
 8009340:	42a2      	cmp	r2, r4
 8009342:	d0f0      	beq.n	8009326 <__match+0x6>
 8009344:	2000      	movs	r0, #0
 8009346:	e7f3      	b.n	8009330 <__match+0x10>

08009348 <__hexnan>:
 8009348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934c:	2500      	movs	r5, #0
 800934e:	680b      	ldr	r3, [r1, #0]
 8009350:	4682      	mov	sl, r0
 8009352:	115e      	asrs	r6, r3, #5
 8009354:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009358:	f013 031f 	ands.w	r3, r3, #31
 800935c:	bf18      	it	ne
 800935e:	3604      	addne	r6, #4
 8009360:	1f37      	subs	r7, r6, #4
 8009362:	4690      	mov	r8, r2
 8009364:	46b9      	mov	r9, r7
 8009366:	463c      	mov	r4, r7
 8009368:	46ab      	mov	fp, r5
 800936a:	b087      	sub	sp, #28
 800936c:	6801      	ldr	r1, [r0, #0]
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	f846 5c04 	str.w	r5, [r6, #-4]
 8009374:	9502      	str	r5, [sp, #8]
 8009376:	784a      	ldrb	r2, [r1, #1]
 8009378:	1c4b      	adds	r3, r1, #1
 800937a:	9303      	str	r3, [sp, #12]
 800937c:	b342      	cbz	r2, 80093d0 <__hexnan+0x88>
 800937e:	4610      	mov	r0, r2
 8009380:	9105      	str	r1, [sp, #20]
 8009382:	9204      	str	r2, [sp, #16]
 8009384:	f7ff fd69 	bl	8008e5a <__hexdig_fun>
 8009388:	2800      	cmp	r0, #0
 800938a:	d14f      	bne.n	800942c <__hexnan+0xe4>
 800938c:	9a04      	ldr	r2, [sp, #16]
 800938e:	9905      	ldr	r1, [sp, #20]
 8009390:	2a20      	cmp	r2, #32
 8009392:	d818      	bhi.n	80093c6 <__hexnan+0x7e>
 8009394:	9b02      	ldr	r3, [sp, #8]
 8009396:	459b      	cmp	fp, r3
 8009398:	dd13      	ble.n	80093c2 <__hexnan+0x7a>
 800939a:	454c      	cmp	r4, r9
 800939c:	d206      	bcs.n	80093ac <__hexnan+0x64>
 800939e:	2d07      	cmp	r5, #7
 80093a0:	dc04      	bgt.n	80093ac <__hexnan+0x64>
 80093a2:	462a      	mov	r2, r5
 80093a4:	4649      	mov	r1, r9
 80093a6:	4620      	mov	r0, r4
 80093a8:	f7ff ffa8 	bl	80092fc <L_shift>
 80093ac:	4544      	cmp	r4, r8
 80093ae:	d950      	bls.n	8009452 <__hexnan+0x10a>
 80093b0:	2300      	movs	r3, #0
 80093b2:	f1a4 0904 	sub.w	r9, r4, #4
 80093b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80093ba:	461d      	mov	r5, r3
 80093bc:	464c      	mov	r4, r9
 80093be:	f8cd b008 	str.w	fp, [sp, #8]
 80093c2:	9903      	ldr	r1, [sp, #12]
 80093c4:	e7d7      	b.n	8009376 <__hexnan+0x2e>
 80093c6:	2a29      	cmp	r2, #41	; 0x29
 80093c8:	d156      	bne.n	8009478 <__hexnan+0x130>
 80093ca:	3102      	adds	r1, #2
 80093cc:	f8ca 1000 	str.w	r1, [sl]
 80093d0:	f1bb 0f00 	cmp.w	fp, #0
 80093d4:	d050      	beq.n	8009478 <__hexnan+0x130>
 80093d6:	454c      	cmp	r4, r9
 80093d8:	d206      	bcs.n	80093e8 <__hexnan+0xa0>
 80093da:	2d07      	cmp	r5, #7
 80093dc:	dc04      	bgt.n	80093e8 <__hexnan+0xa0>
 80093de:	462a      	mov	r2, r5
 80093e0:	4649      	mov	r1, r9
 80093e2:	4620      	mov	r0, r4
 80093e4:	f7ff ff8a 	bl	80092fc <L_shift>
 80093e8:	4544      	cmp	r4, r8
 80093ea:	d934      	bls.n	8009456 <__hexnan+0x10e>
 80093ec:	4623      	mov	r3, r4
 80093ee:	f1a8 0204 	sub.w	r2, r8, #4
 80093f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80093f6:	429f      	cmp	r7, r3
 80093f8:	f842 1f04 	str.w	r1, [r2, #4]!
 80093fc:	d2f9      	bcs.n	80093f2 <__hexnan+0xaa>
 80093fe:	1b3b      	subs	r3, r7, r4
 8009400:	f023 0303 	bic.w	r3, r3, #3
 8009404:	3304      	adds	r3, #4
 8009406:	3401      	adds	r4, #1
 8009408:	3e03      	subs	r6, #3
 800940a:	42b4      	cmp	r4, r6
 800940c:	bf88      	it	hi
 800940e:	2304      	movhi	r3, #4
 8009410:	2200      	movs	r2, #0
 8009412:	4443      	add	r3, r8
 8009414:	f843 2b04 	str.w	r2, [r3], #4
 8009418:	429f      	cmp	r7, r3
 800941a:	d2fb      	bcs.n	8009414 <__hexnan+0xcc>
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	b91b      	cbnz	r3, 8009428 <__hexnan+0xe0>
 8009420:	4547      	cmp	r7, r8
 8009422:	d127      	bne.n	8009474 <__hexnan+0x12c>
 8009424:	2301      	movs	r3, #1
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	2005      	movs	r0, #5
 800942a:	e026      	b.n	800947a <__hexnan+0x132>
 800942c:	3501      	adds	r5, #1
 800942e:	2d08      	cmp	r5, #8
 8009430:	f10b 0b01 	add.w	fp, fp, #1
 8009434:	dd06      	ble.n	8009444 <__hexnan+0xfc>
 8009436:	4544      	cmp	r4, r8
 8009438:	d9c3      	bls.n	80093c2 <__hexnan+0x7a>
 800943a:	2300      	movs	r3, #0
 800943c:	2501      	movs	r5, #1
 800943e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009442:	3c04      	subs	r4, #4
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	f000 000f 	and.w	r0, r0, #15
 800944a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800944e:	6022      	str	r2, [r4, #0]
 8009450:	e7b7      	b.n	80093c2 <__hexnan+0x7a>
 8009452:	2508      	movs	r5, #8
 8009454:	e7b5      	b.n	80093c2 <__hexnan+0x7a>
 8009456:	9b01      	ldr	r3, [sp, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d0df      	beq.n	800941c <__hexnan+0xd4>
 800945c:	f04f 32ff 	mov.w	r2, #4294967295
 8009460:	f1c3 0320 	rsb	r3, r3, #32
 8009464:	fa22 f303 	lsr.w	r3, r2, r3
 8009468:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800946c:	401a      	ands	r2, r3
 800946e:	f846 2c04 	str.w	r2, [r6, #-4]
 8009472:	e7d3      	b.n	800941c <__hexnan+0xd4>
 8009474:	3f04      	subs	r7, #4
 8009476:	e7d1      	b.n	800941c <__hexnan+0xd4>
 8009478:	2004      	movs	r0, #4
 800947a:	b007      	add	sp, #28
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009480 <_localeconv_r>:
 8009480:	4800      	ldr	r0, [pc, #0]	; (8009484 <_localeconv_r+0x4>)
 8009482:	4770      	bx	lr
 8009484:	20000170 	.word	0x20000170

08009488 <malloc>:
 8009488:	4b02      	ldr	r3, [pc, #8]	; (8009494 <malloc+0xc>)
 800948a:	4601      	mov	r1, r0
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f000 bd43 	b.w	8009f18 <_malloc_r>
 8009492:	bf00      	nop
 8009494:	20000018 	.word	0x20000018

08009498 <__ascii_mbtowc>:
 8009498:	b082      	sub	sp, #8
 800949a:	b901      	cbnz	r1, 800949e <__ascii_mbtowc+0x6>
 800949c:	a901      	add	r1, sp, #4
 800949e:	b142      	cbz	r2, 80094b2 <__ascii_mbtowc+0x1a>
 80094a0:	b14b      	cbz	r3, 80094b6 <__ascii_mbtowc+0x1e>
 80094a2:	7813      	ldrb	r3, [r2, #0]
 80094a4:	600b      	str	r3, [r1, #0]
 80094a6:	7812      	ldrb	r2, [r2, #0]
 80094a8:	1e10      	subs	r0, r2, #0
 80094aa:	bf18      	it	ne
 80094ac:	2001      	movne	r0, #1
 80094ae:	b002      	add	sp, #8
 80094b0:	4770      	bx	lr
 80094b2:	4610      	mov	r0, r2
 80094b4:	e7fb      	b.n	80094ae <__ascii_mbtowc+0x16>
 80094b6:	f06f 0001 	mvn.w	r0, #1
 80094ba:	e7f8      	b.n	80094ae <__ascii_mbtowc+0x16>

080094bc <memchr>:
 80094bc:	4603      	mov	r3, r0
 80094be:	b510      	push	{r4, lr}
 80094c0:	b2c9      	uxtb	r1, r1
 80094c2:	4402      	add	r2, r0
 80094c4:	4293      	cmp	r3, r2
 80094c6:	4618      	mov	r0, r3
 80094c8:	d101      	bne.n	80094ce <memchr+0x12>
 80094ca:	2000      	movs	r0, #0
 80094cc:	e003      	b.n	80094d6 <memchr+0x1a>
 80094ce:	7804      	ldrb	r4, [r0, #0]
 80094d0:	3301      	adds	r3, #1
 80094d2:	428c      	cmp	r4, r1
 80094d4:	d1f6      	bne.n	80094c4 <memchr+0x8>
 80094d6:	bd10      	pop	{r4, pc}

080094d8 <memcpy>:
 80094d8:	440a      	add	r2, r1
 80094da:	4291      	cmp	r1, r2
 80094dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80094e0:	d100      	bne.n	80094e4 <memcpy+0xc>
 80094e2:	4770      	bx	lr
 80094e4:	b510      	push	{r4, lr}
 80094e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094ea:	4291      	cmp	r1, r2
 80094ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094f0:	d1f9      	bne.n	80094e6 <memcpy+0xe>
 80094f2:	bd10      	pop	{r4, pc}

080094f4 <_Balloc>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80094f8:	4604      	mov	r4, r0
 80094fa:	460d      	mov	r5, r1
 80094fc:	b976      	cbnz	r6, 800951c <_Balloc+0x28>
 80094fe:	2010      	movs	r0, #16
 8009500:	f7ff ffc2 	bl	8009488 <malloc>
 8009504:	4602      	mov	r2, r0
 8009506:	6260      	str	r0, [r4, #36]	; 0x24
 8009508:	b920      	cbnz	r0, 8009514 <_Balloc+0x20>
 800950a:	2166      	movs	r1, #102	; 0x66
 800950c:	4b17      	ldr	r3, [pc, #92]	; (800956c <_Balloc+0x78>)
 800950e:	4818      	ldr	r0, [pc, #96]	; (8009570 <_Balloc+0x7c>)
 8009510:	f000 fedc 	bl	800a2cc <__assert_func>
 8009514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009518:	6006      	str	r6, [r0, #0]
 800951a:	60c6      	str	r6, [r0, #12]
 800951c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800951e:	68f3      	ldr	r3, [r6, #12]
 8009520:	b183      	cbz	r3, 8009544 <_Balloc+0x50>
 8009522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800952a:	b9b8      	cbnz	r0, 800955c <_Balloc+0x68>
 800952c:	2101      	movs	r1, #1
 800952e:	fa01 f605 	lsl.w	r6, r1, r5
 8009532:	1d72      	adds	r2, r6, #5
 8009534:	4620      	mov	r0, r4
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	f000 fc94 	bl	8009e64 <_calloc_r>
 800953c:	b160      	cbz	r0, 8009558 <_Balloc+0x64>
 800953e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009542:	e00e      	b.n	8009562 <_Balloc+0x6e>
 8009544:	2221      	movs	r2, #33	; 0x21
 8009546:	2104      	movs	r1, #4
 8009548:	4620      	mov	r0, r4
 800954a:	f000 fc8b 	bl	8009e64 <_calloc_r>
 800954e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009550:	60f0      	str	r0, [r6, #12]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d1e4      	bne.n	8009522 <_Balloc+0x2e>
 8009558:	2000      	movs	r0, #0
 800955a:	bd70      	pop	{r4, r5, r6, pc}
 800955c:	6802      	ldr	r2, [r0, #0]
 800955e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009562:	2300      	movs	r3, #0
 8009564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009568:	e7f7      	b.n	800955a <_Balloc+0x66>
 800956a:	bf00      	nop
 800956c:	0800b0fd 	.word	0x0800b0fd
 8009570:	0800b204 	.word	0x0800b204

08009574 <_Bfree>:
 8009574:	b570      	push	{r4, r5, r6, lr}
 8009576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009578:	4605      	mov	r5, r0
 800957a:	460c      	mov	r4, r1
 800957c:	b976      	cbnz	r6, 800959c <_Bfree+0x28>
 800957e:	2010      	movs	r0, #16
 8009580:	f7ff ff82 	bl	8009488 <malloc>
 8009584:	4602      	mov	r2, r0
 8009586:	6268      	str	r0, [r5, #36]	; 0x24
 8009588:	b920      	cbnz	r0, 8009594 <_Bfree+0x20>
 800958a:	218a      	movs	r1, #138	; 0x8a
 800958c:	4b08      	ldr	r3, [pc, #32]	; (80095b0 <_Bfree+0x3c>)
 800958e:	4809      	ldr	r0, [pc, #36]	; (80095b4 <_Bfree+0x40>)
 8009590:	f000 fe9c 	bl	800a2cc <__assert_func>
 8009594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009598:	6006      	str	r6, [r0, #0]
 800959a:	60c6      	str	r6, [r0, #12]
 800959c:	b13c      	cbz	r4, 80095ae <_Bfree+0x3a>
 800959e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80095a0:	6862      	ldr	r2, [r4, #4]
 80095a2:	68db      	ldr	r3, [r3, #12]
 80095a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095a8:	6021      	str	r1, [r4, #0]
 80095aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80095ae:	bd70      	pop	{r4, r5, r6, pc}
 80095b0:	0800b0fd 	.word	0x0800b0fd
 80095b4:	0800b204 	.word	0x0800b204

080095b8 <__multadd>:
 80095b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	4698      	mov	r8, r3
 80095be:	460c      	mov	r4, r1
 80095c0:	2300      	movs	r3, #0
 80095c2:	690e      	ldr	r6, [r1, #16]
 80095c4:	4607      	mov	r7, r0
 80095c6:	f101 0014 	add.w	r0, r1, #20
 80095ca:	6805      	ldr	r5, [r0, #0]
 80095cc:	3301      	adds	r3, #1
 80095ce:	b2a9      	uxth	r1, r5
 80095d0:	fb02 8101 	mla	r1, r2, r1, r8
 80095d4:	0c2d      	lsrs	r5, r5, #16
 80095d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80095da:	fb02 c505 	mla	r5, r2, r5, ip
 80095de:	b289      	uxth	r1, r1
 80095e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80095e4:	429e      	cmp	r6, r3
 80095e6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80095ea:	f840 1b04 	str.w	r1, [r0], #4
 80095ee:	dcec      	bgt.n	80095ca <__multadd+0x12>
 80095f0:	f1b8 0f00 	cmp.w	r8, #0
 80095f4:	d022      	beq.n	800963c <__multadd+0x84>
 80095f6:	68a3      	ldr	r3, [r4, #8]
 80095f8:	42b3      	cmp	r3, r6
 80095fa:	dc19      	bgt.n	8009630 <__multadd+0x78>
 80095fc:	6861      	ldr	r1, [r4, #4]
 80095fe:	4638      	mov	r0, r7
 8009600:	3101      	adds	r1, #1
 8009602:	f7ff ff77 	bl	80094f4 <_Balloc>
 8009606:	4605      	mov	r5, r0
 8009608:	b928      	cbnz	r0, 8009616 <__multadd+0x5e>
 800960a:	4602      	mov	r2, r0
 800960c:	21b5      	movs	r1, #181	; 0xb5
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <__multadd+0x8c>)
 8009610:	480d      	ldr	r0, [pc, #52]	; (8009648 <__multadd+0x90>)
 8009612:	f000 fe5b 	bl	800a2cc <__assert_func>
 8009616:	6922      	ldr	r2, [r4, #16]
 8009618:	f104 010c 	add.w	r1, r4, #12
 800961c:	3202      	adds	r2, #2
 800961e:	0092      	lsls	r2, r2, #2
 8009620:	300c      	adds	r0, #12
 8009622:	f7ff ff59 	bl	80094d8 <memcpy>
 8009626:	4621      	mov	r1, r4
 8009628:	4638      	mov	r0, r7
 800962a:	f7ff ffa3 	bl	8009574 <_Bfree>
 800962e:	462c      	mov	r4, r5
 8009630:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009634:	3601      	adds	r6, #1
 8009636:	f8c3 8014 	str.w	r8, [r3, #20]
 800963a:	6126      	str	r6, [r4, #16]
 800963c:	4620      	mov	r0, r4
 800963e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009642:	bf00      	nop
 8009644:	0800b173 	.word	0x0800b173
 8009648:	0800b204 	.word	0x0800b204

0800964c <__s2b>:
 800964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009650:	4615      	mov	r5, r2
 8009652:	2209      	movs	r2, #9
 8009654:	461f      	mov	r7, r3
 8009656:	3308      	adds	r3, #8
 8009658:	460c      	mov	r4, r1
 800965a:	fb93 f3f2 	sdiv	r3, r3, r2
 800965e:	4606      	mov	r6, r0
 8009660:	2201      	movs	r2, #1
 8009662:	2100      	movs	r1, #0
 8009664:	429a      	cmp	r2, r3
 8009666:	db09      	blt.n	800967c <__s2b+0x30>
 8009668:	4630      	mov	r0, r6
 800966a:	f7ff ff43 	bl	80094f4 <_Balloc>
 800966e:	b940      	cbnz	r0, 8009682 <__s2b+0x36>
 8009670:	4602      	mov	r2, r0
 8009672:	21ce      	movs	r1, #206	; 0xce
 8009674:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <__s2b+0x8c>)
 8009676:	4819      	ldr	r0, [pc, #100]	; (80096dc <__s2b+0x90>)
 8009678:	f000 fe28 	bl	800a2cc <__assert_func>
 800967c:	0052      	lsls	r2, r2, #1
 800967e:	3101      	adds	r1, #1
 8009680:	e7f0      	b.n	8009664 <__s2b+0x18>
 8009682:	9b08      	ldr	r3, [sp, #32]
 8009684:	2d09      	cmp	r5, #9
 8009686:	6143      	str	r3, [r0, #20]
 8009688:	f04f 0301 	mov.w	r3, #1
 800968c:	6103      	str	r3, [r0, #16]
 800968e:	dd16      	ble.n	80096be <__s2b+0x72>
 8009690:	f104 0909 	add.w	r9, r4, #9
 8009694:	46c8      	mov	r8, r9
 8009696:	442c      	add	r4, r5
 8009698:	f818 3b01 	ldrb.w	r3, [r8], #1
 800969c:	4601      	mov	r1, r0
 800969e:	220a      	movs	r2, #10
 80096a0:	4630      	mov	r0, r6
 80096a2:	3b30      	subs	r3, #48	; 0x30
 80096a4:	f7ff ff88 	bl	80095b8 <__multadd>
 80096a8:	45a0      	cmp	r8, r4
 80096aa:	d1f5      	bne.n	8009698 <__s2b+0x4c>
 80096ac:	f1a5 0408 	sub.w	r4, r5, #8
 80096b0:	444c      	add	r4, r9
 80096b2:	1b2d      	subs	r5, r5, r4
 80096b4:	1963      	adds	r3, r4, r5
 80096b6:	42bb      	cmp	r3, r7
 80096b8:	db04      	blt.n	80096c4 <__s2b+0x78>
 80096ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096be:	2509      	movs	r5, #9
 80096c0:	340a      	adds	r4, #10
 80096c2:	e7f6      	b.n	80096b2 <__s2b+0x66>
 80096c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80096c8:	4601      	mov	r1, r0
 80096ca:	220a      	movs	r2, #10
 80096cc:	4630      	mov	r0, r6
 80096ce:	3b30      	subs	r3, #48	; 0x30
 80096d0:	f7ff ff72 	bl	80095b8 <__multadd>
 80096d4:	e7ee      	b.n	80096b4 <__s2b+0x68>
 80096d6:	bf00      	nop
 80096d8:	0800b173 	.word	0x0800b173
 80096dc:	0800b204 	.word	0x0800b204

080096e0 <__hi0bits>:
 80096e0:	0c02      	lsrs	r2, r0, #16
 80096e2:	0412      	lsls	r2, r2, #16
 80096e4:	4603      	mov	r3, r0
 80096e6:	b9ca      	cbnz	r2, 800971c <__hi0bits+0x3c>
 80096e8:	0403      	lsls	r3, r0, #16
 80096ea:	2010      	movs	r0, #16
 80096ec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80096f0:	bf04      	itt	eq
 80096f2:	021b      	lsleq	r3, r3, #8
 80096f4:	3008      	addeq	r0, #8
 80096f6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80096fa:	bf04      	itt	eq
 80096fc:	011b      	lsleq	r3, r3, #4
 80096fe:	3004      	addeq	r0, #4
 8009700:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009704:	bf04      	itt	eq
 8009706:	009b      	lsleq	r3, r3, #2
 8009708:	3002      	addeq	r0, #2
 800970a:	2b00      	cmp	r3, #0
 800970c:	db05      	blt.n	800971a <__hi0bits+0x3a>
 800970e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009712:	f100 0001 	add.w	r0, r0, #1
 8009716:	bf08      	it	eq
 8009718:	2020      	moveq	r0, #32
 800971a:	4770      	bx	lr
 800971c:	2000      	movs	r0, #0
 800971e:	e7e5      	b.n	80096ec <__hi0bits+0xc>

08009720 <__lo0bits>:
 8009720:	6803      	ldr	r3, [r0, #0]
 8009722:	4602      	mov	r2, r0
 8009724:	f013 0007 	ands.w	r0, r3, #7
 8009728:	d00b      	beq.n	8009742 <__lo0bits+0x22>
 800972a:	07d9      	lsls	r1, r3, #31
 800972c:	d422      	bmi.n	8009774 <__lo0bits+0x54>
 800972e:	0798      	lsls	r0, r3, #30
 8009730:	bf49      	itett	mi
 8009732:	085b      	lsrmi	r3, r3, #1
 8009734:	089b      	lsrpl	r3, r3, #2
 8009736:	2001      	movmi	r0, #1
 8009738:	6013      	strmi	r3, [r2, #0]
 800973a:	bf5c      	itt	pl
 800973c:	2002      	movpl	r0, #2
 800973e:	6013      	strpl	r3, [r2, #0]
 8009740:	4770      	bx	lr
 8009742:	b299      	uxth	r1, r3
 8009744:	b909      	cbnz	r1, 800974a <__lo0bits+0x2a>
 8009746:	2010      	movs	r0, #16
 8009748:	0c1b      	lsrs	r3, r3, #16
 800974a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800974e:	bf04      	itt	eq
 8009750:	0a1b      	lsreq	r3, r3, #8
 8009752:	3008      	addeq	r0, #8
 8009754:	0719      	lsls	r1, r3, #28
 8009756:	bf04      	itt	eq
 8009758:	091b      	lsreq	r3, r3, #4
 800975a:	3004      	addeq	r0, #4
 800975c:	0799      	lsls	r1, r3, #30
 800975e:	bf04      	itt	eq
 8009760:	089b      	lsreq	r3, r3, #2
 8009762:	3002      	addeq	r0, #2
 8009764:	07d9      	lsls	r1, r3, #31
 8009766:	d403      	bmi.n	8009770 <__lo0bits+0x50>
 8009768:	085b      	lsrs	r3, r3, #1
 800976a:	f100 0001 	add.w	r0, r0, #1
 800976e:	d003      	beq.n	8009778 <__lo0bits+0x58>
 8009770:	6013      	str	r3, [r2, #0]
 8009772:	4770      	bx	lr
 8009774:	2000      	movs	r0, #0
 8009776:	4770      	bx	lr
 8009778:	2020      	movs	r0, #32
 800977a:	4770      	bx	lr

0800977c <__i2b>:
 800977c:	b510      	push	{r4, lr}
 800977e:	460c      	mov	r4, r1
 8009780:	2101      	movs	r1, #1
 8009782:	f7ff feb7 	bl	80094f4 <_Balloc>
 8009786:	4602      	mov	r2, r0
 8009788:	b928      	cbnz	r0, 8009796 <__i2b+0x1a>
 800978a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800978e:	4b04      	ldr	r3, [pc, #16]	; (80097a0 <__i2b+0x24>)
 8009790:	4804      	ldr	r0, [pc, #16]	; (80097a4 <__i2b+0x28>)
 8009792:	f000 fd9b 	bl	800a2cc <__assert_func>
 8009796:	2301      	movs	r3, #1
 8009798:	6144      	str	r4, [r0, #20]
 800979a:	6103      	str	r3, [r0, #16]
 800979c:	bd10      	pop	{r4, pc}
 800979e:	bf00      	nop
 80097a0:	0800b173 	.word	0x0800b173
 80097a4:	0800b204 	.word	0x0800b204

080097a8 <__multiply>:
 80097a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ac:	4614      	mov	r4, r2
 80097ae:	690a      	ldr	r2, [r1, #16]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	460d      	mov	r5, r1
 80097b4:	429a      	cmp	r2, r3
 80097b6:	bfbe      	ittt	lt
 80097b8:	460b      	movlt	r3, r1
 80097ba:	4625      	movlt	r5, r4
 80097bc:	461c      	movlt	r4, r3
 80097be:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80097c2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097c6:	68ab      	ldr	r3, [r5, #8]
 80097c8:	6869      	ldr	r1, [r5, #4]
 80097ca:	eb0a 0709 	add.w	r7, sl, r9
 80097ce:	42bb      	cmp	r3, r7
 80097d0:	b085      	sub	sp, #20
 80097d2:	bfb8      	it	lt
 80097d4:	3101      	addlt	r1, #1
 80097d6:	f7ff fe8d 	bl	80094f4 <_Balloc>
 80097da:	b930      	cbnz	r0, 80097ea <__multiply+0x42>
 80097dc:	4602      	mov	r2, r0
 80097de:	f240 115d 	movw	r1, #349	; 0x15d
 80097e2:	4b41      	ldr	r3, [pc, #260]	; (80098e8 <__multiply+0x140>)
 80097e4:	4841      	ldr	r0, [pc, #260]	; (80098ec <__multiply+0x144>)
 80097e6:	f000 fd71 	bl	800a2cc <__assert_func>
 80097ea:	f100 0614 	add.w	r6, r0, #20
 80097ee:	4633      	mov	r3, r6
 80097f0:	2200      	movs	r2, #0
 80097f2:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80097f6:	4543      	cmp	r3, r8
 80097f8:	d31e      	bcc.n	8009838 <__multiply+0x90>
 80097fa:	f105 0c14 	add.w	ip, r5, #20
 80097fe:	f104 0314 	add.w	r3, r4, #20
 8009802:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009806:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800980a:	9202      	str	r2, [sp, #8]
 800980c:	ebac 0205 	sub.w	r2, ip, r5
 8009810:	3a15      	subs	r2, #21
 8009812:	f022 0203 	bic.w	r2, r2, #3
 8009816:	3204      	adds	r2, #4
 8009818:	f105 0115 	add.w	r1, r5, #21
 800981c:	458c      	cmp	ip, r1
 800981e:	bf38      	it	cc
 8009820:	2204      	movcc	r2, #4
 8009822:	9201      	str	r2, [sp, #4]
 8009824:	9a02      	ldr	r2, [sp, #8]
 8009826:	9303      	str	r3, [sp, #12]
 8009828:	429a      	cmp	r2, r3
 800982a:	d808      	bhi.n	800983e <__multiply+0x96>
 800982c:	2f00      	cmp	r7, #0
 800982e:	dc55      	bgt.n	80098dc <__multiply+0x134>
 8009830:	6107      	str	r7, [r0, #16]
 8009832:	b005      	add	sp, #20
 8009834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009838:	f843 2b04 	str.w	r2, [r3], #4
 800983c:	e7db      	b.n	80097f6 <__multiply+0x4e>
 800983e:	f8b3 a000 	ldrh.w	sl, [r3]
 8009842:	f1ba 0f00 	cmp.w	sl, #0
 8009846:	d020      	beq.n	800988a <__multiply+0xe2>
 8009848:	46b1      	mov	r9, r6
 800984a:	2200      	movs	r2, #0
 800984c:	f105 0e14 	add.w	lr, r5, #20
 8009850:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009854:	f8d9 b000 	ldr.w	fp, [r9]
 8009858:	b2a1      	uxth	r1, r4
 800985a:	fa1f fb8b 	uxth.w	fp, fp
 800985e:	fb0a b101 	mla	r1, sl, r1, fp
 8009862:	4411      	add	r1, r2
 8009864:	f8d9 2000 	ldr.w	r2, [r9]
 8009868:	0c24      	lsrs	r4, r4, #16
 800986a:	0c12      	lsrs	r2, r2, #16
 800986c:	fb0a 2404 	mla	r4, sl, r4, r2
 8009870:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009874:	b289      	uxth	r1, r1
 8009876:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800987a:	45f4      	cmp	ip, lr
 800987c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009880:	f849 1b04 	str.w	r1, [r9], #4
 8009884:	d8e4      	bhi.n	8009850 <__multiply+0xa8>
 8009886:	9901      	ldr	r1, [sp, #4]
 8009888:	5072      	str	r2, [r6, r1]
 800988a:	9a03      	ldr	r2, [sp, #12]
 800988c:	3304      	adds	r3, #4
 800988e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009892:	f1b9 0f00 	cmp.w	r9, #0
 8009896:	d01f      	beq.n	80098d8 <__multiply+0x130>
 8009898:	46b6      	mov	lr, r6
 800989a:	f04f 0a00 	mov.w	sl, #0
 800989e:	6834      	ldr	r4, [r6, #0]
 80098a0:	f105 0114 	add.w	r1, r5, #20
 80098a4:	880a      	ldrh	r2, [r1, #0]
 80098a6:	f8be b002 	ldrh.w	fp, [lr, #2]
 80098aa:	b2a4      	uxth	r4, r4
 80098ac:	fb09 b202 	mla	r2, r9, r2, fp
 80098b0:	4492      	add	sl, r2
 80098b2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80098b6:	f84e 4b04 	str.w	r4, [lr], #4
 80098ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80098be:	f8be 2000 	ldrh.w	r2, [lr]
 80098c2:	0c24      	lsrs	r4, r4, #16
 80098c4:	fb09 2404 	mla	r4, r9, r4, r2
 80098c8:	458c      	cmp	ip, r1
 80098ca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80098ce:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80098d2:	d8e7      	bhi.n	80098a4 <__multiply+0xfc>
 80098d4:	9a01      	ldr	r2, [sp, #4]
 80098d6:	50b4      	str	r4, [r6, r2]
 80098d8:	3604      	adds	r6, #4
 80098da:	e7a3      	b.n	8009824 <__multiply+0x7c>
 80098dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1a5      	bne.n	8009830 <__multiply+0x88>
 80098e4:	3f01      	subs	r7, #1
 80098e6:	e7a1      	b.n	800982c <__multiply+0x84>
 80098e8:	0800b173 	.word	0x0800b173
 80098ec:	0800b204 	.word	0x0800b204

080098f0 <__pow5mult>:
 80098f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098f4:	4615      	mov	r5, r2
 80098f6:	f012 0203 	ands.w	r2, r2, #3
 80098fa:	4606      	mov	r6, r0
 80098fc:	460f      	mov	r7, r1
 80098fe:	d007      	beq.n	8009910 <__pow5mult+0x20>
 8009900:	4c25      	ldr	r4, [pc, #148]	; (8009998 <__pow5mult+0xa8>)
 8009902:	3a01      	subs	r2, #1
 8009904:	2300      	movs	r3, #0
 8009906:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800990a:	f7ff fe55 	bl	80095b8 <__multadd>
 800990e:	4607      	mov	r7, r0
 8009910:	10ad      	asrs	r5, r5, #2
 8009912:	d03d      	beq.n	8009990 <__pow5mult+0xa0>
 8009914:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009916:	b97c      	cbnz	r4, 8009938 <__pow5mult+0x48>
 8009918:	2010      	movs	r0, #16
 800991a:	f7ff fdb5 	bl	8009488 <malloc>
 800991e:	4602      	mov	r2, r0
 8009920:	6270      	str	r0, [r6, #36]	; 0x24
 8009922:	b928      	cbnz	r0, 8009930 <__pow5mult+0x40>
 8009924:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009928:	4b1c      	ldr	r3, [pc, #112]	; (800999c <__pow5mult+0xac>)
 800992a:	481d      	ldr	r0, [pc, #116]	; (80099a0 <__pow5mult+0xb0>)
 800992c:	f000 fcce 	bl	800a2cc <__assert_func>
 8009930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009934:	6004      	str	r4, [r0, #0]
 8009936:	60c4      	str	r4, [r0, #12]
 8009938:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800993c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009940:	b94c      	cbnz	r4, 8009956 <__pow5mult+0x66>
 8009942:	f240 2171 	movw	r1, #625	; 0x271
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff ff18 	bl	800977c <__i2b>
 800994c:	2300      	movs	r3, #0
 800994e:	4604      	mov	r4, r0
 8009950:	f8c8 0008 	str.w	r0, [r8, #8]
 8009954:	6003      	str	r3, [r0, #0]
 8009956:	f04f 0900 	mov.w	r9, #0
 800995a:	07eb      	lsls	r3, r5, #31
 800995c:	d50a      	bpl.n	8009974 <__pow5mult+0x84>
 800995e:	4639      	mov	r1, r7
 8009960:	4622      	mov	r2, r4
 8009962:	4630      	mov	r0, r6
 8009964:	f7ff ff20 	bl	80097a8 <__multiply>
 8009968:	4680      	mov	r8, r0
 800996a:	4639      	mov	r1, r7
 800996c:	4630      	mov	r0, r6
 800996e:	f7ff fe01 	bl	8009574 <_Bfree>
 8009972:	4647      	mov	r7, r8
 8009974:	106d      	asrs	r5, r5, #1
 8009976:	d00b      	beq.n	8009990 <__pow5mult+0xa0>
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	b938      	cbnz	r0, 800998c <__pow5mult+0x9c>
 800997c:	4622      	mov	r2, r4
 800997e:	4621      	mov	r1, r4
 8009980:	4630      	mov	r0, r6
 8009982:	f7ff ff11 	bl	80097a8 <__multiply>
 8009986:	6020      	str	r0, [r4, #0]
 8009988:	f8c0 9000 	str.w	r9, [r0]
 800998c:	4604      	mov	r4, r0
 800998e:	e7e4      	b.n	800995a <__pow5mult+0x6a>
 8009990:	4638      	mov	r0, r7
 8009992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009996:	bf00      	nop
 8009998:	0800b358 	.word	0x0800b358
 800999c:	0800b0fd 	.word	0x0800b0fd
 80099a0:	0800b204 	.word	0x0800b204

080099a4 <__lshift>:
 80099a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a8:	460c      	mov	r4, r1
 80099aa:	4607      	mov	r7, r0
 80099ac:	4691      	mov	r9, r2
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	6849      	ldr	r1, [r1, #4]
 80099b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099b6:	68a3      	ldr	r3, [r4, #8]
 80099b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099bc:	f108 0601 	add.w	r6, r8, #1
 80099c0:	42b3      	cmp	r3, r6
 80099c2:	db0b      	blt.n	80099dc <__lshift+0x38>
 80099c4:	4638      	mov	r0, r7
 80099c6:	f7ff fd95 	bl	80094f4 <_Balloc>
 80099ca:	4605      	mov	r5, r0
 80099cc:	b948      	cbnz	r0, 80099e2 <__lshift+0x3e>
 80099ce:	4602      	mov	r2, r0
 80099d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80099d4:	4b27      	ldr	r3, [pc, #156]	; (8009a74 <__lshift+0xd0>)
 80099d6:	4828      	ldr	r0, [pc, #160]	; (8009a78 <__lshift+0xd4>)
 80099d8:	f000 fc78 	bl	800a2cc <__assert_func>
 80099dc:	3101      	adds	r1, #1
 80099de:	005b      	lsls	r3, r3, #1
 80099e0:	e7ee      	b.n	80099c0 <__lshift+0x1c>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f100 0114 	add.w	r1, r0, #20
 80099e8:	f100 0210 	add.w	r2, r0, #16
 80099ec:	4618      	mov	r0, r3
 80099ee:	4553      	cmp	r3, sl
 80099f0:	db33      	blt.n	8009a5a <__lshift+0xb6>
 80099f2:	6920      	ldr	r0, [r4, #16]
 80099f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099f8:	f104 0314 	add.w	r3, r4, #20
 80099fc:	f019 091f 	ands.w	r9, r9, #31
 8009a00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a08:	d02b      	beq.n	8009a62 <__lshift+0xbe>
 8009a0a:	468a      	mov	sl, r1
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	f1c9 0e20 	rsb	lr, r9, #32
 8009a12:	6818      	ldr	r0, [r3, #0]
 8009a14:	fa00 f009 	lsl.w	r0, r0, r9
 8009a18:	4302      	orrs	r2, r0
 8009a1a:	f84a 2b04 	str.w	r2, [sl], #4
 8009a1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a22:	459c      	cmp	ip, r3
 8009a24:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a28:	d8f3      	bhi.n	8009a12 <__lshift+0x6e>
 8009a2a:	ebac 0304 	sub.w	r3, ip, r4
 8009a2e:	3b15      	subs	r3, #21
 8009a30:	f023 0303 	bic.w	r3, r3, #3
 8009a34:	3304      	adds	r3, #4
 8009a36:	f104 0015 	add.w	r0, r4, #21
 8009a3a:	4584      	cmp	ip, r0
 8009a3c:	bf38      	it	cc
 8009a3e:	2304      	movcc	r3, #4
 8009a40:	50ca      	str	r2, [r1, r3]
 8009a42:	b10a      	cbz	r2, 8009a48 <__lshift+0xa4>
 8009a44:	f108 0602 	add.w	r6, r8, #2
 8009a48:	3e01      	subs	r6, #1
 8009a4a:	4638      	mov	r0, r7
 8009a4c:	4621      	mov	r1, r4
 8009a4e:	612e      	str	r6, [r5, #16]
 8009a50:	f7ff fd90 	bl	8009574 <_Bfree>
 8009a54:	4628      	mov	r0, r5
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a5e:	3301      	adds	r3, #1
 8009a60:	e7c5      	b.n	80099ee <__lshift+0x4a>
 8009a62:	3904      	subs	r1, #4
 8009a64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a68:	459c      	cmp	ip, r3
 8009a6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a6e:	d8f9      	bhi.n	8009a64 <__lshift+0xc0>
 8009a70:	e7ea      	b.n	8009a48 <__lshift+0xa4>
 8009a72:	bf00      	nop
 8009a74:	0800b173 	.word	0x0800b173
 8009a78:	0800b204 	.word	0x0800b204

08009a7c <__mcmp>:
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	690a      	ldr	r2, [r1, #16]
 8009a80:	6900      	ldr	r0, [r0, #16]
 8009a82:	b530      	push	{r4, r5, lr}
 8009a84:	1a80      	subs	r0, r0, r2
 8009a86:	d10d      	bne.n	8009aa4 <__mcmp+0x28>
 8009a88:	3314      	adds	r3, #20
 8009a8a:	3114      	adds	r1, #20
 8009a8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009a90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009a94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a9c:	4295      	cmp	r5, r2
 8009a9e:	d002      	beq.n	8009aa6 <__mcmp+0x2a>
 8009aa0:	d304      	bcc.n	8009aac <__mcmp+0x30>
 8009aa2:	2001      	movs	r0, #1
 8009aa4:	bd30      	pop	{r4, r5, pc}
 8009aa6:	42a3      	cmp	r3, r4
 8009aa8:	d3f4      	bcc.n	8009a94 <__mcmp+0x18>
 8009aaa:	e7fb      	b.n	8009aa4 <__mcmp+0x28>
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	e7f8      	b.n	8009aa4 <__mcmp+0x28>
	...

08009ab4 <__mdiff>:
 8009ab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab8:	460c      	mov	r4, r1
 8009aba:	4606      	mov	r6, r0
 8009abc:	4611      	mov	r1, r2
 8009abe:	4620      	mov	r0, r4
 8009ac0:	4692      	mov	sl, r2
 8009ac2:	f7ff ffdb 	bl	8009a7c <__mcmp>
 8009ac6:	1e05      	subs	r5, r0, #0
 8009ac8:	d111      	bne.n	8009aee <__mdiff+0x3a>
 8009aca:	4629      	mov	r1, r5
 8009acc:	4630      	mov	r0, r6
 8009ace:	f7ff fd11 	bl	80094f4 <_Balloc>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	b928      	cbnz	r0, 8009ae2 <__mdiff+0x2e>
 8009ad6:	f240 2132 	movw	r1, #562	; 0x232
 8009ada:	4b3c      	ldr	r3, [pc, #240]	; (8009bcc <__mdiff+0x118>)
 8009adc:	483c      	ldr	r0, [pc, #240]	; (8009bd0 <__mdiff+0x11c>)
 8009ade:	f000 fbf5 	bl	800a2cc <__assert_func>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ae8:	4610      	mov	r0, r2
 8009aea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aee:	bfa4      	itt	ge
 8009af0:	4653      	movge	r3, sl
 8009af2:	46a2      	movge	sl, r4
 8009af4:	4630      	mov	r0, r6
 8009af6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8009afa:	bfa6      	itte	ge
 8009afc:	461c      	movge	r4, r3
 8009afe:	2500      	movge	r5, #0
 8009b00:	2501      	movlt	r5, #1
 8009b02:	f7ff fcf7 	bl	80094f4 <_Balloc>
 8009b06:	4602      	mov	r2, r0
 8009b08:	b918      	cbnz	r0, 8009b12 <__mdiff+0x5e>
 8009b0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <__mdiff+0x118>)
 8009b10:	e7e4      	b.n	8009adc <__mdiff+0x28>
 8009b12:	f100 0814 	add.w	r8, r0, #20
 8009b16:	f8da 7010 	ldr.w	r7, [sl, #16]
 8009b1a:	60c5      	str	r5, [r0, #12]
 8009b1c:	f04f 0c00 	mov.w	ip, #0
 8009b20:	f10a 0514 	add.w	r5, sl, #20
 8009b24:	f10a 0010 	add.w	r0, sl, #16
 8009b28:	46c2      	mov	sl, r8
 8009b2a:	6926      	ldr	r6, [r4, #16]
 8009b2c:	f104 0914 	add.w	r9, r4, #20
 8009b30:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8009b34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009b38:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8009b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009b40:	fa1f f18b 	uxth.w	r1, fp
 8009b44:	4461      	add	r1, ip
 8009b46:	fa1f fc83 	uxth.w	ip, r3
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	eba1 010c 	sub.w	r1, r1, ip
 8009b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009b54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009b58:	b289      	uxth	r1, r1
 8009b5a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009b5e:	454e      	cmp	r6, r9
 8009b60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009b64:	f84a 3b04 	str.w	r3, [sl], #4
 8009b68:	d8e6      	bhi.n	8009b38 <__mdiff+0x84>
 8009b6a:	1b33      	subs	r3, r6, r4
 8009b6c:	3b15      	subs	r3, #21
 8009b6e:	f023 0303 	bic.w	r3, r3, #3
 8009b72:	3415      	adds	r4, #21
 8009b74:	3304      	adds	r3, #4
 8009b76:	42a6      	cmp	r6, r4
 8009b78:	bf38      	it	cc
 8009b7a:	2304      	movcc	r3, #4
 8009b7c:	441d      	add	r5, r3
 8009b7e:	4443      	add	r3, r8
 8009b80:	461e      	mov	r6, r3
 8009b82:	462c      	mov	r4, r5
 8009b84:	4574      	cmp	r4, lr
 8009b86:	d30e      	bcc.n	8009ba6 <__mdiff+0xf2>
 8009b88:	f10e 0103 	add.w	r1, lr, #3
 8009b8c:	1b49      	subs	r1, r1, r5
 8009b8e:	f021 0103 	bic.w	r1, r1, #3
 8009b92:	3d03      	subs	r5, #3
 8009b94:	45ae      	cmp	lr, r5
 8009b96:	bf38      	it	cc
 8009b98:	2100      	movcc	r1, #0
 8009b9a:	4419      	add	r1, r3
 8009b9c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009ba0:	b18b      	cbz	r3, 8009bc6 <__mdiff+0x112>
 8009ba2:	6117      	str	r7, [r2, #16]
 8009ba4:	e7a0      	b.n	8009ae8 <__mdiff+0x34>
 8009ba6:	f854 8b04 	ldr.w	r8, [r4], #4
 8009baa:	fa1f f188 	uxth.w	r1, r8
 8009bae:	4461      	add	r1, ip
 8009bb0:	1408      	asrs	r0, r1, #16
 8009bb2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8009bb6:	b289      	uxth	r1, r1
 8009bb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009bc0:	f846 1b04 	str.w	r1, [r6], #4
 8009bc4:	e7de      	b.n	8009b84 <__mdiff+0xd0>
 8009bc6:	3f01      	subs	r7, #1
 8009bc8:	e7e8      	b.n	8009b9c <__mdiff+0xe8>
 8009bca:	bf00      	nop
 8009bcc:	0800b173 	.word	0x0800b173
 8009bd0:	0800b204 	.word	0x0800b204

08009bd4 <__ulp>:
 8009bd4:	4b11      	ldr	r3, [pc, #68]	; (8009c1c <__ulp+0x48>)
 8009bd6:	400b      	ands	r3, r1
 8009bd8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dd02      	ble.n	8009be6 <__ulp+0x12>
 8009be0:	2000      	movs	r0, #0
 8009be2:	4619      	mov	r1, r3
 8009be4:	4770      	bx	lr
 8009be6:	425b      	negs	r3, r3
 8009be8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009bec:	f04f 0000 	mov.w	r0, #0
 8009bf0:	f04f 0100 	mov.w	r1, #0
 8009bf4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009bf8:	da04      	bge.n	8009c04 <__ulp+0x30>
 8009bfa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009bfe:	fa43 f102 	asr.w	r1, r3, r2
 8009c02:	4770      	bx	lr
 8009c04:	f1a2 0314 	sub.w	r3, r2, #20
 8009c08:	2b1e      	cmp	r3, #30
 8009c0a:	bfd6      	itet	le
 8009c0c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009c10:	2301      	movgt	r3, #1
 8009c12:	fa22 f303 	lsrle.w	r3, r2, r3
 8009c16:	4618      	mov	r0, r3
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	7ff00000 	.word	0x7ff00000

08009c20 <__b2d>:
 8009c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c24:	6907      	ldr	r7, [r0, #16]
 8009c26:	f100 0914 	add.w	r9, r0, #20
 8009c2a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8009c2e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009c32:	f1a7 0804 	sub.w	r8, r7, #4
 8009c36:	4630      	mov	r0, r6
 8009c38:	f7ff fd52 	bl	80096e0 <__hi0bits>
 8009c3c:	f1c0 0320 	rsb	r3, r0, #32
 8009c40:	280a      	cmp	r0, #10
 8009c42:	600b      	str	r3, [r1, #0]
 8009c44:	491f      	ldr	r1, [pc, #124]	; (8009cc4 <__b2d+0xa4>)
 8009c46:	dc17      	bgt.n	8009c78 <__b2d+0x58>
 8009c48:	45c1      	cmp	r9, r8
 8009c4a:	bf28      	it	cs
 8009c4c:	2200      	movcs	r2, #0
 8009c4e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009c52:	fa26 f30c 	lsr.w	r3, r6, ip
 8009c56:	bf38      	it	cc
 8009c58:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c5c:	ea43 0501 	orr.w	r5, r3, r1
 8009c60:	f100 0315 	add.w	r3, r0, #21
 8009c64:	fa06 f303 	lsl.w	r3, r6, r3
 8009c68:	fa22 f20c 	lsr.w	r2, r2, ip
 8009c6c:	ea43 0402 	orr.w	r4, r3, r2
 8009c70:	4620      	mov	r0, r4
 8009c72:	4629      	mov	r1, r5
 8009c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c78:	45c1      	cmp	r9, r8
 8009c7a:	bf2e      	itee	cs
 8009c7c:	2200      	movcs	r2, #0
 8009c7e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009c82:	f1a7 0808 	subcc.w	r8, r7, #8
 8009c86:	f1b0 030b 	subs.w	r3, r0, #11
 8009c8a:	d016      	beq.n	8009cba <__b2d+0x9a>
 8009c8c:	f1c3 0720 	rsb	r7, r3, #32
 8009c90:	fa22 f107 	lsr.w	r1, r2, r7
 8009c94:	45c8      	cmp	r8, r9
 8009c96:	fa06 f603 	lsl.w	r6, r6, r3
 8009c9a:	ea46 0601 	orr.w	r6, r6, r1
 8009c9e:	bf94      	ite	ls
 8009ca0:	2100      	movls	r1, #0
 8009ca2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009ca6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8009caa:	fa02 f003 	lsl.w	r0, r2, r3
 8009cae:	40f9      	lsrs	r1, r7
 8009cb0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009cb4:	ea40 0401 	orr.w	r4, r0, r1
 8009cb8:	e7da      	b.n	8009c70 <__b2d+0x50>
 8009cba:	4614      	mov	r4, r2
 8009cbc:	ea46 0501 	orr.w	r5, r6, r1
 8009cc0:	e7d6      	b.n	8009c70 <__b2d+0x50>
 8009cc2:	bf00      	nop
 8009cc4:	3ff00000 	.word	0x3ff00000

08009cc8 <__d2b>:
 8009cc8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009ccc:	2101      	movs	r1, #1
 8009cce:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8009cd2:	4690      	mov	r8, r2
 8009cd4:	461d      	mov	r5, r3
 8009cd6:	f7ff fc0d 	bl	80094f4 <_Balloc>
 8009cda:	4604      	mov	r4, r0
 8009cdc:	b930      	cbnz	r0, 8009cec <__d2b+0x24>
 8009cde:	4602      	mov	r2, r0
 8009ce0:	f240 310a 	movw	r1, #778	; 0x30a
 8009ce4:	4b24      	ldr	r3, [pc, #144]	; (8009d78 <__d2b+0xb0>)
 8009ce6:	4825      	ldr	r0, [pc, #148]	; (8009d7c <__d2b+0xb4>)
 8009ce8:	f000 faf0 	bl	800a2cc <__assert_func>
 8009cec:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009cf0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009cf4:	bb2d      	cbnz	r5, 8009d42 <__d2b+0x7a>
 8009cf6:	9301      	str	r3, [sp, #4]
 8009cf8:	f1b8 0300 	subs.w	r3, r8, #0
 8009cfc:	d026      	beq.n	8009d4c <__d2b+0x84>
 8009cfe:	4668      	mov	r0, sp
 8009d00:	9300      	str	r3, [sp, #0]
 8009d02:	f7ff fd0d 	bl	8009720 <__lo0bits>
 8009d06:	9900      	ldr	r1, [sp, #0]
 8009d08:	b1f0      	cbz	r0, 8009d48 <__d2b+0x80>
 8009d0a:	9a01      	ldr	r2, [sp, #4]
 8009d0c:	f1c0 0320 	rsb	r3, r0, #32
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	430b      	orrs	r3, r1
 8009d16:	40c2      	lsrs	r2, r0
 8009d18:	6163      	str	r3, [r4, #20]
 8009d1a:	9201      	str	r2, [sp, #4]
 8009d1c:	9b01      	ldr	r3, [sp, #4]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	bf14      	ite	ne
 8009d22:	2102      	movne	r1, #2
 8009d24:	2101      	moveq	r1, #1
 8009d26:	61a3      	str	r3, [r4, #24]
 8009d28:	6121      	str	r1, [r4, #16]
 8009d2a:	b1c5      	cbz	r5, 8009d5e <__d2b+0x96>
 8009d2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009d30:	4405      	add	r5, r0
 8009d32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009d36:	603d      	str	r5, [r7, #0]
 8009d38:	6030      	str	r0, [r6, #0]
 8009d3a:	4620      	mov	r0, r4
 8009d3c:	b002      	add	sp, #8
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d46:	e7d6      	b.n	8009cf6 <__d2b+0x2e>
 8009d48:	6161      	str	r1, [r4, #20]
 8009d4a:	e7e7      	b.n	8009d1c <__d2b+0x54>
 8009d4c:	a801      	add	r0, sp, #4
 8009d4e:	f7ff fce7 	bl	8009720 <__lo0bits>
 8009d52:	2101      	movs	r1, #1
 8009d54:	9b01      	ldr	r3, [sp, #4]
 8009d56:	6121      	str	r1, [r4, #16]
 8009d58:	6163      	str	r3, [r4, #20]
 8009d5a:	3020      	adds	r0, #32
 8009d5c:	e7e5      	b.n	8009d2a <__d2b+0x62>
 8009d5e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009d62:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009d66:	6038      	str	r0, [r7, #0]
 8009d68:	6918      	ldr	r0, [r3, #16]
 8009d6a:	f7ff fcb9 	bl	80096e0 <__hi0bits>
 8009d6e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009d72:	6031      	str	r1, [r6, #0]
 8009d74:	e7e1      	b.n	8009d3a <__d2b+0x72>
 8009d76:	bf00      	nop
 8009d78:	0800b173 	.word	0x0800b173
 8009d7c:	0800b204 	.word	0x0800b204

08009d80 <__ratio>:
 8009d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d84:	4688      	mov	r8, r1
 8009d86:	4669      	mov	r1, sp
 8009d88:	4681      	mov	r9, r0
 8009d8a:	f7ff ff49 	bl	8009c20 <__b2d>
 8009d8e:	460f      	mov	r7, r1
 8009d90:	4604      	mov	r4, r0
 8009d92:	460d      	mov	r5, r1
 8009d94:	4640      	mov	r0, r8
 8009d96:	a901      	add	r1, sp, #4
 8009d98:	f7ff ff42 	bl	8009c20 <__b2d>
 8009d9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009da0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009da4:	468b      	mov	fp, r1
 8009da6:	eba3 0c02 	sub.w	ip, r3, r2
 8009daa:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	bfd5      	itete	le
 8009db8:	460a      	movle	r2, r1
 8009dba:	462a      	movgt	r2, r5
 8009dbc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009dc0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009dc4:	bfd8      	it	le
 8009dc6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009dca:	465b      	mov	r3, fp
 8009dcc:	4602      	mov	r2, r0
 8009dce:	4639      	mov	r1, r7
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7f6 fd5f 	bl	8000894 <__aeabi_ddiv>
 8009dd6:	b003      	add	sp, #12
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ddc <__copybits>:
 8009ddc:	3901      	subs	r1, #1
 8009dde:	b570      	push	{r4, r5, r6, lr}
 8009de0:	1149      	asrs	r1, r1, #5
 8009de2:	6914      	ldr	r4, [r2, #16]
 8009de4:	3101      	adds	r1, #1
 8009de6:	f102 0314 	add.w	r3, r2, #20
 8009dea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009dee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009df2:	1f05      	subs	r5, r0, #4
 8009df4:	42a3      	cmp	r3, r4
 8009df6:	d30c      	bcc.n	8009e12 <__copybits+0x36>
 8009df8:	1aa3      	subs	r3, r4, r2
 8009dfa:	3b11      	subs	r3, #17
 8009dfc:	f023 0303 	bic.w	r3, r3, #3
 8009e00:	3211      	adds	r2, #17
 8009e02:	42a2      	cmp	r2, r4
 8009e04:	bf88      	it	hi
 8009e06:	2300      	movhi	r3, #0
 8009e08:	4418      	add	r0, r3
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4288      	cmp	r0, r1
 8009e0e:	d305      	bcc.n	8009e1c <__copybits+0x40>
 8009e10:	bd70      	pop	{r4, r5, r6, pc}
 8009e12:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e16:	f845 6f04 	str.w	r6, [r5, #4]!
 8009e1a:	e7eb      	b.n	8009df4 <__copybits+0x18>
 8009e1c:	f840 3b04 	str.w	r3, [r0], #4
 8009e20:	e7f4      	b.n	8009e0c <__copybits+0x30>

08009e22 <__any_on>:
 8009e22:	f100 0214 	add.w	r2, r0, #20
 8009e26:	6900      	ldr	r0, [r0, #16]
 8009e28:	114b      	asrs	r3, r1, #5
 8009e2a:	4298      	cmp	r0, r3
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	db11      	blt.n	8009e54 <__any_on+0x32>
 8009e30:	dd0a      	ble.n	8009e48 <__any_on+0x26>
 8009e32:	f011 011f 	ands.w	r1, r1, #31
 8009e36:	d007      	beq.n	8009e48 <__any_on+0x26>
 8009e38:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009e3c:	fa24 f001 	lsr.w	r0, r4, r1
 8009e40:	fa00 f101 	lsl.w	r1, r0, r1
 8009e44:	428c      	cmp	r4, r1
 8009e46:	d10b      	bne.n	8009e60 <__any_on+0x3e>
 8009e48:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d803      	bhi.n	8009e58 <__any_on+0x36>
 8009e50:	2000      	movs	r0, #0
 8009e52:	bd10      	pop	{r4, pc}
 8009e54:	4603      	mov	r3, r0
 8009e56:	e7f7      	b.n	8009e48 <__any_on+0x26>
 8009e58:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009e5c:	2900      	cmp	r1, #0
 8009e5e:	d0f5      	beq.n	8009e4c <__any_on+0x2a>
 8009e60:	2001      	movs	r0, #1
 8009e62:	e7f6      	b.n	8009e52 <__any_on+0x30>

08009e64 <_calloc_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	fb02 f501 	mul.w	r5, r2, r1
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	f000 f854 	bl	8009f18 <_malloc_r>
 8009e70:	4604      	mov	r4, r0
 8009e72:	b118      	cbz	r0, 8009e7c <_calloc_r+0x18>
 8009e74:	462a      	mov	r2, r5
 8009e76:	2100      	movs	r1, #0
 8009e78:	f7fc fe60 	bl	8006b3c <memset>
 8009e7c:	4620      	mov	r0, r4
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}

08009e80 <_free_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4605      	mov	r5, r0
 8009e84:	2900      	cmp	r1, #0
 8009e86:	d043      	beq.n	8009f10 <_free_r+0x90>
 8009e88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e8c:	1f0c      	subs	r4, r1, #4
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	bfb8      	it	lt
 8009e92:	18e4      	addlt	r4, r4, r3
 8009e94:	f000 fa64 	bl	800a360 <__malloc_lock>
 8009e98:	4a1e      	ldr	r2, [pc, #120]	; (8009f14 <_free_r+0x94>)
 8009e9a:	6813      	ldr	r3, [r2, #0]
 8009e9c:	4610      	mov	r0, r2
 8009e9e:	b933      	cbnz	r3, 8009eae <_free_r+0x2e>
 8009ea0:	6063      	str	r3, [r4, #4]
 8009ea2:	6014      	str	r4, [r2, #0]
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009eaa:	f000 ba5f 	b.w	800a36c <__malloc_unlock>
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	d90a      	bls.n	8009ec8 <_free_r+0x48>
 8009eb2:	6821      	ldr	r1, [r4, #0]
 8009eb4:	1862      	adds	r2, r4, r1
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	bf01      	itttt	eq
 8009eba:	681a      	ldreq	r2, [r3, #0]
 8009ebc:	685b      	ldreq	r3, [r3, #4]
 8009ebe:	1852      	addeq	r2, r2, r1
 8009ec0:	6022      	streq	r2, [r4, #0]
 8009ec2:	6063      	str	r3, [r4, #4]
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	e7ed      	b.n	8009ea4 <_free_r+0x24>
 8009ec8:	461a      	mov	r2, r3
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	b10b      	cbz	r3, 8009ed2 <_free_r+0x52>
 8009ece:	42a3      	cmp	r3, r4
 8009ed0:	d9fa      	bls.n	8009ec8 <_free_r+0x48>
 8009ed2:	6811      	ldr	r1, [r2, #0]
 8009ed4:	1850      	adds	r0, r2, r1
 8009ed6:	42a0      	cmp	r0, r4
 8009ed8:	d10b      	bne.n	8009ef2 <_free_r+0x72>
 8009eda:	6820      	ldr	r0, [r4, #0]
 8009edc:	4401      	add	r1, r0
 8009ede:	1850      	adds	r0, r2, r1
 8009ee0:	4283      	cmp	r3, r0
 8009ee2:	6011      	str	r1, [r2, #0]
 8009ee4:	d1de      	bne.n	8009ea4 <_free_r+0x24>
 8009ee6:	6818      	ldr	r0, [r3, #0]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	4401      	add	r1, r0
 8009eec:	6011      	str	r1, [r2, #0]
 8009eee:	6053      	str	r3, [r2, #4]
 8009ef0:	e7d8      	b.n	8009ea4 <_free_r+0x24>
 8009ef2:	d902      	bls.n	8009efa <_free_r+0x7a>
 8009ef4:	230c      	movs	r3, #12
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	e7d4      	b.n	8009ea4 <_free_r+0x24>
 8009efa:	6820      	ldr	r0, [r4, #0]
 8009efc:	1821      	adds	r1, r4, r0
 8009efe:	428b      	cmp	r3, r1
 8009f00:	bf01      	itttt	eq
 8009f02:	6819      	ldreq	r1, [r3, #0]
 8009f04:	685b      	ldreq	r3, [r3, #4]
 8009f06:	1809      	addeq	r1, r1, r0
 8009f08:	6021      	streq	r1, [r4, #0]
 8009f0a:	6063      	str	r3, [r4, #4]
 8009f0c:	6054      	str	r4, [r2, #4]
 8009f0e:	e7c9      	b.n	8009ea4 <_free_r+0x24>
 8009f10:	bd38      	pop	{r3, r4, r5, pc}
 8009f12:	bf00      	nop
 8009f14:	20000238 	.word	0x20000238

08009f18 <_malloc_r>:
 8009f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1a:	1ccd      	adds	r5, r1, #3
 8009f1c:	f025 0503 	bic.w	r5, r5, #3
 8009f20:	3508      	adds	r5, #8
 8009f22:	2d0c      	cmp	r5, #12
 8009f24:	bf38      	it	cc
 8009f26:	250c      	movcc	r5, #12
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	db01      	blt.n	8009f32 <_malloc_r+0x1a>
 8009f2e:	42a9      	cmp	r1, r5
 8009f30:	d903      	bls.n	8009f3a <_malloc_r+0x22>
 8009f32:	230c      	movs	r3, #12
 8009f34:	6033      	str	r3, [r6, #0]
 8009f36:	2000      	movs	r0, #0
 8009f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f3a:	f000 fa11 	bl	800a360 <__malloc_lock>
 8009f3e:	4921      	ldr	r1, [pc, #132]	; (8009fc4 <_malloc_r+0xac>)
 8009f40:	680a      	ldr	r2, [r1, #0]
 8009f42:	4614      	mov	r4, r2
 8009f44:	b99c      	cbnz	r4, 8009f6e <_malloc_r+0x56>
 8009f46:	4f20      	ldr	r7, [pc, #128]	; (8009fc8 <_malloc_r+0xb0>)
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	b923      	cbnz	r3, 8009f56 <_malloc_r+0x3e>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	4630      	mov	r0, r6
 8009f50:	f000 f99e 	bl	800a290 <_sbrk_r>
 8009f54:	6038      	str	r0, [r7, #0]
 8009f56:	4629      	mov	r1, r5
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f000 f999 	bl	800a290 <_sbrk_r>
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	d123      	bne.n	8009faa <_malloc_r+0x92>
 8009f62:	230c      	movs	r3, #12
 8009f64:	4630      	mov	r0, r6
 8009f66:	6033      	str	r3, [r6, #0]
 8009f68:	f000 fa00 	bl	800a36c <__malloc_unlock>
 8009f6c:	e7e3      	b.n	8009f36 <_malloc_r+0x1e>
 8009f6e:	6823      	ldr	r3, [r4, #0]
 8009f70:	1b5b      	subs	r3, r3, r5
 8009f72:	d417      	bmi.n	8009fa4 <_malloc_r+0x8c>
 8009f74:	2b0b      	cmp	r3, #11
 8009f76:	d903      	bls.n	8009f80 <_malloc_r+0x68>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	441c      	add	r4, r3
 8009f7c:	6025      	str	r5, [r4, #0]
 8009f7e:	e004      	b.n	8009f8a <_malloc_r+0x72>
 8009f80:	6863      	ldr	r3, [r4, #4]
 8009f82:	42a2      	cmp	r2, r4
 8009f84:	bf0c      	ite	eq
 8009f86:	600b      	streq	r3, [r1, #0]
 8009f88:	6053      	strne	r3, [r2, #4]
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	f000 f9ee 	bl	800a36c <__malloc_unlock>
 8009f90:	f104 000b 	add.w	r0, r4, #11
 8009f94:	1d23      	adds	r3, r4, #4
 8009f96:	f020 0007 	bic.w	r0, r0, #7
 8009f9a:	1ac2      	subs	r2, r0, r3
 8009f9c:	d0cc      	beq.n	8009f38 <_malloc_r+0x20>
 8009f9e:	1a1b      	subs	r3, r3, r0
 8009fa0:	50a3      	str	r3, [r4, r2]
 8009fa2:	e7c9      	b.n	8009f38 <_malloc_r+0x20>
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	6864      	ldr	r4, [r4, #4]
 8009fa8:	e7cc      	b.n	8009f44 <_malloc_r+0x2c>
 8009faa:	1cc4      	adds	r4, r0, #3
 8009fac:	f024 0403 	bic.w	r4, r4, #3
 8009fb0:	42a0      	cmp	r0, r4
 8009fb2:	d0e3      	beq.n	8009f7c <_malloc_r+0x64>
 8009fb4:	1a21      	subs	r1, r4, r0
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	f000 f96a 	bl	800a290 <_sbrk_r>
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d1dd      	bne.n	8009f7c <_malloc_r+0x64>
 8009fc0:	e7cf      	b.n	8009f62 <_malloc_r+0x4a>
 8009fc2:	bf00      	nop
 8009fc4:	20000238 	.word	0x20000238
 8009fc8:	2000023c 	.word	0x2000023c

08009fcc <__ssputs_r>:
 8009fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd0:	688e      	ldr	r6, [r1, #8]
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	429e      	cmp	r6, r3
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4690      	mov	r8, r2
 8009fda:	461f      	mov	r7, r3
 8009fdc:	d838      	bhi.n	800a050 <__ssputs_r+0x84>
 8009fde:	898a      	ldrh	r2, [r1, #12]
 8009fe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fe4:	d032      	beq.n	800a04c <__ssputs_r+0x80>
 8009fe6:	6825      	ldr	r5, [r4, #0]
 8009fe8:	6909      	ldr	r1, [r1, #16]
 8009fea:	3301      	adds	r3, #1
 8009fec:	eba5 0901 	sub.w	r9, r5, r1
 8009ff0:	6965      	ldr	r5, [r4, #20]
 8009ff2:	444b      	add	r3, r9
 8009ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ff8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ffc:	106d      	asrs	r5, r5, #1
 8009ffe:	429d      	cmp	r5, r3
 800a000:	bf38      	it	cc
 800a002:	461d      	movcc	r5, r3
 800a004:	0553      	lsls	r3, r2, #21
 800a006:	d531      	bpl.n	800a06c <__ssputs_r+0xa0>
 800a008:	4629      	mov	r1, r5
 800a00a:	f7ff ff85 	bl	8009f18 <_malloc_r>
 800a00e:	4606      	mov	r6, r0
 800a010:	b950      	cbnz	r0, 800a028 <__ssputs_r+0x5c>
 800a012:	230c      	movs	r3, #12
 800a014:	f04f 30ff 	mov.w	r0, #4294967295
 800a018:	f8ca 3000 	str.w	r3, [sl]
 800a01c:	89a3      	ldrh	r3, [r4, #12]
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	81a3      	strh	r3, [r4, #12]
 800a024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a028:	464a      	mov	r2, r9
 800a02a:	6921      	ldr	r1, [r4, #16]
 800a02c:	f7ff fa54 	bl	80094d8 <memcpy>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a03a:	81a3      	strh	r3, [r4, #12]
 800a03c:	6126      	str	r6, [r4, #16]
 800a03e:	444e      	add	r6, r9
 800a040:	6026      	str	r6, [r4, #0]
 800a042:	463e      	mov	r6, r7
 800a044:	6165      	str	r5, [r4, #20]
 800a046:	eba5 0509 	sub.w	r5, r5, r9
 800a04a:	60a5      	str	r5, [r4, #8]
 800a04c:	42be      	cmp	r6, r7
 800a04e:	d900      	bls.n	800a052 <__ssputs_r+0x86>
 800a050:	463e      	mov	r6, r7
 800a052:	4632      	mov	r2, r6
 800a054:	4641      	mov	r1, r8
 800a056:	6820      	ldr	r0, [r4, #0]
 800a058:	f000 f968 	bl	800a32c <memmove>
 800a05c:	68a3      	ldr	r3, [r4, #8]
 800a05e:	6822      	ldr	r2, [r4, #0]
 800a060:	1b9b      	subs	r3, r3, r6
 800a062:	4432      	add	r2, r6
 800a064:	2000      	movs	r0, #0
 800a066:	60a3      	str	r3, [r4, #8]
 800a068:	6022      	str	r2, [r4, #0]
 800a06a:	e7db      	b.n	800a024 <__ssputs_r+0x58>
 800a06c:	462a      	mov	r2, r5
 800a06e:	f000 f983 	bl	800a378 <_realloc_r>
 800a072:	4606      	mov	r6, r0
 800a074:	2800      	cmp	r0, #0
 800a076:	d1e1      	bne.n	800a03c <__ssputs_r+0x70>
 800a078:	4650      	mov	r0, sl
 800a07a:	6921      	ldr	r1, [r4, #16]
 800a07c:	f7ff ff00 	bl	8009e80 <_free_r>
 800a080:	e7c7      	b.n	800a012 <__ssputs_r+0x46>
	...

0800a084 <_svfiprintf_r>:
 800a084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a088:	4698      	mov	r8, r3
 800a08a:	898b      	ldrh	r3, [r1, #12]
 800a08c:	4607      	mov	r7, r0
 800a08e:	061b      	lsls	r3, r3, #24
 800a090:	460d      	mov	r5, r1
 800a092:	4614      	mov	r4, r2
 800a094:	b09d      	sub	sp, #116	; 0x74
 800a096:	d50e      	bpl.n	800a0b6 <_svfiprintf_r+0x32>
 800a098:	690b      	ldr	r3, [r1, #16]
 800a09a:	b963      	cbnz	r3, 800a0b6 <_svfiprintf_r+0x32>
 800a09c:	2140      	movs	r1, #64	; 0x40
 800a09e:	f7ff ff3b 	bl	8009f18 <_malloc_r>
 800a0a2:	6028      	str	r0, [r5, #0]
 800a0a4:	6128      	str	r0, [r5, #16]
 800a0a6:	b920      	cbnz	r0, 800a0b2 <_svfiprintf_r+0x2e>
 800a0a8:	230c      	movs	r3, #12
 800a0aa:	603b      	str	r3, [r7, #0]
 800a0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b0:	e0d1      	b.n	800a256 <_svfiprintf_r+0x1d2>
 800a0b2:	2340      	movs	r3, #64	; 0x40
 800a0b4:	616b      	str	r3, [r5, #20]
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a0ba:	2320      	movs	r3, #32
 800a0bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0c0:	2330      	movs	r3, #48	; 0x30
 800a0c2:	f04f 0901 	mov.w	r9, #1
 800a0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a270 <_svfiprintf_r+0x1ec>
 800a0ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0d2:	4623      	mov	r3, r4
 800a0d4:	469a      	mov	sl, r3
 800a0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0da:	b10a      	cbz	r2, 800a0e0 <_svfiprintf_r+0x5c>
 800a0dc:	2a25      	cmp	r2, #37	; 0x25
 800a0de:	d1f9      	bne.n	800a0d4 <_svfiprintf_r+0x50>
 800a0e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a0e4:	d00b      	beq.n	800a0fe <_svfiprintf_r+0x7a>
 800a0e6:	465b      	mov	r3, fp
 800a0e8:	4622      	mov	r2, r4
 800a0ea:	4629      	mov	r1, r5
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	f7ff ff6d 	bl	8009fcc <__ssputs_r>
 800a0f2:	3001      	adds	r0, #1
 800a0f4:	f000 80aa 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a0f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0fa:	445a      	add	r2, fp
 800a0fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a0fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a102:	2b00      	cmp	r3, #0
 800a104:	f000 80a2 	beq.w	800a24c <_svfiprintf_r+0x1c8>
 800a108:	2300      	movs	r3, #0
 800a10a:	f04f 32ff 	mov.w	r2, #4294967295
 800a10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a112:	f10a 0a01 	add.w	sl, sl, #1
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	9307      	str	r3, [sp, #28]
 800a11a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a11e:	931a      	str	r3, [sp, #104]	; 0x68
 800a120:	4654      	mov	r4, sl
 800a122:	2205      	movs	r2, #5
 800a124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a128:	4851      	ldr	r0, [pc, #324]	; (800a270 <_svfiprintf_r+0x1ec>)
 800a12a:	f7ff f9c7 	bl	80094bc <memchr>
 800a12e:	9a04      	ldr	r2, [sp, #16]
 800a130:	b9d8      	cbnz	r0, 800a16a <_svfiprintf_r+0xe6>
 800a132:	06d0      	lsls	r0, r2, #27
 800a134:	bf44      	itt	mi
 800a136:	2320      	movmi	r3, #32
 800a138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a13c:	0711      	lsls	r1, r2, #28
 800a13e:	bf44      	itt	mi
 800a140:	232b      	movmi	r3, #43	; 0x2b
 800a142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a146:	f89a 3000 	ldrb.w	r3, [sl]
 800a14a:	2b2a      	cmp	r3, #42	; 0x2a
 800a14c:	d015      	beq.n	800a17a <_svfiprintf_r+0xf6>
 800a14e:	4654      	mov	r4, sl
 800a150:	2000      	movs	r0, #0
 800a152:	f04f 0c0a 	mov.w	ip, #10
 800a156:	9a07      	ldr	r2, [sp, #28]
 800a158:	4621      	mov	r1, r4
 800a15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a15e:	3b30      	subs	r3, #48	; 0x30
 800a160:	2b09      	cmp	r3, #9
 800a162:	d94e      	bls.n	800a202 <_svfiprintf_r+0x17e>
 800a164:	b1b0      	cbz	r0, 800a194 <_svfiprintf_r+0x110>
 800a166:	9207      	str	r2, [sp, #28]
 800a168:	e014      	b.n	800a194 <_svfiprintf_r+0x110>
 800a16a:	eba0 0308 	sub.w	r3, r0, r8
 800a16e:	fa09 f303 	lsl.w	r3, r9, r3
 800a172:	4313      	orrs	r3, r2
 800a174:	46a2      	mov	sl, r4
 800a176:	9304      	str	r3, [sp, #16]
 800a178:	e7d2      	b.n	800a120 <_svfiprintf_r+0x9c>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	1d19      	adds	r1, r3, #4
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	9103      	str	r1, [sp, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	bfbb      	ittet	lt
 800a186:	425b      	neglt	r3, r3
 800a188:	f042 0202 	orrlt.w	r2, r2, #2
 800a18c:	9307      	strge	r3, [sp, #28]
 800a18e:	9307      	strlt	r3, [sp, #28]
 800a190:	bfb8      	it	lt
 800a192:	9204      	strlt	r2, [sp, #16]
 800a194:	7823      	ldrb	r3, [r4, #0]
 800a196:	2b2e      	cmp	r3, #46	; 0x2e
 800a198:	d10c      	bne.n	800a1b4 <_svfiprintf_r+0x130>
 800a19a:	7863      	ldrb	r3, [r4, #1]
 800a19c:	2b2a      	cmp	r3, #42	; 0x2a
 800a19e:	d135      	bne.n	800a20c <_svfiprintf_r+0x188>
 800a1a0:	9b03      	ldr	r3, [sp, #12]
 800a1a2:	3402      	adds	r4, #2
 800a1a4:	1d1a      	adds	r2, r3, #4
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	9203      	str	r2, [sp, #12]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	bfb8      	it	lt
 800a1ae:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1b2:	9305      	str	r3, [sp, #20]
 800a1b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a280 <_svfiprintf_r+0x1fc>
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	7821      	ldrb	r1, [r4, #0]
 800a1be:	f7ff f97d 	bl	80094bc <memchr>
 800a1c2:	b140      	cbz	r0, 800a1d6 <_svfiprintf_r+0x152>
 800a1c4:	2340      	movs	r3, #64	; 0x40
 800a1c6:	eba0 000a 	sub.w	r0, r0, sl
 800a1ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	3401      	adds	r4, #1
 800a1d2:	4303      	orrs	r3, r0
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1da:	2206      	movs	r2, #6
 800a1dc:	4825      	ldr	r0, [pc, #148]	; (800a274 <_svfiprintf_r+0x1f0>)
 800a1de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1e2:	f7ff f96b 	bl	80094bc <memchr>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d038      	beq.n	800a25c <_svfiprintf_r+0x1d8>
 800a1ea:	4b23      	ldr	r3, [pc, #140]	; (800a278 <_svfiprintf_r+0x1f4>)
 800a1ec:	bb1b      	cbnz	r3, 800a236 <_svfiprintf_r+0x1b2>
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	f023 0307 	bic.w	r3, r3, #7
 800a1f6:	3308      	adds	r3, #8
 800a1f8:	9303      	str	r3, [sp, #12]
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	4433      	add	r3, r6
 800a1fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a200:	e767      	b.n	800a0d2 <_svfiprintf_r+0x4e>
 800a202:	460c      	mov	r4, r1
 800a204:	2001      	movs	r0, #1
 800a206:	fb0c 3202 	mla	r2, ip, r2, r3
 800a20a:	e7a5      	b.n	800a158 <_svfiprintf_r+0xd4>
 800a20c:	2300      	movs	r3, #0
 800a20e:	f04f 0c0a 	mov.w	ip, #10
 800a212:	4619      	mov	r1, r3
 800a214:	3401      	adds	r4, #1
 800a216:	9305      	str	r3, [sp, #20]
 800a218:	4620      	mov	r0, r4
 800a21a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a21e:	3a30      	subs	r2, #48	; 0x30
 800a220:	2a09      	cmp	r2, #9
 800a222:	d903      	bls.n	800a22c <_svfiprintf_r+0x1a8>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d0c5      	beq.n	800a1b4 <_svfiprintf_r+0x130>
 800a228:	9105      	str	r1, [sp, #20]
 800a22a:	e7c3      	b.n	800a1b4 <_svfiprintf_r+0x130>
 800a22c:	4604      	mov	r4, r0
 800a22e:	2301      	movs	r3, #1
 800a230:	fb0c 2101 	mla	r1, ip, r1, r2
 800a234:	e7f0      	b.n	800a218 <_svfiprintf_r+0x194>
 800a236:	ab03      	add	r3, sp, #12
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	462a      	mov	r2, r5
 800a23c:	4638      	mov	r0, r7
 800a23e:	4b0f      	ldr	r3, [pc, #60]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	f7fc fd21 	bl	8006c88 <_printf_float>
 800a246:	1c42      	adds	r2, r0, #1
 800a248:	4606      	mov	r6, r0
 800a24a:	d1d6      	bne.n	800a1fa <_svfiprintf_r+0x176>
 800a24c:	89ab      	ldrh	r3, [r5, #12]
 800a24e:	065b      	lsls	r3, r3, #25
 800a250:	f53f af2c 	bmi.w	800a0ac <_svfiprintf_r+0x28>
 800a254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a256:	b01d      	add	sp, #116	; 0x74
 800a258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25c:	ab03      	add	r3, sp, #12
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	462a      	mov	r2, r5
 800a262:	4638      	mov	r0, r7
 800a264:	4b05      	ldr	r3, [pc, #20]	; (800a27c <_svfiprintf_r+0x1f8>)
 800a266:	a904      	add	r1, sp, #16
 800a268:	f7fc ffaa 	bl	80071c0 <_printf_i>
 800a26c:	e7eb      	b.n	800a246 <_svfiprintf_r+0x1c2>
 800a26e:	bf00      	nop
 800a270:	0800b364 	.word	0x0800b364
 800a274:	0800b36e 	.word	0x0800b36e
 800a278:	08006c89 	.word	0x08006c89
 800a27c:	08009fcd 	.word	0x08009fcd
 800a280:	0800b36a 	.word	0x0800b36a

0800a284 <nan>:
 800a284:	2000      	movs	r0, #0
 800a286:	4901      	ldr	r1, [pc, #4]	; (800a28c <nan+0x8>)
 800a288:	4770      	bx	lr
 800a28a:	bf00      	nop
 800a28c:	7ff80000 	.word	0x7ff80000

0800a290 <_sbrk_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	2300      	movs	r3, #0
 800a294:	4d05      	ldr	r5, [pc, #20]	; (800a2ac <_sbrk_r+0x1c>)
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	602b      	str	r3, [r5, #0]
 800a29c:	f7f9 f86c 	bl	8003378 <_sbrk>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_sbrk_r+0x1a>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_sbrk_r+0x1a>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	20001420 	.word	0x20001420

0800a2b0 <__ascii_wctomb>:
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	4608      	mov	r0, r1
 800a2b4:	b141      	cbz	r1, 800a2c8 <__ascii_wctomb+0x18>
 800a2b6:	2aff      	cmp	r2, #255	; 0xff
 800a2b8:	d904      	bls.n	800a2c4 <__ascii_wctomb+0x14>
 800a2ba:	228a      	movs	r2, #138	; 0x8a
 800a2bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	4770      	bx	lr
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	700a      	strb	r2, [r1, #0]
 800a2c8:	4770      	bx	lr
	...

0800a2cc <__assert_func>:
 800a2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a2ce:	4614      	mov	r4, r2
 800a2d0:	461a      	mov	r2, r3
 800a2d2:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <__assert_func+0x2c>)
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	68d8      	ldr	r0, [r3, #12]
 800a2da:	b14c      	cbz	r4, 800a2f0 <__assert_func+0x24>
 800a2dc:	4b07      	ldr	r3, [pc, #28]	; (800a2fc <__assert_func+0x30>)
 800a2de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a2e2:	9100      	str	r1, [sp, #0]
 800a2e4:	462b      	mov	r3, r5
 800a2e6:	4906      	ldr	r1, [pc, #24]	; (800a300 <__assert_func+0x34>)
 800a2e8:	f000 f80e 	bl	800a308 <fiprintf>
 800a2ec:	f000 fa82 	bl	800a7f4 <abort>
 800a2f0:	4b04      	ldr	r3, [pc, #16]	; (800a304 <__assert_func+0x38>)
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	e7f3      	b.n	800a2de <__assert_func+0x12>
 800a2f6:	bf00      	nop
 800a2f8:	20000018 	.word	0x20000018
 800a2fc:	0800b375 	.word	0x0800b375
 800a300:	0800b382 	.word	0x0800b382
 800a304:	0800b3b0 	.word	0x0800b3b0

0800a308 <fiprintf>:
 800a308:	b40e      	push	{r1, r2, r3}
 800a30a:	b503      	push	{r0, r1, lr}
 800a30c:	4601      	mov	r1, r0
 800a30e:	ab03      	add	r3, sp, #12
 800a310:	4805      	ldr	r0, [pc, #20]	; (800a328 <fiprintf+0x20>)
 800a312:	f853 2b04 	ldr.w	r2, [r3], #4
 800a316:	6800      	ldr	r0, [r0, #0]
 800a318:	9301      	str	r3, [sp, #4]
 800a31a:	f000 f87b 	bl	800a414 <_vfiprintf_r>
 800a31e:	b002      	add	sp, #8
 800a320:	f85d eb04 	ldr.w	lr, [sp], #4
 800a324:	b003      	add	sp, #12
 800a326:	4770      	bx	lr
 800a328:	20000018 	.word	0x20000018

0800a32c <memmove>:
 800a32c:	4288      	cmp	r0, r1
 800a32e:	b510      	push	{r4, lr}
 800a330:	eb01 0402 	add.w	r4, r1, r2
 800a334:	d902      	bls.n	800a33c <memmove+0x10>
 800a336:	4284      	cmp	r4, r0
 800a338:	4623      	mov	r3, r4
 800a33a:	d807      	bhi.n	800a34c <memmove+0x20>
 800a33c:	1e43      	subs	r3, r0, #1
 800a33e:	42a1      	cmp	r1, r4
 800a340:	d008      	beq.n	800a354 <memmove+0x28>
 800a342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a346:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a34a:	e7f8      	b.n	800a33e <memmove+0x12>
 800a34c:	4601      	mov	r1, r0
 800a34e:	4402      	add	r2, r0
 800a350:	428a      	cmp	r2, r1
 800a352:	d100      	bne.n	800a356 <memmove+0x2a>
 800a354:	bd10      	pop	{r4, pc}
 800a356:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a35a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a35e:	e7f7      	b.n	800a350 <memmove+0x24>

0800a360 <__malloc_lock>:
 800a360:	4801      	ldr	r0, [pc, #4]	; (800a368 <__malloc_lock+0x8>)
 800a362:	f000 bc07 	b.w	800ab74 <__retarget_lock_acquire_recursive>
 800a366:	bf00      	nop
 800a368:	20001428 	.word	0x20001428

0800a36c <__malloc_unlock>:
 800a36c:	4801      	ldr	r0, [pc, #4]	; (800a374 <__malloc_unlock+0x8>)
 800a36e:	f000 bc02 	b.w	800ab76 <__retarget_lock_release_recursive>
 800a372:	bf00      	nop
 800a374:	20001428 	.word	0x20001428

0800a378 <_realloc_r>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	4607      	mov	r7, r0
 800a37c:	4614      	mov	r4, r2
 800a37e:	460e      	mov	r6, r1
 800a380:	b921      	cbnz	r1, 800a38c <_realloc_r+0x14>
 800a382:	4611      	mov	r1, r2
 800a384:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a388:	f7ff bdc6 	b.w	8009f18 <_malloc_r>
 800a38c:	b922      	cbnz	r2, 800a398 <_realloc_r+0x20>
 800a38e:	f7ff fd77 	bl	8009e80 <_free_r>
 800a392:	4625      	mov	r5, r4
 800a394:	4628      	mov	r0, r5
 800a396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a398:	f000 fc52 	bl	800ac40 <_malloc_usable_size_r>
 800a39c:	42a0      	cmp	r0, r4
 800a39e:	d20f      	bcs.n	800a3c0 <_realloc_r+0x48>
 800a3a0:	4621      	mov	r1, r4
 800a3a2:	4638      	mov	r0, r7
 800a3a4:	f7ff fdb8 	bl	8009f18 <_malloc_r>
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d0f2      	beq.n	800a394 <_realloc_r+0x1c>
 800a3ae:	4631      	mov	r1, r6
 800a3b0:	4622      	mov	r2, r4
 800a3b2:	f7ff f891 	bl	80094d8 <memcpy>
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	4638      	mov	r0, r7
 800a3ba:	f7ff fd61 	bl	8009e80 <_free_r>
 800a3be:	e7e9      	b.n	800a394 <_realloc_r+0x1c>
 800a3c0:	4635      	mov	r5, r6
 800a3c2:	e7e7      	b.n	800a394 <_realloc_r+0x1c>

0800a3c4 <__sfputc_r>:
 800a3c4:	6893      	ldr	r3, [r2, #8]
 800a3c6:	b410      	push	{r4}
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	6093      	str	r3, [r2, #8]
 800a3ce:	da07      	bge.n	800a3e0 <__sfputc_r+0x1c>
 800a3d0:	6994      	ldr	r4, [r2, #24]
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	db01      	blt.n	800a3da <__sfputc_r+0x16>
 800a3d6:	290a      	cmp	r1, #10
 800a3d8:	d102      	bne.n	800a3e0 <__sfputc_r+0x1c>
 800a3da:	bc10      	pop	{r4}
 800a3dc:	f000 b94a 	b.w	800a674 <__swbuf_r>
 800a3e0:	6813      	ldr	r3, [r2, #0]
 800a3e2:	1c58      	adds	r0, r3, #1
 800a3e4:	6010      	str	r0, [r2, #0]
 800a3e6:	7019      	strb	r1, [r3, #0]
 800a3e8:	4608      	mov	r0, r1
 800a3ea:	bc10      	pop	{r4}
 800a3ec:	4770      	bx	lr

0800a3ee <__sfputs_r>:
 800a3ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	460f      	mov	r7, r1
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	18d5      	adds	r5, r2, r3
 800a3f8:	42ac      	cmp	r4, r5
 800a3fa:	d101      	bne.n	800a400 <__sfputs_r+0x12>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	e007      	b.n	800a410 <__sfputs_r+0x22>
 800a400:	463a      	mov	r2, r7
 800a402:	4630      	mov	r0, r6
 800a404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a408:	f7ff ffdc 	bl	800a3c4 <__sfputc_r>
 800a40c:	1c43      	adds	r3, r0, #1
 800a40e:	d1f3      	bne.n	800a3f8 <__sfputs_r+0xa>
 800a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a414 <_vfiprintf_r>:
 800a414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	460d      	mov	r5, r1
 800a41a:	4614      	mov	r4, r2
 800a41c:	4698      	mov	r8, r3
 800a41e:	4606      	mov	r6, r0
 800a420:	b09d      	sub	sp, #116	; 0x74
 800a422:	b118      	cbz	r0, 800a42c <_vfiprintf_r+0x18>
 800a424:	6983      	ldr	r3, [r0, #24]
 800a426:	b90b      	cbnz	r3, 800a42c <_vfiprintf_r+0x18>
 800a428:	f000 fb06 	bl	800aa38 <__sinit>
 800a42c:	4b89      	ldr	r3, [pc, #548]	; (800a654 <_vfiprintf_r+0x240>)
 800a42e:	429d      	cmp	r5, r3
 800a430:	d11b      	bne.n	800a46a <_vfiprintf_r+0x56>
 800a432:	6875      	ldr	r5, [r6, #4]
 800a434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a436:	07d9      	lsls	r1, r3, #31
 800a438:	d405      	bmi.n	800a446 <_vfiprintf_r+0x32>
 800a43a:	89ab      	ldrh	r3, [r5, #12]
 800a43c:	059a      	lsls	r2, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_vfiprintf_r+0x32>
 800a440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a442:	f000 fb97 	bl	800ab74 <__retarget_lock_acquire_recursive>
 800a446:	89ab      	ldrh	r3, [r5, #12]
 800a448:	071b      	lsls	r3, r3, #28
 800a44a:	d501      	bpl.n	800a450 <_vfiprintf_r+0x3c>
 800a44c:	692b      	ldr	r3, [r5, #16]
 800a44e:	b9eb      	cbnz	r3, 800a48c <_vfiprintf_r+0x78>
 800a450:	4629      	mov	r1, r5
 800a452:	4630      	mov	r0, r6
 800a454:	f000 f960 	bl	800a718 <__swsetup_r>
 800a458:	b1c0      	cbz	r0, 800a48c <_vfiprintf_r+0x78>
 800a45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a45c:	07dc      	lsls	r4, r3, #31
 800a45e:	d50e      	bpl.n	800a47e <_vfiprintf_r+0x6a>
 800a460:	f04f 30ff 	mov.w	r0, #4294967295
 800a464:	b01d      	add	sp, #116	; 0x74
 800a466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46a:	4b7b      	ldr	r3, [pc, #492]	; (800a658 <_vfiprintf_r+0x244>)
 800a46c:	429d      	cmp	r5, r3
 800a46e:	d101      	bne.n	800a474 <_vfiprintf_r+0x60>
 800a470:	68b5      	ldr	r5, [r6, #8]
 800a472:	e7df      	b.n	800a434 <_vfiprintf_r+0x20>
 800a474:	4b79      	ldr	r3, [pc, #484]	; (800a65c <_vfiprintf_r+0x248>)
 800a476:	429d      	cmp	r5, r3
 800a478:	bf08      	it	eq
 800a47a:	68f5      	ldreq	r5, [r6, #12]
 800a47c:	e7da      	b.n	800a434 <_vfiprintf_r+0x20>
 800a47e:	89ab      	ldrh	r3, [r5, #12]
 800a480:	0598      	lsls	r0, r3, #22
 800a482:	d4ed      	bmi.n	800a460 <_vfiprintf_r+0x4c>
 800a484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a486:	f000 fb76 	bl	800ab76 <__retarget_lock_release_recursive>
 800a48a:	e7e9      	b.n	800a460 <_vfiprintf_r+0x4c>
 800a48c:	2300      	movs	r3, #0
 800a48e:	9309      	str	r3, [sp, #36]	; 0x24
 800a490:	2320      	movs	r3, #32
 800a492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a496:	2330      	movs	r3, #48	; 0x30
 800a498:	f04f 0901 	mov.w	r9, #1
 800a49c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a660 <_vfiprintf_r+0x24c>
 800a4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a8:	4623      	mov	r3, r4
 800a4aa:	469a      	mov	sl, r3
 800a4ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b0:	b10a      	cbz	r2, 800a4b6 <_vfiprintf_r+0xa2>
 800a4b2:	2a25      	cmp	r2, #37	; 0x25
 800a4b4:	d1f9      	bne.n	800a4aa <_vfiprintf_r+0x96>
 800a4b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a4ba:	d00b      	beq.n	800a4d4 <_vfiprintf_r+0xc0>
 800a4bc:	465b      	mov	r3, fp
 800a4be:	4622      	mov	r2, r4
 800a4c0:	4629      	mov	r1, r5
 800a4c2:	4630      	mov	r0, r6
 800a4c4:	f7ff ff93 	bl	800a3ee <__sfputs_r>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	f000 80aa 	beq.w	800a622 <_vfiprintf_r+0x20e>
 800a4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d0:	445a      	add	r2, fp
 800a4d2:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f000 80a2 	beq.w	800a622 <_vfiprintf_r+0x20e>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4e8:	f10a 0a01 	add.w	sl, sl, #1
 800a4ec:	9304      	str	r3, [sp, #16]
 800a4ee:	9307      	str	r3, [sp, #28]
 800a4f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f4:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f6:	4654      	mov	r4, sl
 800a4f8:	2205      	movs	r2, #5
 800a4fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4fe:	4858      	ldr	r0, [pc, #352]	; (800a660 <_vfiprintf_r+0x24c>)
 800a500:	f7fe ffdc 	bl	80094bc <memchr>
 800a504:	9a04      	ldr	r2, [sp, #16]
 800a506:	b9d8      	cbnz	r0, 800a540 <_vfiprintf_r+0x12c>
 800a508:	06d1      	lsls	r1, r2, #27
 800a50a:	bf44      	itt	mi
 800a50c:	2320      	movmi	r3, #32
 800a50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a512:	0713      	lsls	r3, r2, #28
 800a514:	bf44      	itt	mi
 800a516:	232b      	movmi	r3, #43	; 0x2b
 800a518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a51c:	f89a 3000 	ldrb.w	r3, [sl]
 800a520:	2b2a      	cmp	r3, #42	; 0x2a
 800a522:	d015      	beq.n	800a550 <_vfiprintf_r+0x13c>
 800a524:	4654      	mov	r4, sl
 800a526:	2000      	movs	r0, #0
 800a528:	f04f 0c0a 	mov.w	ip, #10
 800a52c:	9a07      	ldr	r2, [sp, #28]
 800a52e:	4621      	mov	r1, r4
 800a530:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a534:	3b30      	subs	r3, #48	; 0x30
 800a536:	2b09      	cmp	r3, #9
 800a538:	d94e      	bls.n	800a5d8 <_vfiprintf_r+0x1c4>
 800a53a:	b1b0      	cbz	r0, 800a56a <_vfiprintf_r+0x156>
 800a53c:	9207      	str	r2, [sp, #28]
 800a53e:	e014      	b.n	800a56a <_vfiprintf_r+0x156>
 800a540:	eba0 0308 	sub.w	r3, r0, r8
 800a544:	fa09 f303 	lsl.w	r3, r9, r3
 800a548:	4313      	orrs	r3, r2
 800a54a:	46a2      	mov	sl, r4
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	e7d2      	b.n	800a4f6 <_vfiprintf_r+0xe2>
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	1d19      	adds	r1, r3, #4
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	9103      	str	r1, [sp, #12]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	bfbb      	ittet	lt
 800a55c:	425b      	neglt	r3, r3
 800a55e:	f042 0202 	orrlt.w	r2, r2, #2
 800a562:	9307      	strge	r3, [sp, #28]
 800a564:	9307      	strlt	r3, [sp, #28]
 800a566:	bfb8      	it	lt
 800a568:	9204      	strlt	r2, [sp, #16]
 800a56a:	7823      	ldrb	r3, [r4, #0]
 800a56c:	2b2e      	cmp	r3, #46	; 0x2e
 800a56e:	d10c      	bne.n	800a58a <_vfiprintf_r+0x176>
 800a570:	7863      	ldrb	r3, [r4, #1]
 800a572:	2b2a      	cmp	r3, #42	; 0x2a
 800a574:	d135      	bne.n	800a5e2 <_vfiprintf_r+0x1ce>
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	3402      	adds	r4, #2
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	9203      	str	r2, [sp, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	bfb8      	it	lt
 800a584:	f04f 33ff 	movlt.w	r3, #4294967295
 800a588:	9305      	str	r3, [sp, #20]
 800a58a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a670 <_vfiprintf_r+0x25c>
 800a58e:	2203      	movs	r2, #3
 800a590:	4650      	mov	r0, sl
 800a592:	7821      	ldrb	r1, [r4, #0]
 800a594:	f7fe ff92 	bl	80094bc <memchr>
 800a598:	b140      	cbz	r0, 800a5ac <_vfiprintf_r+0x198>
 800a59a:	2340      	movs	r3, #64	; 0x40
 800a59c:	eba0 000a 	sub.w	r0, r0, sl
 800a5a0:	fa03 f000 	lsl.w	r0, r3, r0
 800a5a4:	9b04      	ldr	r3, [sp, #16]
 800a5a6:	3401      	adds	r4, #1
 800a5a8:	4303      	orrs	r3, r0
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	2206      	movs	r2, #6
 800a5b2:	482c      	ldr	r0, [pc, #176]	; (800a664 <_vfiprintf_r+0x250>)
 800a5b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5b8:	f7fe ff80 	bl	80094bc <memchr>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d03f      	beq.n	800a640 <_vfiprintf_r+0x22c>
 800a5c0:	4b29      	ldr	r3, [pc, #164]	; (800a668 <_vfiprintf_r+0x254>)
 800a5c2:	bb1b      	cbnz	r3, 800a60c <_vfiprintf_r+0x1f8>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	3307      	adds	r3, #7
 800a5c8:	f023 0307 	bic.w	r3, r3, #7
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	443b      	add	r3, r7
 800a5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d6:	e767      	b.n	800a4a8 <_vfiprintf_r+0x94>
 800a5d8:	460c      	mov	r4, r1
 800a5da:	2001      	movs	r0, #1
 800a5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e0:	e7a5      	b.n	800a52e <_vfiprintf_r+0x11a>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	f04f 0c0a 	mov.w	ip, #10
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	3401      	adds	r4, #1
 800a5ec:	9305      	str	r3, [sp, #20]
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f4:	3a30      	subs	r2, #48	; 0x30
 800a5f6:	2a09      	cmp	r2, #9
 800a5f8:	d903      	bls.n	800a602 <_vfiprintf_r+0x1ee>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0c5      	beq.n	800a58a <_vfiprintf_r+0x176>
 800a5fe:	9105      	str	r1, [sp, #20]
 800a600:	e7c3      	b.n	800a58a <_vfiprintf_r+0x176>
 800a602:	4604      	mov	r4, r0
 800a604:	2301      	movs	r3, #1
 800a606:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60a:	e7f0      	b.n	800a5ee <_vfiprintf_r+0x1da>
 800a60c:	ab03      	add	r3, sp, #12
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	462a      	mov	r2, r5
 800a612:	4630      	mov	r0, r6
 800a614:	4b15      	ldr	r3, [pc, #84]	; (800a66c <_vfiprintf_r+0x258>)
 800a616:	a904      	add	r1, sp, #16
 800a618:	f7fc fb36 	bl	8006c88 <_printf_float>
 800a61c:	4607      	mov	r7, r0
 800a61e:	1c78      	adds	r0, r7, #1
 800a620:	d1d6      	bne.n	800a5d0 <_vfiprintf_r+0x1bc>
 800a622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a624:	07d9      	lsls	r1, r3, #31
 800a626:	d405      	bmi.n	800a634 <_vfiprintf_r+0x220>
 800a628:	89ab      	ldrh	r3, [r5, #12]
 800a62a:	059a      	lsls	r2, r3, #22
 800a62c:	d402      	bmi.n	800a634 <_vfiprintf_r+0x220>
 800a62e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a630:	f000 faa1 	bl	800ab76 <__retarget_lock_release_recursive>
 800a634:	89ab      	ldrh	r3, [r5, #12]
 800a636:	065b      	lsls	r3, r3, #25
 800a638:	f53f af12 	bmi.w	800a460 <_vfiprintf_r+0x4c>
 800a63c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a63e:	e711      	b.n	800a464 <_vfiprintf_r+0x50>
 800a640:	ab03      	add	r3, sp, #12
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	462a      	mov	r2, r5
 800a646:	4630      	mov	r0, r6
 800a648:	4b08      	ldr	r3, [pc, #32]	; (800a66c <_vfiprintf_r+0x258>)
 800a64a:	a904      	add	r1, sp, #16
 800a64c:	f7fc fdb8 	bl	80071c0 <_printf_i>
 800a650:	e7e4      	b.n	800a61c <_vfiprintf_r+0x208>
 800a652:	bf00      	nop
 800a654:	0800b4d4 	.word	0x0800b4d4
 800a658:	0800b4f4 	.word	0x0800b4f4
 800a65c:	0800b4b4 	.word	0x0800b4b4
 800a660:	0800b364 	.word	0x0800b364
 800a664:	0800b36e 	.word	0x0800b36e
 800a668:	08006c89 	.word	0x08006c89
 800a66c:	0800a3ef 	.word	0x0800a3ef
 800a670:	0800b36a 	.word	0x0800b36a

0800a674 <__swbuf_r>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	460e      	mov	r6, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	4605      	mov	r5, r0
 800a67c:	b118      	cbz	r0, 800a686 <__swbuf_r+0x12>
 800a67e:	6983      	ldr	r3, [r0, #24]
 800a680:	b90b      	cbnz	r3, 800a686 <__swbuf_r+0x12>
 800a682:	f000 f9d9 	bl	800aa38 <__sinit>
 800a686:	4b21      	ldr	r3, [pc, #132]	; (800a70c <__swbuf_r+0x98>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	d12b      	bne.n	800a6e4 <__swbuf_r+0x70>
 800a68c:	686c      	ldr	r4, [r5, #4]
 800a68e:	69a3      	ldr	r3, [r4, #24]
 800a690:	60a3      	str	r3, [r4, #8]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	071a      	lsls	r2, r3, #28
 800a696:	d52f      	bpl.n	800a6f8 <__swbuf_r+0x84>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	b36b      	cbz	r3, 800a6f8 <__swbuf_r+0x84>
 800a69c:	6923      	ldr	r3, [r4, #16]
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	b2f6      	uxtb	r6, r6
 800a6a2:	1ac0      	subs	r0, r0, r3
 800a6a4:	6963      	ldr	r3, [r4, #20]
 800a6a6:	4637      	mov	r7, r6
 800a6a8:	4283      	cmp	r3, r0
 800a6aa:	dc04      	bgt.n	800a6b6 <__swbuf_r+0x42>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 f92e 	bl	800a910 <_fflush_r>
 800a6b4:	bb30      	cbnz	r0, 800a704 <__swbuf_r+0x90>
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	60a3      	str	r3, [r4, #8]
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	6022      	str	r2, [r4, #0]
 800a6c4:	701e      	strb	r6, [r3, #0]
 800a6c6:	6963      	ldr	r3, [r4, #20]
 800a6c8:	4283      	cmp	r3, r0
 800a6ca:	d004      	beq.n	800a6d6 <__swbuf_r+0x62>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	07db      	lsls	r3, r3, #31
 800a6d0:	d506      	bpl.n	800a6e0 <__swbuf_r+0x6c>
 800a6d2:	2e0a      	cmp	r6, #10
 800a6d4:	d104      	bne.n	800a6e0 <__swbuf_r+0x6c>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f000 f919 	bl	800a910 <_fflush_r>
 800a6de:	b988      	cbnz	r0, 800a704 <__swbuf_r+0x90>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <__swbuf_r+0x9c>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d101      	bne.n	800a6ee <__swbuf_r+0x7a>
 800a6ea:	68ac      	ldr	r4, [r5, #8]
 800a6ec:	e7cf      	b.n	800a68e <__swbuf_r+0x1a>
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <__swbuf_r+0xa0>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	bf08      	it	eq
 800a6f4:	68ec      	ldreq	r4, [r5, #12]
 800a6f6:	e7ca      	b.n	800a68e <__swbuf_r+0x1a>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f80c 	bl	800a718 <__swsetup_r>
 800a700:	2800      	cmp	r0, #0
 800a702:	d0cb      	beq.n	800a69c <__swbuf_r+0x28>
 800a704:	f04f 37ff 	mov.w	r7, #4294967295
 800a708:	e7ea      	b.n	800a6e0 <__swbuf_r+0x6c>
 800a70a:	bf00      	nop
 800a70c:	0800b4d4 	.word	0x0800b4d4
 800a710:	0800b4f4 	.word	0x0800b4f4
 800a714:	0800b4b4 	.word	0x0800b4b4

0800a718 <__swsetup_r>:
 800a718:	4b32      	ldr	r3, [pc, #200]	; (800a7e4 <__swsetup_r+0xcc>)
 800a71a:	b570      	push	{r4, r5, r6, lr}
 800a71c:	681d      	ldr	r5, [r3, #0]
 800a71e:	4606      	mov	r6, r0
 800a720:	460c      	mov	r4, r1
 800a722:	b125      	cbz	r5, 800a72e <__swsetup_r+0x16>
 800a724:	69ab      	ldr	r3, [r5, #24]
 800a726:	b913      	cbnz	r3, 800a72e <__swsetup_r+0x16>
 800a728:	4628      	mov	r0, r5
 800a72a:	f000 f985 	bl	800aa38 <__sinit>
 800a72e:	4b2e      	ldr	r3, [pc, #184]	; (800a7e8 <__swsetup_r+0xd0>)
 800a730:	429c      	cmp	r4, r3
 800a732:	d10f      	bne.n	800a754 <__swsetup_r+0x3c>
 800a734:	686c      	ldr	r4, [r5, #4]
 800a736:	89a3      	ldrh	r3, [r4, #12]
 800a738:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a73c:	0719      	lsls	r1, r3, #28
 800a73e:	d42c      	bmi.n	800a79a <__swsetup_r+0x82>
 800a740:	06dd      	lsls	r5, r3, #27
 800a742:	d411      	bmi.n	800a768 <__swsetup_r+0x50>
 800a744:	2309      	movs	r3, #9
 800a746:	6033      	str	r3, [r6, #0]
 800a748:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a74c:	f04f 30ff 	mov.w	r0, #4294967295
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	e03e      	b.n	800a7d2 <__swsetup_r+0xba>
 800a754:	4b25      	ldr	r3, [pc, #148]	; (800a7ec <__swsetup_r+0xd4>)
 800a756:	429c      	cmp	r4, r3
 800a758:	d101      	bne.n	800a75e <__swsetup_r+0x46>
 800a75a:	68ac      	ldr	r4, [r5, #8]
 800a75c:	e7eb      	b.n	800a736 <__swsetup_r+0x1e>
 800a75e:	4b24      	ldr	r3, [pc, #144]	; (800a7f0 <__swsetup_r+0xd8>)
 800a760:	429c      	cmp	r4, r3
 800a762:	bf08      	it	eq
 800a764:	68ec      	ldreq	r4, [r5, #12]
 800a766:	e7e6      	b.n	800a736 <__swsetup_r+0x1e>
 800a768:	0758      	lsls	r0, r3, #29
 800a76a:	d512      	bpl.n	800a792 <__swsetup_r+0x7a>
 800a76c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a76e:	b141      	cbz	r1, 800a782 <__swsetup_r+0x6a>
 800a770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a774:	4299      	cmp	r1, r3
 800a776:	d002      	beq.n	800a77e <__swsetup_r+0x66>
 800a778:	4630      	mov	r0, r6
 800a77a:	f7ff fb81 	bl	8009e80 <_free_r>
 800a77e:	2300      	movs	r3, #0
 800a780:	6363      	str	r3, [r4, #52]	; 0x34
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	2300      	movs	r3, #0
 800a78c:	6063      	str	r3, [r4, #4]
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f043 0308 	orr.w	r3, r3, #8
 800a798:	81a3      	strh	r3, [r4, #12]
 800a79a:	6923      	ldr	r3, [r4, #16]
 800a79c:	b94b      	cbnz	r3, 800a7b2 <__swsetup_r+0x9a>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7a8:	d003      	beq.n	800a7b2 <__swsetup_r+0x9a>
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f000 fa07 	bl	800abc0 <__smakebuf_r>
 800a7b2:	89a0      	ldrh	r0, [r4, #12]
 800a7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7b8:	f010 0301 	ands.w	r3, r0, #1
 800a7bc:	d00a      	beq.n	800a7d4 <__swsetup_r+0xbc>
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60a3      	str	r3, [r4, #8]
 800a7c2:	6963      	ldr	r3, [r4, #20]
 800a7c4:	425b      	negs	r3, r3
 800a7c6:	61a3      	str	r3, [r4, #24]
 800a7c8:	6923      	ldr	r3, [r4, #16]
 800a7ca:	b943      	cbnz	r3, 800a7de <__swsetup_r+0xc6>
 800a7cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7d0:	d1ba      	bne.n	800a748 <__swsetup_r+0x30>
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	0781      	lsls	r1, r0, #30
 800a7d6:	bf58      	it	pl
 800a7d8:	6963      	ldrpl	r3, [r4, #20]
 800a7da:	60a3      	str	r3, [r4, #8]
 800a7dc:	e7f4      	b.n	800a7c8 <__swsetup_r+0xb0>
 800a7de:	2000      	movs	r0, #0
 800a7e0:	e7f7      	b.n	800a7d2 <__swsetup_r+0xba>
 800a7e2:	bf00      	nop
 800a7e4:	20000018 	.word	0x20000018
 800a7e8:	0800b4d4 	.word	0x0800b4d4
 800a7ec:	0800b4f4 	.word	0x0800b4f4
 800a7f0:	0800b4b4 	.word	0x0800b4b4

0800a7f4 <abort>:
 800a7f4:	2006      	movs	r0, #6
 800a7f6:	b508      	push	{r3, lr}
 800a7f8:	f000 fa52 	bl	800aca0 <raise>
 800a7fc:	2001      	movs	r0, #1
 800a7fe:	f7f8 fd48 	bl	8003292 <_exit>
	...

0800a804 <__sflush_r>:
 800a804:	898a      	ldrh	r2, [r1, #12]
 800a806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a80a:	4605      	mov	r5, r0
 800a80c:	0710      	lsls	r0, r2, #28
 800a80e:	460c      	mov	r4, r1
 800a810:	d458      	bmi.n	800a8c4 <__sflush_r+0xc0>
 800a812:	684b      	ldr	r3, [r1, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	dc05      	bgt.n	800a824 <__sflush_r+0x20>
 800a818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	dc02      	bgt.n	800a824 <__sflush_r+0x20>
 800a81e:	2000      	movs	r0, #0
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a826:	2e00      	cmp	r6, #0
 800a828:	d0f9      	beq.n	800a81e <__sflush_r+0x1a>
 800a82a:	2300      	movs	r3, #0
 800a82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a830:	682f      	ldr	r7, [r5, #0]
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	d032      	beq.n	800a89c <__sflush_r+0x98>
 800a836:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a838:	89a3      	ldrh	r3, [r4, #12]
 800a83a:	075a      	lsls	r2, r3, #29
 800a83c:	d505      	bpl.n	800a84a <__sflush_r+0x46>
 800a83e:	6863      	ldr	r3, [r4, #4]
 800a840:	1ac0      	subs	r0, r0, r3
 800a842:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a844:	b10b      	cbz	r3, 800a84a <__sflush_r+0x46>
 800a846:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a848:	1ac0      	subs	r0, r0, r3
 800a84a:	2300      	movs	r3, #0
 800a84c:	4602      	mov	r2, r0
 800a84e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a850:	4628      	mov	r0, r5
 800a852:	6a21      	ldr	r1, [r4, #32]
 800a854:	47b0      	blx	r6
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	d106      	bne.n	800a86a <__sflush_r+0x66>
 800a85c:	6829      	ldr	r1, [r5, #0]
 800a85e:	291d      	cmp	r1, #29
 800a860:	d82c      	bhi.n	800a8bc <__sflush_r+0xb8>
 800a862:	4a2a      	ldr	r2, [pc, #168]	; (800a90c <__sflush_r+0x108>)
 800a864:	40ca      	lsrs	r2, r1
 800a866:	07d6      	lsls	r6, r2, #31
 800a868:	d528      	bpl.n	800a8bc <__sflush_r+0xb8>
 800a86a:	2200      	movs	r2, #0
 800a86c:	6062      	str	r2, [r4, #4]
 800a86e:	6922      	ldr	r2, [r4, #16]
 800a870:	04d9      	lsls	r1, r3, #19
 800a872:	6022      	str	r2, [r4, #0]
 800a874:	d504      	bpl.n	800a880 <__sflush_r+0x7c>
 800a876:	1c42      	adds	r2, r0, #1
 800a878:	d101      	bne.n	800a87e <__sflush_r+0x7a>
 800a87a:	682b      	ldr	r3, [r5, #0]
 800a87c:	b903      	cbnz	r3, 800a880 <__sflush_r+0x7c>
 800a87e:	6560      	str	r0, [r4, #84]	; 0x54
 800a880:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a882:	602f      	str	r7, [r5, #0]
 800a884:	2900      	cmp	r1, #0
 800a886:	d0ca      	beq.n	800a81e <__sflush_r+0x1a>
 800a888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a88c:	4299      	cmp	r1, r3
 800a88e:	d002      	beq.n	800a896 <__sflush_r+0x92>
 800a890:	4628      	mov	r0, r5
 800a892:	f7ff faf5 	bl	8009e80 <_free_r>
 800a896:	2000      	movs	r0, #0
 800a898:	6360      	str	r0, [r4, #52]	; 0x34
 800a89a:	e7c1      	b.n	800a820 <__sflush_r+0x1c>
 800a89c:	6a21      	ldr	r1, [r4, #32]
 800a89e:	2301      	movs	r3, #1
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	47b0      	blx	r6
 800a8a4:	1c41      	adds	r1, r0, #1
 800a8a6:	d1c7      	bne.n	800a838 <__sflush_r+0x34>
 800a8a8:	682b      	ldr	r3, [r5, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d0c4      	beq.n	800a838 <__sflush_r+0x34>
 800a8ae:	2b1d      	cmp	r3, #29
 800a8b0:	d001      	beq.n	800a8b6 <__sflush_r+0xb2>
 800a8b2:	2b16      	cmp	r3, #22
 800a8b4:	d101      	bne.n	800a8ba <__sflush_r+0xb6>
 800a8b6:	602f      	str	r7, [r5, #0]
 800a8b8:	e7b1      	b.n	800a81e <__sflush_r+0x1a>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8c0:	81a3      	strh	r3, [r4, #12]
 800a8c2:	e7ad      	b.n	800a820 <__sflush_r+0x1c>
 800a8c4:	690f      	ldr	r7, [r1, #16]
 800a8c6:	2f00      	cmp	r7, #0
 800a8c8:	d0a9      	beq.n	800a81e <__sflush_r+0x1a>
 800a8ca:	0793      	lsls	r3, r2, #30
 800a8cc:	bf18      	it	ne
 800a8ce:	2300      	movne	r3, #0
 800a8d0:	680e      	ldr	r6, [r1, #0]
 800a8d2:	bf08      	it	eq
 800a8d4:	694b      	ldreq	r3, [r1, #20]
 800a8d6:	eba6 0807 	sub.w	r8, r6, r7
 800a8da:	600f      	str	r7, [r1, #0]
 800a8dc:	608b      	str	r3, [r1, #8]
 800a8de:	f1b8 0f00 	cmp.w	r8, #0
 800a8e2:	dd9c      	ble.n	800a81e <__sflush_r+0x1a>
 800a8e4:	4643      	mov	r3, r8
 800a8e6:	463a      	mov	r2, r7
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	6a21      	ldr	r1, [r4, #32]
 800a8ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8ee:	47b0      	blx	r6
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	dc06      	bgt.n	800a902 <__sflush_r+0xfe>
 800a8f4:	89a3      	ldrh	r3, [r4, #12]
 800a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8fe:	81a3      	strh	r3, [r4, #12]
 800a900:	e78e      	b.n	800a820 <__sflush_r+0x1c>
 800a902:	4407      	add	r7, r0
 800a904:	eba8 0800 	sub.w	r8, r8, r0
 800a908:	e7e9      	b.n	800a8de <__sflush_r+0xda>
 800a90a:	bf00      	nop
 800a90c:	20400001 	.word	0x20400001

0800a910 <_fflush_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	690b      	ldr	r3, [r1, #16]
 800a914:	4605      	mov	r5, r0
 800a916:	460c      	mov	r4, r1
 800a918:	b913      	cbnz	r3, 800a920 <_fflush_r+0x10>
 800a91a:	2500      	movs	r5, #0
 800a91c:	4628      	mov	r0, r5
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	b118      	cbz	r0, 800a92a <_fflush_r+0x1a>
 800a922:	6983      	ldr	r3, [r0, #24]
 800a924:	b90b      	cbnz	r3, 800a92a <_fflush_r+0x1a>
 800a926:	f000 f887 	bl	800aa38 <__sinit>
 800a92a:	4b14      	ldr	r3, [pc, #80]	; (800a97c <_fflush_r+0x6c>)
 800a92c:	429c      	cmp	r4, r3
 800a92e:	d11b      	bne.n	800a968 <_fflush_r+0x58>
 800a930:	686c      	ldr	r4, [r5, #4]
 800a932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0ef      	beq.n	800a91a <_fflush_r+0xa>
 800a93a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a93c:	07d0      	lsls	r0, r2, #31
 800a93e:	d404      	bmi.n	800a94a <_fflush_r+0x3a>
 800a940:	0599      	lsls	r1, r3, #22
 800a942:	d402      	bmi.n	800a94a <_fflush_r+0x3a>
 800a944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a946:	f000 f915 	bl	800ab74 <__retarget_lock_acquire_recursive>
 800a94a:	4628      	mov	r0, r5
 800a94c:	4621      	mov	r1, r4
 800a94e:	f7ff ff59 	bl	800a804 <__sflush_r>
 800a952:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a954:	4605      	mov	r5, r0
 800a956:	07da      	lsls	r2, r3, #31
 800a958:	d4e0      	bmi.n	800a91c <_fflush_r+0xc>
 800a95a:	89a3      	ldrh	r3, [r4, #12]
 800a95c:	059b      	lsls	r3, r3, #22
 800a95e:	d4dd      	bmi.n	800a91c <_fflush_r+0xc>
 800a960:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a962:	f000 f908 	bl	800ab76 <__retarget_lock_release_recursive>
 800a966:	e7d9      	b.n	800a91c <_fflush_r+0xc>
 800a968:	4b05      	ldr	r3, [pc, #20]	; (800a980 <_fflush_r+0x70>)
 800a96a:	429c      	cmp	r4, r3
 800a96c:	d101      	bne.n	800a972 <_fflush_r+0x62>
 800a96e:	68ac      	ldr	r4, [r5, #8]
 800a970:	e7df      	b.n	800a932 <_fflush_r+0x22>
 800a972:	4b04      	ldr	r3, [pc, #16]	; (800a984 <_fflush_r+0x74>)
 800a974:	429c      	cmp	r4, r3
 800a976:	bf08      	it	eq
 800a978:	68ec      	ldreq	r4, [r5, #12]
 800a97a:	e7da      	b.n	800a932 <_fflush_r+0x22>
 800a97c:	0800b4d4 	.word	0x0800b4d4
 800a980:	0800b4f4 	.word	0x0800b4f4
 800a984:	0800b4b4 	.word	0x0800b4b4

0800a988 <std>:
 800a988:	2300      	movs	r3, #0
 800a98a:	b510      	push	{r4, lr}
 800a98c:	4604      	mov	r4, r0
 800a98e:	e9c0 3300 	strd	r3, r3, [r0]
 800a992:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a996:	6083      	str	r3, [r0, #8]
 800a998:	8181      	strh	r1, [r0, #12]
 800a99a:	6643      	str	r3, [r0, #100]	; 0x64
 800a99c:	81c2      	strh	r2, [r0, #14]
 800a99e:	6183      	str	r3, [r0, #24]
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	2208      	movs	r2, #8
 800a9a4:	305c      	adds	r0, #92	; 0x5c
 800a9a6:	f7fc f8c9 	bl	8006b3c <memset>
 800a9aa:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <std+0x38>)
 800a9ac:	6224      	str	r4, [r4, #32]
 800a9ae:	6263      	str	r3, [r4, #36]	; 0x24
 800a9b0:	4b04      	ldr	r3, [pc, #16]	; (800a9c4 <std+0x3c>)
 800a9b2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9b4:	4b04      	ldr	r3, [pc, #16]	; (800a9c8 <std+0x40>)
 800a9b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9b8:	4b04      	ldr	r3, [pc, #16]	; (800a9cc <std+0x44>)
 800a9ba:	6323      	str	r3, [r4, #48]	; 0x30
 800a9bc:	bd10      	pop	{r4, pc}
 800a9be:	bf00      	nop
 800a9c0:	0800acd9 	.word	0x0800acd9
 800a9c4:	0800acfb 	.word	0x0800acfb
 800a9c8:	0800ad33 	.word	0x0800ad33
 800a9cc:	0800ad57 	.word	0x0800ad57

0800a9d0 <_cleanup_r>:
 800a9d0:	4901      	ldr	r1, [pc, #4]	; (800a9d8 <_cleanup_r+0x8>)
 800a9d2:	f000 b8af 	b.w	800ab34 <_fwalk_reent>
 800a9d6:	bf00      	nop
 800a9d8:	0800a911 	.word	0x0800a911

0800a9dc <__sfmoreglue>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	2568      	movs	r5, #104	; 0x68
 800a9e0:	1e4a      	subs	r2, r1, #1
 800a9e2:	4355      	muls	r5, r2
 800a9e4:	460e      	mov	r6, r1
 800a9e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ea:	f7ff fa95 	bl	8009f18 <_malloc_r>
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	b140      	cbz	r0, 800aa04 <__sfmoreglue+0x28>
 800a9f2:	2100      	movs	r1, #0
 800a9f4:	e9c0 1600 	strd	r1, r6, [r0]
 800a9f8:	300c      	adds	r0, #12
 800a9fa:	60a0      	str	r0, [r4, #8]
 800a9fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa00:	f7fc f89c 	bl	8006b3c <memset>
 800aa04:	4620      	mov	r0, r4
 800aa06:	bd70      	pop	{r4, r5, r6, pc}

0800aa08 <__sfp_lock_acquire>:
 800aa08:	4801      	ldr	r0, [pc, #4]	; (800aa10 <__sfp_lock_acquire+0x8>)
 800aa0a:	f000 b8b3 	b.w	800ab74 <__retarget_lock_acquire_recursive>
 800aa0e:	bf00      	nop
 800aa10:	2000142c 	.word	0x2000142c

0800aa14 <__sfp_lock_release>:
 800aa14:	4801      	ldr	r0, [pc, #4]	; (800aa1c <__sfp_lock_release+0x8>)
 800aa16:	f000 b8ae 	b.w	800ab76 <__retarget_lock_release_recursive>
 800aa1a:	bf00      	nop
 800aa1c:	2000142c 	.word	0x2000142c

0800aa20 <__sinit_lock_acquire>:
 800aa20:	4801      	ldr	r0, [pc, #4]	; (800aa28 <__sinit_lock_acquire+0x8>)
 800aa22:	f000 b8a7 	b.w	800ab74 <__retarget_lock_acquire_recursive>
 800aa26:	bf00      	nop
 800aa28:	20001427 	.word	0x20001427

0800aa2c <__sinit_lock_release>:
 800aa2c:	4801      	ldr	r0, [pc, #4]	; (800aa34 <__sinit_lock_release+0x8>)
 800aa2e:	f000 b8a2 	b.w	800ab76 <__retarget_lock_release_recursive>
 800aa32:	bf00      	nop
 800aa34:	20001427 	.word	0x20001427

0800aa38 <__sinit>:
 800aa38:	b510      	push	{r4, lr}
 800aa3a:	4604      	mov	r4, r0
 800aa3c:	f7ff fff0 	bl	800aa20 <__sinit_lock_acquire>
 800aa40:	69a3      	ldr	r3, [r4, #24]
 800aa42:	b11b      	cbz	r3, 800aa4c <__sinit+0x14>
 800aa44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa48:	f7ff bff0 	b.w	800aa2c <__sinit_lock_release>
 800aa4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa50:	6523      	str	r3, [r4, #80]	; 0x50
 800aa52:	4b13      	ldr	r3, [pc, #76]	; (800aaa0 <__sinit+0x68>)
 800aa54:	4a13      	ldr	r2, [pc, #76]	; (800aaa4 <__sinit+0x6c>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa5a:	42a3      	cmp	r3, r4
 800aa5c:	bf08      	it	eq
 800aa5e:	2301      	moveq	r3, #1
 800aa60:	4620      	mov	r0, r4
 800aa62:	bf08      	it	eq
 800aa64:	61a3      	streq	r3, [r4, #24]
 800aa66:	f000 f81f 	bl	800aaa8 <__sfp>
 800aa6a:	6060      	str	r0, [r4, #4]
 800aa6c:	4620      	mov	r0, r4
 800aa6e:	f000 f81b 	bl	800aaa8 <__sfp>
 800aa72:	60a0      	str	r0, [r4, #8]
 800aa74:	4620      	mov	r0, r4
 800aa76:	f000 f817 	bl	800aaa8 <__sfp>
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2104      	movs	r1, #4
 800aa7e:	60e0      	str	r0, [r4, #12]
 800aa80:	6860      	ldr	r0, [r4, #4]
 800aa82:	f7ff ff81 	bl	800a988 <std>
 800aa86:	2201      	movs	r2, #1
 800aa88:	2109      	movs	r1, #9
 800aa8a:	68a0      	ldr	r0, [r4, #8]
 800aa8c:	f7ff ff7c 	bl	800a988 <std>
 800aa90:	2202      	movs	r2, #2
 800aa92:	2112      	movs	r1, #18
 800aa94:	68e0      	ldr	r0, [r4, #12]
 800aa96:	f7ff ff77 	bl	800a988 <std>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	61a3      	str	r3, [r4, #24]
 800aa9e:	e7d1      	b.n	800aa44 <__sinit+0xc>
 800aaa0:	0800b064 	.word	0x0800b064
 800aaa4:	0800a9d1 	.word	0x0800a9d1

0800aaa8 <__sfp>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	4607      	mov	r7, r0
 800aaac:	f7ff ffac 	bl	800aa08 <__sfp_lock_acquire>
 800aab0:	4b1e      	ldr	r3, [pc, #120]	; (800ab2c <__sfp+0x84>)
 800aab2:	681e      	ldr	r6, [r3, #0]
 800aab4:	69b3      	ldr	r3, [r6, #24]
 800aab6:	b913      	cbnz	r3, 800aabe <__sfp+0x16>
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7ff ffbd 	bl	800aa38 <__sinit>
 800aabe:	3648      	adds	r6, #72	; 0x48
 800aac0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	d503      	bpl.n	800aad0 <__sfp+0x28>
 800aac8:	6833      	ldr	r3, [r6, #0]
 800aaca:	b30b      	cbz	r3, 800ab10 <__sfp+0x68>
 800aacc:	6836      	ldr	r6, [r6, #0]
 800aace:	e7f7      	b.n	800aac0 <__sfp+0x18>
 800aad0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aad4:	b9d5      	cbnz	r5, 800ab0c <__sfp+0x64>
 800aad6:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <__sfp+0x88>)
 800aad8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aadc:	60e3      	str	r3, [r4, #12]
 800aade:	6665      	str	r5, [r4, #100]	; 0x64
 800aae0:	f000 f847 	bl	800ab72 <__retarget_lock_init_recursive>
 800aae4:	f7ff ff96 	bl	800aa14 <__sfp_lock_release>
 800aae8:	2208      	movs	r2, #8
 800aaea:	4629      	mov	r1, r5
 800aaec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aaf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aaf4:	6025      	str	r5, [r4, #0]
 800aaf6:	61a5      	str	r5, [r4, #24]
 800aaf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aafc:	f7fc f81e 	bl	8006b3c <memset>
 800ab00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ab04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ab08:	4620      	mov	r0, r4
 800ab0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab0c:	3468      	adds	r4, #104	; 0x68
 800ab0e:	e7d9      	b.n	800aac4 <__sfp+0x1c>
 800ab10:	2104      	movs	r1, #4
 800ab12:	4638      	mov	r0, r7
 800ab14:	f7ff ff62 	bl	800a9dc <__sfmoreglue>
 800ab18:	4604      	mov	r4, r0
 800ab1a:	6030      	str	r0, [r6, #0]
 800ab1c:	2800      	cmp	r0, #0
 800ab1e:	d1d5      	bne.n	800aacc <__sfp+0x24>
 800ab20:	f7ff ff78 	bl	800aa14 <__sfp_lock_release>
 800ab24:	230c      	movs	r3, #12
 800ab26:	603b      	str	r3, [r7, #0]
 800ab28:	e7ee      	b.n	800ab08 <__sfp+0x60>
 800ab2a:	bf00      	nop
 800ab2c:	0800b064 	.word	0x0800b064
 800ab30:	ffff0001 	.word	0xffff0001

0800ab34 <_fwalk_reent>:
 800ab34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	4606      	mov	r6, r0
 800ab3a:	4688      	mov	r8, r1
 800ab3c:	2700      	movs	r7, #0
 800ab3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab46:	f1b9 0901 	subs.w	r9, r9, #1
 800ab4a:	d505      	bpl.n	800ab58 <_fwalk_reent+0x24>
 800ab4c:	6824      	ldr	r4, [r4, #0]
 800ab4e:	2c00      	cmp	r4, #0
 800ab50:	d1f7      	bne.n	800ab42 <_fwalk_reent+0xe>
 800ab52:	4638      	mov	r0, r7
 800ab54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab58:	89ab      	ldrh	r3, [r5, #12]
 800ab5a:	2b01      	cmp	r3, #1
 800ab5c:	d907      	bls.n	800ab6e <_fwalk_reent+0x3a>
 800ab5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab62:	3301      	adds	r3, #1
 800ab64:	d003      	beq.n	800ab6e <_fwalk_reent+0x3a>
 800ab66:	4629      	mov	r1, r5
 800ab68:	4630      	mov	r0, r6
 800ab6a:	47c0      	blx	r8
 800ab6c:	4307      	orrs	r7, r0
 800ab6e:	3568      	adds	r5, #104	; 0x68
 800ab70:	e7e9      	b.n	800ab46 <_fwalk_reent+0x12>

0800ab72 <__retarget_lock_init_recursive>:
 800ab72:	4770      	bx	lr

0800ab74 <__retarget_lock_acquire_recursive>:
 800ab74:	4770      	bx	lr

0800ab76 <__retarget_lock_release_recursive>:
 800ab76:	4770      	bx	lr

0800ab78 <__swhatbuf_r>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	460e      	mov	r6, r1
 800ab7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab80:	4614      	mov	r4, r2
 800ab82:	2900      	cmp	r1, #0
 800ab84:	461d      	mov	r5, r3
 800ab86:	b096      	sub	sp, #88	; 0x58
 800ab88:	da07      	bge.n	800ab9a <__swhatbuf_r+0x22>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	602b      	str	r3, [r5, #0]
 800ab8e:	89b3      	ldrh	r3, [r6, #12]
 800ab90:	061a      	lsls	r2, r3, #24
 800ab92:	d410      	bmi.n	800abb6 <__swhatbuf_r+0x3e>
 800ab94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab98:	e00e      	b.n	800abb8 <__swhatbuf_r+0x40>
 800ab9a:	466a      	mov	r2, sp
 800ab9c:	f000 f902 	bl	800ada4 <_fstat_r>
 800aba0:	2800      	cmp	r0, #0
 800aba2:	dbf2      	blt.n	800ab8a <__swhatbuf_r+0x12>
 800aba4:	9a01      	ldr	r2, [sp, #4]
 800aba6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800abaa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abae:	425a      	negs	r2, r3
 800abb0:	415a      	adcs	r2, r3
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	e7ee      	b.n	800ab94 <__swhatbuf_r+0x1c>
 800abb6:	2340      	movs	r3, #64	; 0x40
 800abb8:	2000      	movs	r0, #0
 800abba:	6023      	str	r3, [r4, #0]
 800abbc:	b016      	add	sp, #88	; 0x58
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <__smakebuf_r>:
 800abc0:	898b      	ldrh	r3, [r1, #12]
 800abc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abc4:	079d      	lsls	r5, r3, #30
 800abc6:	4606      	mov	r6, r0
 800abc8:	460c      	mov	r4, r1
 800abca:	d507      	bpl.n	800abdc <__smakebuf_r+0x1c>
 800abcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abd0:	6023      	str	r3, [r4, #0]
 800abd2:	6123      	str	r3, [r4, #16]
 800abd4:	2301      	movs	r3, #1
 800abd6:	6163      	str	r3, [r4, #20]
 800abd8:	b002      	add	sp, #8
 800abda:	bd70      	pop	{r4, r5, r6, pc}
 800abdc:	466a      	mov	r2, sp
 800abde:	ab01      	add	r3, sp, #4
 800abe0:	f7ff ffca 	bl	800ab78 <__swhatbuf_r>
 800abe4:	9900      	ldr	r1, [sp, #0]
 800abe6:	4605      	mov	r5, r0
 800abe8:	4630      	mov	r0, r6
 800abea:	f7ff f995 	bl	8009f18 <_malloc_r>
 800abee:	b948      	cbnz	r0, 800ac04 <__smakebuf_r+0x44>
 800abf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf4:	059a      	lsls	r2, r3, #22
 800abf6:	d4ef      	bmi.n	800abd8 <__smakebuf_r+0x18>
 800abf8:	f023 0303 	bic.w	r3, r3, #3
 800abfc:	f043 0302 	orr.w	r3, r3, #2
 800ac00:	81a3      	strh	r3, [r4, #12]
 800ac02:	e7e3      	b.n	800abcc <__smakebuf_r+0xc>
 800ac04:	4b0d      	ldr	r3, [pc, #52]	; (800ac3c <__smakebuf_r+0x7c>)
 800ac06:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	6020      	str	r0, [r4, #0]
 800ac0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac10:	81a3      	strh	r3, [r4, #12]
 800ac12:	9b00      	ldr	r3, [sp, #0]
 800ac14:	6120      	str	r0, [r4, #16]
 800ac16:	6163      	str	r3, [r4, #20]
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	b15b      	cbz	r3, 800ac34 <__smakebuf_r+0x74>
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac22:	f000 f8d1 	bl	800adc8 <_isatty_r>
 800ac26:	b128      	cbz	r0, 800ac34 <__smakebuf_r+0x74>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	f023 0303 	bic.w	r3, r3, #3
 800ac2e:	f043 0301 	orr.w	r3, r3, #1
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	89a0      	ldrh	r0, [r4, #12]
 800ac36:	4305      	orrs	r5, r0
 800ac38:	81a5      	strh	r5, [r4, #12]
 800ac3a:	e7cd      	b.n	800abd8 <__smakebuf_r+0x18>
 800ac3c:	0800a9d1 	.word	0x0800a9d1

0800ac40 <_malloc_usable_size_r>:
 800ac40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac44:	1f18      	subs	r0, r3, #4
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	bfbc      	itt	lt
 800ac4a:	580b      	ldrlt	r3, [r1, r0]
 800ac4c:	18c0      	addlt	r0, r0, r3
 800ac4e:	4770      	bx	lr

0800ac50 <_raise_r>:
 800ac50:	291f      	cmp	r1, #31
 800ac52:	b538      	push	{r3, r4, r5, lr}
 800ac54:	4604      	mov	r4, r0
 800ac56:	460d      	mov	r5, r1
 800ac58:	d904      	bls.n	800ac64 <_raise_r+0x14>
 800ac5a:	2316      	movs	r3, #22
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac66:	b112      	cbz	r2, 800ac6e <_raise_r+0x1e>
 800ac68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac6c:	b94b      	cbnz	r3, 800ac82 <_raise_r+0x32>
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 f830 	bl	800acd4 <_getpid_r>
 800ac74:	462a      	mov	r2, r5
 800ac76:	4601      	mov	r1, r0
 800ac78:	4620      	mov	r0, r4
 800ac7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac7e:	f000 b817 	b.w	800acb0 <_kill_r>
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d00a      	beq.n	800ac9c <_raise_r+0x4c>
 800ac86:	1c59      	adds	r1, r3, #1
 800ac88:	d103      	bne.n	800ac92 <_raise_r+0x42>
 800ac8a:	2316      	movs	r3, #22
 800ac8c:	6003      	str	r3, [r0, #0]
 800ac8e:	2001      	movs	r0, #1
 800ac90:	e7e7      	b.n	800ac62 <_raise_r+0x12>
 800ac92:	2400      	movs	r4, #0
 800ac94:	4628      	mov	r0, r5
 800ac96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac9a:	4798      	blx	r3
 800ac9c:	2000      	movs	r0, #0
 800ac9e:	e7e0      	b.n	800ac62 <_raise_r+0x12>

0800aca0 <raise>:
 800aca0:	4b02      	ldr	r3, [pc, #8]	; (800acac <raise+0xc>)
 800aca2:	4601      	mov	r1, r0
 800aca4:	6818      	ldr	r0, [r3, #0]
 800aca6:	f7ff bfd3 	b.w	800ac50 <_raise_r>
 800acaa:	bf00      	nop
 800acac:	20000018 	.word	0x20000018

0800acb0 <_kill_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	2300      	movs	r3, #0
 800acb4:	4d06      	ldr	r5, [pc, #24]	; (800acd0 <_kill_r+0x20>)
 800acb6:	4604      	mov	r4, r0
 800acb8:	4608      	mov	r0, r1
 800acba:	4611      	mov	r1, r2
 800acbc:	602b      	str	r3, [r5, #0]
 800acbe:	f7f8 fad8 	bl	8003272 <_kill>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d102      	bne.n	800accc <_kill_r+0x1c>
 800acc6:	682b      	ldr	r3, [r5, #0]
 800acc8:	b103      	cbz	r3, 800accc <_kill_r+0x1c>
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	bd38      	pop	{r3, r4, r5, pc}
 800acce:	bf00      	nop
 800acd0:	20001420 	.word	0x20001420

0800acd4 <_getpid_r>:
 800acd4:	f7f8 bac6 	b.w	8003264 <_getpid>

0800acd8 <__sread>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	460c      	mov	r4, r1
 800acdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ace0:	f000 f894 	bl	800ae0c <_read_r>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	bfab      	itete	ge
 800ace8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800acea:	89a3      	ldrhlt	r3, [r4, #12]
 800acec:	181b      	addge	r3, r3, r0
 800acee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800acf2:	bfac      	ite	ge
 800acf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800acf6:	81a3      	strhlt	r3, [r4, #12]
 800acf8:	bd10      	pop	{r4, pc}

0800acfa <__swrite>:
 800acfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acfe:	461f      	mov	r7, r3
 800ad00:	898b      	ldrh	r3, [r1, #12]
 800ad02:	4605      	mov	r5, r0
 800ad04:	05db      	lsls	r3, r3, #23
 800ad06:	460c      	mov	r4, r1
 800ad08:	4616      	mov	r6, r2
 800ad0a:	d505      	bpl.n	800ad18 <__swrite+0x1e>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad14:	f000 f868 	bl	800ade8 <_lseek_r>
 800ad18:	89a3      	ldrh	r3, [r4, #12]
 800ad1a:	4632      	mov	r2, r6
 800ad1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad20:	81a3      	strh	r3, [r4, #12]
 800ad22:	4628      	mov	r0, r5
 800ad24:	463b      	mov	r3, r7
 800ad26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad2e:	f000 b817 	b.w	800ad60 <_write_r>

0800ad32 <__sseek>:
 800ad32:	b510      	push	{r4, lr}
 800ad34:	460c      	mov	r4, r1
 800ad36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad3a:	f000 f855 	bl	800ade8 <_lseek_r>
 800ad3e:	1c43      	adds	r3, r0, #1
 800ad40:	89a3      	ldrh	r3, [r4, #12]
 800ad42:	bf15      	itete	ne
 800ad44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ad46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ad4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ad4e:	81a3      	strheq	r3, [r4, #12]
 800ad50:	bf18      	it	ne
 800ad52:	81a3      	strhne	r3, [r4, #12]
 800ad54:	bd10      	pop	{r4, pc}

0800ad56 <__sclose>:
 800ad56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad5a:	f000 b813 	b.w	800ad84 <_close_r>
	...

0800ad60 <_write_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4604      	mov	r4, r0
 800ad64:	4608      	mov	r0, r1
 800ad66:	4611      	mov	r1, r2
 800ad68:	2200      	movs	r2, #0
 800ad6a:	4d05      	ldr	r5, [pc, #20]	; (800ad80 <_write_r+0x20>)
 800ad6c:	602a      	str	r2, [r5, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f7f8 fab6 	bl	80032e0 <_write>
 800ad74:	1c43      	adds	r3, r0, #1
 800ad76:	d102      	bne.n	800ad7e <_write_r+0x1e>
 800ad78:	682b      	ldr	r3, [r5, #0]
 800ad7a:	b103      	cbz	r3, 800ad7e <_write_r+0x1e>
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	bd38      	pop	{r3, r4, r5, pc}
 800ad80:	20001420 	.word	0x20001420

0800ad84 <_close_r>:
 800ad84:	b538      	push	{r3, r4, r5, lr}
 800ad86:	2300      	movs	r3, #0
 800ad88:	4d05      	ldr	r5, [pc, #20]	; (800ada0 <_close_r+0x1c>)
 800ad8a:	4604      	mov	r4, r0
 800ad8c:	4608      	mov	r0, r1
 800ad8e:	602b      	str	r3, [r5, #0]
 800ad90:	f7f8 fac2 	bl	8003318 <_close>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_close_r+0x1a>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_close_r+0x1a>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	20001420 	.word	0x20001420

0800ada4 <_fstat_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	2300      	movs	r3, #0
 800ada8:	4d06      	ldr	r5, [pc, #24]	; (800adc4 <_fstat_r+0x20>)
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	f7f8 fabc 	bl	800332e <_fstat>
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	d102      	bne.n	800adc0 <_fstat_r+0x1c>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	b103      	cbz	r3, 800adc0 <_fstat_r+0x1c>
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop
 800adc4:	20001420 	.word	0x20001420

0800adc8 <_isatty_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	2300      	movs	r3, #0
 800adcc:	4d05      	ldr	r5, [pc, #20]	; (800ade4 <_isatty_r+0x1c>)
 800adce:	4604      	mov	r4, r0
 800add0:	4608      	mov	r0, r1
 800add2:	602b      	str	r3, [r5, #0]
 800add4:	f7f8 faba 	bl	800334c <_isatty>
 800add8:	1c43      	adds	r3, r0, #1
 800adda:	d102      	bne.n	800ade2 <_isatty_r+0x1a>
 800addc:	682b      	ldr	r3, [r5, #0]
 800adde:	b103      	cbz	r3, 800ade2 <_isatty_r+0x1a>
 800ade0:	6023      	str	r3, [r4, #0]
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	20001420 	.word	0x20001420

0800ade8 <_lseek_r>:
 800ade8:	b538      	push	{r3, r4, r5, lr}
 800adea:	4604      	mov	r4, r0
 800adec:	4608      	mov	r0, r1
 800adee:	4611      	mov	r1, r2
 800adf0:	2200      	movs	r2, #0
 800adf2:	4d05      	ldr	r5, [pc, #20]	; (800ae08 <_lseek_r+0x20>)
 800adf4:	602a      	str	r2, [r5, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7f8 fab2 	bl	8003360 <_lseek>
 800adfc:	1c43      	adds	r3, r0, #1
 800adfe:	d102      	bne.n	800ae06 <_lseek_r+0x1e>
 800ae00:	682b      	ldr	r3, [r5, #0]
 800ae02:	b103      	cbz	r3, 800ae06 <_lseek_r+0x1e>
 800ae04:	6023      	str	r3, [r4, #0]
 800ae06:	bd38      	pop	{r3, r4, r5, pc}
 800ae08:	20001420 	.word	0x20001420

0800ae0c <_read_r>:
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4604      	mov	r4, r0
 800ae10:	4608      	mov	r0, r1
 800ae12:	4611      	mov	r1, r2
 800ae14:	2200      	movs	r2, #0
 800ae16:	4d05      	ldr	r5, [pc, #20]	; (800ae2c <_read_r+0x20>)
 800ae18:	602a      	str	r2, [r5, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	f7f8 fa43 	bl	80032a6 <_read>
 800ae20:	1c43      	adds	r3, r0, #1
 800ae22:	d102      	bne.n	800ae2a <_read_r+0x1e>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	b103      	cbz	r3, 800ae2a <_read_r+0x1e>
 800ae28:	6023      	str	r3, [r4, #0]
 800ae2a:	bd38      	pop	{r3, r4, r5, pc}
 800ae2c:	20001420 	.word	0x20001420

0800ae30 <_init>:
 800ae30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae32:	bf00      	nop
 800ae34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae36:	bc08      	pop	{r3}
 800ae38:	469e      	mov	lr, r3
 800ae3a:	4770      	bx	lr

0800ae3c <_fini>:
 800ae3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3e:	bf00      	nop
 800ae40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae42:	bc08      	pop	{r3}
 800ae44:	469e      	mov	lr, r3
 800ae46:	4770      	bx	lr
